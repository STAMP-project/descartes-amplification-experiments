package com.helger.jcodemodel;


import com.helger.jcodemodel.util.CodeModelTestsHelper;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.Collection;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;


public final class AnnotationUseFuncTest {
    @interface XmlElement {
        String value();

        String ns();
    }

    interface XmlElementW extends IJAnnotationWriter<AnnotationUseFuncTest.XmlElement> {
        public abstract AnnotationUseFuncTest.XmlElementW value(String s);

        public abstract AnnotationUseFuncTest.XmlElementW ns(String s);
    }

    @Test(timeout = 10000)
    public void testMain() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain__5)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testMain__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain__5)).hasVarArgs());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain__5)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testMain__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain__5)).hasVarArgs());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv759() throws JClassAlreadyExistsException {
        JEnumConstant[] __DSPOT_aValues_561 = new JEnumConstant[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv759__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv759__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv759__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv759__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv759__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv759__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv759__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv759__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv759__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv759__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv759__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv759__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv759__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv759__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv759__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv759__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv759__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv759__65 = __DSPOT_invoc_40.params(__DSPOT_aValues_561);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv759__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv759__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv759__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv759__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv759__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv759__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv759__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv759__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv638() throws JClassAlreadyExistsException {
        float __DSPOT_fValue_410 = 0.6987444F;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv638__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv638__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv638__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv638__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv638__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv638__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse __DSPOT_invoc_34 = aUse.param("name", "book");
        JAnnotationUse o_testMain_rv638__37 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__37)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv638__41 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv638__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv638__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv638__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv638__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv638__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv638__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv638__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv638__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv638__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv638__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv638__65 = __DSPOT_invoc_34.param(__DSPOT_fValue_410);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__65)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__65)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__65)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__65)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__65)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__65)).getAnnotationClass())).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv638__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv638__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv638__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__37)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv638__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv638__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv638__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv638__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv638__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg260() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg260__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg260__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg260__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg260__5)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg260__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg260__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg260__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg260__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg260__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg260__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg260__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg260__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg260__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg260__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg260__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg260__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg260__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg260__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg260__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JMods o_testMain_mg260__62 = cls.mods();
        Assert.assertEquals(1, ((int) (((JMods) (o_testMain_mg260__62)).getValue())));
        Assert.assertFalse(((JMods) (o_testMain_mg260__62)).isStatic());
        Assert.assertFalse(((JMods) (o_testMain_mg260__62)).isDefault());
        Assert.assertFalse(((JMods) (o_testMain_mg260__62)).isAbstract());
        Assert.assertFalse(((JMods) (o_testMain_mg260__62)).isNative());
        Assert.assertFalse(((JMods) (o_testMain_mg260__62)).isSynchronized());
        Assert.assertFalse(((JMods) (o_testMain_mg260__62)).isStrictFP());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg260__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg260__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg260__5)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg260__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg260__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg260__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg237() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg237__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg237__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg237__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg237__5)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg237__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg237__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg237__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg237__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg237__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg237__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg237__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg237__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg237__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg237__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg237__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg237__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testMain_mg237__62 = cm.wildcard();
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isInterface());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isAbstract());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JTypeWildcard(? extends java.lang.Object)", ((JTypeWildcard) (o_testMain_mg237__62)).toString());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testMain_mg237__62)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testMain_mg237__62)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JTypeWildcard) (o_testMain_mg237__62)).getPrimitiveType());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isParameterized());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isArray());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isPrimitive());
        Assert.assertTrue(((JTypeWildcard) (o_testMain_mg237__62)).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg237__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg237__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg237__5)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg434() throws JClassAlreadyExistsException {
        long __DSPOT_nValue_202 = -589571268L;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg434__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg434__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg434__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg434__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg434__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg434__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg434__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg434__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg434__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg434__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg434__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg434__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg434__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg434__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg434__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg434__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg434__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg434__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg434__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg434__63 = arrayMember2.param(__DSPOT_nValue_202);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg434__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg434__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg434__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg434__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg434__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg434__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg434__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg434__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg434__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg412() throws JClassAlreadyExistsException {
        AbstractJType[] __DSPOT_aValues_183 = new AbstractJType[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg412__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg412__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg412__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg412__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg412__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg412__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg412__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg412__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg412__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg412__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg412__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg412__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg412__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg412__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg412__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg412__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg412__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg412__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg412__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg412__63 = arrayMember.params(__DSPOT_aValues_183);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg412__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg412__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg412__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg412__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg412__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg412__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg412__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg412__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg412__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMainnull509_failAssert0() throws JClassAlreadyExistsException {
        try {
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cls = cm._class("Test");
            cls.method(JMod.PUBLIC, cm.VOID, "foo");
            final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
            final JDefinedClass enumcls = cls._enum("Iamenum");
            final JEnumConstant ec = enumcls.enumConstant("GOOD");
            final JEnumConstant ec1 = enumcls.enumConstant("BAD");
            final JEnumConstant ec2 = enumcls.enumConstant("BAD");
            use.param("value", ec);
            use.param("value1", RetentionPolicy.RUNTIME);
            final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
            final JAnnotationUse aUse = field.annotate(Retention.class);
            aUse.param("name", "book");
            aUse.param("targetNamespace", 5);
            final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
            arrayMember.param("Bob");
            arrayMember.param("Rob");
            arrayMember.param("Ted");
            aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
            final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
            arrayMember2.annotate(Target.class).param(null, Integer.class);
            arrayMember2.annotate(Target.class).param("type", Float.class);
            final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
            w.ns("##default").value("foobar");
            final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
            myuse.param("junk", 7);
            myuse.param("value-value");
            CodeModelTestsHelper.parseCodeModel(cm);
            org.junit.Assert.fail("testMainnull509 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals("The value of \'Name\' may not be null!", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testMain_mg318() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg318__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg318__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg318__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg318__5)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg318__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg318__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg318__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg318__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg318__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg318__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg318__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg318__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg318__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg318__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg318__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg318__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        enumcls.hide();
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg318__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg318__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg318__5)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv720() throws JClassAlreadyExistsException {
        float __DSPOT_fValue_527 = 0.9825553F;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv720__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv720__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv720__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv720__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv720__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv720__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv720__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv720__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv720__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv720__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv720__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv720__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv720__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv720__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv720__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv720__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv720__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv720__65 = __DSPOT_invoc_39.param(__DSPOT_fValue_527);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv720__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv720__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv720__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv720__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv720__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv720__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv720__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv720__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv864() throws JClassAlreadyExistsException {
        long __DSPOT_nValue_680 = 1035895603L;
        String __DSPOT_sName_679 = "qC{WfY|n}KRY;#EivvST";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv864__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv864__7)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv864__7)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv864__7)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv864__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv864__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__24)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv864__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv864__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv864__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv864__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv864__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv864__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv864__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv864__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv864__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__43)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        JAnnotationUse o_testMain_rv864__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__53)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv864__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv864__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__64)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv864__66 = __DSPOT_invoc_47.param(__DSPOT_sName_679, __DSPOT_nValue_680);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__66)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__66)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__66)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv864__7)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv864__7)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv864__7)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__24)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__24)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv864__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv864__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv864__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__43)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__53)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv864__64)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv864__64)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg411() throws JClassAlreadyExistsException {
        char[] __DSPOT_aValues_182 = new char[]{ 'J' };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg411__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg411__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg411__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg411__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg411__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg411__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg411__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg411__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg411__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg411__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg411__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg411__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg411__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg411__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg411__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg411__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg411__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg411__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg411__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg411__63 = arrayMember.params(__DSPOT_aValues_182);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg411__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg411__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg411__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg411__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg411__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg411__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg411__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg411__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg411__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv729() throws JClassAlreadyExistsException {
        IJExpression[] __DSPOT_aValues_536 = new IJExpression[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv729__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv729__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv729__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv729__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv729__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv729__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv729__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv729__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv729__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv729__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv729__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv729__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv729__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv729__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv729__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv729__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv729__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv729__65 = __DSPOT_invoc_39.params(__DSPOT_aValues_536);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv729__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv729__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv729__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv729__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv729__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv729__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv729__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv729__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv726() throws JClassAlreadyExistsException {
        byte[] __DSPOT_aValues_533 = new byte[0];
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv726__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv726__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv726__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv726__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv726__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv726__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv726__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv726__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv726__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv726__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv726__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv726__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv726__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv726__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv726__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv726__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv726__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv726__65 = __DSPOT_invoc_39.params(__DSPOT_aValues_533);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv726__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv726__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv726__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv726__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv726__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv726__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv726__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv726__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv902() throws JClassAlreadyExistsException {
        char __DSPOT_cValue_730 = '/';
        String __DSPOT_sName_729 = "Y(a{)dYLHGthUmyN*yr|";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv902__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv902__7)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv902__7)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv902__7)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv902__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv902__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__24)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv902__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv902__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv902__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv902__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv902__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv902__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv902__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv902__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv902__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__43)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv902__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__48)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).isReference());
        JAnnotationUse __DSPOT_invoc_50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv902__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv902__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__64)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv902__66 = __DSPOT_invoc_50.param(__DSPOT_sName_729, __DSPOT_cValue_730);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__66)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__66)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__66)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv902__7)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv902__7)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv902__7)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__24)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__24)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv902__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv902__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv902__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__43)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__48)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv902__64)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv902__64)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv548() throws JClassAlreadyExistsException {
        boolean __DSPOT_bValue_286 = true;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv548__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv548__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv548__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv548__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse __DSPOT_invoc_22 = use.param("value", ec);
        JAnnotationUse o_testMain_rv548__25 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__25)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv548__36 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv548__37 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__37)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv548__41 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv548__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv548__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv548__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv548__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv548__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv548__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv548__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv548__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv548__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv548__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv548__65 = __DSPOT_invoc_22.param(__DSPOT_bValue_286);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__65)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__65)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__65)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__65)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__65)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__65)).getAnnotationClass())).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv548__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv548__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv548__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__25)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__25)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__37)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv548__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv548__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv548__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv548__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv548__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv746() throws JClassAlreadyExistsException {
        byte __DSPOT_nValue_548 = -32;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv746__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv746__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv746__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv746__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv746__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv746__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv746__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv746__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv746__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv746__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv746__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv746__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv746__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv746__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv746__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv746__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv746__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv746__65 = __DSPOT_invoc_40.param(__DSPOT_nValue_548);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv746__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv746__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv746__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv746__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv746__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv746__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv746__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv746__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv766() throws JClassAlreadyExistsException {
        long[] __DSPOT_aValues_568 = new long[]{ -913763L, -689272700L, 2110030535L };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv766__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv766__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv766__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv766__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv766__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv766__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv766__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv766__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv766__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv766__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv766__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv766__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv766__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv766__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv766__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv766__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv766__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv766__65 = __DSPOT_invoc_40.params(__DSPOT_aValues_568);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv766__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv766__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv766__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv766__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv766__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv766__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv766__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv766__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv865() throws JClassAlreadyExistsException {
        short __DSPOT_nValue_682 = -20847;
        String __DSPOT_sName_681 = "!G30F*uc([}!2XbQs |)";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv865__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv865__7)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv865__7)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv865__7)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv865__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv865__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__24)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv865__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv865__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv865__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv865__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv865__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv865__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv865__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv865__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv865__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__43)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        JAnnotationUse o_testMain_rv865__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__53)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv865__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv865__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__64)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv865__66 = __DSPOT_invoc_47.param(__DSPOT_sName_681, __DSPOT_nValue_682);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__66)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__66)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__66)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv865__7)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv865__7)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv865__7)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__24)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__24)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv865__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv865__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv865__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__43)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__53)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv865__64)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv865__64)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv745() throws JClassAlreadyExistsException {
        boolean __DSPOT_bValue_547 = true;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv745__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv745__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv745__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv745__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv745__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv745__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv745__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv745__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv745__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv745__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv745__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv745__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv745__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv745__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv745__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv745__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv745__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv745__65 = __DSPOT_invoc_40.param(__DSPOT_bValue_547);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv745__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv745__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv745__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv745__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv745__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv745__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv745__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv745__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg270() throws JClassAlreadyExistsException {
        double __DSPOT_dValue_36 = 0.9876310533338931;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg270__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg270__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg270__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg270__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg270__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg270__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg270__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg270__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg270__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg270__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg270__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg270__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg270__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg270__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg270__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg270__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg270__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg270__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg270__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg270__63 = use.param(__DSPOT_dValue_36);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg270__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg270__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg270__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg270__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg270__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg270__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg270__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg270__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg446() throws JClassAlreadyExistsException {
        Enum<?>[] __DSPOT_aValues_214 = new Enum<?>[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg446__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg446__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg446__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg446__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg446__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg446__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg446__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg446__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg446__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg446__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg446__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg446__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg446__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg446__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg446__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg446__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg446__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg446__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg446__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg446__63 = arrayMember2.params(__DSPOT_aValues_214);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg446__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg446__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg446__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg446__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg446__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg446__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg446__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg405() throws JClassAlreadyExistsException {
        int __DSPOT_nValue_176 = -1876349074;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg405__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg405__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg405__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg405__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg405__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg405__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg405__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg405__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg405__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg405__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg405__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg405__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg405__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg405__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg405__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg405__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg405__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg405__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg405__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg405__63 = arrayMember.param(__DSPOT_nValue_176);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg405__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg405__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg405__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg405__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg405__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg405__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg405__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg405__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg405__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg308() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg308__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg308__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg308__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg308__5)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg308__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg308__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg308__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg308__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg308__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg308__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg308__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg308__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg308__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg308__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg308__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg308__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg308__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg308__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg308__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testMain_mg308__62 = enumcls.containsErrorTypes();
        Assert.assertFalse(o_testMain_mg308__62);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg308__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg308__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg308__5)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg308__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg308__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg308__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv753() throws JClassAlreadyExistsException {
        short __DSPOT_nValue_555 = -32117;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv753__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv753__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv753__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv753__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv753__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv753__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv753__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv753__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv753__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv753__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv753__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv753__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv753__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv753__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv753__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv753__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv753__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv753__65 = __DSPOT_invoc_40.param(__DSPOT_nValue_555);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv753__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv753__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv753__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv753__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv753__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv753__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv753__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv753__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv731() throws JClassAlreadyExistsException {
        double[] __DSPOT_aValues_538 = new double[]{ 0.7714649957697929, 0.5303203754135943, 0.13334897168867832, 0.5522702781731875 };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv731__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv731__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv731__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv731__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv731__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv731__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv731__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv731__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv731__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv731__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv731__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv731__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv731__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv731__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv731__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv731__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv731__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv731__65 = __DSPOT_invoc_39.params(__DSPOT_aValues_538);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv731__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv731__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv731__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv731__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv731__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv731__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv731__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv731__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv599() throws JClassAlreadyExistsException {
        byte __DSPOT_nValue_356 = -94;
        String __DSPOT_sName_355 = "VR;Ao%>hnfvH[6v_$Ru5";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv599__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv599__7)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv599__7)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv599__7)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv599__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).isReference());
        JAnnotationUse __DSPOT_invoc_23 = use.param("value1", RetentionPolicy.RUNTIME);
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv599__37 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__37)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv599__38 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__38)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv599__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv599__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv599__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv599__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv599__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv599__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv599__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__45)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv599__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv599__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__53)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv599__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv599__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__64)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv599__66 = __DSPOT_invoc_23.param(__DSPOT_sName_355, __DSPOT_nValue_356);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__66)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__66)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__66)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv599__7)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv599__7)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv599__7)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__37)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__38)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv599__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv599__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv599__44)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__45)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__53)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv599__64)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv599__64)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg301() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg301__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg301__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg301__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg301__5)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg301__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg301__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg301__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg301__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg301__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg301__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg301__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg301__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg301__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg301__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg301__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg301__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg301__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg301__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg301__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testMain_mg301__62 = enumcls._extends();
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Object)", ((JReferencedClass) (o_testMain_mg301__62)).toString());
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testMain_mg301__62)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testMain_mg301__62)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JReferencedClass) (o_testMain_mg301__62)).isParameterized());
        Assert.assertFalse(((JReferencedClass) (o_testMain_mg301__62)).isArray());
        Assert.assertFalse(((JReferencedClass) (o_testMain_mg301__62)).isPrimitive());
        Assert.assertFalse(((JReferencedClass) (o_testMain_mg301__62)).isError());
        Assert.assertTrue(((JReferencedClass) (o_testMain_mg301__62)).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg301__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg301__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg301__5)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__22)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg301__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg301__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg301__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg301__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg301__60)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg444() throws JClassAlreadyExistsException {
        int[] __DSPOT_aValues_212 = new int[]{ -1949939781, -1370191864, -1234807206, -628572517 };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg444__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg444__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg444__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg444__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg444__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg444__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg444__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg444__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg444__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg444__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg444__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg444__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg444__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg444__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg444__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg444__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg444__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg444__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg444__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg444__63 = arrayMember2.params(__DSPOT_aValues_212);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg444__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg444__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg444__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg444__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg444__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg444__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg444__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg344() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg344__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg344__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg344__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg344__5)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg344__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg344__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg344__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg344__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg344__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg344__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg344__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg344__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg344__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg344__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg344__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg344__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg344__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg344__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg344__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        List<IJExpression> o_testMain_mg344__62 = ec2.args();
        Assert.assertTrue(o_testMain_mg344__62.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg344__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg344__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg344__5)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__22)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg344__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg344__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg344__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg344__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg344__60)).getAnnotationClass())).isReference());
    }
}

