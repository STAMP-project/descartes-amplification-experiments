package com.helger.jcodemodel;


import com.helger.jcodemodel.util.CodeModelTestsHelper;
import java.util.Collection;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;


public final class JSwitchTest {
    @Test(timeout = 10000)
    public void testGenerate() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg157() throws JClassAlreadyExistsException {
        AbstractJType[] __DSPOT_argTypes_45 = new AbstractJType[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg157__13 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg157__13)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg157__13)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg157__13)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testGenerate_mg157__31 = m.hasSignature(__DSPOT_argTypes_45);
        Assert.assertFalse(o_testGenerate_mg157__31);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg157__13)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg157__13)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg157__13)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg136() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg136__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg136__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg136__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg136__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        Collection<JAnnotationUse> o_testGenerate_mg136__30 = ca.annotations();
        Assert.assertTrue(o_testGenerate_mg136__30.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg136__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg136__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg136__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg180_failAssert0() throws JClassAlreadyExistsException {
        try {
            String __DSPOT_sName_52 = "*M=;$a4UUWY=?8NvMRz<";
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
            final JDefinedClass jEnumClass = c2._enum("MyEnum");
            final JEnumConstant ca = jEnumClass.enumConstant("A");
            final JEnumConstant cb = jEnumClass.enumConstant("B");
            jEnumClass.enumConstant("C");
            final JMethod m = c2.method(0, cm.VOID, "dummy");
            final JVar p = m.param(jEnumClass, "enumParam");
            final JSwitch s = m.body()._switch(p);
            s._case(ca).body()._break();
            s._case(cb).body()._break();
            s._default().body()._break();
            CodeModelTestsHelper.parseCodeModel(cm);
            p.name(__DSPOT_sName_52);
            org.junit.Assert.fail("testGenerate_mg180 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("The expression must be true but it is not: Illegal variable name \'*M=;$a4UUWY=?8NvMRz<\'", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testGenerate_mg128() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg128__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg128__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg128__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg128__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        JDocComment o_testGenerate_mg128__30 = jEnumClass.headerComment();
        Assert.assertTrue(o_testGenerate_mg128__30.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg128__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg128__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg128__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg129() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg129__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg129__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg129__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg129__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        jEnumClass.hide();
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg129__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg129__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg129__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGeneratenull192_failAssert0() throws JClassAlreadyExistsException {
        try {
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
            final JDefinedClass jEnumClass = c2._enum("MyEnum");
            final JEnumConstant ca = jEnumClass.enumConstant("A");
            final JEnumConstant cb = jEnumClass.enumConstant("B");
            jEnumClass.enumConstant("C");
            final JMethod m = c2.method(0, cm.VOID, null);
            final JVar p = m.param(jEnumClass, "enumParam");
            final JSwitch s = m.body()._switch(p);
            s._case(ca).body()._break();
            s._case(cb).body()._break();
            s._default().body()._break();
            CodeModelTestsHelper.parseCodeModel(cm);
            org.junit.Assert.fail("testGeneratenull192 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals("The value of \'Name\' may not be null!", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testGenerate_mg115() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg115__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg115__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg115__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg115__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        Collection<JAnnotationUse> o_testGenerate_mg115__30 = jEnumClass.annotations();
        Assert.assertTrue(o_testGenerate_mg115__30.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg115__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg115__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg115__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg137() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg137__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg137__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg137__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg137__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        List<IJExpression> o_testGenerate_mg137__30 = ca.args();
        Assert.assertTrue(o_testGenerate_mg137__30.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg137__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg137__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg137__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg95() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg95__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg95__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg95__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg95__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testGenerate_mg95__30 = c2.containsErrorTypes();
        Assert.assertFalse(o_testGenerate_mg95__30);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg95__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg95__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg95__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg80() throws JClassAlreadyExistsException {
        String __DSPOT_sMessage_14 = "r6EO;&FZRy/=u eShD9P";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg80__13 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg80__13)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg80__13)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg80__13)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        JErrorClass o_testGenerate_mg80__31 = cm.errorClass(__DSPOT_sMessage_14);
        Assert.assertFalse(((JErrorClass) (o_testGenerate_mg80__31)).isInterface());
        Assert.assertFalse(((JErrorClass) (o_testGenerate_mg80__31)).isAbstract());
        Assert.assertTrue(((JErrorClass) (o_testGenerate_mg80__31)).isError());
        Assert.assertTrue(((Collection) (((JErrorClass) (o_testGenerate_mg80__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JErrorClass) (o_testGenerate_mg80__31)).isParameterized());
        Assert.assertNull(((JErrorClass) (o_testGenerate_mg80__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JErrorClass) (o_testGenerate_mg80__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JErrorClass) (o_testGenerate_mg80__31)).isArray());
        Assert.assertFalse(((JErrorClass) (o_testGenerate_mg80__31)).isPrimitive());
        Assert.assertTrue(((JErrorClass) (o_testGenerate_mg80__31)).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg80__13)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg80__13)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg80__13)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_rv217_failAssert0() throws JClassAlreadyExistsException {
        try {
            IJFormatter __DSPOT_f_58 = null;
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
            final JDefinedClass jEnumClass = c2._enum("MyEnum");
            final JEnumConstant ca = jEnumClass.enumConstant("A");
            final JEnumConstant cb = jEnumClass.enumConstant("B");
            jEnumClass.enumConstant("C");
            final JMethod m = c2.method(0, cm.VOID, "dummy");
            final JVar p = m.param(jEnumClass, "enumParam");
            final JSwitch s = m.body()._switch(p);
            s._case(ca).body()._break();
            JBreak __DSPOT_invoc_23 = s._case(cb).body()._break();
            s._default().body()._break();
            CodeModelTestsHelper.parseCodeModel(cm);
            __DSPOT_invoc_23.state(__DSPOT_f_58);
            org.junit.Assert.fail("testGenerate_rv217 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testGenerate_rv219() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_rv219__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_rv219__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_rv219__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_rv219__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        JBreak __DSPOT_invoc_26 = s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        JLabel o_testGenerate_rv219__32 = __DSPOT_invoc_26.label();
        Assert.assertNull(o_testGenerate_rv219__32);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_rv219__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_rv219__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_rv219__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg78() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg78__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg78__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg78__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg78__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        int o_testGenerate_mg78__30 = cm.countArtifacts();
        Assert.assertEquals(2, ((int) (o_testGenerate_mg78__30)));
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg78__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg78__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg78__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg87() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg87__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg87__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg87__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg87__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testGenerate_mg87__30 = cm.wildcard();
        Assert.assertFalse(((JTypeWildcard) (o_testGenerate_mg87__30)).isInterface());
        Assert.assertFalse(((JTypeWildcard) (o_testGenerate_mg87__30)).isAbstract());
        Assert.assertFalse(((JTypeWildcard) (o_testGenerate_mg87__30)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JTypeWildcard(? extends java.lang.Object)", ((JTypeWildcard) (o_testGenerate_mg87__30)).toString());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testGenerate_mg87__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JTypeWildcard) (o_testGenerate_mg87__30)).isParameterized());
        Assert.assertNull(((JTypeWildcard) (o_testGenerate_mg87__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testGenerate_mg87__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JTypeWildcard) (o_testGenerate_mg87__30)).isArray());
        Assert.assertFalse(((JTypeWildcard) (o_testGenerate_mg87__30)).isPrimitive());
        Assert.assertTrue(((JTypeWildcard) (o_testGenerate_mg87__30)).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg87__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg87__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg87__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg88() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg88__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg88__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg88__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg88__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testGenerate_mg88__30 = c2._extends();
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Object)", ((JReferencedClass) (o_testGenerate_mg88__30)).toString());
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testGenerate_mg88__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JReferencedClass) (o_testGenerate_mg88__30)).isParameterized());
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testGenerate_mg88__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JReferencedClass) (o_testGenerate_mg88__30)).isArray());
        Assert.assertFalse(((JReferencedClass) (o_testGenerate_mg88__30)).isPrimitive());
        Assert.assertFalse(((JReferencedClass) (o_testGenerate_mg88__30)).isError());
        Assert.assertTrue(((JReferencedClass) (o_testGenerate_mg88__30)).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg88__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg88__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg88__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg184_failAssert0() throws JClassAlreadyExistsException {
        try {
            IJFormatter __DSPOT_f_53 = null;
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
            final JDefinedClass jEnumClass = c2._enum("MyEnum");
            final JEnumConstant ca = jEnumClass.enumConstant("A");
            final JEnumConstant cb = jEnumClass.enumConstant("B");
            jEnumClass.enumConstant("C");
            final JMethod m = c2.method(0, cm.VOID, "dummy");
            final JVar p = m.param(jEnumClass, "enumParam");
            final JSwitch s = m.body()._switch(p);
            s._case(ca).body()._break();
            s._case(cb).body()._break();
            s._default().body()._break();
            CodeModelTestsHelper.parseCodeModel(cm);
            s.state(__DSPOT_f_53);
            org.junit.Assert.fail("testGenerate_mg184 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testGenerate_mg170() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg170__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg170__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg170__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg170__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJType o_testGenerate_mg170__30 = m.type();
        Assert.assertTrue(((JPrimitiveType) (o_testGenerate_mg170__30)).isPrimitive());
        Assert.assertEquals("com.helger.jcodemodel.JPrimitiveType(void)", ((JPrimitiveType) (o_testGenerate_mg170__30)).toString());
        Assert.assertFalse(((JPrimitiveType) (o_testGenerate_mg170__30)).isArray());
        Assert.assertFalse(((JPrimitiveType) (o_testGenerate_mg170__30)).isError());
        Assert.assertFalse(((JPrimitiveType) (o_testGenerate_mg170__30)).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg170__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg170__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg170__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg93_failAssert0() throws JClassAlreadyExistsException {
        try {
            int __DSPOT_nMods_20 = -203350472;
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
            final JDefinedClass jEnumClass = c2._enum("MyEnum");
            final JEnumConstant ca = jEnumClass.enumConstant("A");
            final JEnumConstant cb = jEnumClass.enumConstant("B");
            jEnumClass.enumConstant("C");
            final JMethod m = c2.method(0, cm.VOID, "dummy");
            final JVar p = m.param(jEnumClass, "enumParam");
            final JSwitch s = m.body()._switch(p);
            s._case(ca).body()._break();
            s._case(cb).body()._break();
            s._default().body()._break();
            CodeModelTestsHelper.parseCodeModel(cm);
            c2.constructor(__DSPOT_nMods_20);
            org.junit.Assert.fail("testGenerate_mg93 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testGenerate_mg142() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg142__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg142__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg142__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg142__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        JDocComment o_testGenerate_mg142__30 = ca.javadoc();
        Assert.assertTrue(o_testGenerate_mg142__30.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg142__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg142__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg142__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg175() throws JClassAlreadyExistsException {
        JVar __DSPOT_o_50 = null;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        cm.getAllDontImportClasses();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg175__13 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg175__13)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg175__13)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg175__13)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testGenerate_mg175__31 = p.equals(__DSPOT_o_50);
        Assert.assertFalse(o_testGenerate_mg175__31);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg175__13)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg175__13)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg175__13)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_literalMutationString65_failAssert0() throws JClassAlreadyExistsException {
        try {
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
            final JDefinedClass jEnumClass = c2._enum("MyEnum");
            final JEnumConstant ca = jEnumClass.enumConstant("A");
            final JEnumConstant cb = jEnumClass.enumConstant("B");
            jEnumClass.enumConstant("C");
            final JMethod m = c2.method(0, cm.VOID, "dummy");
            final JVar p = m.param(jEnumClass, "s2l>UgIvC");
            final JSwitch s = m.body()._switch(p);
            s._case(ca).body()._break();
            s._case(cb).body()._break();
            s._default().body()._break();
            CodeModelTestsHelper.parseCodeModel(cm);
            org.junit.Assert.fail("testGenerate_literalMutationString65 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("The expression must be true but it is not: Illegal variable name \'s2l>UgIvC\'", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testGenerate_mg154() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg154__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg154__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg154__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg154__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        Collection<JAnnotationUse> o_testGenerate_mg154__30 = m.annotations();
        Assert.assertTrue(o_testGenerate_mg154__30.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg154__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg154__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg154__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg140() throws JClassAlreadyExistsException {
        Object __DSPOT_o_39 = new Object();
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg140__14 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg140__14)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg140__14)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg140__14)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testGenerate_mg140__32 = ca.equals(__DSPOT_o_39);
        Assert.assertFalse(o_testGenerate_mg140__32);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg140__14)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg140__14)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg140__14)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testGenerate_mg163() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c2 = cm._package("myPackage")._class("SwitchTest");
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        final JDefinedClass jEnumClass = c2._enum("MyEnum");
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        final JEnumConstant ca = jEnumClass.enumConstant("A");
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        final JEnumConstant cb = jEnumClass.enumConstant("B");
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        JEnumConstant o_testGenerate_mg163__12 = jEnumClass.enumConstant("C");
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg163__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg163__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg163__12)).hasArgs());
        final JMethod m = c2.method(0, cm.VOID, "dummy");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(jEnumClass, "enumParam");
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
        final JSwitch s = m.body()._switch(p);
        s._case(ca).body()._break();
        s._case(cb).body()._break();
        s._default().body()._break();
        CodeModelTestsHelper.parseCodeModel(cm);
        JMods o_testGenerate_mg163__30 = m.mods();
        Assert.assertEquals(0, ((int) (((JMods) (o_testGenerate_mg163__30)).getValue())));
        Assert.assertFalse(((JMods) (o_testGenerate_mg163__30)).isAbstract());
        Assert.assertFalse(((JMods) (o_testGenerate_mg163__30)).isDefault());
        Assert.assertFalse(((JMods) (o_testGenerate_mg163__30)).isStatic());
        Assert.assertFalse(((JMods) (o_testGenerate_mg163__30)).isNative());
        Assert.assertFalse(((JMods) (o_testGenerate_mg163__30)).isSynchronized());
        Assert.assertFalse(((JMods) (o_testGenerate_mg163__30)).isStrictFP());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c2)).isHidden());
        Assert.assertFalse(((JDefinedClass) (c2)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c2)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c2)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c2)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c2)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (c2)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c2)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (c2)).isClass());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c2)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest)", ((JDefinedClass) (c2)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c2)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isParameterized());
        Assert.assertNull(((JDefinedClass) (c2)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (c2)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c2)).isArray());
        Assert.assertFalse(((JDefinedClass) (c2)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c2)).isError());
        Assert.assertTrue(((JDefinedClass) (c2)).isReference());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jEnumClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jEnumClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isAnonymous());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(myPackage.SwitchTest.MyEnum)", ((JDefinedClass) (jEnumClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isParameterized());
        Assert.assertNull(((JDefinedClass) (jEnumClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jEnumClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jEnumClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jEnumClass)).isReference());
        Assert.assertEquals(520295678, ((int) (((JEnumConstant) (ca)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.A", ((JEnumConstant) (ca)).getName());
        Assert.assertFalse(((JEnumConstant) (ca)).hasArgs());
        Assert.assertEquals(520295679, ((int) (((JEnumConstant) (cb)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.B", ((JEnumConstant) (cb)).getName());
        Assert.assertFalse(((JEnumConstant) (cb)).hasArgs());
        Assert.assertEquals(520295680, ((int) (((JEnumConstant) (o_testGenerate_mg163__12)).hashCode())));
        Assert.assertEquals("myPackage.SwitchTest.MyEnum.C", ((JEnumConstant) (o_testGenerate_mg163__12)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testGenerate_mg163__12)).hasArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1600892992, ((int) (((JVar) (p)).hashCode())));
    }
}

