/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 09:30:12 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import com.helger.jcodemodel.JAnonymousClass;
import com.helger.jcodemodel.JAtomInt;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JFieldVar;
import com.helger.jcodemodel.JMods;
import com.helger.jcodemodel.JStringLiteral;
import com.helger.jcodemodel.JTypeVar;
import com.helger.jcodemodel.JVar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JVar_ESTest extends JVar_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JTypeVar jTypeVar0 = new JTypeVar(jCodeModel0, "jQ_Q0");
      JMods jMods0 = new JMods(25);
      JAtomInt jAtomInt0 = new JAtomInt(25);
      JVar jVar0 = new JVar(jMods0, jTypeVar0, "jQ_Q0", jAtomInt0);
      assertEquals("jQ_Q0", jVar0.name());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jCodeModel0.NULL);
      JMods jMods0 = new JMods(858);
      JStringLiteral jStringLiteral0 = new JStringLiteral("V$F2W");
      JFieldVar jFieldVar0 = new JFieldVar(jAnonymousClass0, jMods0, jCodeModel0.INT, "V$F2W", jStringLiteral0);
      boolean boolean0 = jFieldVar0.isAnnotated();
      assertFalse(boolean0);
  }
}
