/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 09:40:00 GMT 2019
 */

package com.helger.jcodemodel.writer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.IJClassContainer;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JDefinedClass;
import com.helger.jcodemodel.JDirectClass;
import com.helger.jcodemodel.JDocComment;
import com.helger.jcodemodel.JPackage;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JFormatter_ESTest extends JFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "A class with local name '");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "A class with local name '");
      JDefinedClass jDefinedClass0 = mock(JDefinedClass.class, new ViolatedAssumptionAnswer());
      JPackage jPackage0 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jPackage0).isUnnamed();
      JCodeModel jCodeModel0 = new JCodeModel();
      IJClassContainer<JDirectClass> iJClassContainer0 = (IJClassContainer<JDirectClass>) mock(IJClassContainer.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iJClassContainer0).isPackage();
      JPackage jPackage1 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jPackage1).isUnnamed();
      JDefinedClass jDefinedClass1 = mock(JDefinedClass.class, new ViolatedAssumptionAnswer());
      doReturn(jCodeModel0).when(jDefinedClass1).owner();
      doReturn("A class with local name '", "").when(jDefinedClass1).toString();
      doReturn((String) null).when(jDefinedClass1).fullName();
      doReturn("A class with local name '").when(jDefinedClass1).name();
      doReturn(iJClassContainer0, jPackage0).when(jDefinedClass1).parentContainer();
      doReturn(jPackage1, (JPackage) null).when(jDefinedClass1)._package();
      doReturn(false).when(jDefinedClass1).hasHeaderComment();
      // Undeclared exception!
      try { 
        jFormatter0.writeClassFull(jDefinedClass1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.writer.JFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "A class with local name '");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "A class with local name '");
      JPackage jPackage0 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jPackage0).isUnnamed();
      JCodeModel jCodeModel0 = new JCodeModel();
      IJClassContainer<JDirectClass> iJClassContainer0 = (IJClassContainer<JDirectClass>) mock(IJClassContainer.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iJClassContainer0).isPackage();
      JPackage jPackage1 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jPackage1).isUnnamed();
      JDefinedClass jDefinedClass0 = mock(JDefinedClass.class, new ViolatedAssumptionAnswer());
      doReturn(jCodeModel0).when(jDefinedClass0).owner();
      doReturn("A class with local name '", "").when(jDefinedClass0).toString();
      doReturn("A class with local name '").when(jDefinedClass0).name();
      doReturn(iJClassContainer0, jPackage0).when(jDefinedClass0).parentContainer();
      doReturn(jPackage1).when(jDefinedClass0)._package();
      doReturn(false).when(jDefinedClass0).hasHeaderComment();
      jFormatter0.writeClassFull(jDefinedClass0);
      assertEquals("A class with local name '", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "A class with local name '");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "A class with local name '");
      JPackage jPackage0 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jPackage0).isUnnamed();
      JCodeModel jCodeModel0 = new JCodeModel();
      IJClassContainer<JDirectClass> iJClassContainer0 = (IJClassContainer<JDirectClass>) mock(IJClassContainer.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iJClassContainer0).isPackage();
      JPackage jPackage1 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jPackage1).isUnnamed();
      JPackage jPackage2 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      JDefinedClass jDefinedClass0 = mock(JDefinedClass.class, new ViolatedAssumptionAnswer());
      doReturn(jCodeModel0).when(jDefinedClass0).owner();
      doReturn("A class with local name '", "").when(jDefinedClass0).toString();
      doReturn("").when(jDefinedClass0).fullName();
      doReturn("A class with local name '").when(jDefinedClass0).name();
      doReturn(iJClassContainer0, jPackage0).when(jDefinedClass0).parentContainer();
      doReturn(jPackage1, jPackage2).when(jDefinedClass0)._package();
      doReturn(false).when(jDefinedClass0).hasHeaderComment();
      jFormatter0.writeClassFull(jDefinedClass0);
      assertEquals("A class with local name 'import;A class with local name 'A class with local name '", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "{/yO,0#J-*L_`O");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "{/yO,0#J-*L_`O");
      JCodeModel jCodeModel0 = new JCodeModel();
      JPackage jPackage0 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jPackage0).isUnnamed();
      IJClassContainer<JDirectClass> iJClassContainer0 = (IJClassContainer<JDirectClass>) mock(IJClassContainer.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iJClassContainer0).isPackage();
      JPackage jPackage1 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jPackage1).isUnnamed();
      JPackage jPackage2 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      JDefinedClass jDefinedClass0 = mock(JDefinedClass.class, new ViolatedAssumptionAnswer());
      doReturn(jCodeModel0).when(jDefinedClass0).owner();
      doReturn("{/yO,0#J-*L_`O", "").when(jDefinedClass0).toString();
      doReturn("{/yO,0#J-*L_`O").when(jDefinedClass0).fullName();
      doReturn("{/yO,0#J-*L_`O").when(jDefinedClass0).name();
      doReturn(iJClassContainer0, jPackage0).when(jDefinedClass0).parentContainer();
      doReturn(jPackage1, jPackage2).when(jDefinedClass0)._package();
      doReturn(false).when(jDefinedClass0).hasHeaderComment();
      jFormatter0.writeClassFull(jDefinedClass0);
      assertEquals("{/yO,0#J-*L_`Oimport {/yO,0#J-*L_`O;{/yO,0#J-*L_`O{/yO,0#J-*L_`O", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "A class with local name '");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "A class with local name '");
      JPackage jPackage0 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jPackage0).isUnnamed();
      JCodeModel jCodeModel0 = new JCodeModel();
      IJClassContainer<JDirectClass> iJClassContainer0 = (IJClassContainer<JDirectClass>) mock(IJClassContainer.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iJClassContainer0).isPackage();
      JDefinedClass jDefinedClass0 = mock(JDefinedClass.class, new ViolatedAssumptionAnswer());
      doReturn(jCodeModel0).when(jDefinedClass0).owner();
      doReturn("A class with local name '", (String) null).when(jDefinedClass0).toString();
      doReturn("A class with local name '").when(jDefinedClass0).name();
      doReturn(iJClassContainer0, jPackage0).when(jDefinedClass0).parentContainer();
      doReturn((JPackage) null).when(jDefinedClass0)._package();
      doReturn(false).when(jDefinedClass0).hasHeaderComment();
      jFormatter0.writeClassFull(jDefinedClass0);
      assertEquals("A class with local name '", stringWriter0.toString());
      assertFalse(jFormatter0.isDebugImports());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "A class with local name '");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "A class with local name '");
      JCodeModel jCodeModel0 = new JCodeModel();
      JPackage jPackage0 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jPackage0).isUnnamed();
      IJClassContainer<JDirectClass> iJClassContainer0 = (IJClassContainer<JDirectClass>) mock(IJClassContainer.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iJClassContainer0).isPackage();
      JPackage jPackage1 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      JDefinedClass jDefinedClass0 = mock(JDefinedClass.class, new ViolatedAssumptionAnswer());
      doReturn(jCodeModel0).when(jDefinedClass0).owner();
      doReturn("A class with local name '", (String) null).when(jDefinedClass0).toString();
      doReturn((String) null).when(jDefinedClass0).name();
      doReturn(iJClassContainer0, jPackage0).when(jDefinedClass0).parentContainer();
      doReturn((JPackage) null).when(jDefinedClass0)._package();
      doReturn(false).when(jDefinedClass0).hasHeaderComment();
      jFormatter0.writeClassFull(jDefinedClass0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "A class with local name '");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "A class with local name '");
      JCodeModel jCodeModel0 = new JCodeModel();
      IJClassContainer<JDirectClass> iJClassContainer0 = (IJClassContainer<JDirectClass>) mock(IJClassContainer.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iJClassContainer0).isPackage();
      JDefinedClass jDefinedClass0 = mock(JDefinedClass.class, new ViolatedAssumptionAnswer());
      doReturn(jCodeModel0).when(jDefinedClass0).owner();
      doReturn("A class with local name '").when(jDefinedClass0).toString();
      doReturn("A class with local name '").when(jDefinedClass0).name();
      doReturn(iJClassContainer0).when(jDefinedClass0).parentContainer();
      doReturn(true).when(jDefinedClass0).hasHeaderComment();
      doReturn((JDocComment) null).when(jDefinedClass0).headerComment();
      // Undeclared exception!
      try { 
        jFormatter0.writeClassFull(jDefinedClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.writer.JFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "A class with local name '");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "A class with local name '");
      JCodeModel jCodeModel0 = new JCodeModel();
      JPackage jPackage0 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jPackage0).isPackage();
      JDefinedClass jDefinedClass0 = mock(JDefinedClass.class, new ViolatedAssumptionAnswer());
      doReturn(jCodeModel0).when(jDefinedClass0).owner();
      doReturn("A key of map '").when(jDefinedClass0).toString();
      doReturn((String) null).when(jDefinedClass0).name();
      doReturn(jPackage0).when(jDefinedClass0).parentContainer();
      // Undeclared exception!
      try { 
        jFormatter0.writeClassFull(jDefinedClass0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // this method is only for a pacakge-level class
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "A class with local name '");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "A class with local name '");
      JCodeModel jCodeModel0 = new JCodeModel();
      JPackage jPackage0 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jPackage0).isUnnamed();
      IJClassContainer<JDirectClass> iJClassContainer0 = (IJClassContainer<JDirectClass>) mock(IJClassContainer.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iJClassContainer0).isPackage();
      JPackage jPackage1 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jPackage1).isUnnamed();
      JPackage jPackage2 = mock(JPackage.class, new ViolatedAssumptionAnswer());
      JDefinedClass jDefinedClass0 = mock(JDefinedClass.class, new ViolatedAssumptionAnswer());
      doReturn(jCodeModel0).when(jDefinedClass0).owner();
      doReturn("A class with local name '", "").when(jDefinedClass0).toString();
      doReturn("A class with local name '").when(jDefinedClass0).fullName();
      doReturn("A class with local name '").when(jDefinedClass0).name();
      doReturn(iJClassContainer0, jPackage0).when(jDefinedClass0).parentContainer();
      doReturn(jPackage1, jPackage2).when(jDefinedClass0)._package();
      doReturn(false).when(jDefinedClass0).hasHeaderComment();
      jFormatter0.writeClassFull(jDefinedClass0);
      assertEquals("A class with local name 'import A class with local name ';A class with local name 'A class with local name '", stringWriter0.toString());
  }
}
