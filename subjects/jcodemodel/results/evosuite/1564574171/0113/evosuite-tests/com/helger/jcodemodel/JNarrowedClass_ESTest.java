/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 31 14:00:58 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.AbstractJClass;
import com.helger.jcodemodel.JArrayClass;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JNarrowedClass;
import com.helger.jcodemodel.JNullType;
import com.helger.jcodemodel.JTypeVarClass;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JNarrowedClass_ESTest extends JNarrowedClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jCodeModel0.BOOLEAN);
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jArrayClass0, jArrayClass0);
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "W-Wmd{.Rd[Y", "W-Wmd{.Rd[Y");
      JNarrowedClass jNarrowedClass1 = null;
      try {
        jNarrowedClass1 = new JNarrowedClass(jNarrowedClass0, jErrorClass0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The expression must be false but it is not: aBasis may not be a narrowed class: com.helger.jcodemodel.JNarrowedClass(boolean[]<boolean[]>)
         //
         verifyException("com.helger.jcodemodel.util.JCValueEnforcer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      AbstractJClass[] abstractJClassArray0 = new AbstractJClass[18];
      abstractJClassArray0[0] = (AbstractJClass) jCodeModel0.NULL;
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jCodeModel0.NULL, abstractJClassArray0);
      JNarrowedClass jNarrowedClass1 = null;
      try {
        jNarrowedClass1 = new JNarrowedClass(jNarrowedClass0, abstractJClassArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.JNarrowedClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      AbstractJClass[] abstractJClassArray0 = new AbstractJClass[4];
      abstractJClassArray0[0] = (AbstractJClass) jCodeModel0.NULL;
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jCodeModel0.NULL, abstractJClassArray0);
      JTypeVarClass jTypeVarClass0 = null;
      try {
        jTypeVarClass0 = new JTypeVarClass(jNarrowedClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.JNarrowedClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jCodeModel0.BOOLEAN);
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jArrayClass0, jArrayClass0);
      JTypeVarClass jTypeVarClass0 = new JTypeVarClass(jNarrowedClass0);
      assertFalse(jTypeVarClass0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jCodeModel0.BOOLEAN);
      LinkedList<JNullType> linkedList0 = new LinkedList<JNullType>();
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jArrayClass0, linkedList0);
      assertFalse(jNarrowedClass0.isArray());
  }
}
