/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 31 14:13:22 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.JAtomDouble;
import com.helger.jcodemodel.JAtomLong;
import com.helger.jcodemodel.JLambda;
import com.helger.jcodemodel.JOpUnaryTight;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JOpUnaryTight_ESTest extends JOpUnaryTight_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JLambda jLambda0 = new JLambda();
      JOpUnaryTight jOpUnaryTight0 = new JOpUnaryTight("NOq]gg0L", jLambda0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "");
      // Undeclared exception!
      try { 
        jOpUnaryTight0.generate(jFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Lambda expression is empty!
         //
         verifyException("com.helger.jcodemodel.JLambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JAtomLong jAtomLong0 = new JAtomLong(0L);
      JOpUnaryTight jOpUnaryTight0 = new JOpUnaryTight("", jAtomLong0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "tV`-#q");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "tV`-#q");
      jOpUnaryTight0.generate(jFormatter0);
      assertFalse(jFormatter0.isDebugImports());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JAtomDouble jAtomDouble0 = new JAtomDouble(0.0);
      JOpUnaryTight jOpUnaryTight0 = new JOpUnaryTight(jAtomDouble0, "java.lang.Double.NaN");
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "java.lang.Double.NEGATIVE_INFINITY");
      jOpUnaryTight0.generate(jFormatter0);
      assertEquals("0.0 java.lang.Double.NaN", stringWriter0.toString());
  }
}
