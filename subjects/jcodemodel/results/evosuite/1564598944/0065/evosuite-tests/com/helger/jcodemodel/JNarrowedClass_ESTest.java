/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 31 20:00:46 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.AbstractJClass;
import com.helger.jcodemodel.JArrayClass;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JDirectClass;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JNarrowedClass;
import com.helger.jcodemodel.JTypeVar;
import com.helger.jcodemodel.JTypeVarClass;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JNarrowedClass_ESTest extends JNarrowedClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jCodeModel0.NULL);
      AbstractJClass[] abstractJClassArray0 = new AbstractJClass[9];
      abstractJClassArray0[0] = (AbstractJClass) jArrayClass0;
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jArrayClass0, abstractJClassArray0);
      JNarrowedClass jNarrowedClass1 = null;
      try {
        jNarrowedClass1 = new JNarrowedClass(jNarrowedClass0, abstractJClassArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.JNarrowedClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JTypeVar jTypeVar0 = new JTypeVar(jCodeModel0, "S%s");
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jTypeVar0, jCodeModel0.NULL);
      JNarrowedClass jNarrowedClass1 = null;
      try {
        jNarrowedClass1 = new JNarrowedClass(jNarrowedClass0, jTypeVar0.EMPTY_ARRAY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The expression must be false but it is not: aBasis may not be a narrowed class: com.helger.jcodemodel.JNarrowedClass(S%s<null>)
         //
         verifyException("com.helger.jcodemodel.util.JCValueEnforcer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "", "");
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jErrorClass0, jCodeModel0.NULL);
      JTypeVarClass jTypeVarClass0 = new JTypeVarClass(jNarrowedClass0);
      assertFalse(jTypeVarClass0.isError());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "AnnotationClass");
      LinkedList<JDirectClass> linkedList0 = new LinkedList<JDirectClass>();
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jErrorClass0, linkedList0);
      assertFalse(jNarrowedClass0.isArray());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jCodeModel0.NULL);
      AbstractJClass[] abstractJClassArray0 = new AbstractJClass[8];
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jArrayClass0, abstractJClassArray0);
      // Undeclared exception!
      try { 
        jNarrowedClass0.isError();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.JNarrowedClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JTypeVar jTypeVar0 = new JTypeVar(jCodeModel0, "S%s");
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jTypeVar0, jCodeModel0.NULL);
      boolean boolean0 = jNarrowedClass0.isError();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "", "");
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jErrorClass0, jCodeModel0.NULL);
      boolean boolean0 = jNarrowedClass0.isError();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jCodeModel0.DOUBLE);
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, ";{@coeWw <}", ";{@coeWw <}");
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jArrayClass0, jErrorClass0);
      boolean boolean0 = jNarrowedClass0.isError();
      assertTrue(boolean0);
  }
}
