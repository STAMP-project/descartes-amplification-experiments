/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 31 21:13:28 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.AbstractJAnnotationValueOwned;
import com.helger.jcodemodel.EWildcardBoundMode;
import com.helger.jcodemodel.IJExpression;
import com.helger.jcodemodel.JAnonymousClass;
import com.helger.jcodemodel.JArrayClass;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JDefinedClass;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JErrorClassUsedException;
import com.helger.jcodemodel.JInvocation;
import com.helger.jcodemodel.JLambda;
import com.helger.jcodemodel.JMethod;
import com.helger.jcodemodel.JNarrowedClass;
import com.helger.jcodemodel.JReferencedClass;
import com.helger.jcodemodel.JTypeWildcard;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JInvocation_ESTest extends JInvocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jCodeModel0.SHORT, "");
      assertFalse(jInvocation0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      Class<AbstractJAnnotationValueOwned.FullClassNameExpr> class0 = AbstractJAnnotationValueOwned.FullClassNameExpr.class;
      JReferencedClass jReferencedClass0 = new JReferencedClass(jCodeModel0, class0);
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jReferencedClass0, jCodeModel0.NULL);
      JInvocation jInvocation0 = new JInvocation(jNarrowedClass0);
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jReferencedClass0);
      JMethod jMethod0 = new JMethod(45, jAnonymousClass0);
      JInvocation jInvocation1 = new JInvocation(jInvocation0, jMethod0);
      assertFalse(jInvocation1.isConstructor());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "D<l(p", "D<l(p");
      JInvocation jInvocation0 = new JInvocation(jErrorClass0, "D<l(p");
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "com.helger.jcodemodel.JDefinedClass");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "D<l(p");
      jInvocation0.generate(jFormatter0);
      assertEquals("Object.D<l(p()", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      LinkedList<JDefinedClass> linkedList0 = new LinkedList<JDefinedClass>();
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jCodeModel0.NULL, linkedList0);
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jNarrowedClass0);
      JMethod jMethod0 = new JMethod(45, jAnonymousClass0);
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jCodeModel0.FLOAT, jMethod0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "[ ,F#jc-cs@uUIK");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "[ ,F#jc-cs@uUIK");
      // Undeclared exception!
      try { 
        jInvocation0.generate(jFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.writer.JFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JLambda jLambda0 = new JLambda();
      JInvocation jInvocation0 = new JInvocation(jLambda0, "ConstructorType");
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "Argument");
      // Undeclared exception!
      try { 
        jInvocation0.generate(jFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Lambda expression is empty!
         //
         verifyException("com.helger.jcodemodel.JLambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JInvocation jInvocation0 = new JInvocation((IJExpression) null, ":_e`|HEo");
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, ":_e`|HEo");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, ":_e`|HEo");
      jInvocation0.generate(jFormatter0);
      assertEquals(":_e`|HEo()", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jCodeModel0.DOUBLE);
      JInvocation jInvocation0 = new JInvocation(jArrayClass0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "zC3r-");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "zC3r-");
      jInvocation0.generate(jFormatter0);
      assertEquals("new double[] {}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      EWildcardBoundMode eWildcardBoundMode0 = EWildcardBoundMode.SUPER;
      JTypeWildcard jTypeWildcard0 = new JTypeWildcard(jCodeModel0.NULL, eWildcardBoundMode0);
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jTypeWildcard0);
      StringWriter stringWriter0 = new StringWriter(23);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "uJ)+");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "uJ)+");
      JInvocation jInvocation0 = new JInvocation(jAnonymousClass0);
      jInvocation0.generate(jFormatter0);
      assertEquals("new? super null() {uJ)+}uJ)+", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "");
      EWildcardBoundMode eWildcardBoundMode0 = EWildcardBoundMode.EXTENDS;
      JTypeWildcard jTypeWildcard0 = new JTypeWildcard(jErrorClass0, eWildcardBoundMode0);
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jErrorClass0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "Uz*)Q*");
      JMethod jMethod0 = new JMethod(jAnonymousClass0, 59, jCodeModel0.BOOLEAN, "V{Qy[4hpr");
      JInvocation jInvocation0 = new JInvocation(jTypeWildcard0, jMethod0);
      // Undeclared exception!
      try { 
        jInvocation0.generate(jFormatter0);
        fail("Expecting exception: JErrorClassUsedException");
      
      } catch(JErrorClassUsedException e) {
         //
         // 
         //
         verifyException("com.helger.jcodemodel.JErrorClass", e);
      }
  }
}
