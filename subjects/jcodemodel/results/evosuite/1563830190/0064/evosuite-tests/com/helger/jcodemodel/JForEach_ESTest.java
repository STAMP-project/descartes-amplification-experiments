/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 22:33:58 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.AbstractJClass;
import com.helger.jcodemodel.EWildcardBoundMode;
import com.helger.jcodemodel.JAnonymousClass;
import com.helger.jcodemodel.JArrayClass;
import com.helger.jcodemodel.JAssignment;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JEnumConstantRef;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JErrorClassUsedException;
import com.helger.jcodemodel.JFieldRef;
import com.helger.jcodemodel.JFieldVar;
import com.helger.jcodemodel.JForEach;
import com.helger.jcodemodel.JInvocation;
import com.helger.jcodemodel.JLambda;
import com.helger.jcodemodel.JLambdaMethodRef;
import com.helger.jcodemodel.JMods;
import com.helger.jcodemodel.JNarrowedClass;
import com.helger.jcodemodel.JOpTernary;
import com.helger.jcodemodel.JOpUnaryTight;
import com.helger.jcodemodel.JTypeWildcard;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JForEach_ESTest extends JForEach_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "");
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jErrorClass0);
      JMods jMods0 = new JMods((-976));
      JLambdaMethodRef jLambdaMethodRef0 = new JLambdaMethodRef(jErrorClass0, "6");
      JFieldVar jFieldVar0 = new JFieldVar(jAnonymousClass0, jMods0, jCodeModel0.VOID, "value", jLambdaMethodRef0);
      JAssignment jAssignment0 = new JAssignment(jFieldVar0, jFieldVar0, "uH");
      JEnumConstantRef jEnumConstantRef0 = new JEnumConstantRef(jAnonymousClass0, "va0I(Y,](2*fg");
      JOpTernary jOpTernary0 = new JOpTernary(jAssignment0, "value", jLambdaMethodRef0, "6", jEnumConstantRef0);
      JForEach jForEach0 = new JForEach(jAnonymousClass0, "uH", jOpTernary0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "uH");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "uH");
      // Undeclared exception!
      try { 
        jForEach0.state(jFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.JDefinedClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jCodeModel0.DOUBLE);
      JLambda jLambda0 = new JLambda();
      JForEach jForEach0 = new JForEach(jArrayClass0, "Collection", jLambda0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "$VALUES");
      // Undeclared exception!
      try { 
        jForEach0.state(jFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Lambda expression is empty!
         //
         verifyException("com.helger.jcodemodel.JLambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "VarName");
      LinkedList<AbstractJClass> linkedList0 = new LinkedList<AbstractJClass>();
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jErrorClass0, linkedList0);
      EWildcardBoundMode eWildcardBoundMode0 = EWildcardBoundMode.SUPER;
      JTypeWildcard jTypeWildcard0 = new JTypeWildcard(jNarrowedClass0, eWildcardBoundMode0);
      JFieldRef jFieldRef0 = new JFieldRef(jCodeModel0.VOID, "VarName", false);
      JOpUnaryTight jOpUnaryTight0 = new JOpUnaryTight(jFieldRef0, "");
      JForEach jForEach0 = new JForEach(jTypeWildcard0, "VarName", jOpUnaryTight0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "VarType");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "VarName");
      // Undeclared exception!
      try { 
        jForEach0.state(jFormatter0);
        fail("Expecting exception: JErrorClassUsedException");
      
      } catch(JErrorClassUsedException e) {
         //
         // VarName
         //
         verifyException("com.helger.jcodemodel.JErrorClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jCodeModel0.SHORT, "H");
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "H");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "H");
      JForEach jForEach0 = new JForEach(jCodeModel0.DOUBLE, "H", jInvocation0);
      jForEach0.state(jFormatter0);
      assertEquals("for (double H: short.H());H", stringWriter0.toString());
  }
}
