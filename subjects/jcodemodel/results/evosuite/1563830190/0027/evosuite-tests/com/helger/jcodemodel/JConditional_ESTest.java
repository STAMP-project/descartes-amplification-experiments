/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 21:51:13 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.EClassType;
import com.helger.jcodemodel.EWildcardBoundMode;
import com.helger.jcodemodel.IJClassContainer;
import com.helger.jcodemodel.JAnonymousClass;
import com.helger.jcodemodel.JAtomFloat;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JConditional;
import com.helger.jcodemodel.JDirectClass;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JErrorClassUsedException;
import com.helger.jcodemodel.JFieldRef;
import com.helger.jcodemodel.JInvocation;
import com.helger.jcodemodel.JLambda;
import com.helger.jcodemodel.JLambdaMethodRef;
import com.helger.jcodemodel.JMethod;
import com.helger.jcodemodel.JOpUnaryTight;
import com.helger.jcodemodel.JTypeWildcard;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JConditional_ESTest extends JConditional_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jCodeModel0.NULL);
      JMethod jMethod0 = new JMethod(3, jAnonymousClass0);
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jCodeModel0.VOID, jMethod0);
      JLambdaMethodRef jLambdaMethodRef0 = new JLambdaMethodRef(jInvocation0, jMethod0);
      JFieldRef jFieldRef0 = new JFieldRef(jLambdaMethodRef0, "W*>aB:\"");
      JConditional jConditional0 = new JConditional(jFieldRef0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "9)W");
      // Undeclared exception!
      try { 
        jConditional0.state(jFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.writer.JFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JLambda jLambda0 = new JLambda();
      JConditional jConditional0 = new JConditional(jLambda0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "GXJ81=^");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "if (");
      // Undeclared exception!
      try { 
        jConditional0.state(jFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Lambda expression is empty!
         //
         verifyException("com.helger.jcodemodel.JLambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JCodeModel jCodeModel0 = new JCodeModel();
      IJClassContainer<JDirectClass> iJClassContainer0 = (IJClassContainer<JDirectClass>) mock(IJClassContainer.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iJClassContainer0).isClass();
      EClassType eClassType0 = EClassType.CLASS;
      JDirectClass jDirectClass0 = new JDirectClass(jCodeModel0, iJClassContainer0, eClassType0, "7^V9>#K\"C9f4+;pDv7w");
      JLambdaMethodRef jLambdaMethodRef0 = new JLambdaMethodRef(jDirectClass0);
      JOpUnaryTight jOpUnaryTight0 = new JOpUnaryTight(jLambdaMethodRef0, "");
      JConditional jConditional0 = new JConditional(jOpUnaryTight0);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "ReturnType");
      // Undeclared exception!
      try { 
        jConditional0.state(jFormatter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.helger.jcodemodel.IJClassContainer$MockitoMock$391602433 cannot be cast to com.helger.jcodemodel.AbstractJClass
         //
         verifyException("com.helger.jcodemodel.AbstractJClassContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "j<2o*.J01");
      EWildcardBoundMode eWildcardBoundMode0 = EWildcardBoundMode.EXTENDS;
      JTypeWildcard jTypeWildcard0 = new JTypeWildcard(jErrorClass0, eWildcardBoundMode0);
      JInvocation jInvocation0 = new JInvocation(jTypeWildcard0);
      JConditional jConditional0 = new JConditional(jInvocation0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "j<2o*.J01");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "long");
      // Undeclared exception!
      try { 
        jConditional0.state(jFormatter0);
        fail("Expecting exception: JErrorClassUsedException");
      
      } catch(JErrorClassUsedException e) {
         //
         // j<2o*.J01
         //
         verifyException("com.helger.jcodemodel.JErrorClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "eSsX");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "eSsX");
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jCodeModel0.BYTE, "eSsX");
      JOpUnaryTight jOpUnaryTight0 = new JOpUnaryTight("eSsX", jInvocation0);
      JConditional jConditional0 = new JConditional(jOpUnaryTight0);
      jConditional0.state(jFormatter0);
      assertEquals("if eSsX byte.eSsX() {eSsX}eSsX", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JAtomFloat jAtomFloat0 = new JAtomFloat(0.0F);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "java.lang.Float.NEGATIVE_INFINITY");
      JConditional jConditional0 = new JConditional(jAtomFloat0);
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "F");
      jConditional0.state(jFormatter0);
      assertEquals("if (0.0F) {java.lang.Float.NEGATIVE_INFINITY}java.lang.Float.NEGATIVE_INFINITY", stringWriter0.toString());
  }
}
