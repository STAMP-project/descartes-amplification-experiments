/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 23:56:19 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.EWildcardBoundMode;
import com.helger.jcodemodel.IJExpression;
import com.helger.jcodemodel.JAnonymousClass;
import com.helger.jcodemodel.JArray;
import com.helger.jcodemodel.JArrayClass;
import com.helger.jcodemodel.JArrayCompRef;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JErrorClassUsedException;
import com.helger.jcodemodel.JFieldRef;
import com.helger.jcodemodel.JInvocation;
import com.helger.jcodemodel.JLambda;
import com.helger.jcodemodel.JMethod;
import com.helger.jcodemodel.JNarrowedClass;
import com.helger.jcodemodel.JReferencedClass;
import com.helger.jcodemodel.JTypeVarClass;
import com.helger.jcodemodel.JTypeWildcard;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JInvocation_ESTest extends JInvocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jCodeModel0.NULL);
      JMethod jMethod0 = new JMethod(jAnonymousClass0, 0, jCodeModel0.BYTE, "Illegal modifiers for ");
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jCodeModel0.FLOAT, jMethod0);
      assertFalse(jInvocation0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JInvocation jInvocation0 = new JInvocation(jCodeModel0.NULL, "");
      assertFalse(jInvocation0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      Class<JArray> class0 = JArray.class;
      JReferencedClass jReferencedClass0 = new JReferencedClass(jCodeModel0, class0);
      JTypeVarClass jTypeVarClass0 = new JTypeVarClass(jReferencedClass0);
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jTypeVarClass0);
      JMethod jMethod0 = new JMethod(jAnonymousClass0, 93, jCodeModel0.LONG, "P\"\"L");
      JInvocation jInvocation0 = new JInvocation(jTypeVarClass0, jMethod0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "P\"\"L");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "z|zaD;V<Tp}'yKvuGaL");
      jInvocation0.generate(jFormatter0);
      assertEquals("JArray.P\"\"L()", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JLambda jLambda0 = new JLambda();
      JArrayCompRef jArrayCompRef0 = new JArrayCompRef(jLambda0, jLambda0);
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jArrayCompRef0, ":M2)%<EZ_J>V7nM#");
      StringWriter stringWriter0 = new StringWriter(0);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "YGgT#>EcX");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "YGgT#>EcX");
      // Undeclared exception!
      try { 
        jInvocation0.generate(jFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Lambda expression is empty!
         //
         verifyException("com.helger.jcodemodel.JLambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "");
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jErrorClass0, jErrorClass0.EMPTY_ARRAY);
      EWildcardBoundMode eWildcardBoundMode0 = EWildcardBoundMode.SUPER;
      JTypeWildcard jTypeWildcard0 = new JTypeWildcard(jNarrowedClass0, eWildcardBoundMode0);
      JInvocation jInvocation0 = new JInvocation(jTypeWildcard0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "");
      // Undeclared exception!
      try { 
        jInvocation0.generate(jFormatter0);
        fail("Expecting exception: JErrorClassUsedException");
      
      } catch(JErrorClassUsedException e) {
         //
         // 
         //
         verifyException("com.helger.jcodemodel.JErrorClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JInvocation jInvocation0 = new JInvocation((IJExpression) null, "");
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "");
      jInvocation0.generate(jFormatter0);
      assertEquals("()", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "nDeH");
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jErrorClass0);
      JInvocation jInvocation0 = new JInvocation(jAnonymousClass0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "nDeH");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "nDeH");
      jInvocation0.generate(jFormatter0);
      assertEquals("new Object() {nDeH}nDeH", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jCodeModel0.BYTE);
      JInvocation jInvocation0 = new JInvocation(jArrayClass0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "");
      jInvocation0.generate(jFormatter0);
      assertEquals("new byte[] {}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jCodeModel0.LONG);
      JTypeVarClass jTypeVarClass0 = new JTypeVarClass(jArrayClass0);
      JFieldRef jFieldRef0 = new JFieldRef(jTypeVarClass0, "%C,<FXOE^u2j");
      StringWriter stringWriter0 = new StringWriter(128);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "A`Yz1^_W^WN");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "&_ZW(tu*s");
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jArrayClass0);
      JMethod jMethod0 = new JMethod(0, jAnonymousClass0);
      JInvocation jInvocation0 = new JInvocation(jFieldRef0, jMethod0);
      // Undeclared exception!
      try { 
        jInvocation0.generate(jFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.writer.JFormatter", e);
      }
  }
}
