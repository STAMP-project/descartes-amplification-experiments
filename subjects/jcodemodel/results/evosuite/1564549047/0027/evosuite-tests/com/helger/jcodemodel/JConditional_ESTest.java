/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 31 05:28:57 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.JAnonymousClass;
import com.helger.jcodemodel.JArrayClass;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JConditional;
import com.helger.jcodemodel.JEnumConstant;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JErrorClassUsedException;
import com.helger.jcodemodel.JInvocation;
import com.helger.jcodemodel.JLambda;
import com.helger.jcodemodel.JMethod;
import com.helger.jcodemodel.JMods;
import com.helger.jcodemodel.JOpTernary;
import com.helger.jcodemodel.JOpUnary;
import com.helger.jcodemodel.JStringLiteral;
import com.helger.jcodemodel.JTypeVarClass;
import com.helger.jcodemodel.JVar;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JConditional_ESTest extends JConditional_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JStringLiteral jStringLiteral0 = new JStringLiteral("cXhQQjEk{IheP");
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "cXhQQjEk{IheP");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "cXhQQjEk{IheP");
      JConditional jConditional0 = new JConditional(jStringLiteral0);
      jConditional0.state(jFormatter0);
      assertEquals("if (\"cXhQQjEk{IheP\") {cXhQQjEk{IheP}cXhQQjEk{IheP", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JMods jMods0 = new JMods(0);
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "Class");
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jCodeModel0.NULL);
      JMethod jMethod0 = new JMethod(0, jAnonymousClass0);
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jCodeModel0.BYTE, jMethod0);
      JVar jVar0 = new JVar(jMods0, jErrorClass0, "Class", jInvocation0);
      JOpTernary jOpTernary0 = new JOpTernary(jVar0, "T4F|Pl9~K.6ECpAwB'%", jInvocation0, "gK?WoThs0", jInvocation0);
      JConditional jConditional0 = new JConditional(jOpTernary0);
      StringWriter stringWriter0 = new StringWriter(0);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "gK?WoThs0");
      // Undeclared exception!
      try { 
        jConditional0.state(jFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.writer.JFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "8mPo}+w!)g0=r", "8mPo}+w!)g0=r");
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jErrorClass0);
      JTypeVarClass jTypeVarClass0 = new JTypeVarClass(jArrayClass0);
      JEnumConstant jEnumConstant0 = new JEnumConstant(jTypeVarClass0, "");
      JConditional jConditional0 = new JConditional(jEnumConstant0);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "8mPo}+w!)g0=r");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "");
      // Undeclared exception!
      try { 
        jConditional0.state(jFormatter0);
        fail("Expecting exception: JErrorClassUsedException");
      
      } catch(JErrorClassUsedException e) {
         //
         // 8mPo}+w!)g0=r
         //
         verifyException("com.helger.jcodemodel.JErrorClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JStringLiteral jStringLiteral0 = new JStringLiteral("|kgcl4@WcYeh`5");
      JOpUnary jOpUnary0 = new JOpUnary("|kgcl4@WcYeh`5", jStringLiteral0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "|kgcl4@WcYeh`5");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "|kgcl4@WcYeh`5");
      JConditional jConditional0 = new JConditional(jOpUnary0);
      jConditional0.state(jFormatter0);
      assertEquals("if (|kgcl4@WcYeh`5 \"|kgcl4@WcYeh`5\") {|kgcl4@WcYeh`5}|kgcl4@WcYeh`5", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JLambda jLambda0 = new JLambda();
      JConditional jConditional0 = new JConditional(jLambda0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "R{A^");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "com.helger.jcodemodel.meta.ErrorTypeFound");
      // Undeclared exception!
      try { 
        jConditional0.state(jFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Lambda expression is empty!
         //
         verifyException("com.helger.jcodemodel.JLambda", e);
      }
  }
}
