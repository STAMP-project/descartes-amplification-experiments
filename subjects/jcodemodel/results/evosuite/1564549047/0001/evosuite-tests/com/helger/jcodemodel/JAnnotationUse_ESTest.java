/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 31 04:59:49 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.EClassType;
import com.helger.jcodemodel.IJClassContainer;
import com.helger.jcodemodel.JAnnotationArrayMember;
import com.helger.jcodemodel.JAnnotationUse;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JDirectClass;
import com.helger.jcodemodel.JNarrowedClass;
import com.helger.jcodemodel.JReferencedClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JAnnotationUse_ESTest extends JAnnotationUse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      EClassType eClassType0 = EClassType.ANNOTATION_TYPE_DECL;
      JDirectClass jDirectClass0 = new JDirectClass(jCodeModel0, (IJClassContainer<?>) null, eClassType0, "");
      JAnnotationUse jAnnotationUse0 = new JAnnotationUse(jDirectClass0);
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        jAnnotationUse0.paramArray("", intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value of the string 'Name' may not be empty!
         //
         verifyException("com.helger.jcodemodel.util.JCValueEnforcer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      Class<JAnnotationArrayMember> class0 = JAnnotationArrayMember.class;
      JReferencedClass jReferencedClass0 = new JReferencedClass(jCodeModel0, class0);
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jReferencedClass0, jReferencedClass0.EMPTY_ARRAY);
      JAnnotationUse jAnnotationUse0 = new JAnnotationUse(jNarrowedClass0);
      int[] intArray0 = new int[1];
      JAnnotationUse jAnnotationUse1 = jAnnotationUse0.paramArray("]{e C*|", intArray0);
      assertTrue(jAnnotationUse1.hasAnnotationMembers());
  }
}
