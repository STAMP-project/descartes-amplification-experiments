/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 31 07:20:32 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.EWildcardBoundMode;
import com.helger.jcodemodel.IJExpression;
import com.helger.jcodemodel.JAnonymousClass;
import com.helger.jcodemodel.JArrayClass;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JErrorClassUsedException;
import com.helger.jcodemodel.JInvocation;
import com.helger.jcodemodel.JLambda;
import com.helger.jcodemodel.JLambdaMethodRef;
import com.helger.jcodemodel.JMethod;
import com.helger.jcodemodel.JNarrowedClass;
import com.helger.jcodemodel.JTypeVar;
import com.helger.jcodemodel.JTypeWildcard;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JInvocation_ESTest extends JInvocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jCodeModel0.LONG, "");
      assertFalse(jInvocation0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jCodeModel0.NULL);
      JMethod jMethod0 = new JMethod(0, jAnonymousClass0);
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jCodeModel0.INT, jMethod0);
      JLambdaMethodRef jLambdaMethodRef0 = new JLambdaMethodRef(jInvocation0, jMethod0);
      JInvocation jInvocation1 = new JInvocation(jLambdaMethodRef0, jMethod0);
      assertFalse(jInvocation1.isConstructor());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jCodeModel0.NULL);
      JMethod jMethod0 = new JMethod(jAnonymousClass0, 0, jCodeModel0.BOOLEAN, "klWv}p");
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jCodeModel0.VOID, jMethod0);
      StringWriter stringWriter0 = new StringWriter(0);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "];M7@O/xI,p<qi");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "t-T)JX`z{7rqN;ydOL");
      jInvocation0.generate(jFormatter0);
      assertEquals("void.klWv}p()", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, ") exceeds array length (");
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jErrorClass0);
      JMethod jMethod0 = new JMethod(0, jAnonymousClass0);
      JInvocation jInvocation0 = new JInvocation(jErrorClass0, jMethod0);
      StringWriter stringWriter0 = new StringWriter(0);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, ") exceeds array length (");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, ") exceeds array length (");
      // Undeclared exception!
      try { 
        jInvocation0.generate(jFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.writer.JFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(788);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "NarrowingClass");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "1/*gktUDA@|=m");
      JLambda jLambda0 = new JLambda();
      JInvocation jInvocation0 = new JInvocation(jLambda0, "NarrowingClass");
      // Undeclared exception!
      try { 
        jInvocation0.generate(jFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Lambda expression is empty!
         //
         verifyException("com.helger.jcodemodel.JLambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JInvocation jInvocation0 = new JInvocation((IJExpression) null, "a");
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "a");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "a");
      jInvocation0.generate(jFormatter0);
      assertEquals("a()", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      StringWriter stringWriter0 = new StringWriter();
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jCodeModel0.NULL);
      JInvocation jInvocation0 = new JInvocation(jAnonymousClass0);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "com.helger.jcodemodel.writer.AbstractCodeWriter");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "com.helger.jcodemodel.writer.AbstractCodeWriter");
      jInvocation0.generate(jFormatter0);
      assertEquals("new null() {com.helger.jcodemodel.writer.AbstractCodeWriter}com.helger.jcodemodel.writer.AbstractCodeWriter", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jCodeModel0.SHORT);
      JInvocation jInvocation0 = new JInvocation(jArrayClass0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "<XP");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "com.helger.jcodemodel.JInvocation");
      jInvocation0.generate(jFormatter0);
      assertEquals("new short[] {}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "'/qmOg\">@c|h_s", ";E]~");
      LinkedList<JTypeVar> linkedList0 = new LinkedList<JTypeVar>();
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jErrorClass0, linkedList0);
      EWildcardBoundMode eWildcardBoundMode0 = EWildcardBoundMode.SUPER;
      JTypeWildcard jTypeWildcard0 = new JTypeWildcard(jNarrowedClass0, eWildcardBoundMode0);
      JInvocation jInvocation0 = new JInvocation(jTypeWildcard0, ";E]~");
      StringWriter stringWriter0 = new StringWriter(0);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "SHByL(");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "'/qmOg\">@c|h_s");
      // Undeclared exception!
      try { 
        jInvocation0.generate(jFormatter0);
        fail("Expecting exception: JErrorClassUsedException");
      
      } catch(JErrorClassUsedException e) {
         //
         // '/qmOg\">@c|h_s
         //
         verifyException("com.helger.jcodemodel.JErrorClass", e);
      }
  }
}
