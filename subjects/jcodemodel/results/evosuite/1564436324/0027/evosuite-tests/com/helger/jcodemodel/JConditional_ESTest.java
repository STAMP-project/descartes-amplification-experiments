/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 29 22:11:54 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.JArray;
import com.helger.jcodemodel.JAtomDouble;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JConditional;
import com.helger.jcodemodel.JDefinedClass;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JErrorClassUsedException;
import com.helger.jcodemodel.JFieldRef;
import com.helger.jcodemodel.JLambda;
import com.helger.jcodemodel.JOpUnary;
import com.helger.jcodemodel.JTypeVarClass;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JConditional_ESTest extends JConditional_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JDefinedClass jDefinedClass0 = new JDefinedClass(jCodeModel0, 0, "NewType");
      JFieldRef jFieldRef0 = new JFieldRef(jDefinedClass0, "NewType");
      JConditional jConditional0 = new JConditional(jFieldRef0);
      StringWriter stringWriter0 = new StringWriter(63);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "NewType");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "NewType");
      // Undeclared exception!
      try { 
        jConditional0.state(jFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.JDefinedClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JLambda jLambda0 = new JLambda();
      JArray jArray0 = new JArray(jCodeModel0.DOUBLE, jLambda0);
      JOpUnary jOpUnary0 = new JOpUnary(jArray0, "BoundMode");
      JConditional jConditional0 = new JConditional(jOpUnary0);
      StringWriter stringWriter0 = new StringWriter(0);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "t}uNDfLV,*2y#9");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "");
      // Undeclared exception!
      try { 
        jConditional0.state(jFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Lambda expression is empty!
         //
         verifyException("com.helger.jcodemodel.JLambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "&bfBe:4~", "&bfBe:4~");
      JTypeVarClass jTypeVarClass0 = new JTypeVarClass(jErrorClass0);
      JFieldRef jFieldRef0 = new JFieldRef(jTypeVarClass0, "&bfBe:4~");
      JConditional jConditional0 = new JConditional(jFieldRef0);
      StringWriter stringWriter0 = new StringWriter(1873);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "&bfBe:4~");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "&bfBe:4~");
      // Undeclared exception!
      try { 
        jConditional0.state(jFormatter0);
        fail("Expecting exception: JErrorClassUsedException");
      
      } catch(JErrorClassUsedException e) {
         //
         // &bfBe:4~
         //
         verifyException("com.helger.jcodemodel.JErrorClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JAtomDouble jAtomDouble0 = new JAtomDouble((-903.7129635595549));
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "java.lang.Double.NaN");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "java.lang.Double.POSITIVE_INFINITY");
      JConditional jConditional0 = new JConditional(jAtomDouble0);
      jConditional0.state(jFormatter0);
      assertEquals("if (-903.7129635595549) {java.lang.Double.NaN}java.lang.Double.NaN", stringWriter0.toString());
  }
}
