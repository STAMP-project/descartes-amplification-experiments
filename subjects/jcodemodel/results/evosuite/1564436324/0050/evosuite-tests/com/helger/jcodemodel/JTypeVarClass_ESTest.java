/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 29 22:36:33 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JDefinedClass;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JErrorClassUsedException;
import com.helger.jcodemodel.JNarrowedClass;
import com.helger.jcodemodel.JTypeVarClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JTypeVarClass_ESTest extends JTypeVarClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "HROx6q4+", "com.helger.jcodemodel.JTypeVarClass");
      JTypeVarClass jTypeVarClass0 = new JTypeVarClass(jErrorClass0);
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jTypeVarClass0, jTypeVarClass0);
      JNarrowedClass jNarrowedClass1 = null;
      try {
        jNarrowedClass1 = new JNarrowedClass(jNarrowedClass0, jTypeVarClass0.EMPTY_ARRAY);
        fail("Expecting exception: JErrorClassUsedException");
      
      } catch(JErrorClassUsedException e) {
         //
         // HROx6q4+
         //
         verifyException("com.helger.jcodemodel.JErrorClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JDefinedClass jDefinedClass0 = new JDefinedClass(jCodeModel0, 53, "w");
      JTypeVarClass jTypeVarClass0 = new JTypeVarClass(jDefinedClass0);
      String string0 = jTypeVarClass0.name();
      assertEquals("w", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "X:,aD{{[eHc^y^", "X:,aD{{[eHc^y^");
      JTypeVarClass jTypeVarClass0 = new JTypeVarClass(jErrorClass0);
      String string0 = jTypeVarClass0.name();
      assertEquals("X:,aD{{[eHc^y^", string0);
  }
}
