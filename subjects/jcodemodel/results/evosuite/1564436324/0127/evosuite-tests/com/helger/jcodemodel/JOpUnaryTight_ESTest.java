/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 30 00:04:13 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.AbstractJClass;
import com.helger.jcodemodel.JAnonymousClass;
import com.helger.jcodemodel.JAtomFloat;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JLambda;
import com.helger.jcodemodel.JLambdaMethodRef;
import com.helger.jcodemodel.JNarrowedClass;
import com.helger.jcodemodel.JOpUnaryTight;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JOpUnaryTight_ESTest extends JOpUnaryTight_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JLambda jLambda0 = new JLambda();
      JOpUnaryTight jOpUnaryTight0 = new JOpUnaryTight("com.helger.jcodemodel.JAnnotationUse", jLambda0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "com.helger.jcodemodel.JAnnotationUse");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, ",Xqga&v");
      // Undeclared exception!
      try { 
        jOpUnaryTight0.generate(jFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Lambda expression is empty!
         //
         verifyException("com.helger.jcodemodel.JLambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "Progress");
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jErrorClass0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "com.helger.jcodemodel.AbstractJClassContainer");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "Progress");
      LinkedList<AbstractJClass> linkedList0 = new LinkedList<AbstractJClass>();
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jAnonymousClass0, linkedList0);
      JLambdaMethodRef jLambdaMethodRef0 = new JLambdaMethodRef(jNarrowedClass0);
      JOpUnaryTight jOpUnaryTight0 = new JOpUnaryTight("com.helger.jcodemodel.AbstractJClassContainer", jLambdaMethodRef0);
      // Undeclared exception!
      try { 
        jOpUnaryTight0.generate(jFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.JDefinedClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JAtomFloat jAtomFloat0 = new JAtomFloat(0.0F);
      JOpUnaryTight jOpUnaryTight0 = new JOpUnaryTight(jAtomFloat0, "F");
      StringWriter stringWriter0 = new StringWriter(0);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "java.lang.Float.NEGATIVE_INFINITY");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "java.lang.Float.NEGATIVE_INFINITY");
      jOpUnaryTight0.generate(jFormatter0);
      assertEquals("0.0F F", stringWriter0.toString());
  }
}
