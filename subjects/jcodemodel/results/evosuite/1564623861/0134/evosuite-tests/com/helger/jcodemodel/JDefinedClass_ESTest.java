/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 04:06:24 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.AbstractJClass;
import com.helger.jcodemodel.EClassType;
import com.helger.jcodemodel.JAnonymousClass;
import com.helger.jcodemodel.JArrayClass;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JDefinedClass;
import com.helger.jcodemodel.JDirectClass;
import com.helger.jcodemodel.JNarrowedClass;
import com.helger.jcodemodel.JTypeVarClass;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JDefinedClass_ESTest extends JDefinedClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JDefinedClass jDefinedClass0 = new JDefinedClass(jCodeModel0, 4, "HgVD");
      LinkedList<JArrayClass> linkedList0 = new LinkedList<JArrayClass>();
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jDefinedClass0, linkedList0);
      JNarrowedClass jNarrowedClass1 = null;
      try {
        jNarrowedClass1 = new JNarrowedClass(jNarrowedClass0, jNarrowedClass0.EMPTY_ARRAY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.JDefinedClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      AbstractJClass[] abstractJClassArray0 = new AbstractJClass[6];
      abstractJClassArray0[0] = (AbstractJClass) jCodeModel0.NULL;
      abstractJClassArray0[1] = (AbstractJClass) jCodeModel0.NULL;
      abstractJClassArray0[2] = (AbstractJClass) jCodeModel0.NULL;
      abstractJClassArray0[3] = (AbstractJClass) jCodeModel0.NULL;
      abstractJClassArray0[4] = (AbstractJClass) jCodeModel0.NULL;
      abstractJClassArray0[5] = (AbstractJClass) jCodeModel0.NULL;
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jCodeModel0.NULL, abstractJClassArray0);
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jNarrowedClass0);
      JTypeVarClass jTypeVarClass0 = new JTypeVarClass(jArrayClass0);
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jTypeVarClass0);
      EClassType eClassType0 = EClassType.ANNOTATION_TYPE_DECL;
      JDefinedClass jDefinedClass0 = new JDefinedClass(jAnonymousClass0, 42, "static", eClassType0);
      JDefinedClass jDefinedClass1 = jDefinedClass0._extends((AbstractJClass) jTypeVarClass0);
      assertFalse(jDefinedClass1.isHidden());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JDefinedClass jDefinedClass0 = new JDefinedClass(jCodeModel0, 21, (String) null);
      JDefinedClass jDefinedClass1 = new JDefinedClass(jCodeModel0, 21, (String) null);
      EClassType eClassType0 = EClassType.ANNOTATION_TYPE_DECL;
      JDirectClass jDirectClass0 = new JDirectClass(jCodeModel0, jDefinedClass0, eClassType0, "!5hvceN>F<m+8yr-?M");
      JDefinedClass jDefinedClass2 = jDefinedClass1._extends((AbstractJClass) jDirectClass0);
      assertFalse(jDefinedClass2.isHidden());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JDefinedClass jDefinedClass0 = new JDefinedClass(jCodeModel0, 21, (String) null);
      EClassType eClassType0 = EClassType.ANNOTATION_TYPE_DECL;
      JDirectClass jDirectClass0 = new JDirectClass(jCodeModel0, jDefinedClass0, eClassType0, "!5hvceN>F<m+8yr-?M");
      // Undeclared exception!
      try { 
        jDefinedClass0._extends((AbstractJClass) jDirectClass0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal class inheritance loop.  Outer class null may not subclass from inner class: null
         //
         verifyException("com.helger.jcodemodel.JDefinedClass", e);
      }
  }
}
