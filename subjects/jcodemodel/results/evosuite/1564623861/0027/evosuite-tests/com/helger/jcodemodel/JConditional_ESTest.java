/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 02:16:59 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.JAnonymousClass;
import com.helger.jcodemodel.JAtom;
import com.helger.jcodemodel.JAtomFloat;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JConditional;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JErrorClassUsedException;
import com.helger.jcodemodel.JFieldRef;
import com.helger.jcodemodel.JInvocation;
import com.helger.jcodemodel.JLambda;
import com.helger.jcodemodel.JMethod;
import com.helger.jcodemodel.JOpUnaryTight;
import com.helger.jcodemodel.JTypeVarClass;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JConditional_ESTest extends JConditional_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jCodeModel0.NULL);
      JMethod jMethod0 = new JMethod(0, jAnonymousClass0);
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jCodeModel0.INT, jMethod0);
      JConditional jConditional0 = new JConditional(jInvocation0);
      StringWriter stringWriter0 = new StringWriter(0);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "");
      // Undeclared exception!
      try { 
        jConditional0.state(jFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.writer.JFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JLambda jLambda0 = new JLambda();
      JConditional jConditional0 = new JConditional(jLambda0);
      StringWriter stringWriter0 = new StringWriter(59);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "");
      // Undeclared exception!
      try { 
        jConditional0.state(jFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Lambda expression is empty!
         //
         verifyException("com.helger.jcodemodel.JLambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "P|FD!IgZ']", "M#vR)d;hM]9");
      JTypeVarClass jTypeVarClass0 = new JTypeVarClass(jErrorClass0);
      JFieldRef jFieldRef0 = new JFieldRef(jTypeVarClass0, "");
      JConditional jConditional0 = new JConditional(jFieldRef0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "P|FD!IgZ']");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "P|FD!IgZ']");
      // Undeclared exception!
      try { 
        jConditional0.state(jFormatter0);
        fail("Expecting exception: JErrorClassUsedException");
      
      } catch(JErrorClassUsedException e) {
         //
         // P|FD!IgZ']
         //
         verifyException("com.helger.jcodemodel.JErrorClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JAtomFloat jAtomFloat0 = new JAtomFloat((-165.73F));
      JOpUnaryTight jOpUnaryTight0 = new JOpUnaryTight("java.lang.Float.NaN", jAtomFloat0);
      JConditional jConditional0 = new JConditional(jOpUnaryTight0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "F");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "java.lang.Float.NEGATIVE_INFINITY");
      jConditional0.state(jFormatter0);
      assertEquals("if java.lang.Float.NaN -165.73F {F}F", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JAtom jAtom0 = new JAtom("false");
      JConditional jConditional0 = new JConditional(jAtom0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "false");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "n>J0");
      jConditional0.state(jFormatter0);
      assertEquals("if (false) {false}false", stringWriter0.toString());
  }
}
