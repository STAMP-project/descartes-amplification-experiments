/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 02:23:09 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.JAnonymousClass;
import com.helger.jcodemodel.JAtom;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JErrorClassUsedException;
import com.helger.jcodemodel.JFieldRef;
import com.helger.jcodemodel.JInvocation;
import com.helger.jcodemodel.JLambda;
import com.helger.jcodemodel.JMethod;
import com.helger.jcodemodel.JOpUnaryTight;
import com.helger.jcodemodel.JSwitch;
import com.helger.jcodemodel.JTypeVarClass;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JSwitch_ESTest extends JSwitch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "aa c#m+[g");
      JAtom jAtom0 = new JAtom("aa c#m+[g");
      JSwitch jSwitch0 = new JSwitch(jAtom0);
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "aa c#m+[g");
      jSwitch0.state(jFormatter0);
      assertEquals("switch (aa c#m+[g) {aa c#m+[g}aa c#m+[g", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JLambda jLambda0 = new JLambda();
      JSwitch jSwitch0 = new JSwitch(jLambda0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "");
      // Undeclared exception!
      try { 
        jSwitch0.state(jFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Lambda expression is empty!
         //
         verifyException("com.helger.jcodemodel.JLambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, ":~:P6)K}PG])|$|", "7-XO");
      JTypeVarClass jTypeVarClass0 = new JTypeVarClass(jErrorClass0);
      JFieldRef jFieldRef0 = new JFieldRef(jTypeVarClass0, "7-XO");
      JSwitch jSwitch0 = new JSwitch(jFieldRef0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, ":~:P6)K}PG])|$|");
      // Undeclared exception!
      try { 
        jSwitch0.state(jFormatter0);
        fail("Expecting exception: JErrorClassUsedException");
      
      } catch(JErrorClassUsedException e) {
         //
         // :~:P6)K}PG])|$|
         //
         verifyException("com.helger.jcodemodel.JErrorClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JAtom jAtom0 = new JAtom("4^TOLD,puB");
      JOpUnaryTight jOpUnaryTight0 = new JOpUnaryTight(jAtom0, "4^TOLD,puB");
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "4^TOLD,puB");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "4^TOLD,puB");
      JSwitch jSwitch0 = new JSwitch(jOpUnaryTight0);
      jSwitch0.state(jFormatter0);
      assertEquals("switch  4^TOLD,puB4^TOLD,puB {4^TOLD,puB}4^TOLD,puB", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jCodeModel0.NULL);
      JMethod jMethod0 = new JMethod(0, jAnonymousClass0);
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jCodeModel0.VOID, jMethod0);
      JSwitch jSwitch0 = new JSwitch(jInvocation0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "ev+1^[9&PXAP(");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "ev+1^[9&PXAP(");
      // Undeclared exception!
      try { 
        jSwitch0.state(jFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.writer.JFormatter", e);
      }
  }
}
