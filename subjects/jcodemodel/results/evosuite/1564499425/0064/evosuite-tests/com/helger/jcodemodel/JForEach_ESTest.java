/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 30 16:21:51 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.AbstractJClass;
import com.helger.jcodemodel.EClassType;
import com.helger.jcodemodel.EWildcardBoundMode;
import com.helger.jcodemodel.IJClassContainer;
import com.helger.jcodemodel.JAtomLong;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JDefinedClass;
import com.helger.jcodemodel.JDirectClass;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JErrorClassUsedException;
import com.helger.jcodemodel.JFieldRef;
import com.helger.jcodemodel.JForEach;
import com.helger.jcodemodel.JInvocation;
import com.helger.jcodemodel.JLambda;
import com.helger.jcodemodel.JNarrowedClass;
import com.helger.jcodemodel.JOpBinary;
import com.helger.jcodemodel.JOpUnaryTight;
import com.helger.jcodemodel.JTypeWildcard;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JForEach_ESTest extends JForEach_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JDefinedClass jDefinedClass0 = new JDefinedClass(jCodeModel0, 0, "FIND_ERROR_TYPES");
      JFieldRef jFieldRef0 = new JFieldRef(jDefinedClass0, "");
      JOpBinary jOpBinary0 = new JOpBinary(jFieldRef0, "FIND_ERROR_TYPES", jCodeModel0.INT);
      JForEach jForEach0 = new JForEach(jCodeModel0.SHORT, "FIND_ERROR_TYPES", jOpBinary0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "XF_YD]e{");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "");
      // Undeclared exception!
      try { 
        jForEach0.state(jFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.JDefinedClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "ysv%nIXvRB]4`*,B|!^", "LM+H1Hk2Y");
      LinkedList<AbstractJClass> linkedList0 = new LinkedList<AbstractJClass>();
      JNarrowedClass jNarrowedClass0 = new JNarrowedClass(jErrorClass0, linkedList0);
      JLambda jLambda0 = new JLambda();
      JOpUnaryTight jOpUnaryTight0 = new JOpUnaryTight("LM+H1Hk2Y", jLambda0);
      JForEach jForEach0 = new JForEach(jNarrowedClass0, "VarType", jOpUnaryTight0);
      StringWriter stringWriter0 = new StringWriter(612);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "VarType");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "VarType");
      // Undeclared exception!
      try { 
        jForEach0.state(jFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Lambda expression is empty!
         //
         verifyException("com.helger.jcodemodel.JLambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "VaTpe");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "VaTpe");
      JCodeModel jCodeModel0 = new JCodeModel();
      IJClassContainer<JDirectClass> iJClassContainer0 = (IJClassContainer<JDirectClass>) mock(IJClassContainer.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iJClassContainer0).isClass();
      EClassType eClassType0 = EClassType.ANNOTATION_TYPE_DECL;
      JDirectClass jDirectClass0 = new JDirectClass(jCodeModel0, iJClassContainer0, eClassType0, "E;");
      JInvocation jInvocation0 = new JInvocation(jCodeModel0.SHORT);
      JForEach jForEach0 = new JForEach(jDirectClass0, "VaTpe", jInvocation0);
      // Undeclared exception!
      try { 
        jForEach0.state(jFormatter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.helger.jcodemodel.IJClassContainer$MockitoMock$1346127486 cannot be cast to com.helger.jcodemodel.AbstractJClass
         //
         verifyException("com.helger.jcodemodel.AbstractJClassContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "GVa3Tpe");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "GVa3Tpe");
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "NarrowingClass");
      EWildcardBoundMode eWildcardBoundMode0 = EWildcardBoundMode.SUPER;
      JTypeWildcard jTypeWildcard0 = new JTypeWildcard(jErrorClass0, eWildcardBoundMode0);
      JAtomLong jAtomLong0 = new JAtomLong((-742L));
      JForEach jForEach0 = new JForEach(jTypeWildcard0, "NarrowingClass", jAtomLong0);
      // Undeclared exception!
      try { 
        jForEach0.state(jFormatter0);
        fail("Expecting exception: JErrorClassUsedException");
      
      } catch(JErrorClassUsedException e) {
         //
         // NarrowingClass
         //
         verifyException("com.helger.jcodemodel.JErrorClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JInvocation jInvocation0 = new JInvocation(jCodeModel0.DOUBLE);
      StringWriter stringWriter0 = new StringWriter();
      JForEach jForEach0 = new JForEach(jCodeModel0.VOID, "d", jInvocation0);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "d");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "d");
      jForEach0.state(jFormatter0);
      assertEquals("for (void d: new double());d", stringWriter0.toString());
  }
}
