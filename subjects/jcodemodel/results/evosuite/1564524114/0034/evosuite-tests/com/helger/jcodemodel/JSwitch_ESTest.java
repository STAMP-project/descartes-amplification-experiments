/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 30 22:39:37 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.JAnonymousClass;
import com.helger.jcodemodel.JArrayClass;
import com.helger.jcodemodel.JAtom;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JEnumConstant;
import com.helger.jcodemodel.JEnumConstantRef;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JErrorClassUsedException;
import com.helger.jcodemodel.JFieldRef;
import com.helger.jcodemodel.JLambda;
import com.helger.jcodemodel.JOpBinary;
import com.helger.jcodemodel.JStringLiteral;
import com.helger.jcodemodel.JSwitch;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JSwitch_ESTest extends JSwitch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jCodeModel0.NULL);
      JEnumConstant jEnumConstant0 = new JEnumConstant(jAnonymousClass0, "{_(\"5Dg(bL");
      JFieldRef jFieldRef0 = new JFieldRef(jEnumConstant0, "{_(\"5Dg(bL", true);
      JSwitch jSwitch0 = new JSwitch(jFieldRef0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "com.helger.jcodemodel.writer.JFormatter$EMode");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "");
      // Undeclared exception!
      try { 
        jSwitch0.state(jFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.JDefinedClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JLambda jLambda0 = new JLambda();
      JSwitch jSwitch0 = new JSwitch(jLambda0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "kIy5JBSR04xy~YNt~");
      // Undeclared exception!
      try { 
        jSwitch0.state(jFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Lambda expression is empty!
         //
         verifyException("com.helger.jcodemodel.JLambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "");
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jErrorClass0);
      JEnumConstantRef jEnumConstantRef0 = new JEnumConstantRef(jArrayClass0, "");
      JSwitch jSwitch0 = new JSwitch(jEnumConstantRef0);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, " {");
      // Undeclared exception!
      try { 
        jSwitch0.state(jFormatter0);
        fail("Expecting exception: JErrorClassUsedException");
      
      } catch(JErrorClassUsedException e) {
         //
         // 
         //
         verifyException("com.helger.jcodemodel.JErrorClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JStringLiteral jStringLiteral0 = new JStringLiteral("2");
      JOpBinary jOpBinary0 = new JOpBinary(jStringLiteral0, "2", jStringLiteral0);
      JSwitch jSwitch0 = new JSwitch(jOpBinary0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "2");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "2");
      jSwitch0.state(jFormatter0);
      assertEquals("switch (\"2\" 2 \"2\") {2}2", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JAtom jAtom0 = new JAtom("6\"");
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "6\"");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "6\"");
      JSwitch jSwitch0 = new JSwitch(jAtom0);
      jSwitch0.state(jFormatter0);
      assertEquals("switch (6\") {6\"}6\"", stringWriter0.toString());
  }
}
