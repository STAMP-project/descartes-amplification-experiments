/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 31 00:24:59 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.helger.jcodemodel.EWildcardBoundMode;
import com.helger.jcodemodel.IJExpression;
import com.helger.jcodemodel.JAnonymousClass;
import com.helger.jcodemodel.JArrayClass;
import com.helger.jcodemodel.JAssignment;
import com.helger.jcodemodel.JAtomFloat;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JErrorClassUsedException;
import com.helger.jcodemodel.JInvocation;
import com.helger.jcodemodel.JLambda;
import com.helger.jcodemodel.JMethod;
import com.helger.jcodemodel.JReferencedClass;
import com.helger.jcodemodel.JTypeWildcard;
import com.helger.jcodemodel.SourcePrintWriter;
import com.helger.jcodemodel.writer.JFormatter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JInvocation_ESTest extends JInvocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jCodeModel0.NULL);
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jAnonymousClass0, "");
      assertFalse(jInvocation0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      Class<JAssignment> class0 = JAssignment.class;
      JReferencedClass jReferencedClass0 = new JReferencedClass(jCodeModel0, class0);
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jReferencedClass0);
      JMethod jMethod0 = new JMethod(34, jAnonymousClass0);
      JInvocation jInvocation0 = new JInvocation((IJExpression) null, jMethod0);
      assertFalse(jInvocation0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "Lf.s");
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jErrorClass0);
      JMethod jMethod0 = new JMethod(jAnonymousClass0, 0, jCodeModel0.NULL, "Lf.s");
      JInvocation jInvocation0 = new JInvocation(jErrorClass0, jMethod0);
      assertFalse(jInvocation0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JAtomFloat jAtomFloat0 = new JAtomFloat(0.0F);
      JInvocation jInvocation0 = new JInvocation(jAtomFloat0, "");
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "new");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "The value of the array '");
      jInvocation0.generate(jFormatter0);
      assertEquals("0.0F.()", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JLambda jLambda0 = new JLambda();
      JInvocation jInvocation0 = new JInvocation(jLambda0, "F4=>t)>Yc");
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "F4=>t)>Yc");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "");
      // Undeclared exception!
      try { 
        jInvocation0.generate(jFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Lambda expression is empty!
         //
         verifyException("com.helger.jcodemodel.JLambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, "The value of the string '");
      EWildcardBoundMode eWildcardBoundMode0 = EWildcardBoundMode.SUPER;
      JTypeWildcard jTypeWildcard0 = new JTypeWildcard(jErrorClass0, eWildcardBoundMode0);
      JInvocation jInvocation0 = new JInvocation(jTypeWildcard0, "The value of the string '");
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "5a,q@");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "The value of the string '");
      // Undeclared exception!
      try { 
        jInvocation0.generate(jFormatter0);
        fail("Expecting exception: JErrorClassUsedException");
      
      } catch(JErrorClassUsedException e) {
         //
         // The value of the string '
         //
         verifyException("com.helger.jcodemodel.JErrorClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JInvocation jInvocation0 = new JInvocation((IJExpression) null, "u{x]rqR");
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "u{x]rqR");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "u{x]rqR");
      jInvocation0.generate(jFormatter0);
      assertEquals("u{x]rqR()", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JArrayClass jArrayClass0 = new JArrayClass(jCodeModel0, jCodeModel0.DOUBLE);
      JInvocation jInvocation0 = new JInvocation(jArrayClass0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "");
      jInvocation0.generate(jFormatter0);
      assertEquals("new double[] {}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jCodeModel0.NULL);
      JInvocation jInvocation0 = new JInvocation(jAnonymousClass0);
      StringWriter stringWriter0 = new StringWriter();
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "No owner is present, so this invocation cannot be generified!");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "No owner is present, so this invocation cannot be generified!");
      jInvocation0.generate(jFormatter0);
      assertEquals("new null() {No owner is present, so this invocation cannot be generified!}No owner is present, so this invocation cannot be generified!", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JCodeModel jCodeModel0 = new JCodeModel();
      JAnonymousClass jAnonymousClass0 = new JAnonymousClass(jCodeModel0.NULL);
      JMethod jMethod0 = new JMethod(44, jAnonymousClass0);
      JInvocation jInvocation0 = new JInvocation(jCodeModel0, jCodeModel0.NULL, jMethod0);
      StringWriter stringWriter0 = new StringWriter(44);
      SourcePrintWriter sourcePrintWriter0 = new SourcePrintWriter(stringWriter0, "3!kOQXag\"bM+mHSe<|g");
      JFormatter jFormatter0 = new JFormatter(sourcePrintWriter0, "3!kOQXag\"bM+mHSe<|g");
      // Undeclared exception!
      try { 
        jInvocation0.generate(jFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.helger.jcodemodel.writer.JFormatter", e);
      }
  }
}
