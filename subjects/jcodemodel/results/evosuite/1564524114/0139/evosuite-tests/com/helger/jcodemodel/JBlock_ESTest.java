/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 31 00:29:42 GMT 2019
 */

package com.helger.jcodemodel;

import org.junit.Test;
import static org.junit.Assert.*;
import com.helger.jcodemodel.IJExpression;
import com.helger.jcodemodel.JBlock;
import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JEnumConstant;
import com.helger.jcodemodel.JErrorClass;
import com.helger.jcodemodel.JOpUnary;
import com.helger.jcodemodel.JTypeVarClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class JBlock_ESTest extends JBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JBlock jBlock0 = new JBlock();
      JCodeModel jCodeModel0 = new JCodeModel();
      JErrorClass jErrorClass0 = new JErrorClass(jCodeModel0, ")T;Y*+Bz{tJa", ")T;Y*+Bz{tJa");
      JTypeVarClass jTypeVarClass0 = new JTypeVarClass(jErrorClass0);
      JEnumConstant jEnumConstant0 = new JEnumConstant(jTypeVarClass0, "Eg/>fcL:,[LW");
      JOpUnary jOpUnary0 = new JOpUnary(jEnumConstant0, "method");
      jBlock0._if((IJExpression) jOpUnary0);
      assertEquals(1, jBlock0.pos());
  }
}
