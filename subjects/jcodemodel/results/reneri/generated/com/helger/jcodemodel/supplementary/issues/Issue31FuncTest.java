/**
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
 * Portions Copyright 2013-2018 Philip Helger + contributors
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
 * or packager/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at packager/legal/LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */
package com.helger.jcodemodel.supplementary.issues;


/**
 * Test for https://github.com/phax/jcodemodel/issues/31
 *
 * @author Philip Helger
 */
public final class Issue31FuncTest {
    @org.junit.Test
    public void test() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel generator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|0", com.helger.jcodemodel.JCodeModel.class, new com.helger.jcodemodel.JCodeModel());
        final com.helger.jcodemodel.AbstractJClass jtype = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|2", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|1", com.helger.jcodemodel.JCodeModel.class, generator).ref(java.lang.String.class));
        final com.helger.jcodemodel.AbstractJClass aspect = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDirectClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|5", com.helger.jcodemodel.JDirectClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|3", com.helger.jcodemodel.JCodeModel.class, generator).directClass(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|4", com.helger.jcodemodel.supplementary.issues.issue31.MockFieldInstanceImpl.ValueHolderInstanceImpl.class.getSimpleName())));
        final com.helger.jcodemodel.AbstractJClass abstractFieldClass = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JNarrowedClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|9", com.helger.jcodemodel.JNarrowedClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|7", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|6", com.helger.jcodemodel.JCodeModel.class, generator).ref(com.helger.jcodemodel.supplementary.issues.issue31.MockFieldInstanceImpl.class)).narrow(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|8", com.helger.jcodemodel.AbstractJClass.class, jtype)));
        final com.helger.jcodemodel.JAnonymousClass basefield = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JAnonymousClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|12", com.helger.jcodemodel.JAnonymousClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|10", com.helger.jcodemodel.JCodeModel.class, generator).anonymousClass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|11", com.helger.jcodemodel.AbstractJClass.class, abstractFieldClass)));
        final com.helger.jcodemodel.JFieldVar apectfield = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JFieldVar>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|15", com.helger.jcodemodel.JFieldVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JAnonymousClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|13", com.helger.jcodemodel.JAnonymousClass.class, basefield).field(com.helger.jcodemodel.JMod.PRIVATE, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|14", com.helger.jcodemodel.AbstractJClass.class, aspect), "valueHolder"));
        final com.helger.jcodemodel.JMethod initfield = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|19", com.helger.jcodemodel.JMethod.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JAnonymousClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|16", com.helger.jcodemodel.JAnonymousClass.class, basefield).method(com.helger.jcodemodel.JMod.PROTECTED, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JPrimitiveType>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|18", com.helger.jcodemodel.JPrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|17", com.helger.jcodemodel.JCodeModel.class, generator).VOID), "initialize"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|30", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|21", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|20", com.helger.jcodemodel.JMethod.class, initfield).body()).assign(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JFieldVar>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|22", com.helger.jcodemodel.JFieldVar.class, apectfield), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|29", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|27", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|24", com.helger.jcodemodel.JInvocation.class, com.helger.jcodemodel.JExpr._new(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|23", com.helger.jcodemodel.AbstractJClass.class, aspect))).arg(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.IJExpression>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|26", com.helger.jcodemodel.IJExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|25", com.helger.jcodemodel.AbstractJClass.class, jtype).dotclass()))).arg(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JAtom>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|28", com.helger.jcodemodel.JAtom.class, com.helger.jcodemodel.JExpr._null())))));
        final com.helger.jcodemodel.JDefinedClass cls = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|32", com.helger.jcodemodel.JDefinedClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|31", com.helger.jcodemodel.JCodeModel.class, generator)._class(com.helger.jcodemodel.JMod.PUBLIC, "TestClass1Impl"));
        final com.helger.jcodemodel.JMethod m = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|36", com.helger.jcodemodel.JMethod.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|33", com.helger.jcodemodel.JDefinedClass.class, cls).method(com.helger.jcodemodel.JMod.PUBLIC, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JPrimitiveType>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|35", com.helger.jcodemodel.JPrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|34", com.helger.jcodemodel.JCodeModel.class, generator).VOID), "foo"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|42", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|38", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|37", com.helger.jcodemodel.JMethod.class, m).body()).decl(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|39", com.helger.jcodemodel.AbstractJClass.class, abstractFieldClass), "_testField", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|41", com.helger.jcodemodel.JInvocation.class, com.helger.jcodemodel.JExpr._new(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JAnonymousClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|40", com.helger.jcodemodel.JAnonymousClass.class, basefield)))));
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue31FuncTest|test()|43", com.helger.jcodemodel.JCodeModel.class, generator));
    }
}

