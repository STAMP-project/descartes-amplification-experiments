/**
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
 * Portions Copyright 2013-2018 Philip Helger + contributors
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
 * or packager/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at packager/legal/LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */
package com.helger.jcodemodel;


/**
 * Test class for class {@link JLambdaMethodRef}.
 *
 * @author Philip Helger
 */
public final class JLambdaMethodRefTest {
    @org.junit.Test
    public void testStaticMethodRef_Name() {
        final com.helger.jcodemodel.JCodeModel cm = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|0", com.helger.jcodemodel.JCodeModel.class, new com.helger.jcodemodel.JCodeModel());
        final com.helger.jcodemodel.JLambdaMethodRef aLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|3", com.helger.jcodemodel.JLambdaMethodRef.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|2", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|1", com.helger.jcodemodel.JCodeModel.class, cm).ref(java.lang.Object.class)).methodRef("toString"));
        org.junit.Assert.assertEquals("java.lang.Object::toString", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|5", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|4", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|6", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).isStaticRef()));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|9", com.helger.jcodemodel.JMethod.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|8", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).method()));
        org.junit.Assert.assertSame(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|11", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|10", com.helger.jcodemodel.JCodeModel.class, cm).ref(java.lang.Object.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJType>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|13", com.helger.jcodemodel.AbstractJType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|12", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).type()));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|15", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|14", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).var()));
        org.junit.Assert.assertEquals("toString", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_Name()|16", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).methodName()));
    }

    @org.junit.Test
    public void testStaticMethodRef_JMethod() throws com.helger.jcodemodel.JClassAlreadyExistsException {
        final com.helger.jcodemodel.JCodeModel cm = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|0", com.helger.jcodemodel.JCodeModel.class, new com.helger.jcodemodel.JCodeModel());
        final com.helger.jcodemodel.JDefinedClass cl = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|2", com.helger.jcodemodel.JDefinedClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|1", com.helger.jcodemodel.JCodeModel.class, cm)._class("com.helger.test.LambdaTest"));
        final com.helger.jcodemodel.JMethod m = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|6", com.helger.jcodemodel.JMethod.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|3", com.helger.jcodemodel.JDefinedClass.class, cl).method(((com.helger.jcodemodel.JMod.PUBLIC) | (com.helger.jcodemodel.JMod.STATIC)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|5", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|4", com.helger.jcodemodel.JCodeModel.class, cm).ref(java.lang.String.class)), "myToString"));
        final com.helger.jcodemodel.JVar p = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|8", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|7", com.helger.jcodemodel.JMethod.class, m).param(java.lang.Object.class, "obj"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JReturn>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|16", com.helger.jcodemodel.JReturn.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|10", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|9", com.helger.jcodemodel.JMethod.class, m).body())._return(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|15", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|13", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|12", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|11", com.helger.jcodemodel.JCodeModel.class, cm).ref(java.lang.String.class)).staticInvoke("valueOf")).arg(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|14", com.helger.jcodemodel.JVar.class, p)))));
        final com.helger.jcodemodel.JLambdaMethodRef aLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|18", com.helger.jcodemodel.JLambdaMethodRef.class, new com.helger.jcodemodel.JLambdaMethodRef(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|17", com.helger.jcodemodel.JMethod.class, m)));
        org.junit.Assert.assertEquals("com.helger.test.LambdaTest::myToString", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|20", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|19", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|21", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).isStaticRef()));
        org.junit.Assert.assertSame(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|23", com.helger.jcodemodel.JMethod.class, m), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|25", com.helger.jcodemodel.JMethod.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|24", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).method()));
        org.junit.Assert.assertSame(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|26", com.helger.jcodemodel.JDefinedClass.class, cl), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJType>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|28", com.helger.jcodemodel.AbstractJType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|27", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).type()));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|30", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|29", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).var()));
        org.junit.Assert.assertEquals("myToString", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|32", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|31", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).methodName()));
        // Modify original method
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|33", com.helger.jcodemodel.JMethod.class, m).name("newName");
        org.junit.Assert.assertEquals("com.helger.test.LambdaTest::newName", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|35", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|34", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|37", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|36", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).isStaticRef()));
        org.junit.Assert.assertSame(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|38", com.helger.jcodemodel.JMethod.class, m), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|40", com.helger.jcodemodel.JMethod.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|39", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).method()));
        org.junit.Assert.assertSame(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|41", com.helger.jcodemodel.JDefinedClass.class, cl), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJType>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|43", com.helger.jcodemodel.AbstractJType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|42", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).type()));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|45", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|44", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).var()));
        org.junit.Assert.assertEquals("newName", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|47", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_JMethod()|46", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).methodName()));
    }

    @org.junit.Test
    public void testStaticMethodRef_New() throws com.helger.jcodemodel.JClassAlreadyExistsException {
        final com.helger.jcodemodel.JCodeModel cm = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|0", com.helger.jcodemodel.JCodeModel.class, new com.helger.jcodemodel.JCodeModel());
        final com.helger.jcodemodel.JDefinedClass cl = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|2", com.helger.jcodemodel.JDefinedClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|1", com.helger.jcodemodel.JCodeModel.class, cm)._class("com.helger.test.LambdaTest"));
        final com.helger.jcodemodel.JLambdaMethodRef aLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|4", com.helger.jcodemodel.JLambdaMethodRef.class, new com.helger.jcodemodel.JLambdaMethodRef(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|3", com.helger.jcodemodel.JDefinedClass.class, cl)));
        org.junit.Assert.assertEquals("com.helger.test.LambdaTest::new", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|6", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|5", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|7", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).isStaticRef()));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|10", com.helger.jcodemodel.JMethod.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|9", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).method()));
        org.junit.Assert.assertSame(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|11", com.helger.jcodemodel.JDefinedClass.class, cl), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJType>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|13", com.helger.jcodemodel.AbstractJType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|12", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).type()));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|15", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|14", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).var()));
        org.junit.Assert.assertEquals("new", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testStaticMethodRef_New()|16", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).methodName()));
    }

    @org.junit.Test
    public void testInstanceMethodRef_Name() {
        final com.helger.jcodemodel.JCodeModel cm = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|0", com.helger.jcodemodel.JCodeModel.class, new com.helger.jcodemodel.JCodeModel());
        final com.helger.jcodemodel.JBlock aBlock = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|1", com.helger.jcodemodel.JBlock.class, new com.helger.jcodemodel.JBlock());
        final com.helger.jcodemodel.JVar aVar = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|5", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|2", com.helger.jcodemodel.JBlock.class, aBlock).decl(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJType>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|4", com.helger.jcodemodel.AbstractJType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|3", com.helger.jcodemodel.JCodeModel.class, cm)._ref(java.lang.Object.class)), "aObj"));
        final com.helger.jcodemodel.JLambdaMethodRef aLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|7", com.helger.jcodemodel.JLambdaMethodRef.class, new com.helger.jcodemodel.JLambdaMethodRef(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|6", com.helger.jcodemodel.JVar.class, aVar), "toString"));
        org.junit.Assert.assertEquals("aObj::toString", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|9", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|8", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|10", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).isStaticRef()));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|13", com.helger.jcodemodel.JMethod.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|12", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).method()));
        org.junit.Assert.assertSame(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJType>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|15", com.helger.jcodemodel.AbstractJType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|14", com.helger.jcodemodel.JCodeModel.class, cm)._ref(java.lang.Object.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJType>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|17", com.helger.jcodemodel.AbstractJType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|16", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).type()));
        org.junit.Assert.assertSame(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|18", com.helger.jcodemodel.JVar.class, aVar), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|20", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|19", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).var()));
        org.junit.Assert.assertEquals("toString", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_Name()|21", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).methodName()));
    }

    @org.junit.Test
    public void testInstanceMethodRef_JMethod() throws com.helger.jcodemodel.JClassAlreadyExistsException {
        final com.helger.jcodemodel.JCodeModel cm = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|0", com.helger.jcodemodel.JCodeModel.class, new com.helger.jcodemodel.JCodeModel());
        final com.helger.jcodemodel.JDefinedClass cl = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|2", com.helger.jcodemodel.JDefinedClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|1", com.helger.jcodemodel.JCodeModel.class, cm)._class("com.helger.test.LambdaTest"));
        final com.helger.jcodemodel.JMethod m = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|6", com.helger.jcodemodel.JMethod.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|3", com.helger.jcodemodel.JDefinedClass.class, cl).method(com.helger.jcodemodel.JMod.PUBLIC, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|5", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|4", com.helger.jcodemodel.JCodeModel.class, cm).ref(java.lang.String.class)), "myToString"));
        final com.helger.jcodemodel.JVar p = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|8", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|7", com.helger.jcodemodel.JMethod.class, m).param(java.lang.Object.class, "obj"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JReturn>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|16", com.helger.jcodemodel.JReturn.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|10", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|9", com.helger.jcodemodel.JMethod.class, m).body())._return(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|15", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|13", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|12", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|11", com.helger.jcodemodel.JCodeModel.class, cm).ref(java.lang.String.class)).staticInvoke("valueOf")).arg(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|14", com.helger.jcodemodel.JVar.class, p)))));
        final com.helger.jcodemodel.JBlock aBlock = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|17", com.helger.jcodemodel.JBlock.class, new com.helger.jcodemodel.JBlock());
        final com.helger.jcodemodel.JVar aVar = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|20", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|18", com.helger.jcodemodel.JBlock.class, aBlock).decl(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|19", com.helger.jcodemodel.JDefinedClass.class, cl), "aObj"));
        final com.helger.jcodemodel.JLambdaMethodRef aLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|23", com.helger.jcodemodel.JLambdaMethodRef.class, new com.helger.jcodemodel.JLambdaMethodRef(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|21", com.helger.jcodemodel.JVar.class, aVar), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|22", com.helger.jcodemodel.JMethod.class, m)));
        org.junit.Assert.assertEquals("aObj::myToString", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|25", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|24", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|26", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).isStaticRef()));
        org.junit.Assert.assertSame(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|28", com.helger.jcodemodel.JMethod.class, m), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|30", com.helger.jcodemodel.JMethod.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|29", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).method()));
        org.junit.Assert.assertSame(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|31", com.helger.jcodemodel.JDefinedClass.class, cl), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJType>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|33", com.helger.jcodemodel.AbstractJType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|32", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).type()));
        org.junit.Assert.assertSame(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|34", com.helger.jcodemodel.JVar.class, aVar), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|36", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|35", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).var()));
        org.junit.Assert.assertEquals("myToString", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|38", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInstanceMethodRef_JMethod()|37", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda).methodName()));
    }

    @org.junit.Test
    public void testInvocationMethodRef_Name() throws com.helger.jcodemodel.JClassAlreadyExistsException {
        final com.helger.jcodemodel.JCodeModel cm = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|0", com.helger.jcodemodel.JCodeModel.class, new com.helger.jcodemodel.JCodeModel());
        final com.helger.jcodemodel.JDefinedClass cl = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|2", com.helger.jcodemodel.JDefinedClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|1", com.helger.jcodemodel.JCodeModel.class, cm)._class("com.helger.test.LambdaInvocationMethodRefName"));
        final com.helger.jcodemodel.JLambdaMethodRef lambdaMethod = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|5", com.helger.jcodemodel.JLambdaMethodRef.class, new com.helger.jcodemodel.JLambdaMethodRef(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|4", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|3", com.helger.jcodemodel.JCodeModel.class, cm).ref("test.Person")), "getFirstName"));
        final com.helger.jcodemodel.JInvocation jInvocation = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|9", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|7", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JAtom>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|6", com.helger.jcodemodel.JAtom.class, com.helger.jcodemodel.JExpr._this()).invoke("andThen")).arg(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|8", com.helger.jcodemodel.JLambdaMethodRef.class, lambdaMethod)));
        final com.helger.jcodemodel.JLambdaMethodRef aLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|11", com.helger.jcodemodel.JLambdaMethodRef.class, new com.helger.jcodemodel.JLambdaMethodRef(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|10", com.helger.jcodemodel.JInvocation.class, jInvocation), "apply"));
        org.junit.Assert.assertEquals("this.andThen(test.Person::getFirstName)::apply", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|13", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|12", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda))));
        final com.helger.jcodemodel.JMethod con = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|15", com.helger.jcodemodel.JMethod.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|14", com.helger.jcodemodel.JDefinedClass.class, cl).constructor(com.helger.jcodemodel.JMod.PUBLIC));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|21", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|17", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|16", com.helger.jcodemodel.JMethod.class, con).body()).decl(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|19", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|18", com.helger.jcodemodel.JCodeModel.class, cm).ref(java.lang.Object.class)), "any", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|20", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda)));
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_Name()|22", com.helger.jcodemodel.JCodeModel.class, cm));
    }

    @org.junit.Test
    public void testInvocationMethodRef_JMethod() throws com.helger.jcodemodel.JClassAlreadyExistsException {
        final com.helger.jcodemodel.JCodeModel cm = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|0", com.helger.jcodemodel.JCodeModel.class, new com.helger.jcodemodel.JCodeModel());
        final com.helger.jcodemodel.JDefinedClass cl = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|2", com.helger.jcodemodel.JDefinedClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|1", com.helger.jcodemodel.JCodeModel.class, cm)._class("com.helger.test.LambdaInvocationMethodRefJMethod"));
        final com.helger.jcodemodel.JMethod m = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|6", com.helger.jcodemodel.JMethod.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|3", com.helger.jcodemodel.JDefinedClass.class, cl).method(com.helger.jcodemodel.JMod.PUBLIC, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|5", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|4", com.helger.jcodemodel.JCodeModel.class, cm).ref(java.lang.String.class)), "myToString"));
        final com.helger.jcodemodel.JVar p = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|8", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|7", com.helger.jcodemodel.JMethod.class, m).param(java.lang.Object.class, "obj"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JReturn>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|16", com.helger.jcodemodel.JReturn.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|10", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|9", com.helger.jcodemodel.JMethod.class, m).body())._return(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|15", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|13", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|12", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|11", com.helger.jcodemodel.JCodeModel.class, cm).ref(java.lang.String.class)).staticInvoke("valueOf")).arg(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|14", com.helger.jcodemodel.JVar.class, p)))));
        final com.helger.jcodemodel.JLambdaMethodRef lambdaMethod = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|19", com.helger.jcodemodel.JLambdaMethodRef.class, new com.helger.jcodemodel.JLambdaMethodRef(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|18", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|17", com.helger.jcodemodel.JCodeModel.class, cm).ref("test.Person")), "getFirstName"));
        final com.helger.jcodemodel.JInvocation jInvocation = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|23", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|21", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JAtom>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|20", com.helger.jcodemodel.JAtom.class, com.helger.jcodemodel.JExpr._this()).invoke("andThen")).arg(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|22", com.helger.jcodemodel.JLambdaMethodRef.class, lambdaMethod)));
        final com.helger.jcodemodel.JLambdaMethodRef aLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|26", com.helger.jcodemodel.JLambdaMethodRef.class, new com.helger.jcodemodel.JLambdaMethodRef(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|24", com.helger.jcodemodel.JInvocation.class, jInvocation), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|25", com.helger.jcodemodel.JMethod.class, m)));
        org.junit.Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|28", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|27", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda))));
        final com.helger.jcodemodel.JMethod con = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|30", com.helger.jcodemodel.JMethod.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|29", com.helger.jcodemodel.JDefinedClass.class, cl).constructor(com.helger.jcodemodel.JMod.PUBLIC));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|36", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|32", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|31", com.helger.jcodemodel.JMethod.class, con).body()).decl(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|34", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|33", com.helger.jcodemodel.JCodeModel.class, cm).ref(java.lang.Object.class)), "any", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|35", com.helger.jcodemodel.JLambdaMethodRef.class, aLambda)));
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaMethodRefTest|testInvocationMethodRef_JMethod()|37", com.helger.jcodemodel.JCodeModel.class, cm));
    }
}

