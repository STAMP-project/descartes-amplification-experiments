/**
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
 * Portions Copyright 2013-2018 Philip Helger + contributors
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
 * or packager/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at packager/legal/LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */
package com.helger.jcodemodel;


/**
 * Test class for class {@link JLambda}.
 *
 * @author Philip Helger
 */
public final class JLambdaTest {
    private static final java.lang.String CRLF = com.helger.jcodemodel.writer.JCMWriter.getDefaultNewLine();

    @org.junit.Test
    public void testExpressionBasic() {
        final com.helger.jcodemodel.JLambda aLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic()|0", com.helger.jcodemodel.JLambda.class, new com.helger.jcodemodel.JLambda());
        final com.helger.jcodemodel.JLambdaParam aParam = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic()|2", com.helger.jcodemodel.JLambdaParam.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic()|1", com.helger.jcodemodel.JLambda.class, aLambda).addParam("x"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaBlock>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic()|4", com.helger.jcodemodel.JLambdaBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic()|3", com.helger.jcodemodel.JLambda.class, aLambda).body()).lambdaExpr(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.IJExpression>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic()|6", com.helger.jcodemodel.IJExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic()|5", com.helger.jcodemodel.JLambdaParam.class, aParam).mul(2)));
        org.junit.Assert.assertEquals("x -> (x* 2)", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaTest|testExpressionBasic()|8", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic()|7", com.helger.jcodemodel.JLambda.class, aLambda))));
    }

    @org.junit.Test
    public void testExpressionNoParam() {
        final com.helger.jcodemodel.JLambda aLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionNoParam()|0", com.helger.jcodemodel.JLambda.class, new com.helger.jcodemodel.JLambda());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaBlock>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionNoParam()|2", com.helger.jcodemodel.JLambdaBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionNoParam()|1", com.helger.jcodemodel.JLambda.class, aLambda).body()).lambdaExpr(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JAtomInt>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionNoParam()|3", com.helger.jcodemodel.JAtomInt.class, com.helger.jcodemodel.JExpr.lit(2)));
        org.junit.Assert.assertEquals("() ->  2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaTest|testExpressionNoParam()|5", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionNoParam()|4", com.helger.jcodemodel.JLambda.class, aLambda))));
    }

    @org.junit.Test
    public void testExpressionBasicType() {
        final com.helger.jcodemodel.JCodeModel cm = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType()|0", com.helger.jcodemodel.JCodeModel.class, new com.helger.jcodemodel.JCodeModel());
        final com.helger.jcodemodel.JLambda aLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType()|1", com.helger.jcodemodel.JLambda.class, new com.helger.jcodemodel.JLambda());
        final com.helger.jcodemodel.JLambdaParam aParam = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType()|5", com.helger.jcodemodel.JLambdaParam.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType()|2", com.helger.jcodemodel.JLambda.class, aLambda).addParam(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JPrimitiveType>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType()|4", com.helger.jcodemodel.JPrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType()|3", com.helger.jcodemodel.JCodeModel.class, cm).INT), "x"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaBlock>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType()|7", com.helger.jcodemodel.JLambdaBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType()|6", com.helger.jcodemodel.JLambda.class, aLambda).body()).lambdaExpr(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.IJExpression>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType()|9", com.helger.jcodemodel.IJExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType()|8", com.helger.jcodemodel.JLambdaParam.class, aParam).mul(2)));
        org.junit.Assert.assertEquals("(int x) -> (x* 2)", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType()|11", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType()|10", com.helger.jcodemodel.JLambda.class, aLambda))));
    }

    @org.junit.Test
    public void testExpressionBasic2() {
        final com.helger.jcodemodel.JLambda aLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic2()|0", com.helger.jcodemodel.JLambda.class, new com.helger.jcodemodel.JLambda());
        final com.helger.jcodemodel.JLambdaParam aParam1 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic2()|2", com.helger.jcodemodel.JLambdaParam.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic2()|1", com.helger.jcodemodel.JLambda.class, aLambda).addParam("x"));
        final com.helger.jcodemodel.JLambdaParam aParam2 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic2()|4", com.helger.jcodemodel.JLambdaParam.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic2()|3", com.helger.jcodemodel.JLambda.class, aLambda).addParam("y"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaBlock>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic2()|6", com.helger.jcodemodel.JLambdaBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic2()|5", com.helger.jcodemodel.JLambda.class, aLambda).body()).lambdaExpr(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.IJExpression>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic2()|9", com.helger.jcodemodel.IJExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic2()|7", com.helger.jcodemodel.JLambdaParam.class, aParam1).plus(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic2()|8", com.helger.jcodemodel.JLambdaParam.class, aParam2))));
        org.junit.Assert.assertEquals("(x, y) -> (x + y)", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaTest|testExpressionBasic2()|11", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasic2()|10", com.helger.jcodemodel.JLambda.class, aLambda))));
    }

    @org.junit.Test
    public void testExpressionBasicType2() {
        final com.helger.jcodemodel.JCodeModel cm = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|0", com.helger.jcodemodel.JCodeModel.class, new com.helger.jcodemodel.JCodeModel());
        final com.helger.jcodemodel.JLambda aLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|1", com.helger.jcodemodel.JLambda.class, new com.helger.jcodemodel.JLambda());
        final com.helger.jcodemodel.JLambdaParam aParam1 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|5", com.helger.jcodemodel.JLambdaParam.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|2", com.helger.jcodemodel.JLambda.class, aLambda).addParam(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JPrimitiveType>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|4", com.helger.jcodemodel.JPrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|3", com.helger.jcodemodel.JCodeModel.class, cm).INT), "x"));
        final com.helger.jcodemodel.JLambdaParam aParam2 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|9", com.helger.jcodemodel.JLambdaParam.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|6", com.helger.jcodemodel.JLambda.class, aLambda).addParam(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JPrimitiveType>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|8", com.helger.jcodemodel.JPrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|7", com.helger.jcodemodel.JCodeModel.class, cm).BYTE), "y"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaBlock>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|11", com.helger.jcodemodel.JLambdaBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|10", com.helger.jcodemodel.JLambda.class, aLambda).body()).lambdaExpr(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.IJExpression>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|14", com.helger.jcodemodel.IJExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|12", com.helger.jcodemodel.JLambdaParam.class, aParam1).plus(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|13", com.helger.jcodemodel.JLambdaParam.class, aParam2))));
        org.junit.Assert.assertEquals("(int x, byte y) -> (x + y)", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|16", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testExpressionBasicType2()|15", com.helger.jcodemodel.JLambda.class, aLambda))));
    }

    @org.junit.Test
    public void testStatementBasicType() {
        final com.helger.jcodemodel.JCodeModel cm = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaTest|testStatementBasicType()|0", com.helger.jcodemodel.JCodeModel.class, new com.helger.jcodemodel.JCodeModel());
        final com.helger.jcodemodel.JLambda aLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testStatementBasicType()|1", com.helger.jcodemodel.JLambda.class, new com.helger.jcodemodel.JLambda());
        final com.helger.jcodemodel.JLambdaParam aParam = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testStatementBasicType()|5", com.helger.jcodemodel.JLambdaParam.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testStatementBasicType()|2", com.helger.jcodemodel.JLambda.class, aLambda).addParam(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JPrimitiveType>observeState("com.helger.jcodemodel.JLambdaTest|testStatementBasicType()|4", com.helger.jcodemodel.JPrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaTest|testStatementBasicType()|3", com.helger.jcodemodel.JCodeModel.class, cm).INT), "x"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JReturn>observeState("com.helger.jcodemodel.JLambdaTest|testStatementBasicType()|10", com.helger.jcodemodel.JReturn.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaBlock>observeState("com.helger.jcodemodel.JLambdaTest|testStatementBasicType()|7", com.helger.jcodemodel.JLambdaBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testStatementBasicType()|6", com.helger.jcodemodel.JLambda.class, aLambda).body())._return(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.IJExpression>observeState("com.helger.jcodemodel.JLambdaTest|testStatementBasicType()|9", com.helger.jcodemodel.IJExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testStatementBasicType()|8", com.helger.jcodemodel.JLambdaParam.class, aParam).plus(1))));
        org.junit.Assert.assertEquals(((((("(int x) -> {" + (com.helger.jcodemodel.JLambdaTest.CRLF)) + "    return (x + 1);") + (com.helger.jcodemodel.JLambdaTest.CRLF)) + "}") + (com.helger.jcodemodel.JLambdaTest.CRLF)), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaTest|testStatementBasicType()|12", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testStatementBasicType()|11", com.helger.jcodemodel.JLambda.class, aLambda))));
    }

    @org.junit.Test
    public void testIssue62() {
        final com.helger.jcodemodel.JCodeModel cm = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|0", com.helger.jcodemodel.JCodeModel.class, new com.helger.jcodemodel.JCodeModel());
        final com.helger.jcodemodel.JVar holder = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|4", com.helger.jcodemodel.JVar.class, new com.helger.jcodemodel.JVar(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMods>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|1", com.helger.jcodemodel.JMods.class, com.helger.jcodemodel.JMods.forVar(0)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|3", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|2", com.helger.jcodemodel.JCodeModel.class, cm).ref(java.lang.Object.class)), "a", null));
        final com.helger.jcodemodel.JLambda aLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|5", com.helger.jcodemodel.JLambda.class, new com.helger.jcodemodel.JLambda());
        final com.helger.jcodemodel.JLambdaParam arr = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|7", com.helger.jcodemodel.JLambdaParam.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|6", com.helger.jcodemodel.JLambda.class, aLambda).addParam("arr"));
        final com.helger.jcodemodel.JBlock setBody = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|12", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JSynchronizedBlock>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|11", com.helger.jcodemodel.JSynchronizedBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaBlock>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|9", com.helger.jcodemodel.JLambdaBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|8", com.helger.jcodemodel.JLambda.class, aLambda).body()).synchronizedBlock(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|10", com.helger.jcodemodel.JVar.class, holder))).body());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|21", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|13", com.helger.jcodemodel.JBlock.class, setBody).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|20", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|17", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|16", com.helger.jcodemodel.JInvocation.class, com.helger.jcodemodel.JExpr.invoke(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|14", com.helger.jcodemodel.JCodeModel.class, cm), eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|15", com.helger.jcodemodel.JVar.class, holder), "entrySet")).invoke("retainAll")).arg(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|19", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|18", com.helger.jcodemodel.JLambdaParam.class, arr).invoke("entrySet"))))));
        org.junit.Assert.assertEquals(((((((((((("arr -> {" + (com.helger.jcodemodel.JLambdaTest.CRLF)) + "    synchronized (a)") + (com.helger.jcodemodel.JLambdaTest.CRLF)) + "    {") + (com.helger.jcodemodel.JLambdaTest.CRLF)) + "        a.entrySet().retainAll(arr.entrySet());") + (com.helger.jcodemodel.JLambdaTest.CRLF)) + "    }") + (com.helger.jcodemodel.JLambdaTest.CRLF)) + "}") + (com.helger.jcodemodel.JLambdaTest.CRLF)), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.helger.jcodemodel.JLambdaTest|testIssue62()|23", com.helger.jcodemodel.util.CodeModelTestsHelper.toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.JLambdaTest|testIssue62()|22", com.helger.jcodemodel.JLambda.class, aLambda))));
    }
}

