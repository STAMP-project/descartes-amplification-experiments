/**
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
 * Portions Copyright 2013-2018 Philip Helger + contributors
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
 * or packager/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at packager/legal/LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */
package com.helger.jcodemodel.supplementary.issues;


/**
 * Test for https://github.com/phax/jcodemodel/issues/53
 *
 * @author Philip Helger
 */
public final class Issue53FuncTest {
    @org.junit.Test
    public void testIssue() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel generator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|0", com.helger.jcodemodel.JCodeModel.class, new com.helger.jcodemodel.JCodeModel());
        final com.helger.jcodemodel.JDefinedClass aInterface = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|3", com.helger.jcodemodel.JDefinedClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JPackage>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|2", com.helger.jcodemodel.JPackage.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|1", com.helger.jcodemodel.JCodeModel.class, generator)._package("issue53"))._interface("ITest"));
        final com.helger.jcodemodel.JLambdaMethodRef methodLambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|6", com.helger.jcodemodel.JLambdaMethodRef.class, new com.helger.jcodemodel.JLambdaMethodRef(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|5", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|4", com.helger.jcodemodel.JCodeModel.class, generator).ref(java.lang.String.class)), "toString"));
        com.helger.jcodemodel.JMethod method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|11", com.helger.jcodemodel.JMethod.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|7", com.helger.jcodemodel.JDefinedClass.class, aInterface).method(com.helger.jcodemodel.JMod.DEFAULT, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|10", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|9", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|8", com.helger.jcodemodel.JCodeModel.class, generator).ref(java.util.function.Supplier.class)).narrowAny()), "description"));
        {
            final com.helger.jcodemodel.JLambda lambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|17", com.helger.jcodemodel.JLambda.class, com.helger.jcodemodel.JLambda.simple(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|16", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|14", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|13", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JAtom>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|12", com.helger.jcodemodel.JAtom.class, com.helger.jcodemodel.JExpr._this()).invoke("getValueProvider")).invoke("andThen")).arg(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|15", com.helger.jcodemodel.JLambdaMethodRef.class, methodLambda)))));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JReturn>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|21", com.helger.jcodemodel.JReturn.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|19", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|18", com.helger.jcodemodel.JMethod.class, method).body())._return(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|20", com.helger.jcodemodel.JLambda.class, lambda)));
        }
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|26", com.helger.jcodemodel.JMethod.class, (method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|22", com.helger.jcodemodel.JDefinedClass.class, aInterface).method(com.helger.jcodemodel.JMod.DEFAULT, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JNarrowedClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|25", com.helger.jcodemodel.JNarrowedClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|24", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|23", com.helger.jcodemodel.JCodeModel.class, generator).ref(java.util.function.Supplier.class)).narrow(java.lang.String.class)), "description2")));
        {
            final com.helger.jcodemodel.JLambda lambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|27", com.helger.jcodemodel.JLambda.class, new com.helger.jcodemodel.JLambda());
            final com.helger.jcodemodel.JLambdaParam aParam = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|29", com.helger.jcodemodel.JLambdaParam.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|28", com.helger.jcodemodel.JLambda.class, lambda).addParam("xx"));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaBlock>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|31", com.helger.jcodemodel.JLambdaBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|30", com.helger.jcodemodel.JLambda.class, lambda).body()).lambdaExpr(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|36", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|34", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|33", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|32", com.helger.jcodemodel.JLambdaParam.class, aParam).invoke("getValueProvider")).invoke("andThen")).arg(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|35", com.helger.jcodemodel.JLambdaMethodRef.class, methodLambda))));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JReturn>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|40", com.helger.jcodemodel.JReturn.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|38", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|37", com.helger.jcodemodel.JMethod.class, method).body())._return(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|39", com.helger.jcodemodel.JLambda.class, lambda)));
        }
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|44", com.helger.jcodemodel.JMethod.class, (method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JDefinedClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|41", com.helger.jcodemodel.JDefinedClass.class, aInterface).method(com.helger.jcodemodel.JMod.DEFAULT, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JPrimitiveType>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|43", com.helger.jcodemodel.JPrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|42", com.helger.jcodemodel.JCodeModel.class, generator).VOID), "description3")));
        {
            final com.helger.jcodemodel.JVar l1 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|56", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|46", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|45", com.helger.jcodemodel.JMethod.class, method).body()).decl(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|49", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|48", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|47", com.helger.jcodemodel.JCodeModel.class, generator).ref(java.util.function.Supplier.class)).narrowAny()), "x1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|55", com.helger.jcodemodel.JLambda.class, com.helger.jcodemodel.JLambda.simple(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|54", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|52", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|51", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JAtom>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|50", com.helger.jcodemodel.JAtom.class, com.helger.jcodemodel.JExpr._this()).invoke("getValueProvider")).invoke("andThen")).arg(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|53", com.helger.jcodemodel.JLambdaMethodRef.class, methodLambda)))))));
            final com.helger.jcodemodel.JLambda lambda = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|57", com.helger.jcodemodel.JLambda.class, new com.helger.jcodemodel.JLambda());
            final com.helger.jcodemodel.JLambdaParam aParam = eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|59", com.helger.jcodemodel.JLambdaParam.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|58", com.helger.jcodemodel.JLambda.class, lambda).addParam("xx"));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaBlock>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|61", com.helger.jcodemodel.JLambdaBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|60", com.helger.jcodemodel.JLambda.class, lambda).body()).lambdaExpr(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|66", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|64", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|63", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaParam>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|62", com.helger.jcodemodel.JLambdaParam.class, aParam).invoke("getValueProvider")).invoke("andThen")).arg(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambdaMethodRef>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|65", com.helger.jcodemodel.JLambdaMethodRef.class, methodLambda))));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|72", com.helger.jcodemodel.JVar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|68", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|67", com.helger.jcodemodel.JMethod.class, method).body()).decl(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.AbstractJClass>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|70", com.helger.jcodemodel.AbstractJClass.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|69", com.helger.jcodemodel.JCodeModel.class, generator).ref(java.lang.Object.class)), "x2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JLambda>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|71", com.helger.jcodemodel.JLambda.class, lambda)));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|77", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JBlock>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|74", com.helger.jcodemodel.JBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JMethod>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|73", com.helger.jcodemodel.JMethod.class, method).body()).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JInvocation>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|76", com.helger.jcodemodel.JInvocation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JVar>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|75", com.helger.jcodemodel.JVar.class, l1).invoke("get"))));
        }
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(eu.stamp_project.reneri.instrumentation.StateObserver.<com.helger.jcodemodel.JCodeModel>observeState("com.helger.jcodemodel.supplementary.issues.Issue53FuncTest|testIssue()|78", com.helger.jcodemodel.JCodeModel.class, generator));
    }
}

