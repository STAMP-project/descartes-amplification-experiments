package net.tridentsdk.base;


public class PositionTest {
    private final net.tridentsdk.world.World world = org.mockito.Mockito.mock(net.tridentsdk.world.World.class);

    @org.junit.Test(timeout = 10000)
    public void testEqualsHashString_mg30() throws java.lang.Exception {
        double __DSPOT_z_20 = 0.051457110693323704;
        double __DSPOT_y_19 = 0.8345203414162411;
        double __DSPOT_x_18 = 0.7143396899237634;
        net.tridentsdk.base.Position p0 = new net.tridentsdk.base.Position(this.world);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals("Position{null, (0.000000, 0.000000, 0.000000), pitch=0.000000, yaw=0.000000}", ((net.tridentsdk.base.Position) (p0)).toString());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p0)).getX())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p0)).getY())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p0)).getZ())), 0.1);
        net.tridentsdk.base.Position p1 = new net.tridentsdk.base.Position(this.world);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals("Position{null, (0.000000, 0.000000, 0.000000), pitch=0.000000, yaw=0.000000}", ((net.tridentsdk.base.Position) (p1)).toString());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p1)).getX())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p1)).getY())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p1)).getZ())), 0.1);
        net.tridentsdk.base.Vector vector = net.tridentsdk.base.VectorsTest.rand();
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntZ())));
        p0 = p0.set(vector.getX(), vector.getY(), vector.getZ());
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        p1 = p1.set(vector.getX(), vector.getY(), vector.getZ());
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        net.tridentsdk.base.Vector o_testEqualsHashString_mg30__20 = net.tridentsdk.base.VectorsTest.rand();
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__20)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__20)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__20)).getIntZ())));
        p0.hashCode();
        p1.hashCode();
        p0.toString();
        p1.toString();
        net.tridentsdk.base.Vector o_testEqualsHashString_mg30__25 = vector.set(__DSPOT_x_18, __DSPOT_y_19, __DSPOT_z_20);
        org.junit.Assert.assertEquals(1.0997059730122243, ((double) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__25)).getMagnitude())), 0.1);
        org.junit.Assert.assertEquals(1.209353227078763, ((double) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__25)).getMagnitudeSquared())), 0.1);
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__25)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__25)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__25)).getIntZ())));
        org.junit.Assert.assertEquals(0.7143396899237634, ((double) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__25)).getX())), 0.1);
        org.junit.Assert.assertEquals(0.8345203414162411, ((double) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__25)).getY())), 0.1);
        org.junit.Assert.assertEquals(0.051457110693323704, ((double) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__25)).getZ())), 0.1);
        org.junit.Assert.assertEquals("Vector{0.7143396899237634,0.8345203414162411,0.051457110693323704}", ((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__25)).toString());
        org.junit.Assert.assertEquals(1980492611, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__25)).hashCode())));
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntZ())));
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__20)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__20)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg30__20)).getIntZ())));
    }

    @org.junit.Test(timeout = 10000)
    public void testEqualsHashString_mg19() throws java.lang.Exception {
        double __DSPOT_y_6 = 0.5532958040309855;
        net.tridentsdk.base.Position p0 = new net.tridentsdk.base.Position(this.world);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals("Position{null, (0.000000, 0.000000, 0.000000), pitch=0.000000, yaw=0.000000}", ((net.tridentsdk.base.Position) (p0)).toString());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p0)).getX())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p0)).getY())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p0)).getZ())), 0.1);
        net.tridentsdk.base.Position p1 = new net.tridentsdk.base.Position(this.world);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals("Position{null, (0.000000, 0.000000, 0.000000), pitch=0.000000, yaw=0.000000}", ((net.tridentsdk.base.Position) (p1)).toString());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p1)).getX())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p1)).getY())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p1)).getZ())), 0.1);
        net.tridentsdk.base.Vector vector = net.tridentsdk.base.VectorsTest.rand();
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntZ())));
        p0 = p0.set(vector.getX(), vector.getY(), vector.getZ());
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        p1 = p1.set(vector.getX(), vector.getY(), vector.getZ());
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        net.tridentsdk.base.Vector o_testEqualsHashString_mg19__18 = net.tridentsdk.base.VectorsTest.rand();
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg19__18)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg19__18)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg19__18)).getIntZ())));
        p0.hashCode();
        p1.hashCode();
        p0.toString();
        p1.toString();
        net.tridentsdk.base.Position o_testEqualsHashString_mg19__23 = p0.setY(__DSPOT_y_6);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg19__23)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg19__23)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (o_testEqualsHashString_mg19__23)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg19__23)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg19__23)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg19__23)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg19__23)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg19__23)).getIntZ())));
        org.junit.Assert.assertEquals(0.5532958040309855, ((double) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg19__23)).getY())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntZ())));
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg19__18)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg19__18)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg19__18)).getIntZ())));
    }

    @org.junit.Test(timeout = 10000)
    public void testEqualsHashString_mg18() throws java.lang.Exception {
        double __DSPOT_x_5 = 0.7018696454992024;
        net.tridentsdk.base.Position p0 = new net.tridentsdk.base.Position(this.world);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals("Position{null, (0.000000, 0.000000, 0.000000), pitch=0.000000, yaw=0.000000}", ((net.tridentsdk.base.Position) (p0)).toString());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p0)).getX())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p0)).getY())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p0)).getZ())), 0.1);
        net.tridentsdk.base.Position p1 = new net.tridentsdk.base.Position(this.world);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals("Position{null, (0.000000, 0.000000, 0.000000), pitch=0.000000, yaw=0.000000}", ((net.tridentsdk.base.Position) (p1)).toString());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p1)).getX())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p1)).getY())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p1)).getZ())), 0.1);
        net.tridentsdk.base.Vector vector = net.tridentsdk.base.VectorsTest.rand();
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntZ())));
        p0 = p0.set(vector.getX(), vector.getY(), vector.getZ());
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        p1 = p1.set(vector.getX(), vector.getY(), vector.getZ());
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        net.tridentsdk.base.Vector o_testEqualsHashString_mg18__18 = net.tridentsdk.base.VectorsTest.rand();
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg18__18)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg18__18)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg18__18)).getIntZ())));
        p0.hashCode();
        p1.hashCode();
        p0.toString();
        p1.toString();
        net.tridentsdk.base.Position o_testEqualsHashString_mg18__23 = p0.setX(__DSPOT_x_5);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg18__23)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg18__23)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (o_testEqualsHashString_mg18__23)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg18__23)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg18__23)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg18__23)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg18__23)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg18__23)).getIntZ())));
        org.junit.Assert.assertEquals(0.7018696454992024, ((double) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg18__23)).getX())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntZ())));
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg18__18)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg18__18)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg18__18)).getIntZ())));
    }

    @org.junit.Test(timeout = 10000)
    public void testEqualsHashString_mg21() throws java.lang.Exception {
        double __DSPOT_z_8 = 0.5565331726524437;
        net.tridentsdk.base.Position p0 = new net.tridentsdk.base.Position(this.world);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals("Position{null, (0.000000, 0.000000, 0.000000), pitch=0.000000, yaw=0.000000}", ((net.tridentsdk.base.Position) (p0)).toString());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p0)).getX())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p0)).getY())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p0)).getZ())), 0.1);
        net.tridentsdk.base.Position p1 = new net.tridentsdk.base.Position(this.world);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals("Position{null, (0.000000, 0.000000, 0.000000), pitch=0.000000, yaw=0.000000}", ((net.tridentsdk.base.Position) (p1)).toString());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p1)).getX())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p1)).getY())), 0.1);
        org.junit.Assert.assertEquals(0.0, ((double) (((net.tridentsdk.base.Position) (p1)).getZ())), 0.1);
        net.tridentsdk.base.Vector vector = net.tridentsdk.base.VectorsTest.rand();
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntZ())));
        p0 = p0.set(vector.getX(), vector.getY(), vector.getZ());
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        p1 = p1.set(vector.getX(), vector.getY(), vector.getZ());
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        net.tridentsdk.base.Vector o_testEqualsHashString_mg21__18 = net.tridentsdk.base.VectorsTest.rand();
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg21__18)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg21__18)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg21__18)).getIntZ())));
        p0.hashCode();
        p1.hashCode();
        p0.toString();
        p1.toString();
        net.tridentsdk.base.Position o_testEqualsHashString_mg21__23 = p0.setZ(__DSPOT_z_8);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg21__23)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg21__23)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (o_testEqualsHashString_mg21__23)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg21__23)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg21__23)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg21__23)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg21__23)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg21__23)).getIntZ())));
        org.junit.Assert.assertEquals(0.5565331726524437, ((double) (((net.tridentsdk.base.Position) (o_testEqualsHashString_mg21__23)).getZ())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (vector)).getIntZ())));
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p0)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p0)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p0)).getIntZ())));
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getYaw())), 0.1);
        org.junit.Assert.assertEquals(0.0F, ((float) (((net.tridentsdk.base.Position) (p1)).getPitch())), 0.1);
        org.junit.Assert.assertNull(((net.tridentsdk.base.Position) (p1)).getBlock());
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getChunkZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Position) (p1)).getIntZ())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg21__18)).getIntX())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg21__18)).getIntY())));
        org.junit.Assert.assertEquals(0, ((int) (((net.tridentsdk.base.Vector) (o_testEqualsHashString_mg21__18)).getIntZ())));
    }
}

