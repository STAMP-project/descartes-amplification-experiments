/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 31 04:32:16 GMT 2019
 */

package net.tridentsdk.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.tridentsdk.util.Int2ReferenceOpenHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Int2ReferenceOpenHashMap_ESTest extends Int2ReferenceOpenHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.put((-597), "");
      int2ReferenceOpenHashMap0.put((-1640531527), "");
      int2ReferenceOpenHashMap0.maxFill = (-1);
      String string0 = int2ReferenceOpenHashMap0.put(1507, ")");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.put((-597), "");
      int2ReferenceOpenHashMap0.maxFill = (-1);
      String string0 = int2ReferenceOpenHashMap0.put(1507, ")");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.n = 0;
      Integer integer0 = new Integer((-1));
      int2ReferenceOpenHashMap0.put(0, integer0);
      Object object0 = int2ReferenceOpenHashMap0.put(0, (Object) null);
      assertEquals((-1), object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.mask = 0;
      Object object0 = int2ReferenceOpenHashMap0.put(738, ",_'2h/^$n4qQ!'+4t*O");
      // Undeclared exception!
      int2ReferenceOpenHashMap0.put((-1863), object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      Object object0 = new Object();
      int2ReferenceOpenHashMap0.put(1, object0);
      Object object1 = int2ReferenceOpenHashMap0.put(1, (Object) null);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.mask = 0;
      int2ReferenceOpenHashMap0.put((-31), "yo>5D\"m");
      // Undeclared exception!
      int2ReferenceOpenHashMap0.put(57, "u8ezPF+1S3>Zn!+");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>(1, 1);
      int2ReferenceOpenHashMap0.put(14, "");
      String string0 = int2ReferenceOpenHashMap0.put(6, "Q{KvL}jI\"QQ`;e;.@~&");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>();
      Integer integer0 = new Integer(0);
      int2ReferenceOpenHashMap0.key = null;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.size = 2143787462;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(2143787462, "The expected number of elements must be nonnegative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too large (2143787464 expected elements with load factor 0.75)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>();
      int[] intArray0 = new int[9];
      int2ReferenceOpenHashMap0.key = intArray0;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(8, (Integer) intArray0[4]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>(0, 1.0F);
      int2ReferenceOpenHashMap0.put(0, "xo");
      String string0 = int2ReferenceOpenHashMap0.put(0, "B_U[_V");
      assertNotNull(string0);
      assertEquals("xo", string0);
  }
}
