/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 08:17:16 GMT 2019
 */

package net.tridentsdk.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.tridentsdk.util.Int2ReferenceOpenHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Int2ReferenceOpenHashMap_ESTest extends Int2ReferenceOpenHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap1 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap1.mask = 2;
      int2ReferenceOpenHashMap1.mask = 0;
      int2ReferenceOpenHashMap1.put((-1), int2ReferenceOpenHashMap0);
      Integer integer0 = new Integer(2);
      Object object0 = int2ReferenceOpenHashMap1.put((-1), integer0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>();
      Integer integer0 = new Integer(1190);
      int2ReferenceOpenHashMap0.put(1190, integer0);
      int2ReferenceOpenHashMap0.maxFill = (-2040);
      Integer integer1 = int2ReferenceOpenHashMap0.put(2496, (Integer) null);
      int2ReferenceOpenHashMap0.put((-2147483644), integer0);
      Integer integer2 = int2ReferenceOpenHashMap0.put(6, integer1);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap1 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap1.mask = 2;
      int2ReferenceOpenHashMap1.mask = 0;
      int2ReferenceOpenHashMap1.put((-1), int2ReferenceOpenHashMap0);
      // Undeclared exception!
      int2ReferenceOpenHashMap1.put(2, (Object) null);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap1 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap1.put((-1), int2ReferenceOpenHashMap0);
      Integer integer0 = new Integer(2);
      Object object0 = int2ReferenceOpenHashMap1.put((-1), integer0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>();
      Integer integer0 = new Integer(1190);
      int2ReferenceOpenHashMap0.put(1190, integer0);
      int2ReferenceOpenHashMap0.maxFill = (-2040);
      int2ReferenceOpenHashMap0.put(0, integer0);
      Integer integer1 = int2ReferenceOpenHashMap0.put(575, integer0);
      Integer integer2 = int2ReferenceOpenHashMap0.put(575, integer1);
      assertEquals(1190, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>();
      Integer integer0 = new Integer(0);
      int2ReferenceOpenHashMap0.size = (-1409);
      int2ReferenceOpenHashMap0.maxFill = (-2040);
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put((-2147483644), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      Object object0 = new Object();
      int2ReferenceOpenHashMap0.put(0, "JH(TjjyJwm");
      Object object1 = int2ReferenceOpenHashMap0.put(0, object0);
      assertEquals("JH(TjjyJwm", object1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer integer0 = new Integer((-177));
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>(0, 1.0F);
      int2ReferenceOpenHashMap0.value = null;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.size = 2145453890;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put((-1), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too large (2145453892 expected elements with load factor 0.75)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }
}
