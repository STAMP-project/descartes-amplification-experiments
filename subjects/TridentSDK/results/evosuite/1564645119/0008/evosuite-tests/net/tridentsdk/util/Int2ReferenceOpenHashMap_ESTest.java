/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 07:49:20 GMT 2019
 */

package net.tridentsdk.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.tridentsdk.util.Int2ReferenceOpenHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Int2ReferenceOpenHashMap_ESTest extends Int2ReferenceOpenHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.put((-2419), "<pYVU`Q3D78b2z9Q5t^");
      int2ReferenceOpenHashMap0.maxFill = (-2087);
      int2ReferenceOpenHashMap0.put((-576), (Object) null);
      int2ReferenceOpenHashMap0.size = (-627);
      int2ReferenceOpenHashMap0.maxFill = (-2419);
      // Undeclared exception!
      int2ReferenceOpenHashMap0.put(308, (Object) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.put((-2379), "<pYVU`Q3D78b2z9Q5t^");
      int2ReferenceOpenHashMap0.maxFill = (-2087);
      int2ReferenceOpenHashMap0.put((-576), (Object) null);
      int2ReferenceOpenHashMap0.maxFill = (-2379);
      Object object0 = int2ReferenceOpenHashMap0.put(308, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap1 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap1.n = 0;
      int2ReferenceOpenHashMap1.put(0, int2ReferenceOpenHashMap0);
      Integer integer0 = new Integer((-2353));
      Object object0 = int2ReferenceOpenHashMap1.put(0, integer0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.put((-2379), "<pYVU`Q3D78b2z9Q5t^");
      int2ReferenceOpenHashMap0.maxFill = (-2087);
      int2ReferenceOpenHashMap0.put((-576), (Object) null);
      Integer integer0 = new Integer(2147483632);
      Object object0 = int2ReferenceOpenHashMap0.put((-576), integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>(0, 1.0F);
      Integer integer0 = new Integer(0);
      Integer integer1 = int2ReferenceOpenHashMap0.put(0, integer0);
      Integer integer2 = int2ReferenceOpenHashMap0.put(0, integer1);
      assertEquals(0, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>(0, 1.0F);
      Integer integer0 = new Integer(0);
      int2ReferenceOpenHashMap0.put(0, integer0);
      Integer integer1 = int2ReferenceOpenHashMap0.put((-511), integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.maxFill = (-2087);
      int2ReferenceOpenHashMap0.size = (-576);
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(308, (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.mask = 0;
      int2ReferenceOpenHashMap0.put(2650, "{RVcmu|$$");
      // Undeclared exception!
      int2ReferenceOpenHashMap0.put(539, "K+V");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.key = null;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.size = 2146001602;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put((-46), (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too large (2146001604 expected elements with load factor 0.75)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.put((-2379), "<pYVU`Q3D78b2z9Q5t^");
      Integer integer0 = new Integer(2147483632);
      Object object0 = int2ReferenceOpenHashMap0.put((-2379), integer0);
      assertEquals("<pYVU`Q3D78b2z9Q5t^", object0);
  }
}
