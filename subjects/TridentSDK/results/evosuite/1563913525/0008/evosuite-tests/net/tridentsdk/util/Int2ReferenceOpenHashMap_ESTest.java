/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 20:38:13 GMT 2019
 */

package net.tridentsdk.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.tridentsdk.util.Int2ReferenceOpenHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Int2ReferenceOpenHashMap_ESTest extends Int2ReferenceOpenHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.maxFill = 0;
      int2ReferenceOpenHashMap0.put((-956), " expected elements with load factor ");
      int2ReferenceOpenHashMap0.put(3, " expected elements with load factor ");
      int2ReferenceOpenHashMap0.put(366, "o95<^@4D/7?]\"CNGYm");
      String string0 = int2ReferenceOpenHashMap0.put(180, " expected elements with load factor ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.maxFill = 0;
      int2ReferenceOpenHashMap0.put(0, "");
      int2ReferenceOpenHashMap0.put((-956), " expected elements with load factor ");
      int2ReferenceOpenHashMap0.put(3, " expected elements with load factor ");
      String string0 = int2ReferenceOpenHashMap0.put(180, " expected elements with load factor ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.put(0, "_WUY");
      int2ReferenceOpenHashMap0.n = 0;
      Object object0 = int2ReferenceOpenHashMap0.put(0, "_WUY");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.maxFill = 0;
      int2ReferenceOpenHashMap0.put((-956), " expected elements with load factor ");
      int2ReferenceOpenHashMap0.put(180, " expected elements with load factor ");
      String string0 = int2ReferenceOpenHashMap0.put(180, " expected elements with load factor ");
      assertEquals(" expected elements with load factor ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.size = 1879048192;
      int2ReferenceOpenHashMap0.size = 2147483646;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put((-1), " o<d");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>(0, 1.0F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>(1, 1);
      int2ReferenceOpenHashMap0.put(1, "lO~8hh.");
      String string0 = int2ReferenceOpenHashMap0.put((-4), " 'S`YAa");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.mask = 0;
      int2ReferenceOpenHashMap0.put((-1), "Too large (");
      // Undeclared exception!
      int2ReferenceOpenHashMap0.put(16, "ls{Dk.u$nSO");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.value = null;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put((-2310), "w~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.size = 1879048192;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put((-1), " o<d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too large (1879048194 expected elements with load factor 0.75)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.value = (Object[]) stringArray0;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(104, object0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.put(1, ")");
      String string0 = int2ReferenceOpenHashMap0.put(1, "");
      assertEquals(")", string0);
  }
}
