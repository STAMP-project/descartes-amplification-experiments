/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 31 17:58:05 GMT 2019
 */

package net.tridentsdk.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.tridentsdk.util.Int2ReferenceOpenHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Int2ReferenceOpenHashMap_ESTest extends Int2ReferenceOpenHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.put(958, (Object) null);
      int2ReferenceOpenHashMap0.put(4373, (Object) null);
      Integer integer0 = new Integer(4373);
      int2ReferenceOpenHashMap0.maxFill = (-1);
      Object object0 = int2ReferenceOpenHashMap0.put((-1), integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.put(958, (Object) null);
      int2ReferenceOpenHashMap0.put(4374, (Object) null);
      int2ReferenceOpenHashMap0.put((-1640531527), "Rd~tDM?w*UeAoW%");
      Integer integer0 = new Integer(4374);
      int2ReferenceOpenHashMap0.maxFill = (-1640531527);
      Object object0 = int2ReferenceOpenHashMap0.put(0, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.put(958, (Object) null);
      int2ReferenceOpenHashMap0.put(4392, (Object) null);
      Integer integer0 = new Integer(4392);
      int2ReferenceOpenHashMap0.put((-1640531527), "Rd~tDM?w*UeAoW%");
      int2ReferenceOpenHashMap0.maxFill = (-1);
      Object object0 = int2ReferenceOpenHashMap0.put(0, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.maxFill = 0;
      int2ReferenceOpenHashMap0.put(981, (Object) null);
      int2ReferenceOpenHashMap0.put(0, int2ReferenceOpenHashMap0.maxFill);
      int2ReferenceOpenHashMap0.put(2895, (Object) null);
      Object object0 = int2ReferenceOpenHashMap0.put((-752), (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.maxFill = 0;
      int2ReferenceOpenHashMap0.put(981, (Object) null);
      int[] intArray0 = new int[8];
      int2ReferenceOpenHashMap0.maxFill = 0;
      intArray0[1] = 2010;
      int2ReferenceOpenHashMap0.key = intArray0;
      int2ReferenceOpenHashMap0.put(2895, (Object) null);
      Object object0 = int2ReferenceOpenHashMap0.put((-752), (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.put(958, (Object) null);
      int2ReferenceOpenHashMap0.put(4374, (Object) null);
      Integer integer0 = new Integer(4374);
      int2ReferenceOpenHashMap0.maxFill = (-1640531527);
      int2ReferenceOpenHashMap0.put(0, integer0);
      Object object0 = int2ReferenceOpenHashMap0.put(958, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int[] intArray0 = new int[6];
      intArray0[4] = 2;
      intArray0[5] = (-508);
      int2ReferenceOpenHashMap0.key = intArray0;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(2605, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      Object object0 = int2ReferenceOpenHashMap0.put(0, int2ReferenceOpenHashMap0.maxFill);
      Object object1 = int2ReferenceOpenHashMap0.put(0, object0);
      assertNotNull(object1);
      assertEquals(24, object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.size = 981;
      int2ReferenceOpenHashMap0.size = 981;
      int2ReferenceOpenHashMap0.maxFill = (-46);
      int2ReferenceOpenHashMap0.size = (-46);
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(981, (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>(0, 1.0F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.put(981, int2ReferenceOpenHashMap0);
      Object object0 = int2ReferenceOpenHashMap0.put(981, (Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>(1, 1);
      Object object0 = new Object();
      int2ReferenceOpenHashMap0.put(1, object0);
      int2ReferenceOpenHashMap0.mask = 2;
      // Undeclared exception!
      int2ReferenceOpenHashMap0.put(2820, "1CH-wjk{:");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1;
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>(1, 1);
      int2ReferenceOpenHashMap0.value = null;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(1, (Integer) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>();
      Integer integer0 = new Integer(0);
      int2ReferenceOpenHashMap0.size = 920350135;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(4374, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too large (920350137 expected elements with load factor 0.75)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.put((-2564), (Object) null);
      Object object0 = int2ReferenceOpenHashMap0.put((-2564), (Object) null);
      assertNull(object0);
  }
}
