/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 31 18:23:41 GMT 2019
 */

package net.tridentsdk.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.tridentsdk.util.Int2ReferenceOpenHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Int2ReferenceOpenHashMap_ESTest extends Int2ReferenceOpenHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>(1, 1);
      Object object0 = new Object();
      int2ReferenceOpenHashMap0.put((-18), object0);
      Integer integer0 = new Integer(1);
      int2ReferenceOpenHashMap0.put((-2395), integer0);
      int2ReferenceOpenHashMap0.put(1, (Object) null);
      Object object1 = int2ReferenceOpenHashMap0.put(6463, "");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>();
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap1 = new Int2ReferenceOpenHashMap<Object>();
      int[] intArray0 = new int[9];
      intArray0[2] = (-1640531527);
      intArray0[3] = 1666;
      int2ReferenceOpenHashMap1.key = intArray0;
      Object object0 = int2ReferenceOpenHashMap1.put(127, int2ReferenceOpenHashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>(1, 1);
      Object object0 = new Object();
      Object object1 = int2ReferenceOpenHashMap0.put((-18), object0);
      int2ReferenceOpenHashMap0.put(1, (Object) null);
      int2ReferenceOpenHashMap0.put(6479, "");
      Object object2 = int2ReferenceOpenHashMap0.put(6479, object1);
      assertEquals("", object2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>(1, 1);
      int2ReferenceOpenHashMap0.put(1, (Object) null);
      Object object0 = int2ReferenceOpenHashMap0.put(6479, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>();
      int[] intArray0 = new int[4];
      intArray0[3] = 3535;
      int2ReferenceOpenHashMap0.key = intArray0;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(1657, (Integer) intArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.put(0, (Object) null);
      Object object0 = int2ReferenceOpenHashMap0.put(0, int2ReferenceOpenHashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = null;
      try {
        int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>(2145762907, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too large (2145762907 expected elements with load factor 1.0)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.maxFill = (-3104);
      int2ReferenceOpenHashMap0.size = (-2091);
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(0, (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>(0, 1.0F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>(1, 1);
      Object object0 = new Object();
      int2ReferenceOpenHashMap0.put((-18), object0);
      Object object1 = int2ReferenceOpenHashMap0.put((-18), "");
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>(1, 1);
      int2ReferenceOpenHashMap0.mask = 0;
      int2ReferenceOpenHashMap0.put(8, "");
      // Undeclared exception!
      int2ReferenceOpenHashMap0.put(3073, "");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.value = null;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(1843, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }
}
