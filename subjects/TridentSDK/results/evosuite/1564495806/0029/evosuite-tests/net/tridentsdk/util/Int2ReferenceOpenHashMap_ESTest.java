/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 30 14:47:26 GMT 2019
 */

package net.tridentsdk.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.tridentsdk.util.Int2ReferenceOpenHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Int2ReferenceOpenHashMap_ESTest extends Int2ReferenceOpenHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.maxFill = (-1);
      int2ReferenceOpenHashMap0.put((-389), "+,");
      int2ReferenceOpenHashMap0.put(907, "+,");
      int2ReferenceOpenHashMap0.put((-1540), (String) null);
      String string0 = int2ReferenceOpenHashMap0.put((-2992), "+,");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.maxFill = (-1);
      int2ReferenceOpenHashMap0.put(907, "+,");
      int2ReferenceOpenHashMap0.put((-1540), (String) null);
      int2ReferenceOpenHashMap0.put((-2996), "+,");
      String string0 = int2ReferenceOpenHashMap0.put((-1), "1]J");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.maxFill = (-1);
      int2ReferenceOpenHashMap0.containsNullKey = true;
      int2ReferenceOpenHashMap0.size = (-1540);
      int2ReferenceOpenHashMap0.size = (-1);
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(1073741824, "^\"(%?P8e#c");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.maxFill = (-1);
      int2ReferenceOpenHashMap0.put(907, "+,");
      int2ReferenceOpenHashMap0.put((-1), (String) null);
      String string0 = int2ReferenceOpenHashMap0.put((-1), (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      Integer integer0 = new Integer(0);
      int2ReferenceOpenHashMap0.put(0, integer0);
      Object object0 = int2ReferenceOpenHashMap0.put(0, integer0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>(0, 1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.put(907, "+,");
      String string0 = int2ReferenceOpenHashMap0.put(907, "^\"(%?P8e#c");
      assertEquals("+,", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.mask = (-369);
      int[] intArray0 = new int[8];
      intArray0[0] = (-369);
      intArray0[1] = (-369);
      intArray0[2] = (-369);
      intArray0[3] = (-369);
      int2ReferenceOpenHashMap0.mask = 835;
      int2ReferenceOpenHashMap0.key = intArray0;
      // Undeclared exception!
      int2ReferenceOpenHashMap0.put((-2584), "Too large (");
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.value = null;
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(8, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.size = 1073741824;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(3, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too large (1073741826 expected elements with load factor 0.75)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }
}
