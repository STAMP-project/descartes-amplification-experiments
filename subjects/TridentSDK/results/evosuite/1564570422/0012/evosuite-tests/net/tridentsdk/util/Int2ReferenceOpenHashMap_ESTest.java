/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 31 11:10:51 GMT 2019
 */

package net.tridentsdk.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.tridentsdk.util.Int2ReferenceOpenHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Int2ReferenceOpenHashMap_ESTest extends Int2ReferenceOpenHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>(1, 1);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-499));
      int2ReferenceOpenHashMap0.put((-524), integer0);
      int2ReferenceOpenHashMap0.put(1, integer0);
      Integer integer1 = int2ReferenceOpenHashMap0.put((-524), integerArray0[3]);
      assertEquals((-499), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap1 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap1.put(2479, int2ReferenceOpenHashMap0);
      int2ReferenceOpenHashMap1.mask = 20;
      // Undeclared exception!
      int2ReferenceOpenHashMap1.put((-19), int2ReferenceOpenHashMap0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>(1, 1);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-499));
      int2ReferenceOpenHashMap0.put(1, integerArray0[1]);
      Integer integer1 = int2ReferenceOpenHashMap0.put((-524), integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.put(0, (Object) null);
      Object object0 = int2ReferenceOpenHashMap0.put(0, "W*LRd2R4AA");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>(1, 1);
      Integer integer0 = new Integer(1);
      int2ReferenceOpenHashMap0.put((-9), integer0);
      Integer integer1 = int2ReferenceOpenHashMap0.put((-524), integer0);
      int2ReferenceOpenHashMap0.put(1, integer1);
      Integer integer2 = int2ReferenceOpenHashMap0.put(0, integer1);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.size = (-7);
      int2ReferenceOpenHashMap0.maxFill = (-7);
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put((-7), "The expected number of elements must be nonnegative");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap1 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap1.put((-3965), int2ReferenceOpenHashMap0);
      Object object0 = int2ReferenceOpenHashMap1.put((-3965), int2ReferenceOpenHashMap0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int[] intArray0 = new int[4];
      int2ReferenceOpenHashMap0.key = intArray0;
      int2ReferenceOpenHashMap0.key = null;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put((-3288), "Csg.%sT,g4f?)AhWJw@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap1 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap1.size = 2082408385;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap1.put((-3965), int2ReferenceOpenHashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too large (2082408387 expected elements with load factor 0.75)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>(1, 1);
      Integer[] integerArray0 = new Integer[5];
      int2ReferenceOpenHashMap0.put((-524), integerArray0[1]);
      Integer integer0 = int2ReferenceOpenHashMap0.put((-524), integerArray0[2]);
      assertNull(integer0);
  }
}
