/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 00:52:10 GMT 2019
 */

package net.tridentsdk.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.tridentsdk.util.Int2ReferenceOpenHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Int2ReferenceOpenHashMap_ESTest extends Int2ReferenceOpenHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>(0, 1.0F);
      int2ReferenceOpenHashMap0.size = 16;
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      intArray0[1] = 16;
      int2ReferenceOpenHashMap0.key = intArray0;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(0, intArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      Integer integer0 = new Integer(0);
      Object object0 = int2ReferenceOpenHashMap0.put((-1), integer0);
      int2ReferenceOpenHashMap0.maxFill = 0;
      int2ReferenceOpenHashMap0.put((-35), object0);
      Object object1 = int2ReferenceOpenHashMap0.put((-1), (Object) null);
      assertEquals(0, object1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      Integer integer0 = new Integer(0);
      Object object0 = int2ReferenceOpenHashMap0.put((-1), integer0);
      int2ReferenceOpenHashMap0.maxFill = 0;
      int2ReferenceOpenHashMap0.put(4, (Object) null);
      int2ReferenceOpenHashMap0.put((-35), object0);
      Object object1 = int2ReferenceOpenHashMap0.put((-2), (Object) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.put(1, "r7iwQUe>tMzOo");
      String string0 = int2ReferenceOpenHashMap0.put(1, "r7iwQUe>tMzOo");
      assertEquals("r7iwQUe>tMzOo", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>(0, 1.0F);
      Object object0 = new Object();
      int2ReferenceOpenHashMap0.put(0, object0);
      Object object1 = int2ReferenceOpenHashMap0.put(0, object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.size = (-603);
      int2ReferenceOpenHashMap0.maxFill = (-991);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put((-780), object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>();
      int2ReferenceOpenHashMap0.mask = 0;
      int2ReferenceOpenHashMap0.put((-1377), integer0);
      // Undeclared exception!
      int2ReferenceOpenHashMap0.put(8, (Integer) null);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.value = null;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(8, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.size = 1717986918;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put((-2), "The expected number of elements must be nonnegative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too large (1717986920 expected elements with load factor 0.75)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }
}
