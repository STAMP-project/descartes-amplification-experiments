/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 01:20:04 GMT 2019
 */

package net.tridentsdk.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.tridentsdk.util.Int2ReferenceOpenHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Int2ReferenceOpenHashMap_ESTest extends Int2ReferenceOpenHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      Integer integer0 = new Integer(3);
      Object object0 = int2ReferenceOpenHashMap0.put(3, integer0);
      int2ReferenceOpenHashMap0.mask = 3;
      int2ReferenceOpenHashMap0.put(3, integer0);
      int2ReferenceOpenHashMap0.put((-737), object0);
      int2ReferenceOpenHashMap0.maxFill = (-1189);
      Object object1 = int2ReferenceOpenHashMap0.put(1281, (Object) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      Integer integer0 = new Integer(3);
      Object object0 = int2ReferenceOpenHashMap0.put(3, integer0);
      int2ReferenceOpenHashMap0.put((-309), object0);
      int2ReferenceOpenHashMap0.maxFill = (-1189);
      Object object1 = int2ReferenceOpenHashMap0.put(1281, (Object) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>();
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap1 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap1.size = (-1);
      int2ReferenceOpenHashMap1.maxFill = 1;
      int2ReferenceOpenHashMap1.maxFill = (-2);
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap1.put(0, int2ReferenceOpenHashMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.mask = 0;
      Object object0 = new Object();
      Object object1 = int2ReferenceOpenHashMap0.put(5183, object0);
      Object object2 = int2ReferenceOpenHashMap0.put(5183, object1);
      assertSame(object0, object2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      Integer integer0 = new Integer(3);
      Object object0 = int2ReferenceOpenHashMap0.put(3, integer0);
      int2ReferenceOpenHashMap0.put((-737), object0);
      Object object1 = int2ReferenceOpenHashMap0.put((-737), "");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>();
      Integer integer0 = new Integer(3);
      int2ReferenceOpenHashMap0.put((-737), integer0);
      Integer integer1 = int2ReferenceOpenHashMap0.put(3, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.put(3, "");
      int2ReferenceOpenHashMap0.maxFill = 3;
      int2ReferenceOpenHashMap0.put(0, "");
      int2ReferenceOpenHashMap0.put(158, (String) null);
      String string0 = int2ReferenceOpenHashMap0.put((-902), (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>(0, 1.0F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.put(0, "");
      String string0 = int2ReferenceOpenHashMap0.put(0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.mask = 0;
      int2ReferenceOpenHashMap0.put(5183, "!_W[J`");
      // Undeclared exception!
      int2ReferenceOpenHashMap0.put((-1221), "!_W[J`");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.key = null;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put((-1999), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      int2ReferenceOpenHashMap0.size = 1610612736;
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(158, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too large (1610612738 expected elements with load factor 0.75)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }
}
