/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 01:08:16 GMT 2019
 */

package net.tridentsdk.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.tridentsdk.util.Int2ReferenceOpenHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Int2ReferenceOpenHashMap_ESTest extends Int2ReferenceOpenHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = null;
      try {
        int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>(2004318069, 0.4493628F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too large (2004318069 expected elements with load factor 0.4493628)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>(405, 0.45983848F);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = Int2ReferenceOpenHashMap.maxFill(1006, 0.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = Int2ReferenceOpenHashMap.maxFill(405, 405);
      assertEquals(404, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = Int2ReferenceOpenHashMap.maxFill((-86), (-1.0F));
      assertEquals((-87), int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>(0, 1.0F);
  }
}
