/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 29 20:45:25 GMT 2019
 */

package net.tridentsdk.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.tridentsdk.util.Int2ReferenceOpenHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Int2ReferenceOpenHashMap_ESTest extends Int2ReferenceOpenHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.maxFill = (-1);
      Integer integer0 = new Integer((-1));
      int2ReferenceOpenHashMap0.put((-1), integer0);
      int[] intArray0 = new int[5];
      intArray0[3] = 3;
      int2ReferenceOpenHashMap0.key = intArray0;
      int2ReferenceOpenHashMap0.maxFill = (-2760);
      Object object0 = int2ReferenceOpenHashMap0.put(4, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Int2ReferenceOpenHashMap<String> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<String>();
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap1 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap1.put(0, int2ReferenceOpenHashMap0);
      int2ReferenceOpenHashMap1.n = 0;
      Object object0 = int2ReferenceOpenHashMap1.put(0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.maxFill = 0;
      Object object0 = new Object();
      Object object1 = int2ReferenceOpenHashMap0.put((-1476), object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.maxFill = (-1);
      Integer integer0 = new Integer((-1));
      int2ReferenceOpenHashMap0.put((-1), integer0);
      int[] intArray0 = new int[5];
      intArray0[1] = (-1);
      intArray0[2] = (-2101);
      int2ReferenceOpenHashMap0.key = intArray0;
      Object object0 = int2ReferenceOpenHashMap0.put(4, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.maxFill = (-1);
      Integer integer0 = new Integer((-1));
      int2ReferenceOpenHashMap0.put((-1), integer0);
      int[] intArray0 = new int[4];
      intArray0[1] = (-1);
      intArray0[3] = 3;
      intArray0[0] = 3;
      int2ReferenceOpenHashMap0.key = intArray0;
      Object object0 = int2ReferenceOpenHashMap0.put((-1), " _6qP>34eI");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>(0, 1.0F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>(660, 0.75F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.put(0, "zH8^_");
      Integer integer0 = new Integer(0);
      Object object0 = int2ReferenceOpenHashMap0.put(0, integer0);
      assertEquals("zH8^_", object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.size = (-3865);
      Object object0 = new Object();
      int2ReferenceOpenHashMap0.put(891, (Object) null);
      int2ReferenceOpenHashMap0.put(878, object0);
      int2ReferenceOpenHashMap0.maxFill = (-3865);
      // Undeclared exception!
      int2ReferenceOpenHashMap0.put((-1620), object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.value = (Object[]) null;
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      int2ReferenceOpenHashMap0.size = 2101792506;
      Integer integer0 = new Integer(2101792506);
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(2101792506, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too large (2101792508 expected elements with load factor 0.75)
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Int2ReferenceOpenHashMap<Integer> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Integer>();
      int2ReferenceOpenHashMap0.size = (-1);
      int2ReferenceOpenHashMap0.maxFill = (-889);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        int2ReferenceOpenHashMap0.put(0, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.tridentsdk.util.Int2ReferenceOpenHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Int2ReferenceOpenHashMap<Object> int2ReferenceOpenHashMap0 = new Int2ReferenceOpenHashMap<Object>();
      Integer integer0 = new Integer((-1));
      int2ReferenceOpenHashMap0.put((-1), integer0);
      Object object0 = int2ReferenceOpenHashMap0.put((-1), " _6qP>34eI");
      assertEquals((-1), object0);
  }
}
