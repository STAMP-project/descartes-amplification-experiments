/**
 * Trident - A Multithreaded Server Alternative
 * Copyright 2017 The TridentSDK Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.tridentsdk.base;


/**
 *
 *
 * @author TridentSDK
 * @since 0.5-alpha
 */
public class BlockDirectionTest {
    @org.junit.Test
    public void testMinecraftDirections() {
        for (net.tridentsdk.base.BlockDirection dir : eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testMinecraftDirections()|0", net.tridentsdk.base.BlockDirection[].class, net.tridentsdk.base.BlockDirection.values())) {
            if (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testMinecraftDirections()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testMinecraftDirections()|1", net.tridentsdk.base.BlockDirection.class, dir).hasMinecraftDirection())) {
                org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testMinecraftDirections()|3", net.tridentsdk.base.BlockDirection.class, dir), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testMinecraftDirections()|5", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.fromMinecraftDirection(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testMinecraftDirections()|4", net.tridentsdk.base.BlockDirection.class, dir).getMinecraftDirection())));
            }
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testLookupFailure() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testLookupFailure()|0", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.fromMinecraftDirection((-1)));
        } catch (java.lang.IllegalArgumentException a1554201309712) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("net.tridentsdk.base.BlockDirectionTest|testLookupFailure()|!", a1554201309712);
            throw a1554201309712;
        }
    }

    @org.junit.Test
    public void testDirectionalDifferences() {
        for (net.tridentsdk.base.BlockDirection dir : eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|0", net.tridentsdk.base.BlockDirection[].class, net.tridentsdk.base.BlockDirection.values())) {
            int[] diffs = eu.stamp_project.reneri.instrumentation.StateObserver.<int[]>observeState("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|7", int[].class, new int[]{ eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|1", net.tridentsdk.base.BlockDirection.class, dir).getXDiff()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|3", net.tridentsdk.base.BlockDirection.class, dir).getYDiff()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|5", net.tridentsdk.base.BlockDirection.class, dir).getZDiff()) });
            long numNonZero = eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.stream.IntStream>observeState("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|11", java.util.stream.IntStream.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.stream.IntStream>observeState("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|9", java.util.stream.IntStream.class, java.util.Arrays.stream(eu.stamp_project.reneri.instrumentation.StateObserver.<int[]>observeState("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|8", int[].class, diffs))).filter(( i) -> (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|10", i)) != 0)).count());
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|15", (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|13", net.tridentsdk.base.BlockDirection.class, dir).hasMinecraftDirection()) ? 1 : 2)), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testDirectionalDifferences()|16", numNonZero));
        }
    }

    @org.junit.Test
    public void testOpposites() {
        java.util.HashMap<net.tridentsdk.base.BlockDirection, net.tridentsdk.base.BlockDirection> opps = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<net.tridentsdk.base.BlockDirection, net.tridentsdk.base.BlockDirection>>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|0", java.util.HashMap.class, new java.util.HashMap<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|4", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<net.tridentsdk.base.BlockDirection, net.tridentsdk.base.BlockDirection>>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|1", java.util.HashMap.class, opps).put(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|2", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|3", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|8", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<net.tridentsdk.base.BlockDirection, net.tridentsdk.base.BlockDirection>>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|5", java.util.HashMap.class, opps).put(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|6", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.SOUTH), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|7", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.NORTH)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|12", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<net.tridentsdk.base.BlockDirection, net.tridentsdk.base.BlockDirection>>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|9", java.util.HashMap.class, opps).put(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|10", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.EAST), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|11", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.WEST)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|16", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<net.tridentsdk.base.BlockDirection, net.tridentsdk.base.BlockDirection>>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|13", java.util.HashMap.class, opps).put(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|14", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.NORTH_EAST), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|15", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.SOUTH_WEST)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|20", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<net.tridentsdk.base.BlockDirection, net.tridentsdk.base.BlockDirection>>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|17", java.util.HashMap.class, opps).put(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|18", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.NORTH_WEST), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|19", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.SOUTH_EAST)));
        for (net.tridentsdk.base.BlockDirection dir : eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|21", net.tridentsdk.base.BlockDirection[].class, net.tridentsdk.base.BlockDirection.values())) {
            if (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testOpposites()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<net.tridentsdk.base.BlockDirection, net.tridentsdk.base.BlockDirection>>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|22", java.util.HashMap.class, opps).containsKey(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|23", net.tridentsdk.base.BlockDirection.class, dir)))) {
                org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|27", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<net.tridentsdk.base.BlockDirection, net.tridentsdk.base.BlockDirection>>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|25", java.util.HashMap.class, opps).get(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|26", net.tridentsdk.base.BlockDirection.class, dir))), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|29", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|28", net.tridentsdk.base.BlockDirection.class, dir).getOpposite()));
            }
        }
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|30", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|32", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|31", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP).getOpposite()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|33", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|35", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testOpposites()|34", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN).getOpposite()));
    }

    @org.junit.Test
    public void testAnticlockwise() {
        net.tridentsdk.base.BlockDirection[] dirs = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|8", net.tridentsdk.base.BlockDirection[].class, new net.tridentsdk.base.BlockDirection[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|0", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.NORTH), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|1", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.NORTH_EAST), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|2", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.EAST), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|3", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.SOUTH_EAST), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|4", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.SOUTH), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|5", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.SOUTH_WEST), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|6", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.WEST), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|7", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.NORTH_WEST) });
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|9", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|10", net.tridentsdk.base.BlockDirection[].class, dirs).length)); i++) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|14", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|12", net.tridentsdk.base.BlockDirection[].class, dirs)[(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|13", i)) + 7) % 8)]), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|18", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|17", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|15", net.tridentsdk.base.BlockDirection[].class, dirs)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|16", i)]).anticlockwise(true)));
        }
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|19", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|20", net.tridentsdk.base.BlockDirection[].class, dirs).length)); i++) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|24", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|22", net.tridentsdk.base.BlockDirection[].class, dirs)[(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|23", i)) + 6) % 8)]), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|28", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|27", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|25", net.tridentsdk.base.BlockDirection[].class, dirs)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|26", i)]).anticlockwise(false)));
        }
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|29", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|30", net.tridentsdk.base.BlockDirection[].class, dirs).length)); i++) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|34", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|32", net.tridentsdk.base.BlockDirection[].class, dirs)[(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|33", i)) + 6) % 8)]), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|38", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|37", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|35", net.tridentsdk.base.BlockDirection[].class, dirs)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|36", i)]).anticlockwise()));
        }
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|39", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|41", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|40", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP).anticlockwise(false)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|42", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|44", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|43", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN).anticlockwise(false)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|45", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|47", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|46", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP).anticlockwise(true)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|48", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|50", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|49", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN).anticlockwise(true)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|51", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|53", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|52", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP).anticlockwise()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|54", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|56", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testAnticlockwise()|55", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN).anticlockwise()));
    }

    @org.junit.Test
    public void testClockwise() {
        net.tridentsdk.base.BlockDirection[] dirs = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|8", net.tridentsdk.base.BlockDirection[].class, new net.tridentsdk.base.BlockDirection[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|0", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.NORTH), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|1", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.NORTH_EAST), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|2", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.EAST), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|3", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.SOUTH_EAST), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|4", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.SOUTH), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|5", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.SOUTH_WEST), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|6", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.WEST), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|7", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.NORTH_WEST) });
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testClockwise()|9", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testClockwise()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|10", net.tridentsdk.base.BlockDirection[].class, dirs).length)); i++) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|14", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|12", net.tridentsdk.base.BlockDirection[].class, dirs)[(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testClockwise()|13", i)) + 1) % 8)]), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|18", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|17", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|15", net.tridentsdk.base.BlockDirection[].class, dirs)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testClockwise()|16", i)]).clockwise(true)));
        }
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testClockwise()|19", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testClockwise()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|20", net.tridentsdk.base.BlockDirection[].class, dirs).length)); i++) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|24", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|22", net.tridentsdk.base.BlockDirection[].class, dirs)[(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testClockwise()|23", i)) + 2) % 8)]), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|28", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|27", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|25", net.tridentsdk.base.BlockDirection[].class, dirs)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testClockwise()|26", i)]).clockwise(false)));
        }
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testClockwise()|29", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testClockwise()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|30", net.tridentsdk.base.BlockDirection[].class, dirs).length)); i++) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|34", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|32", net.tridentsdk.base.BlockDirection[].class, dirs)[(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testClockwise()|33", i)) + 2) % 8)]), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|38", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|37", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection[]>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|35", net.tridentsdk.base.BlockDirection[].class, dirs)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.BlockDirectionTest|testClockwise()|36", i)]).clockwise()));
        }
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|39", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|41", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|40", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP).clockwise(false)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|42", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|44", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|43", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN).clockwise(false)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|45", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|47", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|46", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP).clockwise(true)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|48", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|50", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|49", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN).clockwise(true)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|51", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|53", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|52", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.UP).clockwise()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|54", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|56", net.tridentsdk.base.BlockDirection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.BlockDirection>observeState("net.tridentsdk.base.BlockDirectionTest|testClockwise()|55", net.tridentsdk.base.BlockDirection.class, net.tridentsdk.base.BlockDirection.DOWN).clockwise()));
    }
}

