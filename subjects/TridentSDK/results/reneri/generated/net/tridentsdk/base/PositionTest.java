/**
 * Trident - A Multithreaded Server Alternative
 * Copyright 2017 The TridentSDK Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.tridentsdk.base;


public class PositionTest {
    private final net.tridentsdk.world.World world = org.mockito.Mockito.mock(net.tridentsdk.world.World.class);

    @org.junit.Test
    public void testWorld() {
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testWorld()|1", net.tridentsdk.base.Position.class, new net.tridentsdk.base.Position(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.World>observeState("net.tridentsdk.base.PositionTest|testWorld()|0", net.tridentsdk.world.World.class, this.world))).getWorld());
    }

    @org.junit.Test
    public void testYaw() {
        java.util.concurrent.ThreadLocalRandom r = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testYaw()|0", java.util.concurrent.ThreadLocalRandom.class, java.util.concurrent.ThreadLocalRandom.current());
        float yaw = eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testYaw()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testYaw()|1", java.util.concurrent.ThreadLocalRandom.class, r).nextFloat());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testYaw()|3", yaw), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testYaw()|14", net.tridentsdk.base.Position.class, new net.tridentsdk.base.Position(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.World>observeState("net.tridentsdk.base.PositionTest|testYaw()|4", net.tridentsdk.world.World.class, this.world), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testYaw()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testYaw()|5", java.util.concurrent.ThreadLocalRandom.class, r).nextDouble()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testYaw()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testYaw()|7", java.util.concurrent.ThreadLocalRandom.class, r).nextDouble()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testYaw()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testYaw()|9", java.util.concurrent.ThreadLocalRandom.class, r).nextDouble()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testYaw()|11", yaw), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testYaw()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testYaw()|12", java.util.concurrent.ThreadLocalRandom.class, r).nextFloat()))).getYaw(), 0);
    }

    @org.junit.Test
    public void testPitch() {
        java.util.concurrent.ThreadLocalRandom r = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testPitch()|0", java.util.concurrent.ThreadLocalRandom.class, java.util.concurrent.ThreadLocalRandom.current());
        float pitch = eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testPitch()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testPitch()|1", java.util.concurrent.ThreadLocalRandom.class, r).nextFloat());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testPitch()|3", pitch), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testPitch()|14", net.tridentsdk.base.Position.class, new net.tridentsdk.base.Position(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.World>observeState("net.tridentsdk.base.PositionTest|testPitch()|4", net.tridentsdk.world.World.class, this.world), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testPitch()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testPitch()|5", java.util.concurrent.ThreadLocalRandom.class, r).nextDouble()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testPitch()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testPitch()|7", java.util.concurrent.ThreadLocalRandom.class, r).nextDouble()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testPitch()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testPitch()|9", java.util.concurrent.ThreadLocalRandom.class, r).nextDouble()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testPitch()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testPitch()|11", java.util.concurrent.ThreadLocalRandom.class, r).nextFloat()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testPitch()|13", pitch))).getPitch(), 0);
    }

    @org.junit.Test
    public void testTheOtherConstructor() {
        java.util.concurrent.ThreadLocalRandom r = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|0", java.util.concurrent.ThreadLocalRandom.class, java.util.concurrent.ThreadLocalRandom.current());
        double x = eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|1", java.util.concurrent.ThreadLocalRandom.class, r).nextDouble());
        double y = eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|3", java.util.concurrent.ThreadLocalRandom.class, r).nextDouble());
        double z = eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.ThreadLocalRandom>observeState("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|5", java.util.concurrent.ThreadLocalRandom.class, r).nextDouble());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|11", net.tridentsdk.base.Position.class, new net.tridentsdk.base.Position(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.World>observeState("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|7", net.tridentsdk.world.World.class, this.world), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|8", x), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|9", y), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|10", z))), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|16", net.tridentsdk.base.Position.class, new net.tridentsdk.base.Position(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.World>observeState("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|12", net.tridentsdk.world.World.class, this.world), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|13", x), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|14", y), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testTheOtherConstructor()|15", z), 0.0F, 0.0F)));
    }

    @org.junit.Test
    public void testBlock() {
        net.tridentsdk.base.Position position = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testBlock()|1", net.tridentsdk.base.Position.class, new net.tridentsdk.base.Position(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.World>observeState("net.tridentsdk.base.PositionTest|testBlock()|0", net.tridentsdk.world.World.class, this.world)));
        net.tridentsdk.base.Block block = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Block>observeState("net.tridentsdk.base.PositionTest|testBlock()|3", net.tridentsdk.base.Block.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testBlock()|2", net.tridentsdk.base.Position.class, position).getBlock());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Block>observeState("net.tridentsdk.base.PositionTest|testBlock()|11", net.tridentsdk.base.Block.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.World>observeState("net.tridentsdk.base.PositionTest|testBlock()|4", net.tridentsdk.world.World.class, this.world).getBlockAt(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testBlock()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testBlock()|5", net.tridentsdk.base.Position.class, position).getIntX()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testBlock()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testBlock()|7", net.tridentsdk.base.Position.class, position).getIntY()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testBlock()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testBlock()|9", net.tridentsdk.base.Position.class, position).getIntZ()))), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Block>observeState("net.tridentsdk.base.PositionTest|testBlock()|12", net.tridentsdk.base.Block.class, block));
    }

    @org.junit.Test
    public void distance() {
        net.tridentsdk.base.Position p0 = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|distance()|1", net.tridentsdk.base.Position.class, new net.tridentsdk.base.Position(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.World>observeState("net.tridentsdk.base.PositionTest|distance()|0", net.tridentsdk.world.World.class, this.world)));
        net.tridentsdk.base.Position p1 = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|distance()|3", net.tridentsdk.base.Position.class, new net.tridentsdk.base.Position(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.World>observeState("net.tridentsdk.base.PositionTest|distance()|2", net.tridentsdk.world.World.class, this.world), 0, 10, 0));
        org.junit.Assert.assertEquals(10, eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|distance()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|distance()|4", net.tridentsdk.base.Position.class, p0).distance(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|distance()|5", net.tridentsdk.base.Position.class, p1))), 0);
    }

    @org.junit.Test
    public void testEqualsHashString() {
        net.tridentsdk.base.Position p0 = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|1", net.tridentsdk.base.Position.class, new net.tridentsdk.base.Position(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.World>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|0", net.tridentsdk.world.World.class, this.world)));
        net.tridentsdk.base.Position p1 = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|3", net.tridentsdk.base.Position.class, new net.tridentsdk.base.Position(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.World>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|2", net.tridentsdk.world.World.class, this.world)));
        net.tridentsdk.base.Vector vector = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Vector>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|4", net.tridentsdk.base.Vector.class, net.tridentsdk.base.VectorsTest.rand());
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|9", net.tridentsdk.base.Position.class, (p0 = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|5", net.tridentsdk.base.Position.class, p0).set(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Vector>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|6", net.tridentsdk.base.Vector.class, vector).getX(), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Vector>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|7", net.tridentsdk.base.Vector.class, vector).getY(), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Vector>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|8", net.tridentsdk.base.Vector.class, vector).getZ())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|14", net.tridentsdk.base.Position.class, (p1 = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|10", net.tridentsdk.base.Position.class, p1).set(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Vector>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|11", net.tridentsdk.base.Vector.class, vector).getX(), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Vector>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|12", net.tridentsdk.base.Vector.class, vector).getY(), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Vector>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|13", net.tridentsdk.base.Vector.class, vector).getZ())));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|15", net.tridentsdk.base.Position.class, p0), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|16", net.tridentsdk.base.Position.class, p1));
        org.junit.Assert.assertNotEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|17", net.tridentsdk.base.Position.class, p0), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Vector>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|18", net.tridentsdk.base.Vector.class, net.tridentsdk.base.VectorsTest.rand()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testEqualsHashString()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|19", net.tridentsdk.base.Position.class, p0).hashCode()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testEqualsHashString()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|21", net.tridentsdk.base.Position.class, p1).hashCode()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testEqualsHashString()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|23", net.tridentsdk.base.Position.class, p0).toString()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testEqualsHashString()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testEqualsHashString()|25", net.tridentsdk.base.Position.class, p1).toString()));
    }

    @org.junit.Test
    public void testSettersAndGetters() {
        net.tridentsdk.base.Position p0 = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|1", net.tridentsdk.base.Position.class, new net.tridentsdk.base.Position(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.World>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|0", net.tridentsdk.world.World.class, this.world)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|3", net.tridentsdk.base.Position.class, (p0 = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|2", net.tridentsdk.base.Position.class, p0).set(1, 2, 3)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|5", net.tridentsdk.base.Position.class, (p0 = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|4", net.tridentsdk.base.Position.class, p0).setYaw(4)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|7", net.tridentsdk.base.Position.class, (p0 = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|6", net.tridentsdk.base.Position.class, p0).setPitch(5)));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|8", net.tridentsdk.base.Position.class, p0).getX(), 0);
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|9", net.tridentsdk.base.Position.class, p0).getY(), 0);
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|10", net.tridentsdk.base.Position.class, p0).getZ(), 0);
        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|11", net.tridentsdk.base.Position.class, p0).getYaw(), 0);
        org.junit.Assert.assertEquals(5, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|12", net.tridentsdk.base.Position.class, p0).getPitch(), 0);
        org.junit.Assert.assertEquals(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testSettersAndGetters()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|13", net.tridentsdk.base.Position.class, p0).getIntX())) / 16), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testSettersAndGetters()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|15", net.tridentsdk.base.Position.class, p0).getChunkX()));
        org.junit.Assert.assertEquals(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testSettersAndGetters()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|17", net.tridentsdk.base.Position.class, p0).getIntZ())) / 16), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testSettersAndGetters()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|19", net.tridentsdk.base.Position.class, p0).getChunkZ()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|22", net.tridentsdk.base.Position.class, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|21", net.tridentsdk.base.Position.class, p0).set(1.0, 2.0, 3.0));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|23", net.tridentsdk.base.Position.class, p0).getX(), 0);
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|24", net.tridentsdk.base.Position.class, p0).getY(), 0);
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|25", net.tridentsdk.base.Position.class, p0).getZ(), 0);
        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|26", net.tridentsdk.base.Position.class, p0).getYaw(), 0);
        org.junit.Assert.assertEquals(5, eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|27", net.tridentsdk.base.Position.class, p0).getPitch(), 0);
        org.junit.Assert.assertEquals(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testSettersAndGetters()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|28", net.tridentsdk.base.Position.class, p0).getIntX())) / 16), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testSettersAndGetters()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|30", net.tridentsdk.base.Position.class, p0).getChunkX()));
        org.junit.Assert.assertEquals(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testSettersAndGetters()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|32", net.tridentsdk.base.Position.class, p0).getIntZ())) / 16), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.base.PositionTest|testSettersAndGetters()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.base.Position>observeState("net.tridentsdk.base.PositionTest|testSettersAndGetters()|34", net.tridentsdk.base.Position.class, p0).getChunkZ()));
    }
}

