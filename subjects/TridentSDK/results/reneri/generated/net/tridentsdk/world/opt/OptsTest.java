/**
 * Trident - A Multithreaded Server Alternative
 * Copyright 2017 The TridentSDK Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.tridentsdk.world.opt;


public class OptsTest {
    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void difficultyTest() {
        try {
            org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|difficultyTest()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.Difficulty>observeState("net.tridentsdk.world.opt.OptsTest|difficultyTest()|0", net.tridentsdk.world.opt.Difficulty.class, net.tridentsdk.world.opt.Difficulty.HARDCORE).asByte()));
            org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|difficultyTest()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.Difficulty>observeState("net.tridentsdk.world.opt.OptsTest|difficultyTest()|2", net.tridentsdk.world.opt.Difficulty.class, net.tridentsdk.world.opt.Difficulty.PEACEFUL).asByte()));
            org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|difficultyTest()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.Difficulty>observeState("net.tridentsdk.world.opt.OptsTest|difficultyTest()|4", net.tridentsdk.world.opt.Difficulty.class, net.tridentsdk.world.opt.Difficulty.EASY).asByte()));
            org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|difficultyTest()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.Difficulty>observeState("net.tridentsdk.world.opt.OptsTest|difficultyTest()|6", net.tridentsdk.world.opt.Difficulty.class, net.tridentsdk.world.opt.Difficulty.NORMAL).asByte()));
            org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|difficultyTest()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.Difficulty>observeState("net.tridentsdk.world.opt.OptsTest|difficultyTest()|8", net.tridentsdk.world.opt.Difficulty.class, net.tridentsdk.world.opt.Difficulty.HARD).asByte()));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.Difficulty>observeState("net.tridentsdk.world.opt.OptsTest|difficultyTest()|10", net.tridentsdk.world.opt.Difficulty.class, net.tridentsdk.world.opt.Difficulty.HARD), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.Difficulty>observeState("net.tridentsdk.world.opt.OptsTest|difficultyTest()|11", net.tridentsdk.world.opt.Difficulty.class, net.tridentsdk.world.opt.Difficulty.from(3)));
            eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.Difficulty>observeState("net.tridentsdk.world.opt.OptsTest|difficultyTest()|12", net.tridentsdk.world.opt.Difficulty.class, net.tridentsdk.world.opt.Difficulty.from(30));
        } catch (java.lang.IllegalArgumentException a1554201309928) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("net.tridentsdk.world.opt.OptsTest|difficultyTest()|!", a1554201309928);
            throw a1554201309928;
        }
    }

    @org.junit.Test(expected = java.lang.IndexOutOfBoundsException.class)
    public void gameModeTest() {
        try {
            org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameModeTest()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameMode>observeState("net.tridentsdk.world.opt.OptsTest|gameModeTest()|0", net.tridentsdk.world.opt.GameMode.class, net.tridentsdk.world.opt.GameMode.SURVIVAL).asInt()));
            org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameModeTest()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameMode>observeState("net.tridentsdk.world.opt.OptsTest|gameModeTest()|2", net.tridentsdk.world.opt.GameMode.class, net.tridentsdk.world.opt.GameMode.CREATIVE).asByte()));
            org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameModeTest()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameMode>observeState("net.tridentsdk.world.opt.OptsTest|gameModeTest()|4", net.tridentsdk.world.opt.GameMode.class, net.tridentsdk.world.opt.GameMode.ADVENTURE).asByte()));
            org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameModeTest()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameMode>observeState("net.tridentsdk.world.opt.OptsTest|gameModeTest()|6", net.tridentsdk.world.opt.GameMode.class, net.tridentsdk.world.opt.GameMode.SPECTATOR).asByte()));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameMode>observeState("net.tridentsdk.world.opt.OptsTest|gameModeTest()|8", net.tridentsdk.world.opt.GameMode.class, net.tridentsdk.world.opt.GameMode.SURVIVAL), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameMode>observeState("net.tridentsdk.world.opt.OptsTest|gameModeTest()|9", net.tridentsdk.world.opt.GameMode.class, net.tridentsdk.world.opt.GameMode.from(0)));
            eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameMode>observeState("net.tridentsdk.world.opt.OptsTest|gameModeTest()|10", net.tridentsdk.world.opt.GameMode.class, net.tridentsdk.world.opt.GameMode.from(30));
        } catch (java.lang.IndexOutOfBoundsException a1554201309930) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("net.tridentsdk.world.opt.OptsTest|gameModeTest()|!", a1554201309930);
            throw a1554201309930;
        }
    }

    @org.junit.Test(expected = java.lang.IndexOutOfBoundsException.class)
    public void dimensionTest() {
        try {
            org.junit.Assert.assertEquals((-1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|dimensionTest()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.Dimension>observeState("net.tridentsdk.world.opt.OptsTest|dimensionTest()|0", net.tridentsdk.world.opt.Dimension.class, net.tridentsdk.world.opt.Dimension.NETHER).asInt()));
            org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|dimensionTest()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.Dimension>observeState("net.tridentsdk.world.opt.OptsTest|dimensionTest()|2", net.tridentsdk.world.opt.Dimension.class, net.tridentsdk.world.opt.Dimension.OVERWORLD).asByte()));
            org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|dimensionTest()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.Dimension>observeState("net.tridentsdk.world.opt.OptsTest|dimensionTest()|4", net.tridentsdk.world.opt.Dimension.class, net.tridentsdk.world.opt.Dimension.END).asByte()));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.Dimension>observeState("net.tridentsdk.world.opt.OptsTest|dimensionTest()|6", net.tridentsdk.world.opt.Dimension.class, net.tridentsdk.world.opt.Dimension.OVERWORLD), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.Dimension>observeState("net.tridentsdk.world.opt.OptsTest|dimensionTest()|7", net.tridentsdk.world.opt.Dimension.class, net.tridentsdk.world.opt.Dimension.from(0)));
            eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.Dimension>observeState("net.tridentsdk.world.opt.OptsTest|dimensionTest()|8", net.tridentsdk.world.opt.Dimension.class, net.tridentsdk.world.opt.Dimension.from(30));
        } catch (java.lang.IndexOutOfBoundsException a1554201309929) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("net.tridentsdk.world.opt.OptsTest|dimensionTest()|!", a1554201309929);
            throw a1554201309929;
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void gameRuleTest() {
        try {
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|0", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.CMD_BLOCK_OUTPUT).getDefault()));
            org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|2", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.MOVE_CHECK).getDefault()));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|4", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.DAYLIGHT_CYCLE).getDefault()));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|6", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.FIRE_TICK).getDefault()));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|8", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.MOB_LOOT).getDefault()));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|10", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.MOB_SPAWN).getDefault()));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|12", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.TILE_DROP).getDefault()));
            org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|14", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.KEEP_INVENTORY).getDefault()));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|16", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.LOG_ADMIN_CMDS).getDefault()));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|18", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.MOB_GRIEF).getDefault()));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|20", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.NATURAL_REGEN).getDefault()));
            org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|24", eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Integer>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|22", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.RANDOM_TICK_SPEED).getDefault()).intValue()));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|25", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.SEND_CMD_FEEDBACK).getDefault()));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|27", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.SHOW_DEATH_MSG).getDefault()));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|29", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.CMD_BLOCK_OUTPUT), net.tridentsdk.world.opt.GameRule.from(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|30", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.CMD_BLOCK_OUTPUT).toString())));
            net.tridentsdk.world.opt.GameRule.from("tridentsdk");
        } catch (java.lang.IllegalArgumentException a1554201309934) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("net.tridentsdk.world.opt.OptsTest|gameRuleTest()|!", a1554201309934);
            throw a1554201309934;
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void levelTypeTest() {
        try {
            org.junit.Assert.assertEquals("default", eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|levelTypeTest()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.LevelType>observeState("net.tridentsdk.world.opt.OptsTest|levelTypeTest()|0", net.tridentsdk.world.opt.LevelType.class, net.tridentsdk.world.opt.LevelType.DEFAULT).toString()));
            org.junit.Assert.assertEquals("flat", eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|levelTypeTest()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.LevelType>observeState("net.tridentsdk.world.opt.OptsTest|levelTypeTest()|2", net.tridentsdk.world.opt.LevelType.class, net.tridentsdk.world.opt.LevelType.FLAT).toString()));
            org.junit.Assert.assertEquals("largeBiomes", eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|levelTypeTest()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.LevelType>observeState("net.tridentsdk.world.opt.OptsTest|levelTypeTest()|4", net.tridentsdk.world.opt.LevelType.class, net.tridentsdk.world.opt.LevelType.LARGE_BIOMES).toString()));
            org.junit.Assert.assertEquals("amplified", eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|levelTypeTest()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.LevelType>observeState("net.tridentsdk.world.opt.OptsTest|levelTypeTest()|6", net.tridentsdk.world.opt.LevelType.class, net.tridentsdk.world.opt.LevelType.AMPLIFIED).toString()));
            org.junit.Assert.assertEquals("default_1_1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|levelTypeTest()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.LevelType>observeState("net.tridentsdk.world.opt.OptsTest|levelTypeTest()|8", net.tridentsdk.world.opt.LevelType.class, net.tridentsdk.world.opt.LevelType.DEBUG).toString()));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.LevelType>observeState("net.tridentsdk.world.opt.OptsTest|levelTypeTest()|10", net.tridentsdk.world.opt.LevelType.class, net.tridentsdk.world.opt.LevelType.DEFAULT), eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.LevelType>observeState("net.tridentsdk.world.opt.OptsTest|levelTypeTest()|11", net.tridentsdk.world.opt.LevelType.class, net.tridentsdk.world.opt.LevelType.from("default")));
            eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.LevelType>observeState("net.tridentsdk.world.opt.OptsTest|levelTypeTest()|12", net.tridentsdk.world.opt.LevelType.class, net.tridentsdk.world.opt.LevelType.from("tridentsdk"));
        } catch (java.lang.IllegalArgumentException a1554201309941) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("net.tridentsdk.world.opt.OptsTest|levelTypeTest()|!", a1554201309941);
            throw a1554201309941;
        }
    }

    @org.junit.Test
    public void gameRuleValueTest() {
        net.tridentsdk.world.opt.GameRuleMap map = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|0", net.tridentsdk.world.opt.GameRuleMap.class, new net.tridentsdk.world.opt.GameRuleMap());
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|1", net.tridentsdk.world.opt.GameRuleMap.class, map).set(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|2", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.DAYLIGHT_CYCLE), false);
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|3", net.tridentsdk.world.opt.GameRuleMap.class, map).set(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|4", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.SEND_CMD_FEEDBACK), false);
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|5", net.tridentsdk.world.opt.GameRuleMap.class, map).isSet(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|6", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.DAYLIGHT_CYCLE))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|8", net.tridentsdk.world.opt.GameRuleMap.class, map).isSet(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|9", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.SEND_CMD_FEEDBACK))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|11", net.tridentsdk.world.opt.GameRuleMap.class, map).get(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|12", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.DAYLIGHT_CYCLE))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|14", net.tridentsdk.world.opt.GameRuleMap.class, map).reset(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|15", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.DAYLIGHT_CYCLE));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|16", net.tridentsdk.world.opt.GameRuleMap.class, map).get(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|17", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.DAYLIGHT_CYCLE))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|19", net.tridentsdk.world.opt.GameRuleMap.class, map).get(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|20", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.SEND_CMD_FEEDBACK))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|22", net.tridentsdk.world.opt.GameRuleMap.class, map).resetAll();
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|23", net.tridentsdk.world.opt.GameRuleMap.class, map).get(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|24", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.SEND_CMD_FEEDBACK))));
        net.tridentsdk.world.opt.GameRuleMap map2 = eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|26", net.tridentsdk.world.opt.GameRuleMap.class, new net.tridentsdk.world.opt.GameRuleMap());
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|27", net.tridentsdk.world.opt.GameRuleMap.class, map2).set(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|28", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.DAYLIGHT_CYCLE), false);
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|29", net.tridentsdk.world.opt.GameRuleMap.class, map2).set(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|30", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.SEND_CMD_FEEDBACK), false);
        eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|31", net.tridentsdk.world.opt.GameRuleMap.class, map).copyTo(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|32", net.tridentsdk.world.opt.GameRuleMap.class, map2));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|33", net.tridentsdk.world.opt.GameRuleMap.class, map2).get(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|34", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.DAYLIGHT_CYCLE))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|38", eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRuleMap>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|36", net.tridentsdk.world.opt.GameRuleMap.class, map2).get(eu.stamp_project.reneri.instrumentation.StateObserver.<net.tridentsdk.world.opt.GameRule<java.lang.Boolean>>observeState("net.tridentsdk.world.opt.OptsTest|gameRuleValueTest()|37", net.tridentsdk.world.opt.GameRule.class, net.tridentsdk.world.opt.GameRule.SEND_CMD_FEEDBACK))));
    }
}

