package org.springframework.samples.petclinic.owner;


/**
 * Test class for {@link OwnerController}
 *
 * @author Colin But
 */
@org.junit.runner.RunWith(org.springframework.test.context.junit4.SpringRunner.class)
@org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest(org.springframework.samples.petclinic.owner.OwnerController.class)
public class OwnerControllerTests {
    private static final int TEST_OWNER_ID = 1;

    @org.springframework.beans.factory.annotation.Autowired
    private org.springframework.test.web.servlet.MockMvc mockMvc;

    @org.springframework.boot.test.mock.mockito.MockBean
    private org.springframework.samples.petclinic.owner.OwnerRepository owners;

    private org.springframework.samples.petclinic.owner.Owner george;

    @org.junit.Before
    public void setup() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|setup()|0", org.springframework.samples.petclinic.owner.Owner.class, (george = new org.springframework.samples.petclinic.owner.Owner()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|setup()|1", org.springframework.samples.petclinic.owner.Owner.class, george).setId(org.springframework.samples.petclinic.owner.OwnerControllerTests.TEST_OWNER_ID);
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|setup()|2", org.springframework.samples.petclinic.owner.Owner.class, george).setFirstName("George");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|setup()|3", org.springframework.samples.petclinic.owner.Owner.class, george).setLastName("Franklin");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|setup()|4", org.springframework.samples.petclinic.owner.Owner.class, george).setAddress("110 W. Liberty St.");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|setup()|5", org.springframework.samples.petclinic.owner.Owner.class, george).setCity("Madison");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|setup()|6", org.springframework.samples.petclinic.owner.Owner.class, george).setTelephone("6085551023");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.BDDMockito.BDDMyOngoingStubbing<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|setup()|11", org.mockito.BDDMockito.BDDMyOngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.BDDMockito.BDDMyOngoingStubbing<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|setup()|9", org.mockito.BDDMockito.BDDMyOngoingStubbing.class, org.mockito.BDDMockito.given(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|setup()|8", org.springframework.samples.petclinic.owner.Owner.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|setup()|7", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).findById(org.springframework.samples.petclinic.owner.OwnerControllerTests.TEST_OWNER_ID)))).willReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|setup()|10", org.springframework.samples.petclinic.owner.Owner.class, george)));
    }

    @org.junit.Test
    public void testInitCreationForm() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitCreationForm()|11", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitCreationForm()|8", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitCreationForm()|5", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitCreationForm()|2", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitCreationForm()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitCreationForm()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get("/owners/new")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitCreationForm()|4", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitCreationForm()|3", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).isOk()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitCreationForm()|7", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitCreationForm()|6", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeExists("owner")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitCreationForm()|10", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitCreationForm()|9", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("owners/createOrUpdateOwnerForm"))));
    }

    @org.junit.Test
    public void testProcessCreationFormSuccess() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormSuccess()|10", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormSuccess()|7", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormSuccess()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormSuccess()|6", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormSuccess()|5", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormSuccess()|4", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormSuccess()|3", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormSuccess()|2", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormSuccess()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post("/owners/new")).param("firstName", "Joe")).param("lastName", "Bloggs")).param("address", "123 Caramel Street")).param("city", "London")).param("telephone", "01316761638")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormSuccess()|9", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormSuccess()|8", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).is3xxRedirection())));
    }

    @org.junit.Test
    public void testProcessCreationFormHasErrors() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|20", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|17", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|14", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|11", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|8", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|5", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|4", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|3", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|2", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post("/owners/new")).param("firstName", "Joe")).param("lastName", "Bloggs")).param("city", "London")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|7", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|6", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).isOk()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|10", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|9", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasErrors("owner")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|13", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|12", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasFieldErrors("owner", "address")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|16", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|15", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasFieldErrors("owner", "telephone")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|19", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessCreationFormHasErrors()|18", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("owners/createOrUpdateOwnerForm"))));
    }

    @org.junit.Test
    public void testInitFindForm() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitFindForm()|11", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitFindForm()|8", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitFindForm()|5", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitFindForm()|2", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitFindForm()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitFindForm()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get("/owners/find")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitFindForm()|4", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitFindForm()|3", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).isOk()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitFindForm()|7", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitFindForm()|6", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeExists("owner")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitFindForm()|10", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitFindForm()|9", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("owners/findOwners"))));
    }

    @org.junit.Test
    public void testProcessFindFormSuccess() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.BDDMockito.BDDMyOngoingStubbing<java.util.Collection<org.springframework.samples.petclinic.owner.Owner>>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|6", org.mockito.BDDMockito.BDDMyOngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.BDDMockito.BDDMyOngoingStubbing<java.util.Collection<org.springframework.samples.petclinic.owner.Owner>>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|2", org.mockito.BDDMockito.BDDMyOngoingStubbing.class, org.mockito.BDDMockito.given(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|1", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|0", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).findByLastName("")))).willReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|5", java.util.ArrayList.class, org.assertj.core.util.Lists.newArrayList(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|3", org.springframework.samples.petclinic.owner.Owner.class, george), eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|4", org.springframework.samples.petclinic.owner.Owner.class, new org.springframework.samples.petclinic.owner.Owner())))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|15", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|12", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|9", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|7", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|8", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get("/owners")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|11", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|10", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).isOk()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|14", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormSuccess()|13", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("owners/ownersList"))));
    }

    @org.junit.Test
    public void testProcessFindFormByLastName() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.BDDMockito.BDDMyOngoingStubbing<java.util.Collection<org.springframework.samples.petclinic.owner.Owner>>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|7", org.mockito.BDDMockito.BDDMyOngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.BDDMockito.BDDMyOngoingStubbing<java.util.Collection<org.springframework.samples.petclinic.owner.Owner>>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|4", org.mockito.BDDMockito.BDDMyOngoingStubbing.class, org.mockito.BDDMockito.given(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|3", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|0", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).findByLastName(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|1", org.springframework.samples.petclinic.owner.Owner.class, george).getLastName()))))).willReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|6", java.util.ArrayList.class, org.assertj.core.util.Lists.newArrayList(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|5", org.springframework.samples.petclinic.owner.Owner.class, george)))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|17", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|14", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|11", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|8", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|10", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|9", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get("/owners")).param("lastName", "Franklin")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|13", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|12", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).is3xxRedirection()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|16", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormByLastName()|15", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name(("redirect:/owners/" + (org.springframework.samples.petclinic.owner.OwnerControllerTests.TEST_OWNER_ID))))));
    }

    @org.junit.Test
    public void testProcessFindFormNoOwnersFound() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|15", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|12", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|9", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|6", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|3", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|2", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get("/owners")).param("lastName", "Unknown Surname")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|5", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|4", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).isOk()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|8", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|7", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasFieldErrors("owner", "lastName")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|11", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|10", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasFieldErrorCode("owner", "lastName", "notFound")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|14", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessFindFormNoOwnersFound()|13", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("owners/findOwners"))));
    }

    @org.junit.Test
    public void testInitUpdateOwnerForm() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|31", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|28", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|24", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|20", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|16", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|12", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|8", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|5", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|2", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get("/owners/{ownerId}/edit", org.springframework.samples.petclinic.owner.OwnerControllerTests.TEST_OWNER_ID)))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|4", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|3", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).isOk()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|7", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|6", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeExists("owner")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|11", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|9", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attribute("owner", org.hamcrest.Matchers.hasProperty("lastName", eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|10", org.hamcrest.Matcher.class, org.hamcrest.Matchers.is("Franklin"))))))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|15", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|13", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attribute("owner", org.hamcrest.Matchers.hasProperty("firstName", eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|14", org.hamcrest.Matcher.class, org.hamcrest.Matchers.is("George"))))))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|19", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|17", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attribute("owner", org.hamcrest.Matchers.hasProperty("address", eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|18", org.hamcrest.Matcher.class, org.hamcrest.Matchers.is("110 W. Liberty St."))))))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|23", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|21", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attribute("owner", org.hamcrest.Matchers.hasProperty("city", eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|22", org.hamcrest.Matcher.class, org.hamcrest.Matchers.is("Madison"))))))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|27", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|25", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attribute("owner", org.hamcrest.Matchers.hasProperty("telephone", eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|26", org.hamcrest.Matcher.class, org.hamcrest.Matchers.is("6085551023"))))))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|30", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testInitUpdateOwnerForm()|29", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("owners/createOrUpdateOwnerForm"))));
    }

    @org.junit.Test
    public void testProcessUpdateOwnerFormSuccess() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormSuccess()|13", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormSuccess()|10", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormSuccess()|7", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormSuccess()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormSuccess()|6", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormSuccess()|5", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormSuccess()|4", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormSuccess()|3", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormSuccess()|2", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormSuccess()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post("/owners/{ownerId}/edit", org.springframework.samples.petclinic.owner.OwnerControllerTests.TEST_OWNER_ID)).param("firstName", "Joe")).param("lastName", "Bloggs")).param("address", "123 Caramel Street")).param("city", "London")).param("telephone", "01616291589")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormSuccess()|9", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormSuccess()|8", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).is3xxRedirection()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormSuccess()|12", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormSuccess()|11", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("redirect:/owners/{ownerId}"))));
    }

    @org.junit.Test
    public void testProcessUpdateOwnerFormHasErrors() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|20", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|17", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|14", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|11", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|8", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|5", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|4", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|3", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|2", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post("/owners/{ownerId}/edit", org.springframework.samples.petclinic.owner.OwnerControllerTests.TEST_OWNER_ID)).param("firstName", "Joe")).param("lastName", "Bloggs")).param("city", "London")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|7", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|6", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).isOk()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|10", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|9", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasErrors("owner")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|13", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|12", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasFieldErrors("owner", "address")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|16", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|15", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasFieldErrors("owner", "telephone")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|19", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testProcessUpdateOwnerFormHasErrors()|18", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("owners/createOrUpdateOwnerForm"))));
    }

    @org.junit.Test
    public void testShowOwner() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|28", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|25", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|21", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|17", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|13", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|9", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|5", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|2", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get("/owners/{ownerId}", org.springframework.samples.petclinic.owner.OwnerControllerTests.TEST_OWNER_ID)))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|4", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|3", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).isOk()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|8", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|6", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attribute("owner", org.hamcrest.Matchers.hasProperty("lastName", eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|7", org.hamcrest.Matcher.class, org.hamcrest.Matchers.is("Franklin"))))))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|12", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|10", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attribute("owner", org.hamcrest.Matchers.hasProperty("firstName", eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|11", org.hamcrest.Matcher.class, org.hamcrest.Matchers.is("George"))))))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|16", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|14", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attribute("owner", org.hamcrest.Matchers.hasProperty("address", eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|15", org.hamcrest.Matcher.class, org.hamcrest.Matchers.is("110 W. Liberty St."))))))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|20", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|18", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attribute("owner", org.hamcrest.Matchers.hasProperty("city", eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|19", org.hamcrest.Matcher.class, org.hamcrest.Matchers.is("Madison"))))))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|24", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|22", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attribute("owner", org.hamcrest.Matchers.hasProperty("telephone", eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|23", org.hamcrest.Matcher.class, org.hamcrest.Matchers.is("6085551023"))))))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|27", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.OwnerControllerTests|testShowOwner()|26", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("owners/ownerDetails"))));
    }
}

