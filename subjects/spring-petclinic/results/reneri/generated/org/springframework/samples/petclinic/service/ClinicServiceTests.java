/**
 * Copyright 2012-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.service;


/**
 * Integration test of the Service and the Repository layer.
 * <p>
 * ClinicServiceSpringDataJpaTests subclasses benefit from the following services provided by the Spring
 * TestContext Framework: </p> <ul> <li><strong>Spring IoC container caching</strong> which spares us unnecessary set up
 * time between test execution.</li> <li><strong>Dependency Injection</strong> of test fixture instances, meaning that
 * we don't need to perform application context lookups. See the use of {@link Autowired @Autowired} on the <code>{@link
 * ClinicServiceTests#clinicService clinicService}</code> instance variable, which uses autowiring <em>by
 * type</em>. <li><strong>Transaction management</strong>, meaning each test method is executed in its own transaction,
 * which is automatically rolled back by default. Thus, even if tests insert or otherwise change database state, there
 * is no need for a teardown or cleanup script. <li> An {@link org.springframework.context.ApplicationContext
 * ApplicationContext} is also inherited and can be used for explicit bean lookup if necessary. </li> </ul>
 *
 * @author Ken Krebs
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @author Michael Isvy
 * @author Dave Syer
 */
@org.junit.runner.RunWith(org.springframework.test.context.junit4.SpringRunner.class)
@org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest(includeFilters = @org.springframework.context.annotation.ComponentScan.Filter(org.springframework.stereotype.Service.class))
public class ClinicServiceTests {
    @org.springframework.beans.factory.annotation.Autowired
    protected org.springframework.samples.petclinic.owner.OwnerRepository owners;

    @org.springframework.beans.factory.annotation.Autowired
    protected org.springframework.samples.petclinic.owner.PetRepository pets;

    @org.springframework.beans.factory.annotation.Autowired
    protected org.springframework.samples.petclinic.visit.VisitRepository visits;

    @org.springframework.beans.factory.annotation.Autowired
    protected org.springframework.samples.petclinic.vet.VetRepository vets;

    @org.junit.Test
    public void shouldFindOwnersByLastName() {
        java.util.Collection<org.springframework.samples.petclinic.owner.Owner> owners = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindOwnersByLastName()|1", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindOwnersByLastName()|0", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).findByLastName("Davis"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindOwnersByLastName()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindOwnersByLastName()|2", java.util.Collection.class, owners).size())).isEqualTo(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindOwnersByLastName()|5", java.util.Collection.class, (owners = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindOwnersByLastName()|4", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).findByLastName("Daviss")));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindOwnersByLastName()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindOwnersByLastName()|6", java.util.Collection.class, owners).isEmpty())).isTrue();
    }

    @org.junit.Test
    public void shouldFindSingleOwnerWithPet() {
        org.springframework.samples.petclinic.owner.Owner owner = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|1", org.springframework.samples.petclinic.owner.Owner.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|0", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).findById(1));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|2", org.springframework.samples.petclinic.owner.Owner.class, owner).getLastName())).startsWith("Franklin");
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.springframework.samples.petclinic.owner.Pet>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|5", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|4", org.springframework.samples.petclinic.owner.Owner.class, owner).getPets()).size())).isEqualTo(1);
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.springframework.samples.petclinic.owner.PetType>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|12", org.assertj.core.api.ObjectAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.springframework.samples.petclinic.owner.PetType>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|11", org.assertj.core.api.ObjectAssert.class, org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetType>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|10", org.springframework.samples.petclinic.owner.PetType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|9", org.springframework.samples.petclinic.owner.Pet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.springframework.samples.petclinic.owner.Pet>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|8", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|7", org.springframework.samples.petclinic.owner.Owner.class, owner).getPets()).get(0)).getType()))).isNotNull());
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetType>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|16", org.springframework.samples.petclinic.owner.PetType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|15", org.springframework.samples.petclinic.owner.Pet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.springframework.samples.petclinic.owner.Pet>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|14", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindSingleOwnerWithPet()|13", org.springframework.samples.petclinic.owner.Owner.class, owner).getPets()).get(0)).getType()).getName())).isEqualTo("cat");
    }

    @org.junit.Test
    @org.springframework.transaction.annotation.Transactional
    public void shouldInsertOwner() {
        java.util.Collection<org.springframework.samples.petclinic.owner.Owner> owners = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|1", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|0", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).findByLastName("Schultz"));
        int found = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|2", java.util.Collection.class, owners).size());
        org.springframework.samples.petclinic.owner.Owner owner = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|4", org.springframework.samples.petclinic.owner.Owner.class, new org.springframework.samples.petclinic.owner.Owner());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|5", org.springframework.samples.petclinic.owner.Owner.class, owner).setFirstName("Sam");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|6", org.springframework.samples.petclinic.owner.Owner.class, owner).setLastName("Schultz");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|7", org.springframework.samples.petclinic.owner.Owner.class, owner).setAddress("4, Evans Street");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|8", org.springframework.samples.petclinic.owner.Owner.class, owner).setCity("Wollongong");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|9", org.springframework.samples.petclinic.owner.Owner.class, owner).setTelephone("4444444444");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|10", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).save(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|11", org.springframework.samples.petclinic.owner.Owner.class, owner));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|14", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|12", org.springframework.samples.petclinic.owner.Owner.class, owner).getId()).longValue())).isNotEqualTo(0);
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|16", java.util.Collection.class, (owners = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|15", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).findByLastName("Schultz")));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|17", java.util.Collection.class, owners).size())).isEqualTo(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertOwner()|19", found)) + 1));
    }

    @org.junit.Test
    @org.springframework.transaction.annotation.Transactional
    public void shouldUpdateOwner() {
        org.springframework.samples.petclinic.owner.Owner owner = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdateOwner()|1", org.springframework.samples.petclinic.owner.Owner.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdateOwner()|0", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).findById(1));
        java.lang.String oldLastName = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdateOwner()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdateOwner()|2", org.springframework.samples.petclinic.owner.Owner.class, owner).getLastName());
        java.lang.String newLastName = (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdateOwner()|4", oldLastName)) + "X";
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdateOwner()|5", org.springframework.samples.petclinic.owner.Owner.class, owner).setLastName(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdateOwner()|6", newLastName));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdateOwner()|7", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).save(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdateOwner()|8", org.springframework.samples.petclinic.owner.Owner.class, owner));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdateOwner()|10", org.springframework.samples.petclinic.owner.Owner.class, // retrieving new name from database
        (owner = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdateOwner()|9", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).findById(1)));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdateOwner()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdateOwner()|11", org.springframework.samples.petclinic.owner.Owner.class, owner).getLastName())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdateOwner()|13", newLastName));
    }

    @org.junit.Test
    public void shouldFindPetWithCorrectId() {
        org.springframework.samples.petclinic.owner.Pet pet7 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindPetWithCorrectId()|1", org.springframework.samples.petclinic.owner.Pet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindPetWithCorrectId()|0", org.springframework.samples.petclinic.owner.PetRepository.class, this.pets).findById(7));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindPetWithCorrectId()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindPetWithCorrectId()|2", org.springframework.samples.petclinic.owner.Pet.class, pet7).getName())).startsWith("Samantha");
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindPetWithCorrectId()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindPetWithCorrectId()|5", org.springframework.samples.petclinic.owner.Owner.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindPetWithCorrectId()|4", org.springframework.samples.petclinic.owner.Pet.class, pet7).getOwner()).getFirstName())).isEqualTo("Jean");
    }

    @org.junit.Test
    public void shouldFindAllPetTypes() {
        java.util.Collection<org.springframework.samples.petclinic.owner.PetType> petTypes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.springframework.samples.petclinic.owner.PetType>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindAllPetTypes()|1", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindAllPetTypes()|0", org.springframework.samples.petclinic.owner.PetRepository.class, this.pets).findPetTypes());
        org.springframework.samples.petclinic.owner.PetType petType1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetType>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindAllPetTypes()|3", org.springframework.samples.petclinic.owner.PetType.class, org.springframework.samples.petclinic.service.EntityUtils.getById(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.owner.PetType>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindAllPetTypes()|2", java.util.Collection.class, petTypes), org.springframework.samples.petclinic.owner.PetType.class, 1));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindAllPetTypes()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetType>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindAllPetTypes()|4", org.springframework.samples.petclinic.owner.PetType.class, petType1).getName())).isEqualTo("cat");
        org.springframework.samples.petclinic.owner.PetType petType4 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetType>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindAllPetTypes()|7", org.springframework.samples.petclinic.owner.PetType.class, org.springframework.samples.petclinic.service.EntityUtils.getById(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.owner.PetType>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindAllPetTypes()|6", java.util.Collection.class, petTypes), org.springframework.samples.petclinic.owner.PetType.class, 4));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindAllPetTypes()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetType>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindAllPetTypes()|8", org.springframework.samples.petclinic.owner.PetType.class, petType4).getName())).isEqualTo("snake");
    }

    @org.junit.Test
    @org.springframework.transaction.annotation.Transactional
    public void shouldInsertPetIntoDatabaseAndGenerateId() {
        org.springframework.samples.petclinic.owner.Owner owner6 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|1", org.springframework.samples.petclinic.owner.Owner.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|0", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).findById(6));
        int found = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.springframework.samples.petclinic.owner.Pet>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|3", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|2", org.springframework.samples.petclinic.owner.Owner.class, owner6).getPets()).size());
        org.springframework.samples.petclinic.owner.Pet pet = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|5", org.springframework.samples.petclinic.owner.Pet.class, new org.springframework.samples.petclinic.owner.Pet());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|6", org.springframework.samples.petclinic.owner.Pet.class, pet).setName("bowser");
        java.util.Collection<org.springframework.samples.petclinic.owner.PetType> types = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.springframework.samples.petclinic.owner.PetType>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|8", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|7", org.springframework.samples.petclinic.owner.PetRepository.class, this.pets).findPetTypes());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|9", org.springframework.samples.petclinic.owner.Pet.class, pet).setType(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetType>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|11", org.springframework.samples.petclinic.owner.PetType.class, org.springframework.samples.petclinic.service.EntityUtils.getById(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.owner.PetType>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|10", java.util.Collection.class, types), org.springframework.samples.petclinic.owner.PetType.class, 2)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|12", org.springframework.samples.petclinic.owner.Pet.class, pet).setBirthDate(eu.stamp_project.reneri.instrumentation.StateObserver.<java.time.LocalDate>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|13", java.time.LocalDate.class, java.time.LocalDate.now()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|14", org.springframework.samples.petclinic.owner.Owner.class, owner6).addPet(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|15", org.springframework.samples.petclinic.owner.Pet.class, pet));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.springframework.samples.petclinic.owner.Pet>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|17", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|16", org.springframework.samples.petclinic.owner.Owner.class, owner6).getPets()).size())).isEqualTo(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|19", found)) + 1));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|20", org.springframework.samples.petclinic.owner.PetRepository.class, this.pets).save(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|21", org.springframework.samples.petclinic.owner.Pet.class, pet));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|22", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).save(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|23", org.springframework.samples.petclinic.owner.Owner.class, owner6));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|25", org.springframework.samples.petclinic.owner.Owner.class, (owner6 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|24", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).findById(6)));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.springframework.samples.petclinic.owner.Pet>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|27", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|26", org.springframework.samples.petclinic.owner.Owner.class, owner6).getPets()).size())).isEqualTo(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|29", found)) + 1));
        // checks that id has been generated
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldInsertPetIntoDatabaseAndGenerateId()|30", org.springframework.samples.petclinic.owner.Pet.class, pet).getId())).isNotNull();
    }

    @org.junit.Test
    @org.springframework.transaction.annotation.Transactional
    public void shouldUpdatePetName() throws java.lang.Exception {
        org.springframework.samples.petclinic.owner.Pet pet7 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdatePetName()|1", org.springframework.samples.petclinic.owner.Pet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdatePetName()|0", org.springframework.samples.petclinic.owner.PetRepository.class, this.pets).findById(7));
        java.lang.String oldName = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdatePetName()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdatePetName()|2", org.springframework.samples.petclinic.owner.Pet.class, pet7).getName());
        java.lang.String newName = (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdatePetName()|4", oldName)) + "X";
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdatePetName()|5", org.springframework.samples.petclinic.owner.Pet.class, pet7).setName(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdatePetName()|6", newName));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdatePetName()|7", org.springframework.samples.petclinic.owner.PetRepository.class, this.pets).save(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdatePetName()|8", org.springframework.samples.petclinic.owner.Pet.class, pet7));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdatePetName()|10", org.springframework.samples.petclinic.owner.Pet.class, (pet7 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdatePetName()|9", org.springframework.samples.petclinic.owner.PetRepository.class, this.pets).findById(7)));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdatePetName()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdatePetName()|11", org.springframework.samples.petclinic.owner.Pet.class, pet7).getName())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldUpdatePetName()|13", newName));
    }

    @org.junit.Test
    public void shouldFindVets() {
        java.util.Collection<org.springframework.samples.petclinic.vet.Vet> vets = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.vet.Vet>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|1", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.vet.VetRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|0", org.springframework.samples.petclinic.vet.VetRepository.class, this.vets).findAll());
        org.springframework.samples.petclinic.vet.Vet vet = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.vet.Vet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|3", org.springframework.samples.petclinic.vet.Vet.class, org.springframework.samples.petclinic.service.EntityUtils.getById(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.vet.Vet>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|2", java.util.Collection.class, vets), org.springframework.samples.petclinic.vet.Vet.class, 3));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.vet.Vet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|4", org.springframework.samples.petclinic.vet.Vet.class, vet).getLastName())).isEqualTo("Douglas");
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.vet.Vet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|6", org.springframework.samples.petclinic.vet.Vet.class, vet).getNrOfSpecialties())).isEqualTo(2);
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.vet.Specialty>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|10", org.springframework.samples.petclinic.vet.Specialty.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.springframework.samples.petclinic.vet.Specialty>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|9", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.vet.Vet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|8", org.springframework.samples.petclinic.vet.Vet.class, vet).getSpecialties()).get(0)).getName())).isEqualTo("dentistry");
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.vet.Specialty>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|14", org.springframework.samples.petclinic.vet.Specialty.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.springframework.samples.petclinic.vet.Specialty>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|13", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.vet.Vet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVets()|12", org.springframework.samples.petclinic.vet.Vet.class, vet).getSpecialties()).get(1)).getName())).isEqualTo("surgery");
    }

    @org.junit.Test
    @org.springframework.transaction.annotation.Transactional
    public void shouldAddNewVisitForPet() {
        org.springframework.samples.petclinic.owner.Pet pet7 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|1", org.springframework.samples.petclinic.owner.Pet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|0", org.springframework.samples.petclinic.owner.PetRepository.class, this.pets).findById(7));
        int found = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.springframework.samples.petclinic.visit.Visit>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|3", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|2", org.springframework.samples.petclinic.owner.Pet.class, pet7).getVisits()).size());
        org.springframework.samples.petclinic.visit.Visit visit = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.visit.Visit>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|5", org.springframework.samples.petclinic.visit.Visit.class, new org.springframework.samples.petclinic.visit.Visit());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|6", org.springframework.samples.petclinic.owner.Pet.class, pet7).addVisit(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.visit.Visit>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|7", org.springframework.samples.petclinic.visit.Visit.class, visit));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.visit.Visit>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|8", org.springframework.samples.petclinic.visit.Visit.class, visit).setDescription("test");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.visit.VisitRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|9", org.springframework.samples.petclinic.visit.VisitRepository.class, this.visits).save(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.visit.Visit>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|10", org.springframework.samples.petclinic.visit.Visit.class, visit));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|11", org.springframework.samples.petclinic.owner.PetRepository.class, this.pets).save(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|12", org.springframework.samples.petclinic.owner.Pet.class, pet7));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|14", org.springframework.samples.petclinic.owner.Pet.class, (pet7 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|13", org.springframework.samples.petclinic.owner.PetRepository.class, this.pets).findById(7)));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.springframework.samples.petclinic.visit.Visit>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|16", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|15", org.springframework.samples.petclinic.owner.Pet.class, pet7).getVisits()).size())).isEqualTo(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|18", found)) + 1));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.visit.Visit>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldAddNewVisitForPet()|19", org.springframework.samples.petclinic.visit.Visit.class, visit).getId())).isNotNull();
    }

    @org.junit.Test
    public void shouldFindVisitsByPetId() throws java.lang.Exception {
        java.util.Collection<org.springframework.samples.petclinic.visit.Visit> visits = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.springframework.samples.petclinic.visit.Visit>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|1", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.visit.VisitRepository>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|0", org.springframework.samples.petclinic.visit.VisitRepository.class, this.visits).findByPetId(7));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.visit.Visit>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|2", java.util.Collection.class, visits).size())).isEqualTo(2);
        org.springframework.samples.petclinic.visit.Visit[] visitArr = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.visit.Visit[]>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|8", org.springframework.samples.petclinic.visit.Visit[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.visit.Visit>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|4", java.util.Collection.class, visits).toArray(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.visit.Visit[]>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|7", org.springframework.samples.petclinic.visit.Visit[].class, new org.springframework.samples.petclinic.visit.Visit[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.springframework.samples.petclinic.visit.Visit>>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|5", java.util.Collection.class, visits).size())])));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.time.LocalDate>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|11", java.time.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.visit.Visit>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|10", org.springframework.samples.petclinic.visit.Visit.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.visit.Visit[]>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|9", org.springframework.samples.petclinic.visit.Visit[].class, visitArr)[0]).getDate())).isNotNull();
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.visit.Visit>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|13", org.springframework.samples.petclinic.visit.Visit.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.visit.Visit[]>observeState("org.springframework.samples.petclinic.service.ClinicServiceTests|shouldFindVisitsByPetId()|12", org.springframework.samples.petclinic.visit.Visit[].class, visitArr)[0]).getPetId())).isEqualTo(7);
    }
}

