package org.springframework.samples.petclinic.owner;


/**
 * Test class for the {@link PetController}
 *
 * @author Colin But
 */
@org.junit.runner.RunWith(org.springframework.test.context.junit4.SpringRunner.class)
@org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest(value = org.springframework.samples.petclinic.owner.PetController.class, includeFilters = @org.springframework.context.annotation.ComponentScan.Filter(value = org.springframework.samples.petclinic.owner.PetTypeFormatter.class, type = org.springframework.context.annotation.FilterType.ASSIGNABLE_TYPE))
public class PetControllerTests {
    private static final int TEST_OWNER_ID = 1;

    private static final int TEST_PET_ID = 1;

    @org.springframework.beans.factory.annotation.Autowired
    private org.springframework.test.web.servlet.MockMvc mockMvc;

    @org.springframework.boot.test.mock.mockito.MockBean
    private org.springframework.samples.petclinic.owner.PetRepository pets;

    @org.springframework.boot.test.mock.mockito.MockBean
    private org.springframework.samples.petclinic.owner.OwnerRepository owners;

    @org.junit.Before
    public void setup() {
        org.springframework.samples.petclinic.owner.PetType cat = eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetType>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|0", org.springframework.samples.petclinic.owner.PetType.class, new org.springframework.samples.petclinic.owner.PetType());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetType>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|1", org.springframework.samples.petclinic.owner.PetType.class, cat).setId(3);
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetType>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|2", org.springframework.samples.petclinic.owner.PetType.class, cat).setName("hamster");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.BDDMockito.BDDMyOngoingStubbing<java.util.List<org.springframework.samples.petclinic.owner.PetType>>>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|8", org.mockito.BDDMockito.BDDMyOngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.BDDMockito.BDDMyOngoingStubbing<java.util.List<org.springframework.samples.petclinic.owner.PetType>>>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|5", org.mockito.BDDMockito.BDDMyOngoingStubbing.class, org.mockito.BDDMockito.given(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.springframework.samples.petclinic.owner.PetType>>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|4", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetRepository>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|3", org.springframework.samples.petclinic.owner.PetRepository.class, this.pets).findPetTypes()))).willReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<org.springframework.samples.petclinic.owner.PetType>>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|7", java.util.ArrayList.class, org.assertj.core.util.Lists.newArrayList(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetType>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|6", org.springframework.samples.petclinic.owner.PetType.class, cat)))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.BDDMockito.BDDMyOngoingStubbing<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|13", org.mockito.BDDMockito.BDDMyOngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.BDDMockito.BDDMyOngoingStubbing<org.springframework.samples.petclinic.owner.Owner>>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|11", org.mockito.BDDMockito.BDDMyOngoingStubbing.class, org.mockito.BDDMockito.given(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|10", org.springframework.samples.petclinic.owner.Owner.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.OwnerRepository>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|9", org.springframework.samples.petclinic.owner.OwnerRepository.class, this.owners).findById(org.springframework.samples.petclinic.owner.PetControllerTests.TEST_OWNER_ID)))).willReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Owner>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|12", org.springframework.samples.petclinic.owner.Owner.class, new org.springframework.samples.petclinic.owner.Owner())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.BDDMockito.BDDMyOngoingStubbing<org.springframework.samples.petclinic.owner.Pet>>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|18", org.mockito.BDDMockito.BDDMyOngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.BDDMockito.BDDMyOngoingStubbing<org.springframework.samples.petclinic.owner.Pet>>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|16", org.mockito.BDDMockito.BDDMyOngoingStubbing.class, org.mockito.BDDMockito.given(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|15", org.springframework.samples.petclinic.owner.Pet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetRepository>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|14", org.springframework.samples.petclinic.owner.PetRepository.class, this.pets).findById(org.springframework.samples.petclinic.owner.PetControllerTests.TEST_PET_ID)))).willReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|setup()|17", org.springframework.samples.petclinic.owner.Pet.class, new org.springframework.samples.petclinic.owner.Pet())));
    }

    @org.junit.Test
    public void testInitCreationForm() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitCreationForm()|11", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitCreationForm()|8", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitCreationForm()|5", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitCreationForm()|2", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitCreationForm()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitCreationForm()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", org.springframework.samples.petclinic.owner.PetControllerTests.TEST_OWNER_ID)))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitCreationForm()|4", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitCreationForm()|3", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).isOk()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitCreationForm()|7", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitCreationForm()|6", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("pets/createOrUpdatePetForm")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitCreationForm()|10", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitCreationForm()|9", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeExists("pet"))));
    }

    @org.junit.Test
    public void testProcessCreationFormSuccess() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormSuccess()|11", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormSuccess()|8", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormSuccess()|5", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormSuccess()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormSuccess()|4", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormSuccess()|3", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormSuccess()|2", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormSuccess()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", org.springframework.samples.petclinic.owner.PetControllerTests.TEST_OWNER_ID)).param("name", "Betty")).param("type", "hamster")).param("birthDate", "2015-02-12")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormSuccess()|7", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormSuccess()|6", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).is3xxRedirection()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormSuccess()|10", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormSuccess()|9", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("redirect:/owners/{ownerId}"))));
    }

    @org.junit.Test
    public void testProcessCreationFormHasErrors() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|22", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|19", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|16", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|13", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|10", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|7", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|4", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|3", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|2", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", org.springframework.samples.petclinic.owner.PetControllerTests.TEST_OWNER_ID)).param("name", "Betty")).param("birthDate", "2015-02-12")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|6", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|5", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasNoErrors("owner")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|9", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|8", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasErrors("pet")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|12", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|11", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasFieldErrors("pet", "type")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|15", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|14", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasFieldErrorCode("pet", "type", "required")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|18", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|17", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).isOk()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|21", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessCreationFormHasErrors()|20", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("pets/createOrUpdatePetForm"))));
    }

    @org.junit.Test
    public void testInitUpdateForm() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitUpdateForm()|11", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitUpdateForm()|8", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitUpdateForm()|5", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitUpdateForm()|2", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitUpdateForm()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitUpdateForm()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", org.springframework.samples.petclinic.owner.PetControllerTests.TEST_OWNER_ID, org.springframework.samples.petclinic.owner.PetControllerTests.TEST_PET_ID)))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitUpdateForm()|4", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitUpdateForm()|3", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).isOk()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitUpdateForm()|7", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitUpdateForm()|6", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeExists("pet")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitUpdateForm()|10", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testInitUpdateForm()|9", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("pets/createOrUpdatePetForm"))));
    }

    @org.junit.Test
    public void testProcessUpdateFormSuccess() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormSuccess()|11", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormSuccess()|8", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormSuccess()|5", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormSuccess()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormSuccess()|4", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormSuccess()|3", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormSuccess()|2", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormSuccess()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", org.springframework.samples.petclinic.owner.PetControllerTests.TEST_OWNER_ID, org.springframework.samples.petclinic.owner.PetControllerTests.TEST_PET_ID)).param("name", "Betty")).param("type", "hamster")).param("birthDate", "2015-02-12")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormSuccess()|7", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormSuccess()|6", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).is3xxRedirection()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormSuccess()|10", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormSuccess()|9", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("redirect:/owners/{ownerId}"))));
    }

    @org.junit.Test
    public void testProcessUpdateFormHasErrors() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|16", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|13", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|10", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|7", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|4", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|3", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|2", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", org.springframework.samples.petclinic.owner.PetControllerTests.TEST_OWNER_ID, org.springframework.samples.petclinic.owner.PetControllerTests.TEST_PET_ID)).param("name", "Betty")).param("birthDate", "2015/02/12")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|6", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|5", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasNoErrors("owner")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|9", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|8", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasErrors("pet")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|12", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|11", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).isOk()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|15", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.PetControllerTests|testProcessUpdateFormHasErrors()|14", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("pets/createOrUpdatePetForm"))));
    }
}

