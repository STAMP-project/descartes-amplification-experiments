package org.springframework.samples.petclinic.owner;


/**
 * Test class for {@link VisitController}
 *
 * @author Colin But
 */
@org.junit.runner.RunWith(org.springframework.test.context.junit4.SpringRunner.class)
@org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest(org.springframework.samples.petclinic.owner.VisitController.class)
public class VisitControllerTests {
    private static final int TEST_PET_ID = 1;

    @org.springframework.beans.factory.annotation.Autowired
    private org.springframework.test.web.servlet.MockMvc mockMvc;

    @org.springframework.boot.test.mock.mockito.MockBean
    private org.springframework.samples.petclinic.visit.VisitRepository visits;

    @org.springframework.boot.test.mock.mockito.MockBean
    private org.springframework.samples.petclinic.owner.PetRepository pets;

    @org.junit.Before
    public void init() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.BDDMockito.BDDMyOngoingStubbing<org.springframework.samples.petclinic.owner.Pet>>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|init()|4", org.mockito.BDDMockito.BDDMyOngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.BDDMockito.BDDMyOngoingStubbing<org.springframework.samples.petclinic.owner.Pet>>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|init()|2", org.mockito.BDDMockito.BDDMyOngoingStubbing.class, org.mockito.BDDMockito.given(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|init()|1", org.springframework.samples.petclinic.owner.Pet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.PetRepository>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|init()|0", org.springframework.samples.petclinic.owner.PetRepository.class, this.pets).findById(org.springframework.samples.petclinic.owner.VisitControllerTests.TEST_PET_ID)))).willReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.samples.petclinic.owner.Pet>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|init()|3", org.springframework.samples.petclinic.owner.Pet.class, new org.springframework.samples.petclinic.owner.Pet())));
    }

    @org.junit.Test
    public void testInitNewVisitForm() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testInitNewVisitForm()|8", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testInitNewVisitForm()|5", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testInitNewVisitForm()|2", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testInitNewVisitForm()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testInitNewVisitForm()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get("/owners/*/pets/{petId}/visits/new", org.springframework.samples.petclinic.owner.VisitControllerTests.TEST_PET_ID)))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testInitNewVisitForm()|4", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testInitNewVisitForm()|3", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).isOk()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testInitNewVisitForm()|7", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testInitNewVisitForm()|6", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("pets/createOrUpdateVisitForm"))));
    }

    @org.junit.Test
    public void testProcessNewVisitFormSuccess() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormSuccess()|10", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormSuccess()|7", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormSuccess()|4", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormSuccess()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormSuccess()|3", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormSuccess()|2", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormSuccess()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post("/owners/*/pets/{petId}/visits/new", org.springframework.samples.petclinic.owner.VisitControllerTests.TEST_PET_ID)).param("name", "George")).param("description", "Visit Description")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormSuccess()|6", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormSuccess()|5", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).is3xxRedirection()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormSuccess()|9", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormSuccess()|8", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("redirect:/owners/{ownerId}"))));
    }

    @org.junit.Test
    public void testProcessNewVisitFormHasErrors() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormHasErrors()|12", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormHasErrors()|9", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormHasErrors()|6", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultActions>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormHasErrors()|3", org.springframework.test.web.servlet.ResultActions.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.MockMvc>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormHasErrors()|0", org.springframework.test.web.servlet.MockMvc.class, mockMvc).perform(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormHasErrors()|2", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormHasErrors()|1", org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.class, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post("/owners/*/pets/{petId}/visits/new", org.springframework.samples.petclinic.owner.VisitControllerTests.TEST_PET_ID)).param("name", "George")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormHasErrors()|5", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ModelResultMatchers>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormHasErrors()|4", org.springframework.test.web.servlet.result.ModelResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()).attributeHasErrors("visit")))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormHasErrors()|8", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.StatusResultMatchers>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormHasErrors()|7", org.springframework.test.web.servlet.result.StatusResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()).isOk()))).andExpect(eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.ResultMatcher>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormHasErrors()|11", org.springframework.test.web.servlet.ResultMatcher.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.springframework.test.web.servlet.result.ViewResultMatchers>observeState("org.springframework.samples.petclinic.owner.VisitControllerTests|testProcessNewVisitFormHasErrors()|10", org.springframework.test.web.servlet.result.ViewResultMatchers.class, org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()).name("pets/createOrUpdateVisitForm"))));
    }
}

