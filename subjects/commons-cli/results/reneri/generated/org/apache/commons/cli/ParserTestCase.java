/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.cli;


/**
 * Abstract test case testing common parser features.
 */
public abstract class ParserTestCase {
    protected org.apache.commons.cli.CommandLineParser parser;

    protected org.apache.commons.cli.Options options;

    @org.junit.Before
    public void setUp() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|setUp()|3", org.apache.commons.cli.Options.class, (options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|setUp()|2", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|setUp()|1", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|setUp()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options()).addOption("a", "enable-a", false, "turn [a] on or off")).addOption("b", "bfile", true, "set the value of [b]")).addOption("c", "copt", false, "turn [c] on or off")));
    }

    @org.junit.Test
    public void testSimpleShort() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testSimpleShort()|0", java.lang.String[].class, new java.lang.String[]{ "-a", "-b", "toast", "foo", "bar" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSimpleShort()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testSimpleShort()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testSimpleShort()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testSimpleShort()|3", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -a is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSimpleShort()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSimpleShort()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("a")));
        org.junit.Assert.assertTrue("Confirm -b is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSimpleShort()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSimpleShort()|7", org.apache.commons.cli.CommandLine.class, cl).hasOption("b")));
        org.junit.Assert.assertTrue("Confirm arg of -b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSimpleShort()|11", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSimpleShort()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSimpleShort()|9", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("b")).equals("toast")));
        org.junit.Assert.assertTrue("Confirm size of extra args", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSimpleShort()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testSimpleShort()|13", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSimpleShort()|12", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 2));
    }

    @org.junit.Test
    public void testSimpleLong() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testSimpleLong()|0", java.lang.String[].class, new java.lang.String[]{ "--enable-a", "--bfile", "toast", "foo", "bar" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSimpleLong()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testSimpleLong()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testSimpleLong()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testSimpleLong()|3", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -a is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSimpleLong()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSimpleLong()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("a")));
        org.junit.Assert.assertTrue("Confirm -b is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSimpleLong()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSimpleLong()|7", org.apache.commons.cli.CommandLine.class, cl).hasOption("b")));
        org.junit.Assert.assertTrue("Confirm arg of -b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSimpleLong()|11", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSimpleLong()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSimpleLong()|9", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("b")).equals("toast")));
        org.junit.Assert.assertTrue("Confirm arg of --bfile", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSimpleLong()|14", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSimpleLong()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSimpleLong()|12", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("bfile")).equals("toast")));
        org.junit.Assert.assertTrue("Confirm size of extra args", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSimpleLong()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testSimpleLong()|16", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSimpleLong()|15", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 2));
    }

    @org.junit.Test
    public void testMultiple() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|0", java.lang.String[].class, new java.lang.String[]{ "-c", "foobar", "-b", "toast" });
        org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|3", java.lang.String[].class, args), true));
        org.junit.Assert.assertTrue("Confirm -c is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultiple()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")));
        org.junit.Assert.assertTrue(("Confirm  3 extra args: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultiple()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|8", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|7", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size()))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultiple()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|11", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|10", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 3));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|17", org.apache.commons.cli.CommandLine.class, (cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|13", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|14", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|16", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|15", org.apache.commons.cli.CommandLine.class, cl).getArgs()))));
        org.junit.Assert.assertTrue("Confirm -c is not set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultiple()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|18", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")))));
        org.junit.Assert.assertTrue("Confirm -b is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultiple()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|20", org.apache.commons.cli.CommandLine.class, cl).hasOption("b")));
        org.junit.Assert.assertTrue("Confirm arg of -b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultiple()|24", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultiple()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|22", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("b")).equals("toast")));
        org.junit.Assert.assertTrue(("Confirm  1 extra arg: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultiple()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|26", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|25", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size()))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultiple()|30", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|29", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|28", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 1));
        org.junit.Assert.assertTrue(("Confirm  value of extra arg: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultiple()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|32", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|31", org.apache.commons.cli.CommandLine.class, cl).getArgList()).get(0)))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultiple()|37", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultiple()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|35", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultiple()|34", org.apache.commons.cli.CommandLine.class, cl).getArgList()).get(0)).equals("foobar")));
    }

    @org.junit.Test
    public void testMultipleWithLong() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|0", java.lang.String[].class, new java.lang.String[]{ "--copt", "foobar", "--bfile", "toast" });
        org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|3", java.lang.String[].class, args), true));
        org.junit.Assert.assertTrue("Confirm -c is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")));
        org.junit.Assert.assertTrue(("Confirm  3 extra args: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|8", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|7", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size()))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|11", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|10", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 3));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|17", org.apache.commons.cli.CommandLine.class, (cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|13", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|14", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|16", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|15", org.apache.commons.cli.CommandLine.class, cl).getArgs()))));
        org.junit.Assert.assertTrue("Confirm -c is not set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|18", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")))));
        org.junit.Assert.assertTrue("Confirm -b is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|20", org.apache.commons.cli.CommandLine.class, cl).hasOption("b")));
        org.junit.Assert.assertTrue("Confirm arg of -b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|24", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|22", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("b")).equals("toast")));
        org.junit.Assert.assertTrue(("Confirm  1 extra arg: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|26", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|25", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size()))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|30", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|29", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|28", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 1));
        org.junit.Assert.assertTrue(("Confirm  value of extra arg: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|32", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|31", org.apache.commons.cli.CommandLine.class, cl).getArgList()).get(0)))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|37", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|35", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMultipleWithLong()|34", org.apache.commons.cli.CommandLine.class, cl).getArgList()).get(0)).equals("foobar")));
    }

    @org.junit.Test
    public void testUnrecognizedOption() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnrecognizedOption()|0", java.lang.String[].class, new java.lang.String[]{ "-a", "-d", "-b", "toast", "foo", "bar" });
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnrecognizedOption()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testUnrecognizedOption()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnrecognizedOption()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnrecognizedOption()|3", java.lang.String[].class, args)));
            org.junit.Assert.fail("UnrecognizedOptionException wasn't thrown");
        } catch (final org.apache.commons.cli.UnrecognizedOptionException e) {
            org.junit.Assert.assertEquals("-d", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testUnrecognizedOption()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.UnrecognizedOptionException>observeState("org.apache.commons.cli.ParserTestCase|testUnrecognizedOption()|5", org.apache.commons.cli.UnrecognizedOptionException.class, e).getOption()));
        }
    }

    @org.junit.Test
    public void testMissingArg() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMissingArg()|0", java.lang.String[].class, new java.lang.String[]{ "-b" });
        boolean caught = false;
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMissingArg()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testMissingArg()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingArg()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMissingArg()|3", java.lang.String[].class, args)));
        } catch (final org.apache.commons.cli.MissingArgumentException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMissingArg()|5", (caught = true));
            org.junit.Assert.assertEquals("option missing an argument", "b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMissingArg()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testMissingArg()|7", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingArgumentException>observeState("org.apache.commons.cli.ParserTestCase|testMissingArg()|6", org.apache.commons.cli.MissingArgumentException.class, e).getOption()).getOpt()));
        }
        org.junit.Assert.assertTrue("Confirm MissingArgumentException caught", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMissingArg()|9", caught));
    }

    @org.junit.Test
    public void testDoubleDash1() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|0", java.lang.String[].class, new java.lang.String[]{ "--copt", "--", "-b", "toast" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|3", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -c is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")));
        org.junit.Assert.assertTrue("Confirm -b is not set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|7", org.apache.commons.cli.CommandLine.class, cl).hasOption("b")))));
        org.junit.Assert.assertTrue(("Confirm 2 extra args: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|10", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|9", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size()))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|13", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash1()|12", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 2));
    }

    @org.junit.Test
    public void testDoubleDash2() throws java.lang.Exception {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|1", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|3", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|2", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasArg()).create('n'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|7", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|5", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|6", org.apache.commons.cli.Option.class, org.apache.commons.cli.OptionBuilder.create('m'))));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|11", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|8", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|9", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|10", java.lang.String[].class, new java.lang.String[]{ "-n", "--", "-m" })));
            org.junit.Assert.fail("MissingArgumentException not thrown for option -n");
        } catch (final org.apache.commons.cli.MissingArgumentException e) {
            org.junit.Assert.assertNotNull("option null", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|13", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingArgumentException>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|12", org.apache.commons.cli.MissingArgumentException.class, e).getOption()));
            org.junit.Assert.assertEquals("n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|15", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingArgumentException>observeState("org.apache.commons.cli.ParserTestCase|testDoubleDash2()|14", org.apache.commons.cli.MissingArgumentException.class, e).getOption()).getOpt()));
        }
    }

    @org.junit.Test
    public void testSingleDash() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|0", java.lang.String[].class, new java.lang.String[]{ "--copt", "-b", "-", "-a", "-" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|3", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -a is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSingleDash()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("a")));
        org.junit.Assert.assertTrue("Confirm -b is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSingleDash()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|7", org.apache.commons.cli.CommandLine.class, cl).hasOption("b")));
        org.junit.Assert.assertTrue("Confirm arg of -b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSingleDash()|11", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSingleDash()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|9", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("b")).equals("-")));
        org.junit.Assert.assertTrue(("Confirm 1 extra arg: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSingleDash()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|13", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|12", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size()))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSingleDash()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|16", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|15", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 1));
        org.junit.Assert.assertTrue(("Confirm value of extra arg: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSingleDash()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|19", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|18", org.apache.commons.cli.CommandLine.class, cl).getArgList()).get(0)))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSingleDash()|24", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testSingleDash()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|22", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testSingleDash()|21", org.apache.commons.cli.CommandLine.class, cl).getArgList()).get(0)).equals("-")));
    }

    @org.junit.Test
    public void testStopAtUnexpectedArg() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testStopAtUnexpectedArg()|0", java.lang.String[].class, new java.lang.String[]{ "-c", "foober", "-b", "toast" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtUnexpectedArg()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testStopAtUnexpectedArg()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testStopAtUnexpectedArg()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testStopAtUnexpectedArg()|3", java.lang.String[].class, args), true));
        org.junit.Assert.assertTrue("Confirm -c is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopAtUnexpectedArg()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtUnexpectedArg()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")));
        org.junit.Assert.assertTrue(("Confirm  3 extra args: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopAtUnexpectedArg()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopAtUnexpectedArg()|8", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtUnexpectedArg()|7", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size()))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopAtUnexpectedArg()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopAtUnexpectedArg()|11", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtUnexpectedArg()|10", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 3));
    }

    @org.junit.Test
    public void testStopAtExpectedArg() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|0", java.lang.String[].class, new java.lang.String[]{ "-b", "foo" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|3", java.lang.String[].class, args), true));
        org.junit.Assert.assertTrue("Confirm -b is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption('b')));
        org.junit.Assert.assertEquals("Confirm -b is set", "foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|7", org.apache.commons.cli.CommandLine.class, cl).getOptionValue('b')));
        org.junit.Assert.assertTrue(("Confirm no extra args: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|10", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|9", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size()))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|13", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtExpectedArg()|12", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 0));
    }

    @org.junit.Test
    public void testStopAtNonOptionShort() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionShort()|0", java.lang.String[].class, new java.lang.String[]{ "-z", "-a", "-btoast" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionShort()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionShort()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionShort()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionShort()|3", java.lang.String[].class, args), true));
        org.junit.Assert.assertFalse("Confirm -a is not set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionShort()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionShort()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("a")));
        org.junit.Assert.assertTrue(("Confirm  3 extra args: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionShort()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionShort()|8", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionShort()|7", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size()))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionShort()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionShort()|11", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionShort()|10", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 3));
    }

    @org.junit.Test
    public void testStopAtNonOptionLong() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|0", java.lang.String[].class, new java.lang.String[]{ "--zop==1", "-abtoast", "--b=bar" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|3", java.lang.String[].class, args), true));
        org.junit.Assert.assertFalse("Confirm -a is not set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("a")));
        org.junit.Assert.assertFalse("Confirm -b is not set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|7", org.apache.commons.cli.CommandLine.class, cl).hasOption("b")));
        org.junit.Assert.assertTrue(("Confirm  3 extra args: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|10", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|9", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size()))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|13", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopAtNonOptionLong()|12", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 3));
    }

    @org.junit.Test
    public void testNegativeArgument() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testNegativeArgument()|0", java.lang.String[].class, new java.lang.String[]{ "-b", "-1" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testNegativeArgument()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testNegativeArgument()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testNegativeArgument()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testNegativeArgument()|3", java.lang.String[].class, args)));
        org.junit.Assert.assertEquals("-1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testNegativeArgument()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testNegativeArgument()|5", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("b")));
    }

    @org.junit.Test
    public void testNegativeOption() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testNegativeOption()|0", java.lang.String[].class, new java.lang.String[]{ "-b", "-1" });
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testNegativeOption()|2", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testNegativeOption()|1", org.apache.commons.cli.Options.class, options).addOption("1", false, null));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testNegativeOption()|6", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testNegativeOption()|3", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testNegativeOption()|4", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testNegativeOption()|5", java.lang.String[].class, args)));
        org.junit.Assert.assertEquals("-1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testNegativeOption()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testNegativeOption()|7", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("b")));
    }

    @org.junit.Test
    public void testArgumentStartingWithHyphen() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testArgumentStartingWithHyphen()|0", java.lang.String[].class, new java.lang.String[]{ "-b", "-foo" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testArgumentStartingWithHyphen()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testArgumentStartingWithHyphen()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testArgumentStartingWithHyphen()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testArgumentStartingWithHyphen()|3", java.lang.String[].class, args)));
        org.junit.Assert.assertEquals("-foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testArgumentStartingWithHyphen()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testArgumentStartingWithHyphen()|5", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("b")));
    }

    @org.junit.Test
    public void testShortWithEqual() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testShortWithEqual()|0", java.lang.String[].class, new java.lang.String[]{ "-f=bar" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testShortWithEqual()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testShortWithEqual()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testShortWithEqual()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testShortWithEqual()|5", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testShortWithEqual()|4", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testShortWithEqual()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("foo")).hasArg()).create('f'))));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testShortWithEqual()|10", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testShortWithEqual()|7", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testShortWithEqual()|8", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testShortWithEqual()|9", java.lang.String[].class, args)));
        org.junit.Assert.assertEquals("bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testShortWithEqual()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testShortWithEqual()|11", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("foo")));
    }

    @org.junit.Test
    public void testShortWithoutEqual() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testShortWithoutEqual()|0", java.lang.String[].class, new java.lang.String[]{ "-fbar" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testShortWithoutEqual()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testShortWithoutEqual()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testShortWithoutEqual()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testShortWithoutEqual()|5", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testShortWithoutEqual()|4", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testShortWithoutEqual()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("foo")).hasArg()).create('f'))));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testShortWithoutEqual()|10", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testShortWithoutEqual()|7", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testShortWithoutEqual()|8", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testShortWithoutEqual()|9", java.lang.String[].class, args)));
        org.junit.Assert.assertEquals("bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testShortWithoutEqual()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testShortWithoutEqual()|11", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("foo")));
    }

    @org.junit.Test
    public void testLongWithEqualDoubleDash() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualDoubleDash()|0", java.lang.String[].class, new java.lang.String[]{ "--foo=bar" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualDoubleDash()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualDoubleDash()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualDoubleDash()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualDoubleDash()|5", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualDoubleDash()|4", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualDoubleDash()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("foo")).hasArg()).create('f'))));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualDoubleDash()|10", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualDoubleDash()|7", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualDoubleDash()|8", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualDoubleDash()|9", java.lang.String[].class, args)));
        org.junit.Assert.assertEquals("bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testLongWithEqualDoubleDash()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualDoubleDash()|11", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("foo")));
    }

    @org.junit.Test
    public void testLongWithEqualSingleDash() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualSingleDash()|0", java.lang.String[].class, new java.lang.String[]{ "-foo=bar" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualSingleDash()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualSingleDash()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualSingleDash()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualSingleDash()|5", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualSingleDash()|4", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualSingleDash()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("foo")).hasArg()).create('f'))));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualSingleDash()|10", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualSingleDash()|7", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualSingleDash()|8", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualSingleDash()|9", java.lang.String[].class, args)));
        org.junit.Assert.assertEquals("bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testLongWithEqualSingleDash()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testLongWithEqualSingleDash()|11", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("foo")));
    }

    @org.junit.Test
    public void testLongWithoutEqualSingleDash() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualSingleDash()|0", java.lang.String[].class, new java.lang.String[]{ "-foobar" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualSingleDash()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualSingleDash()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualSingleDash()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualSingleDash()|5", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualSingleDash()|4", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualSingleDash()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("foo")).hasArg()).create('f'))));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualSingleDash()|10", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualSingleDash()|7", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualSingleDash()|8", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualSingleDash()|9", java.lang.String[].class, args)));
        org.junit.Assert.assertEquals("bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualSingleDash()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualSingleDash()|11", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("foo")));
    }

    @org.junit.Test
    public void testAmbiguousLongWithoutEqualSingleDash() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|0", java.lang.String[].class, new java.lang.String[]{ "-b", "-foobar" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|5", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|4", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("foo")).hasOptionalArg()).create('f'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|11", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|7", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|10", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|9", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|8", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("bar")).hasOptionalArg()).create('b'))));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|15", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|12", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|13", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|14", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|16", org.apache.commons.cli.CommandLine.class, cl).hasOption("b")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|18", org.apache.commons.cli.CommandLine.class, cl).hasOption("f")));
        org.junit.Assert.assertEquals("bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousLongWithoutEqualSingleDash()|20", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("foo")));
    }

    @org.junit.Test
    public void testLongWithoutEqualDoubleDash() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualDoubleDash()|0", java.lang.String[].class, new java.lang.String[]{ "--foobar" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualDoubleDash()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualDoubleDash()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualDoubleDash()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualDoubleDash()|5", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualDoubleDash()|4", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualDoubleDash()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("foo")).hasArg()).create('f'))));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualDoubleDash()|10", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualDoubleDash()|7", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualDoubleDash()|8", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualDoubleDash()|9", java.lang.String[].class, args), true));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualDoubleDash()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testLongWithoutEqualDoubleDash()|11", org.apache.commons.cli.CommandLine.class, cl).hasOption("foo")));// foo isn't expected to be recognized with a double dash

    }

    @org.junit.Test
    public void testLongWithUnexpectedArgument1() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument1()|0", java.lang.String[].class, new java.lang.String[]{ "--foo=bar" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument1()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument1()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument1()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument1()|4", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument1()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("foo")).create('f'))));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument1()|9", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument1()|6", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument1()|7", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument1()|8", java.lang.String[].class, args)));
        } catch (final org.apache.commons.cli.UnrecognizedOptionException e) {
            org.junit.Assert.assertEquals("--foo=bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument1()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.UnrecognizedOptionException>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument1()|10", org.apache.commons.cli.UnrecognizedOptionException.class, e).getOption()));
            return;
        }
        org.junit.Assert.fail("UnrecognizedOptionException not thrown");
    }

    @org.junit.Test
    public void testLongWithUnexpectedArgument2() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument2()|0", java.lang.String[].class, new java.lang.String[]{ "-foobar" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument2()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument2()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument2()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument2()|4", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument2()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("foo")).create('f'))));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument2()|9", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument2()|6", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument2()|7", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument2()|8", java.lang.String[].class, args)));
        } catch (final org.apache.commons.cli.UnrecognizedOptionException e) {
            org.junit.Assert.assertEquals("-foobar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument2()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.UnrecognizedOptionException>observeState("org.apache.commons.cli.ParserTestCase|testLongWithUnexpectedArgument2()|10", org.apache.commons.cli.UnrecognizedOptionException.class, e).getOption()));
            return;
        }
        org.junit.Assert.fail("UnrecognizedOptionException not thrown");
    }

    @org.junit.Test
    public void testShortWithUnexpectedArgument() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testShortWithUnexpectedArgument()|0", java.lang.String[].class, new java.lang.String[]{ "-f=bar" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testShortWithUnexpectedArgument()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testShortWithUnexpectedArgument()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testShortWithUnexpectedArgument()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testShortWithUnexpectedArgument()|4", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testShortWithUnexpectedArgument()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("foo")).create('f'))));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testShortWithUnexpectedArgument()|9", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testShortWithUnexpectedArgument()|6", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testShortWithUnexpectedArgument()|7", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testShortWithUnexpectedArgument()|8", java.lang.String[].class, args)));
        } catch (final org.apache.commons.cli.UnrecognizedOptionException e) {
            org.junit.Assert.assertEquals("-f=bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testShortWithUnexpectedArgument()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.UnrecognizedOptionException>observeState("org.apache.commons.cli.ParserTestCase|testShortWithUnexpectedArgument()|10", org.apache.commons.cli.UnrecognizedOptionException.class, e).getOption()));
            return;
        }
        org.junit.Assert.fail("UnrecognizedOptionException not thrown");
    }

    @org.junit.Test
    public void testPropertiesOption1() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|0", java.lang.String[].class, new java.lang.String[]{ "-Jsource=1.5", "-J", "target", "1.5", "foo" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|5", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|4", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withValueSeparator()).hasArgs(2)).create('J'))));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|10", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|7", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|8", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|9", java.lang.String[].class, args)));
        final java.util.List<java.lang.String> values = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|13", java.util.List.class, java.util.Arrays.asList(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|12", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|11", org.apache.commons.cli.CommandLine.class, cl).getOptionValues("J"))));
        org.junit.Assert.assertNotNull("null values", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|14", java.util.List.class, values));
        org.junit.Assert.assertEquals("number of values", 4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|15", java.util.List.class, values).size()));
        org.junit.Assert.assertEquals("value 1", "source", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|17", java.util.List.class, values).get(0)));
        org.junit.Assert.assertEquals("value 2", "1.5", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|19", java.util.List.class, values).get(1)));
        org.junit.Assert.assertEquals("value 3", "target", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|21", java.util.List.class, values).get(2)));
        org.junit.Assert.assertEquals("value 4", "1.5", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|23", java.util.List.class, values).get(3)));
        final java.util.List<?> argsleft = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|26", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|25", org.apache.commons.cli.CommandLine.class, cl).getArgList());
        org.junit.Assert.assertEquals("Should be 1 arg left", 1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertiesOption1()|27", argsleft.size()));
        org.junit.Assert.assertEquals("Expecting foo", "foo", argsleft.get(0));
    }

    @org.junit.Test
    public void testPropertiesOption2() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|0", java.lang.String[].class, new java.lang.String[]{ "-Dparam1", "-Dparam2=value2", "-D" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|5", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|4", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withValueSeparator()).hasOptionalArgs(2)).create('D'))));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|10", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|7", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|8", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|9", java.lang.String[].class, args)));
        final java.util.Properties props = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|12", java.util.Properties.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|11", org.apache.commons.cli.CommandLine.class, cl).getOptionProperties("D"));
        org.junit.Assert.assertNotNull("null properties", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|13", java.util.Properties.class, props));
        org.junit.Assert.assertEquals(("number of properties in " + (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|14", java.util.Properties.class, props))), 2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|15", java.util.Properties.class, props).size()));
        org.junit.Assert.assertEquals("property 1", "true", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|17", java.util.Properties.class, props).getProperty("param1")));
        org.junit.Assert.assertEquals("property 2", "value2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|19", java.util.Properties.class, props).getProperty("param2")));
        final java.util.List<?> argsleft = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|22", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|21", org.apache.commons.cli.CommandLine.class, cl).getArgList());
        org.junit.Assert.assertEquals("Should be no arg left", 0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertiesOption2()|23", argsleft.size()));
    }

    @org.junit.Test
    public void testUnambiguousPartialLongOption1() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|0", java.lang.String[].class, new java.lang.String[]{ "--ver" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|4", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("version")).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|6", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|7", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("help")).create())));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|13", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|10", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|11", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|12", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm --version is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption1()|14", org.apache.commons.cli.CommandLine.class, cl).hasOption("version")));
    }

    @org.junit.Test
    public void testUnambiguousPartialLongOption2() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|0", java.lang.String[].class, new java.lang.String[]{ "-ver" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|4", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("version")).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|6", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|7", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("help")).create())));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|13", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|10", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|11", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|12", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm --version is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption2()|14", org.apache.commons.cli.CommandLine.class, cl).hasOption("version")));
    }

    @org.junit.Test
    public void testUnambiguousPartialLongOption3() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|0", java.lang.String[].class, new java.lang.String[]{ "--ver=1" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|5", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|4", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("verbose")).hasOptionalArg()).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|10", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|7", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|9", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|8", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("help")).create())));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|14", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|11", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|12", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|13", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm --verbose is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|15", org.apache.commons.cli.CommandLine.class, cl).hasOption("verbose")));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption3()|17", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("verbose")));
    }

    @org.junit.Test
    public void testUnambiguousPartialLongOption4() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|0", java.lang.String[].class, new java.lang.String[]{ "-ver=1" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|5", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|4", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("verbose")).hasOptionalArg()).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|10", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|7", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|9", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|8", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("help")).create())));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|14", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|11", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|12", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|13", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm --verbose is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|15", org.apache.commons.cli.CommandLine.class, cl).hasOption("verbose")));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnambiguousPartialLongOption4()|17", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("verbose")));
    }

    @org.junit.Test
    public void testAmbiguousPartialLongOption1() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|0", java.lang.String[].class, new java.lang.String[]{ "--ver" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|4", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("version")).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|6", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|7", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("verbose")).create())));
        boolean caught = false;
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|13", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|10", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|11", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|12", java.lang.String[].class, args)));
        } catch (final org.apache.commons.cli.AmbiguousOptionException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|14", (caught = true));
            org.junit.Assert.assertEquals("Partial option", "--ver", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AmbiguousOptionException>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|15", org.apache.commons.cli.AmbiguousOptionException.class, e).getOption()));
            org.junit.Assert.assertNotNull("Matching options null", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|18", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AmbiguousOptionException>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|17", org.apache.commons.cli.AmbiguousOptionException.class, e).getMatchingOptions()));
            org.junit.Assert.assertEquals("Matching options size", 2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|20", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AmbiguousOptionException>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|19", org.apache.commons.cli.AmbiguousOptionException.class, e).getMatchingOptions()).size()));
        }
        org.junit.Assert.assertTrue("Confirm MissingArgumentException caught", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption1()|22", caught));
    }

    @org.junit.Test
    public void testAmbiguousPartialLongOption2() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|0", java.lang.String[].class, new java.lang.String[]{ "-ver" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|4", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("version")).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|6", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|7", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("verbose")).create())));
        boolean caught = false;
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|13", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|10", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|11", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|12", java.lang.String[].class, args)));
        } catch (final org.apache.commons.cli.AmbiguousOptionException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|14", (caught = true));
            org.junit.Assert.assertEquals("Partial option", "-ver", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AmbiguousOptionException>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|15", org.apache.commons.cli.AmbiguousOptionException.class, e).getOption()));
            org.junit.Assert.assertNotNull("Matching options null", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|18", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AmbiguousOptionException>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|17", org.apache.commons.cli.AmbiguousOptionException.class, e).getMatchingOptions()));
            org.junit.Assert.assertEquals("Matching options size", 2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|20", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AmbiguousOptionException>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|19", org.apache.commons.cli.AmbiguousOptionException.class, e).getMatchingOptions()).size()));
        }
        org.junit.Assert.assertTrue("Confirm MissingArgumentException caught", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption2()|22", caught));
    }

    @org.junit.Test
    public void testAmbiguousPartialLongOption3() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|0", java.lang.String[].class, new java.lang.String[]{ "--ver=1" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|4", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("version")).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|10", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|6", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|9", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|8", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|7", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("verbose")).hasOptionalArg()).create())));
        boolean caught = false;
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|14", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|11", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|12", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|13", java.lang.String[].class, args)));
        } catch (final org.apache.commons.cli.AmbiguousOptionException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|15", (caught = true));
            org.junit.Assert.assertEquals("Partial option", "--ver", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AmbiguousOptionException>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|16", org.apache.commons.cli.AmbiguousOptionException.class, e).getOption()));
            org.junit.Assert.assertNotNull("Matching options null", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|19", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AmbiguousOptionException>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|18", org.apache.commons.cli.AmbiguousOptionException.class, e).getMatchingOptions()));
            org.junit.Assert.assertEquals("Matching options size", 2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|21", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AmbiguousOptionException>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|20", org.apache.commons.cli.AmbiguousOptionException.class, e).getMatchingOptions()).size()));
        }
        org.junit.Assert.assertTrue("Confirm MissingArgumentException caught", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption3()|23", caught));
    }

    @org.junit.Test
    public void testAmbiguousPartialLongOption4() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|0", java.lang.String[].class, new java.lang.String[]{ "-ver=1" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|4", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("version")).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|10", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|6", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|9", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|8", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|7", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("verbose")).hasOptionalArg()).create())));
        boolean caught = false;
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|14", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|11", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|12", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|13", java.lang.String[].class, args)));
        } catch (final org.apache.commons.cli.AmbiguousOptionException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|15", (caught = true));
            org.junit.Assert.assertEquals("Partial option", "-ver", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AmbiguousOptionException>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|16", org.apache.commons.cli.AmbiguousOptionException.class, e).getOption()));
            org.junit.Assert.assertNotNull("Matching options null", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|19", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AmbiguousOptionException>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|18", org.apache.commons.cli.AmbiguousOptionException.class, e).getMatchingOptions()));
            org.junit.Assert.assertEquals("Matching options size", 2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|21", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AmbiguousOptionException>observeState("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|20", org.apache.commons.cli.AmbiguousOptionException.class, e).getMatchingOptions()).size()));
        }
        org.junit.Assert.assertTrue("Confirm MissingArgumentException caught", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testAmbiguousPartialLongOption4()|23", caught));
    }

    @org.junit.Test
    public void testPartialLongOptionSingleDash() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|0", java.lang.String[].class, new java.lang.String[]{ "-ver" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|4", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("version")).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|6", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|7", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasArg()).create('v'))));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|13", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|10", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|11", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|12", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm --version is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|14", org.apache.commons.cli.CommandLine.class, cl).hasOption("version")));
        org.junit.Assert.assertTrue("Confirm -v is not set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPartialLongOptionSingleDash()|16", org.apache.commons.cli.CommandLine.class, cl).hasOption("v")))));
    }

    @org.junit.Test
    public void testWithRequiredOption() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|0", java.lang.String[].class, new java.lang.String[]{ "-b", "file" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|3", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|2", org.apache.commons.cli.Options.class, options).addOption("a", "enable-a", false, null));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|4", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|7", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|6", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|5", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("bfile")).hasArg()).isRequired()).create('b'))));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|13", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|10", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|11", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|12", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -a is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|14", org.apache.commons.cli.CommandLine.class, cl).hasOption("a")))));
        org.junit.Assert.assertTrue("Confirm -b is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|16", org.apache.commons.cli.CommandLine.class, cl).hasOption("b")));
        org.junit.Assert.assertTrue("Confirm arg of -b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|20", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|18", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("b")).equals("file")));
        org.junit.Assert.assertTrue("Confirm NO of extra args", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|22", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testWithRequiredOption()|21", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 0));
    }

    @org.junit.Test
    public void testOptionAndRequiredOption() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|0", java.lang.String[].class, new java.lang.String[]{ "-a", "-b", "file" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|3", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|2", org.apache.commons.cli.Options.class, options).addOption("a", "enable-a", false, null));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|4", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|7", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|6", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|5", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("bfile")).hasArg()).isRequired()).create('b'))));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|13", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|10", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|11", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|12", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -a is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|14", org.apache.commons.cli.CommandLine.class, cl).hasOption("a")));
        org.junit.Assert.assertTrue("Confirm -b is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|16", org.apache.commons.cli.CommandLine.class, cl).hasOption("b")));
        org.junit.Assert.assertTrue("Confirm arg of -b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|20", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|18", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("b")).equals("file")));
        org.junit.Assert.assertTrue("Confirm NO of extra args", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|22", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testOptionAndRequiredOption()|21", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 0));
    }

    @org.junit.Test
    public void testMissingRequiredOption() {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|0", java.lang.String[].class, new java.lang.String[]{ "-a" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|3", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|2", org.apache.commons.cli.Options.class, options).addOption("a", "enable-a", false, null));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|4", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|7", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|6", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|5", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("bfile")).hasArg()).isRequired()).create('b'))));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|13", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|10", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|11", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|12", java.lang.String[].class, args)));
            org.junit.Assert.fail("exception should have been thrown");
        } catch (final org.apache.commons.cli.MissingOptionException e) {
            org.junit.Assert.assertEquals("Incorrect exception message", "Missing required option: b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingOptionException>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|14", org.apache.commons.cli.MissingOptionException.class, e).getMessage()));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|17", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingOptionException>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOption()|16", org.apache.commons.cli.MissingOptionException.class, e).getMissingOptions()).contains("b")));
        } catch (final org.apache.commons.cli.ParseException e) {
            org.junit.Assert.fail("expected to catch MissingOptionException");
        }
    }

    @org.junit.Test
    public void testMissingRequiredOptions() {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|0", java.lang.String[].class, new java.lang.String[]{ "-a" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|3", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|2", org.apache.commons.cli.Options.class, options).addOption("a", "enable-a", false, null));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|4", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|7", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|6", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|5", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("bfile")).hasArg()).isRequired()).create('b'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|15", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|10", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|14", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|13", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|12", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|11", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("cfile")).hasArg()).isRequired()).create('c'))));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|19", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|16", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|17", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|18", java.lang.String[].class, args)));
            org.junit.Assert.fail("exception should have been thrown");
        } catch (final org.apache.commons.cli.MissingOptionException e) {
            org.junit.Assert.assertEquals("Incorrect exception message", "Missing required options: b, c", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingOptionException>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|20", org.apache.commons.cli.MissingOptionException.class, e).getMessage()));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|23", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingOptionException>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|22", org.apache.commons.cli.MissingOptionException.class, e).getMissingOptions()).contains("b")));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|26", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingOptionException>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredOptions()|25", org.apache.commons.cli.MissingOptionException.class, e).getMissingOptions()).contains("c")));
        } catch (final org.apache.commons.cli.ParseException e) {
            org.junit.Assert.fail("expected to catch MissingOptionException");
        }
    }

    @org.junit.Test
    public void testMissingRequiredGroup() throws java.lang.Exception {
        final org.apache.commons.cli.OptionGroup group = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|0", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|3", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|1", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|2", org.apache.commons.cli.Option.class, org.apache.commons.cli.OptionBuilder.create("a"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|6", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|4", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|5", org.apache.commons.cli.Option.class, org.apache.commons.cli.OptionBuilder.create("b"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|7", org.apache.commons.cli.OptionGroup.class, group).setRequired(true);
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|8", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|11", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|9", org.apache.commons.cli.Options.class, options).addOptionGroup(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|10", org.apache.commons.cli.OptionGroup.class, group)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|15", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|12", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|14", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|13", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.isRequired()).create("c"))));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|19", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|16", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|17", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|18", java.lang.String[].class, new java.lang.String[]{ "-c" })));
            org.junit.Assert.fail("MissingOptionException not thrown");
        } catch (final org.apache.commons.cli.MissingOptionException e) {
            org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|21", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingOptionException>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|20", org.apache.commons.cli.MissingOptionException.class, e).getMissingOptions()).size()));
            org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|25", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|24", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingOptionException>observeState("org.apache.commons.cli.ParserTestCase|testMissingRequiredGroup()|23", org.apache.commons.cli.MissingOptionException.class, e).getMissingOptions()).get(0))) instanceof org.apache.commons.cli.OptionGroup));
        } catch (final org.apache.commons.cli.ParseException e) {
            org.junit.Assert.fail("Expected to catch MissingOptionException");
        }
    }

    @org.junit.Test
    public void testOptionGroup() throws java.lang.Exception {
        final org.apache.commons.cli.OptionGroup group = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|0", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|3", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|1", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|2", org.apache.commons.cli.Option.class, org.apache.commons.cli.OptionBuilder.create("a"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|6", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|4", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|5", org.apache.commons.cli.Option.class, org.apache.commons.cli.OptionBuilder.create("b"))));
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|7", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|10", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|8", org.apache.commons.cli.Options.class, options).addOptionGroup(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|9", org.apache.commons.cli.OptionGroup.class, group)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|14", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|11", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|12", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|13", java.lang.String[].class, new java.lang.String[]{ "-b" })));
        org.junit.Assert.assertEquals("selected option", "b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testOptionGroup()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroup()|15", org.apache.commons.cli.OptionGroup.class, group).getSelected()));
    }

    @org.junit.Test
    public void testOptionGroupLong() throws java.lang.Exception {
        final org.apache.commons.cli.OptionGroup group = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|0", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|4", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|1", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|3", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|2", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("foo")).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|8", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|5", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|7", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|6", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("bar")).create())));
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|9", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|12", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|10", org.apache.commons.cli.Options.class, options).addOptionGroup(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|11", org.apache.commons.cli.OptionGroup.class, group)));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|16", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|13", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|14", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|15", java.lang.String[].class, new java.lang.String[]{ "--bar" })));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|17", org.apache.commons.cli.CommandLine.class, cl).hasOption("bar")));
        org.junit.Assert.assertEquals("selected option", "bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testOptionGroupLong()|19", org.apache.commons.cli.OptionGroup.class, group).getSelected()));
    }

    @org.junit.Test
    public void testReuseOptionsTwice() throws java.lang.Exception {
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testReuseOptionsTwice()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testReuseOptionsTwice()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testReuseOptionsTwice()|1", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testReuseOptionsTwice()|3", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testReuseOptionsTwice()|2", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.isRequired()).create('v'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testReuseOptionsTwice()|8", org.apache.commons.cli.CommandLine.class, // first parsing
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testReuseOptionsTwice()|5", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testReuseOptionsTwice()|6", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testReuseOptionsTwice()|7", java.lang.String[].class, new java.lang.String[]{ "-v" })));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testReuseOptionsTwice()|12", org.apache.commons.cli.CommandLine.class, // second parsing, with the same Options instance and an invalid command line
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testReuseOptionsTwice()|9", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testReuseOptionsTwice()|10", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testReuseOptionsTwice()|11", java.lang.String[].class, new java.lang.String[0])));
            org.junit.Assert.fail("MissingOptionException not thrown");
        } catch (final org.apache.commons.cli.MissingOptionException e) {
            // expected
        }
    }

    @org.junit.Test
    public void testBursting() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testBursting()|0", java.lang.String[].class, new java.lang.String[]{ "-acbtoast", "foo", "bar" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testBursting()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testBursting()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testBursting()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testBursting()|3", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -a is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testBursting()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testBursting()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("a")));
        org.junit.Assert.assertTrue("Confirm -b is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testBursting()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testBursting()|7", org.apache.commons.cli.CommandLine.class, cl).hasOption("b")));
        org.junit.Assert.assertTrue("Confirm -c is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testBursting()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testBursting()|9", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")));
        org.junit.Assert.assertTrue("Confirm arg of -b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testBursting()|13", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testBursting()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testBursting()|11", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("b")).equals("toast")));
        org.junit.Assert.assertTrue("Confirm size of extra args", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testBursting()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testBursting()|15", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testBursting()|14", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 2));
    }

    @org.junit.Test
    public void testUnrecognizedOptionWithBursting() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnrecognizedOptionWithBursting()|0", java.lang.String[].class, new java.lang.String[]{ "-adbtoast", "foo", "bar" });
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnrecognizedOptionWithBursting()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testUnrecognizedOptionWithBursting()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnrecognizedOptionWithBursting()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnrecognizedOptionWithBursting()|3", java.lang.String[].class, args)));
            org.junit.Assert.fail("UnrecognizedOptionException wasn't thrown");
        } catch (final org.apache.commons.cli.UnrecognizedOptionException e) {
            org.junit.Assert.assertEquals("-adbtoast", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testUnrecognizedOptionWithBursting()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.UnrecognizedOptionException>observeState("org.apache.commons.cli.ParserTestCase|testUnrecognizedOptionWithBursting()|5", org.apache.commons.cli.UnrecognizedOptionException.class, e).getOption()));
        }
    }

    @org.junit.Test
    public void testMissingArgWithBursting() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMissingArgWithBursting()|0", java.lang.String[].class, new java.lang.String[]{ "-acb" });
        boolean caught = false;
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testMissingArgWithBursting()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testMissingArgWithBursting()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testMissingArgWithBursting()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testMissingArgWithBursting()|3", java.lang.String[].class, args)));
        } catch (final org.apache.commons.cli.MissingArgumentException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMissingArgWithBursting()|5", (caught = true));
            org.junit.Assert.assertEquals("option missing an argument", "b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMissingArgWithBursting()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testMissingArgWithBursting()|7", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingArgumentException>observeState("org.apache.commons.cli.ParserTestCase|testMissingArgWithBursting()|6", org.apache.commons.cli.MissingArgumentException.class, e).getOption()).getOpt()));
        }
        org.junit.Assert.assertTrue("Confirm MissingArgumentException caught", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testMissingArgWithBursting()|9", caught));
    }

    @org.junit.Test
    public void testStopBursting() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting()|0", java.lang.String[].class, new java.lang.String[]{ "-azc" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting()|3", java.lang.String[].class, args), true));
        org.junit.Assert.assertTrue("Confirm -a is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("a")));
        org.junit.Assert.assertFalse("Confirm -c is not set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting()|7", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")));
        org.junit.Assert.assertTrue(("Confirm  1 extra arg: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting()|10", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting()|9", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size()))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting()|13", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting()|12", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 1));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting()|16", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting()|15", org.apache.commons.cli.CommandLine.class, cl).getArgList()).contains("zc")));
    }

    @org.junit.Test
    public void testStopBursting2() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|0", java.lang.String[].class, new java.lang.String[]{ "-c", "foobar", "-btoast" });
        org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|1", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|2", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|3", java.lang.String[].class, args), true));
        org.junit.Assert.assertTrue("Confirm -c is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting2()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")));
        org.junit.Assert.assertTrue(("Confirm  2 extra args: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting2()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|8", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|7", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size()))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting2()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|11", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|10", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 2));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|17", org.apache.commons.cli.CommandLine.class, (cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|13", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|14", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|16", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|15", org.apache.commons.cli.CommandLine.class, cl).getArgs()))));
        org.junit.Assert.assertTrue("Confirm -c is not set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting2()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|18", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")))));
        org.junit.Assert.assertTrue("Confirm -b is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting2()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|20", org.apache.commons.cli.CommandLine.class, cl).hasOption("b")));
        org.junit.Assert.assertTrue("Confirm arg of -b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting2()|24", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting2()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|22", org.apache.commons.cli.CommandLine.class, cl).getOptionValue("b")).equals("toast")));
        org.junit.Assert.assertTrue(("Confirm  1 extra arg: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting2()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|26", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|25", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size()))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting2()|30", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|29", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|28", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 1));
        org.junit.Assert.assertTrue(("Confirm  value of extra arg: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting2()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|32", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|31", org.apache.commons.cli.CommandLine.class, cl).getArgList()).get(0)))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting2()|37", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testStopBursting2()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|35", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testStopBursting2()|34", org.apache.commons.cli.CommandLine.class, cl).getArgList()).get(0)).equals("foobar")));
    }

    @org.junit.Test
    public void testUnlimitedArgs() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|0", java.lang.String[].class, new java.lang.String[]{ "-e", "one", "two", "-f", "alpha" });
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|4", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|3", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasArgs()).create("e"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|6", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|7", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasArgs()).create("f"))));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|13", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|10", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|11", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|12", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -e is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|14", org.apache.commons.cli.CommandLine.class, cl).hasOption("e")));
        org.junit.Assert.assertEquals("number of arg for -e", 2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|17", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|16", org.apache.commons.cli.CommandLine.class, cl).getOptionValues("e")).length));
        org.junit.Assert.assertTrue("Confirm -f is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|19", org.apache.commons.cli.CommandLine.class, cl).hasOption("f")));
        org.junit.Assert.assertEquals("number of arg for -f", 1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|22", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testUnlimitedArgs()|21", org.apache.commons.cli.CommandLine.class, cl).getOptionValues("f")).length));
    }

    @java.lang.SuppressWarnings("deprecation")
    private org.apache.commons.cli.CommandLine parse(final org.apache.commons.cli.CommandLineParser parser, final org.apache.commons.cli.Options opts, final java.lang.String[] args, final java.util.Properties properties) throws org.apache.commons.cli.ParseException {
        if ((eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|parse(org.apache.commons.cli.CommandLineParser,org.apache.commons.cli.Options,java.lang.String[],java.util.Properties)|0", org.apache.commons.cli.CommandLineParser.class, parser)) instanceof org.apache.commons.cli.Parser) {
            return eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|parse(org.apache.commons.cli.CommandLineParser,org.apache.commons.cli.Options,java.lang.String[],java.util.Properties)|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ParserTestCase|parse(org.apache.commons.cli.CommandLineParser,org.apache.commons.cli.Options,java.lang.String[],java.util.Properties)|1", org.apache.commons.cli.Parser.class, ((org.apache.commons.cli.Parser) (parser))).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|parse(org.apache.commons.cli.CommandLineParser,org.apache.commons.cli.Options,java.lang.String[],java.util.Properties)|2", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|parse(org.apache.commons.cli.CommandLineParser,org.apache.commons.cli.Options,java.lang.String[],java.util.Properties)|3", java.lang.String[].class, args), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|parse(org.apache.commons.cli.CommandLineParser,org.apache.commons.cli.Options,java.lang.String[],java.util.Properties)|4", java.util.Properties.class, properties)));
        }else
            if ((eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|parse(org.apache.commons.cli.CommandLineParser,org.apache.commons.cli.Options,java.lang.String[],java.util.Properties)|6", org.apache.commons.cli.CommandLineParser.class, parser)) instanceof org.apache.commons.cli.DefaultParser) {
                return eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|parse(org.apache.commons.cli.CommandLineParser,org.apache.commons.cli.Options,java.lang.String[],java.util.Properties)|11", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.DefaultParser>observeState("org.apache.commons.cli.ParserTestCase|parse(org.apache.commons.cli.CommandLineParser,org.apache.commons.cli.Options,java.lang.String[],java.util.Properties)|7", org.apache.commons.cli.DefaultParser.class, ((org.apache.commons.cli.DefaultParser) (parser))).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|parse(org.apache.commons.cli.CommandLineParser,org.apache.commons.cli.Options,java.lang.String[],java.util.Properties)|8", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|parse(org.apache.commons.cli.CommandLineParser,org.apache.commons.cli.Options,java.lang.String[],java.util.Properties)|9", java.lang.String[].class, args), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|parse(org.apache.commons.cli.CommandLineParser,org.apache.commons.cli.Options,java.lang.String[],java.util.Properties)|10", java.util.Properties.class, properties)));
            }else {
                throw eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.UnsupportedOperationException>observeState("org.apache.commons.cli.ParserTestCase|parse(org.apache.commons.cli.CommandLineParser,org.apache.commons.cli.Options,java.lang.String[],java.util.Properties)|12", java.lang.UnsupportedOperationException.class, new java.lang.UnsupportedOperationException("Default options not supported by this parser"));
            }

    }

    @org.junit.Test
    public void testPropertyOptionSingularValue() throws java.lang.Exception {
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|1", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|4", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|3", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|2", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasOptionalArgs(2)).withLongOpt("hide")).create())));
        final java.util.Properties properties = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|6", java.util.Properties.class, new java.util.Properties());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|8", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|7", java.util.Properties.class, properties).setProperty("hide", "seek"));
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|12", org.apache.commons.cli.CommandLine.class, parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|9", org.apache.commons.cli.CommandLineParser.class, parser), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|10", org.apache.commons.cli.Options.class, opts), null, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|11", java.util.Properties.class, properties)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|13", org.apache.commons.cli.CommandLine.class, cmd).hasOption("hide")));
        org.junit.Assert.assertEquals("seek", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|15", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue("hide")));
        org.junit.Assert.assertTrue((!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionSingularValue()|17", org.apache.commons.cli.CommandLine.class, cmd).hasOption("fake")))));
    }

    @org.junit.Test
    public void testPropertyOptionFlags() throws java.lang.Exception {
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|2", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|1", org.apache.commons.cli.Options.class, opts).addOption("a", false, "toggle -a"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|3", org.apache.commons.cli.Options.class, opts).addOption("c", "c", false, "toggle -c"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|8", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|5", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|7", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|6", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasOptionalArg()).create('e'))));
        java.util.Properties properties = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|9", java.util.Properties.class, new java.util.Properties());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|11", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|10", java.util.Properties.class, properties).setProperty("a", "true"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|13", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|12", java.util.Properties.class, properties).setProperty("c", "yes"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|15", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|14", java.util.Properties.class, properties).setProperty("e", "1"));
        org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|19", org.apache.commons.cli.CommandLine.class, parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|16", org.apache.commons.cli.CommandLineParser.class, parser), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|17", org.apache.commons.cli.Options.class, opts), null, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|18", java.util.Properties.class, properties)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|20", org.apache.commons.cli.CommandLine.class, cmd).hasOption("a")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|22", org.apache.commons.cli.CommandLine.class, cmd).hasOption("c")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|24", org.apache.commons.cli.CommandLine.class, cmd).hasOption("e")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|26", java.util.Properties.class, (properties = new java.util.Properties()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|28", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|27", java.util.Properties.class, properties).setProperty("a", "false"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|30", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|29", java.util.Properties.class, properties).setProperty("c", "no"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|32", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|31", java.util.Properties.class, properties).setProperty("e", "0"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|36", org.apache.commons.cli.CommandLine.class, (cmd = parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|33", org.apache.commons.cli.CommandLineParser.class, parser), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|34", org.apache.commons.cli.Options.class, opts), null, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|35", java.util.Properties.class, properties))));
        org.junit.Assert.assertTrue((!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|38", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|37", org.apache.commons.cli.CommandLine.class, cmd).hasOption("a")))));
        org.junit.Assert.assertTrue((!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|40", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|39", org.apache.commons.cli.CommandLine.class, cmd).hasOption("c")))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|42", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|41", org.apache.commons.cli.CommandLine.class, cmd).hasOption("e")));// this option accepts an argument

        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|43", java.util.Properties.class, (properties = new java.util.Properties()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|45", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|44", java.util.Properties.class, properties).setProperty("a", "TRUE"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|47", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|46", java.util.Properties.class, properties).setProperty("c", "nO"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|49", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|48", java.util.Properties.class, properties).setProperty("e", "TrUe"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|53", org.apache.commons.cli.CommandLine.class, (cmd = parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|50", org.apache.commons.cli.CommandLineParser.class, parser), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|51", org.apache.commons.cli.Options.class, opts), null, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|52", java.util.Properties.class, properties))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|55", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|54", org.apache.commons.cli.CommandLine.class, cmd).hasOption("a")));
        org.junit.Assert.assertTrue((!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|57", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|56", org.apache.commons.cli.CommandLine.class, cmd).hasOption("c")))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|59", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|58", org.apache.commons.cli.CommandLine.class, cmd).hasOption("e")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|60", java.util.Properties.class, (properties = new java.util.Properties()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|62", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|61", java.util.Properties.class, properties).setProperty("a", "just a string"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|64", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|63", java.util.Properties.class, properties).setProperty("e", ""));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|68", org.apache.commons.cli.CommandLine.class, (cmd = parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|65", org.apache.commons.cli.CommandLineParser.class, parser), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|66", org.apache.commons.cli.Options.class, opts), null, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|67", java.util.Properties.class, properties))));
        org.junit.Assert.assertTrue((!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|70", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|69", org.apache.commons.cli.CommandLine.class, cmd).hasOption("a")))));
        org.junit.Assert.assertTrue((!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|72", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|71", org.apache.commons.cli.CommandLine.class, cmd).hasOption("c")))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|74", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|73", org.apache.commons.cli.CommandLine.class, cmd).hasOption("e")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|75", java.util.Properties.class, (properties = new java.util.Properties()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|77", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|76", java.util.Properties.class, properties).setProperty("a", "0"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|79", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|78", java.util.Properties.class, properties).setProperty("c", "1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|83", org.apache.commons.cli.CommandLine.class, (cmd = parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|80", org.apache.commons.cli.CommandLineParser.class, parser), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|81", org.apache.commons.cli.Options.class, opts), null, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|82", java.util.Properties.class, properties))));
        org.junit.Assert.assertTrue((!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|85", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|84", org.apache.commons.cli.CommandLine.class, cmd).hasOption("a")))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|87", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionFlags()|86", org.apache.commons.cli.CommandLine.class, cmd).hasOption("c")));
    }

    @org.junit.Test
    public void testPropertyOptionMultipleValues() throws java.lang.Exception {
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|1", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|4", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|3", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|2", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasArgs()).withValueSeparator(',')).create('k'))));
        final java.util.Properties properties = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|6", java.util.Properties.class, new java.util.Properties());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|8", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|7", java.util.Properties.class, properties).setProperty("k", "one,two"));
        final java.lang.String[] values = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|9", java.lang.String[].class, new java.lang.String[]{ "one", "two" });
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|13", org.apache.commons.cli.CommandLine.class, parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|10", org.apache.commons.cli.CommandLineParser.class, parser), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|11", org.apache.commons.cli.Options.class, opts), null, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|12", java.util.Properties.class, properties)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|14", org.apache.commons.cli.CommandLine.class, cmd).hasOption("k")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|19", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|16", java.lang.String[].class, values), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|18", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionMultipleValues()|17", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues('k')))));
    }

    @org.junit.Test
    public void testPropertyOverrideValues() throws java.lang.Exception {
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|1", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|3", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|2", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasOptionalArgs(2)).create('i'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|8", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|5", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|7", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|6", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasOptionalArgs()).create('j'))));
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|9", java.lang.String[].class, new java.lang.String[]{ "-j", "found", "-i", "ink" });
        final java.util.Properties properties = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|10", java.util.Properties.class, new java.util.Properties());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|12", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|11", java.util.Properties.class, properties).setProperty("j", "seek"));
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|17", org.apache.commons.cli.CommandLine.class, parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|13", org.apache.commons.cli.CommandLineParser.class, parser), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|14", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|15", java.lang.String[].class, args), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|16", java.util.Properties.class, properties)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|18", org.apache.commons.cli.CommandLine.class, cmd).hasOption("j")));
        org.junit.Assert.assertEquals("found", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|20", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue("j")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|22", org.apache.commons.cli.CommandLine.class, cmd).hasOption("i")));
        org.junit.Assert.assertEquals("ink", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|24", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue("i")));
        org.junit.Assert.assertTrue((!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOverrideValues()|26", org.apache.commons.cli.CommandLine.class, cmd).hasOption("fake")))));
    }

    @org.junit.Test
    public void testPropertyOptionRequired() throws java.lang.Exception {
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionRequired()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionRequired()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionRequired()|1", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionRequired()|3", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionRequired()|2", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.isRequired()).create("f"))));
        final java.util.Properties properties = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionRequired()|5", java.util.Properties.class, new java.util.Properties());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionRequired()|7", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionRequired()|6", java.util.Properties.class, properties).setProperty("f", "true"));
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionRequired()|11", org.apache.commons.cli.CommandLine.class, parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionRequired()|8", org.apache.commons.cli.CommandLineParser.class, parser), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionRequired()|9", org.apache.commons.cli.Options.class, opts), null, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionRequired()|10", java.util.Properties.class, properties)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionRequired()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionRequired()|12", org.apache.commons.cli.CommandLine.class, cmd).hasOption("f")));
    }

    @org.junit.Test
    public void testPropertyOptionUnexpected() throws java.lang.Exception {
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionUnexpected()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        final java.util.Properties properties = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionUnexpected()|1", java.util.Properties.class, new java.util.Properties());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionUnexpected()|3", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionUnexpected()|2", java.util.Properties.class, properties).setProperty("f", "true"));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionUnexpected()|7", org.apache.commons.cli.CommandLine.class, parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionUnexpected()|4", org.apache.commons.cli.CommandLineParser.class, parser), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionUnexpected()|5", org.apache.commons.cli.Options.class, opts), null, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionUnexpected()|6", java.util.Properties.class, properties)));
            org.junit.Assert.fail("UnrecognizedOptionException expected");
        } catch (final org.apache.commons.cli.UnrecognizedOptionException e) {
            // expected
        }
    }

    @org.junit.Test
    public void testPropertyOptionGroup() throws java.lang.Exception {
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        final org.apache.commons.cli.OptionGroup group1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|1", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|4", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|2", org.apache.commons.cli.OptionGroup.class, group1).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|3", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("a", null))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|7", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|5", org.apache.commons.cli.OptionGroup.class, group1).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|6", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("b", null))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|10", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|8", org.apache.commons.cli.Options.class, opts).addOptionGroup(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|9", org.apache.commons.cli.OptionGroup.class, group1)));
        final org.apache.commons.cli.OptionGroup group2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|11", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|14", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|12", org.apache.commons.cli.OptionGroup.class, group2).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|13", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("x", null))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|17", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|15", org.apache.commons.cli.OptionGroup.class, group2).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|16", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("y", null))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|20", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|18", org.apache.commons.cli.Options.class, opts).addOptionGroup(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|19", org.apache.commons.cli.OptionGroup.class, group2)));
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|21", java.lang.String[].class, new java.lang.String[]{ "-a" });
        final java.util.Properties properties = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|22", java.util.Properties.class, new java.util.Properties());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|24", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|23", java.util.Properties.class, properties).put("b", "true"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|26", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|25", java.util.Properties.class, properties).put("x", "true"));
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|31", org.apache.commons.cli.CommandLine.class, parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|27", org.apache.commons.cli.CommandLineParser.class, parser), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|28", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|29", java.lang.String[].class, args), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|30", java.util.Properties.class, properties)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|32", org.apache.commons.cli.CommandLine.class, cmd).hasOption("a")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|34", org.apache.commons.cli.CommandLine.class, cmd).hasOption("b")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|37", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|36", org.apache.commons.cli.CommandLine.class, cmd).hasOption("x")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|39", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ParserTestCase|testPropertyOptionGroup()|38", org.apache.commons.cli.CommandLine.class, cmd).hasOption("y")));
    }
}

