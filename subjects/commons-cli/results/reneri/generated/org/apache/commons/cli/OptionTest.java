/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.cli;


public class OptionTest {
    private static class TestOption extends org.apache.commons.cli.Option {
        private static final long serialVersionUID = 1L;

        public TestOption(final java.lang.String opt, final boolean hasArg, final java.lang.String description) throws java.lang.IllegalArgumentException {
            super(opt, hasArg, description);
        }

        @java.lang.Override
        public boolean addValue(final java.lang.String value) {
            addValueForProcessing(value);
            return true;
        }
    }

    @org.junit.Test
    public void testClear() {
        final org.apache.commons.cli.OptionTest.TestOption option = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClear()|0", org.apache.commons.cli.OptionTest.TestOption.class, new org.apache.commons.cli.OptionTest.TestOption("x", true, ""));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testClear()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.OptionTest|testClear()|2", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClear()|1", org.apache.commons.cli.OptionTest.TestOption.class, option).getValuesList()).size()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testClear()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClear()|4", org.apache.commons.cli.OptionTest.TestOption.class, option).addValue("a"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testClear()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.OptionTest|testClear()|7", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClear()|6", org.apache.commons.cli.OptionTest.TestOption.class, option).getValuesList()).size()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClear()|9", org.apache.commons.cli.OptionTest.TestOption.class, option).clearValues();
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testClear()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.OptionTest|testClear()|11", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClear()|10", org.apache.commons.cli.OptionTest.TestOption.class, option).getValuesList()).size()));
    }

    // See http://issues.apache.org/jira/browse/CLI-21
    @org.junit.Test
    public void testClone() {
        final org.apache.commons.cli.OptionTest.TestOption a = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|0", org.apache.commons.cli.OptionTest.TestOption.class, new org.apache.commons.cli.OptionTest.TestOption("a", true, ""));
        final org.apache.commons.cli.OptionTest.TestOption b = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|2", org.apache.commons.cli.OptionTest.TestOption.class, ((org.apache.commons.cli.OptionTest.TestOption) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|1", org.apache.commons.cli.OptionTest.TestOption.class, a).clone())));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|3", org.apache.commons.cli.OptionTest.TestOption.class, a), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|4", org.apache.commons.cli.OptionTest.TestOption.class, b));
        org.junit.Assert.assertNotSame(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|5", org.apache.commons.cli.OptionTest.TestOption.class, a), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|6", org.apache.commons.cli.OptionTest.TestOption.class, b));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|7", org.apache.commons.cli.OptionTest.TestOption.class, a).setDescription("a");
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testClone()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|8", org.apache.commons.cli.OptionTest.TestOption.class, b).getDescription()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|10", org.apache.commons.cli.OptionTest.TestOption.class, b).setArgs(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testClone()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|11", org.apache.commons.cli.OptionTest.TestOption.class, b).addValue("b1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testClone()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|13", org.apache.commons.cli.OptionTest.TestOption.class, b).addValue("b2"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testClone()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|15", org.apache.commons.cli.OptionTest.TestOption.class, a).getArgs()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testClone()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.OptionTest|testClone()|18", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|17", org.apache.commons.cli.OptionTest.TestOption.class, a).getValuesList()).size()));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testClone()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionTest|testClone()|21", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.TestOption>observeState("org.apache.commons.cli.OptionTest|testClone()|20", org.apache.commons.cli.OptionTest.TestOption.class, b).getValues()).length));
    }

    @org.junit.Test
    public void testHashCode() {
        org.junit.Assert.assertNotEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testHashCode()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHashCode()|1", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testHashCode()|0", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("test")).build()).hashCode()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testHashCode()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHashCode()|4", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testHashCode()|3", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("test2")).build()).hashCode()));
        org.junit.Assert.assertNotEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testHashCode()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHashCode()|7", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testHashCode()|6", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("test")).build()).hashCode()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testHashCode()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHashCode()|11", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testHashCode()|10", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testHashCode()|9", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder()).longOpt("test")).build()).hashCode()));
        org.junit.Assert.assertNotEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testHashCode()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHashCode()|14", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testHashCode()|13", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("test")).build()).hashCode()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testHashCode()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHashCode()|18", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testHashCode()|17", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testHashCode()|16", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("test")).longOpt("long test")).build()).hashCode()));
    }

    private static class DefaultOption extends org.apache.commons.cli.Option {
        private static final long serialVersionUID = 1L;

        private final java.lang.String defaultValue;

        public DefaultOption(final java.lang.String opt, final java.lang.String description, final java.lang.String defaultValue) throws java.lang.IllegalArgumentException {
            super(opt, true, description);
            this.defaultValue = defaultValue;
        }

        @java.lang.Override
        public java.lang.String getValue() {
            return (super.getValue()) != null ? super.getValue() : defaultValue;
        }
    }

    @org.junit.Test
    public void testSubclass() {
        final org.apache.commons.cli.Option option = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionTest.DefaultOption>observeState("org.apache.commons.cli.OptionTest|testSubclass()|0", org.apache.commons.cli.OptionTest.DefaultOption.class, new org.apache.commons.cli.OptionTest.DefaultOption("f", "file", "myfile.txt"));
        final org.apache.commons.cli.Option clone = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testSubclass()|2", org.apache.commons.cli.Option.class, ((org.apache.commons.cli.Option) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testSubclass()|1", org.apache.commons.cli.Option.class, option).clone())));
        org.junit.Assert.assertEquals("myfile.txt", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testSubclass()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testSubclass()|3", org.apache.commons.cli.Option.class, clone).getValue()));
        org.junit.Assert.assertEquals(org.apache.commons.cli.OptionTest.DefaultOption.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testSubclass()|5", org.apache.commons.cli.Option.class, clone).getClass());
    }

    @org.junit.Test
    public void testHasArgName() {
        final org.apache.commons.cli.Option option = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgName()|0", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("f", null));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgName()|1", org.apache.commons.cli.Option.class, option).setArgName(null);
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testHasArgName()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgName()|2", org.apache.commons.cli.Option.class, option).hasArgName()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgName()|4", org.apache.commons.cli.Option.class, option).setArgName("");
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testHasArgName()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgName()|5", org.apache.commons.cli.Option.class, option).hasArgName()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgName()|7", org.apache.commons.cli.Option.class, option).setArgName("file");
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testHasArgName()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgName()|8", org.apache.commons.cli.Option.class, option).hasArgName()));
    }

    @org.junit.Test
    public void testHasArgs() {
        final org.apache.commons.cli.Option option = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgs()|0", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("f", null));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgs()|1", org.apache.commons.cli.Option.class, option).setArgs(0);
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testHasArgs()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgs()|2", org.apache.commons.cli.Option.class, option).hasArgs()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgs()|4", org.apache.commons.cli.Option.class, option).setArgs(1);
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testHasArgs()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgs()|5", org.apache.commons.cli.Option.class, option).hasArgs()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgs()|7", org.apache.commons.cli.Option.class, option).setArgs(10);
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testHasArgs()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgs()|8", org.apache.commons.cli.Option.class, option).hasArgs()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgs()|10", org.apache.commons.cli.Option.class, option).setArgs(org.apache.commons.cli.Option.UNLIMITED_VALUES);
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testHasArgs()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgs()|11", org.apache.commons.cli.Option.class, option).hasArgs()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgs()|13", org.apache.commons.cli.Option.class, option).setArgs(org.apache.commons.cli.Option.UNINITIALIZED);
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testHasArgs()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testHasArgs()|14", org.apache.commons.cli.Option.class, option).hasArgs()));
    }

    @org.junit.Test
    public void testGetValue() {
        final org.apache.commons.cli.Option option = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testGetValue()|0", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("f", null));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testGetValue()|1", org.apache.commons.cli.Option.class, option).setArgs(org.apache.commons.cli.Option.UNLIMITED_VALUES);
        org.junit.Assert.assertEquals("default", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testGetValue()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testGetValue()|2", org.apache.commons.cli.Option.class, option).getValue("default")));
        org.junit.Assert.assertEquals(null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testGetValue()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testGetValue()|4", org.apache.commons.cli.Option.class, option).getValue(0)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testGetValue()|6", org.apache.commons.cli.Option.class, option).addValueForProcessing("foo");
        org.junit.Assert.assertEquals("foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testGetValue()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testGetValue()|7", org.apache.commons.cli.Option.class, option).getValue()));
        org.junit.Assert.assertEquals("foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testGetValue()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testGetValue()|9", org.apache.commons.cli.Option.class, option).getValue(0)));
        org.junit.Assert.assertEquals("foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testGetValue()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testGetValue()|11", org.apache.commons.cli.Option.class, option).getValue("default")));
    }

    @org.junit.Test
    public void testBuilderMethods() {
        final char defaultSeparator = ((char) (0));
        org.apache.commons.cli.OptionTest.checkOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|2", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|1", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|0", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).desc("desc")).build()), "a", "desc", null, org.apache.commons.cli.Option.UNINITIALIZED, null, false, false, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testBuilderMethods()|3", defaultSeparator), java.lang.String.class);
        org.apache.commons.cli.OptionTest.checkOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|6", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|5", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|4", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).desc("desc")).build()), "a", "desc", null, org.apache.commons.cli.Option.UNINITIALIZED, null, false, false, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testBuilderMethods()|7", defaultSeparator), java.lang.String.class);
        org.apache.commons.cli.OptionTest.checkOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|11", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|10", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|9", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|8", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).desc("desc")).longOpt("aaa")).build()), "a", "desc", "aaa", org.apache.commons.cli.Option.UNINITIALIZED, null, false, false, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testBuilderMethods()|12", defaultSeparator), java.lang.String.class);
        org.apache.commons.cli.OptionTest.checkOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|16", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|15", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|14", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|13", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).desc("desc")).hasArg(true)).build()), "a", "desc", null, 1, null, false, false, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testBuilderMethods()|17", defaultSeparator), java.lang.String.class);
        org.apache.commons.cli.OptionTest.checkOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|21", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|20", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|19", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|18", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).desc("desc")).hasArg(false)).build()), "a", "desc", null, org.apache.commons.cli.Option.UNINITIALIZED, null, false, false, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testBuilderMethods()|22", defaultSeparator), java.lang.String.class);
        org.apache.commons.cli.OptionTest.checkOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|26", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|25", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|24", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|23", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).desc("desc")).hasArg(true)).build()), "a", "desc", null, 1, null, false, false, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testBuilderMethods()|27", defaultSeparator), java.lang.String.class);
        org.apache.commons.cli.OptionTest.checkOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|31", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|30", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|29", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|28", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).desc("desc")).numberOfArgs(3)).build()), "a", "desc", null, 3, null, false, false, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testBuilderMethods()|32", defaultSeparator), java.lang.String.class);
        org.apache.commons.cli.OptionTest.checkOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|36", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|35", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|34", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|33", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).desc("desc")).required(true)).build()), "a", "desc", null, org.apache.commons.cli.Option.UNINITIALIZED, null, true, false, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testBuilderMethods()|37", defaultSeparator), java.lang.String.class);
        org.apache.commons.cli.OptionTest.checkOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|41", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|40", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|39", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|38", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).desc("desc")).required(false)).build()), "a", "desc", null, org.apache.commons.cli.Option.UNINITIALIZED, null, false, false, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testBuilderMethods()|42", defaultSeparator), java.lang.String.class);
        org.apache.commons.cli.OptionTest.checkOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|46", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|45", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|44", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|43", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).desc("desc")).argName("arg1")).build()), "a", "desc", null, org.apache.commons.cli.Option.UNINITIALIZED, "arg1", false, false, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testBuilderMethods()|47", defaultSeparator), java.lang.String.class);
        org.apache.commons.cli.OptionTest.checkOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|51", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|50", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|49", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|48", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).desc("desc")).optionalArg(false)).build()), "a", "desc", null, org.apache.commons.cli.Option.UNINITIALIZED, null, false, false, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testBuilderMethods()|52", defaultSeparator), java.lang.String.class);
        org.apache.commons.cli.OptionTest.checkOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|56", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|55", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|54", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|53", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).desc("desc")).optionalArg(true)).build()), "a", "desc", null, org.apache.commons.cli.Option.UNINITIALIZED, null, false, true, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testBuilderMethods()|57", defaultSeparator), java.lang.String.class);
        org.apache.commons.cli.OptionTest.checkOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|61", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|60", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|59", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|58", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).desc("desc")).valueSeparator(':')).build()), "a", "desc", null, org.apache.commons.cli.Option.UNINITIALIZED, null, false, false, ':', java.lang.String.class);
        org.apache.commons.cli.OptionTest.checkOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|65", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|64", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|63", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderMethods()|62", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).desc("desc")).type(java.lang.Integer.class)).build()), "a", "desc", null, org.apache.commons.cli.Option.UNINITIALIZED, null, false, false, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|testBuilderMethods()|66", defaultSeparator), java.lang.Integer.class);
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testBuilderInsufficientParams1() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderInsufficientParams1()|2", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderInsufficientParams1()|1", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderInsufficientParams1()|0", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder()).desc("desc")).build());
        } catch (java.lang.IllegalArgumentException a1552645020062) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.apache.commons.cli.OptionTest|testBuilderInsufficientParams1()|!", a1552645020062);
            throw a1552645020062;
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testBuilderInsufficientParams2() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|testBuilderInsufficientParams2()|2", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderInsufficientParams2()|1", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.OptionTest|testBuilderInsufficientParams2()|0", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder(null)).desc("desc")).build());
        } catch (java.lang.IllegalArgumentException a1552645020065) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.apache.commons.cli.OptionTest|testBuilderInsufficientParams2()|!", a1552645020065);
            throw a1552645020065;
        }
    }

    private static void checkOption(final org.apache.commons.cli.Option option, final java.lang.String opt, final java.lang.String description, final java.lang.String longOpt, final int numArgs, final java.lang.String argName, final boolean required, final boolean optionalArg, final char valueSeparator, final java.lang.Class<?> cls) {
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|0", opt), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|1", org.apache.commons.cli.Option.class, option).getOpt()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|3", description), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|4", org.apache.commons.cli.Option.class, option).getDescription()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|6", longOpt), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|7", org.apache.commons.cli.Option.class, option).getLongOpt()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|9", numArgs), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|10", org.apache.commons.cli.Option.class, option).getArgs()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|12", argName), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|13", org.apache.commons.cli.Option.class, option).getArgName()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|15", required), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|16", org.apache.commons.cli.Option.class, option).isRequired()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|18", optionalArg), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|19", org.apache.commons.cli.Option.class, option).hasOptionalArg()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|21", valueSeparator), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|22", org.apache.commons.cli.Option.class, option).getValueSeparator()));
        org.junit.Assert.assertEquals(cls, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|25", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionTest|checkOption(org.apache.commons.cli.Option,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,char,java.lang.Class)|24", org.apache.commons.cli.Option.class, option).getType()));
    }
}

