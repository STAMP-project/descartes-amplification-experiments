/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.cli;


/**
 * Test case for the PatternOptionBuilder class.
 */
// tests some deprecated classes
@java.lang.SuppressWarnings("deprecation")
public class PatternOptionBuilderTest {
    @org.junit.Test
    public void testSimplePattern() throws java.lang.Exception {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|0", org.apache.commons.cli.Options.class, org.apache.commons.cli.PatternOptionBuilder.parsePattern("a:b@cde>f+n%t/m*z#"));
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|1", java.lang.String[].class, new java.lang.String[]{ "-c", "-a", "foo", "-b", "java.util.Vector", "-e", "build.xml", "-f", "java.util.Calendar", "-n", "4.5", "-t", "http://commons.apache.org", "-z", "Thu Jun 06 17:48:57 EDT 2002", "-m", "test*" });
        final org.apache.commons.cli.CommandLineParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|2", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine line = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|6", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|3", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|4", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|5", java.lang.String[].class, args)));
        org.junit.Assert.assertEquals("flag a", "foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|7", org.apache.commons.cli.CommandLine.class, line).getOptionValue("a")));
        org.junit.Assert.assertEquals("string flag a", "foo", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|10", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|9", org.apache.commons.cli.CommandLine.class, line).getOptionObject("a")));
        org.junit.Assert.assertEquals("object flag b", new java.util.Vector<java.lang.Object>(), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|12", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|11", org.apache.commons.cli.CommandLine.class, line).getOptionObject("b")));
        org.junit.Assert.assertTrue("boolean true flag c", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|13", org.apache.commons.cli.CommandLine.class, line).hasOption("c")));
        org.junit.Assert.assertFalse("boolean false flag d", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|15", org.apache.commons.cli.CommandLine.class, line).hasOption("d")));
        org.junit.Assert.assertEquals("file flag e", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|17", java.io.File.class, new java.io.File("build.xml")), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|19", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|18", org.apache.commons.cli.CommandLine.class, line).getOptionObject("e")));
        org.junit.Assert.assertEquals("class flag f", java.util.Calendar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|21", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|20", org.apache.commons.cli.CommandLine.class, line).getOptionObject("f")));
        org.junit.Assert.assertEquals("number flag n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|22", new java.lang.Double(4.5)), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|24", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|23", org.apache.commons.cli.CommandLine.class, line).getOptionObject("n")));
        org.junit.Assert.assertEquals("url flag t", eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|25", java.net.URL.class, new java.net.URL("http://commons.apache.org")), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|27", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|26", org.apache.commons.cli.CommandLine.class, line).getOptionObject("t")));
        // tests the char methods of CommandLine that delegate to the String methods
        org.junit.Assert.assertEquals("flag a", "foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|28", org.apache.commons.cli.CommandLine.class, line).getOptionValue('a')));
        org.junit.Assert.assertEquals("string flag a", "foo", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|31", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|30", org.apache.commons.cli.CommandLine.class, line).getOptionObject('a')));
        org.junit.Assert.assertEquals("object flag b", new java.util.Vector<java.lang.Object>(), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|33", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|32", org.apache.commons.cli.CommandLine.class, line).getOptionObject('b')));
        org.junit.Assert.assertTrue("boolean true flag c", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|34", org.apache.commons.cli.CommandLine.class, line).hasOption('c')));
        org.junit.Assert.assertFalse("boolean false flag d", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|37", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|36", org.apache.commons.cli.CommandLine.class, line).hasOption('d')));
        org.junit.Assert.assertEquals("file flag e", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|38", java.io.File.class, new java.io.File("build.xml")), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|40", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|39", org.apache.commons.cli.CommandLine.class, line).getOptionObject('e')));
        org.junit.Assert.assertEquals("class flag f", java.util.Calendar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|42", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|41", org.apache.commons.cli.CommandLine.class, line).getOptionObject('f')));
        org.junit.Assert.assertEquals("number flag n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|43", new java.lang.Double(4.5)), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|45", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|44", org.apache.commons.cli.CommandLine.class, line).getOptionObject('n')));
        org.junit.Assert.assertEquals("url flag t", eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|46", java.net.URL.class, new java.net.URL("http://commons.apache.org")), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|48", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|47", org.apache.commons.cli.CommandLine.class, line).getOptionObject('t')));
        // FILES NOT SUPPORTED YET
        try {
            org.junit.Assert.assertEquals("files flag m", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File[]>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|49", java.io.File[].class, new java.io.File[0]), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|51", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|50", org.apache.commons.cli.CommandLine.class, line).getOptionObject('m')));
            org.junit.Assert.fail("Multiple files are not supported yet, should have failed");
        } catch (final java.lang.UnsupportedOperationException uoe) {
            // expected
        }
        // DATES NOT SUPPORTED YET
        try {
            org.junit.Assert.assertEquals("date flag z", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Date>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|52", java.util.Date.class, new java.util.Date(1023400137276L)), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|54", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testSimplePattern()|53", org.apache.commons.cli.CommandLine.class, line).getOptionObject('z')));
            org.junit.Assert.fail("Date is not supported yet, should have failed");
        } catch (final java.lang.UnsupportedOperationException uoe) {
            // expected
        }
    }

    @org.junit.Test
    public void testEmptyPattern() throws java.lang.Exception {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testEmptyPattern()|0", org.apache.commons.cli.Options.class, org.apache.commons.cli.PatternOptionBuilder.parsePattern(""));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testEmptyPattern()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.apache.commons.cli.Option>>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testEmptyPattern()|2", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testEmptyPattern()|1", org.apache.commons.cli.Options.class, options).getOptions()).isEmpty()));
    }

    @org.junit.Test
    public void testUntypedPattern() throws java.lang.Exception {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|0", org.apache.commons.cli.Options.class, org.apache.commons.cli.PatternOptionBuilder.parsePattern("abc"));
        final org.apache.commons.cli.CommandLineParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine line = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|2", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|3", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|4", java.lang.String[].class, new java.lang.String[]{ "-abc" })));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|6", org.apache.commons.cli.CommandLine.class, line).hasOption('a')));
        org.junit.Assert.assertNull("value a", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|9", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|8", org.apache.commons.cli.CommandLine.class, line).getOptionObject('a')));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|10", org.apache.commons.cli.CommandLine.class, line).hasOption('b')));
        org.junit.Assert.assertNull("value b", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|13", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|12", org.apache.commons.cli.CommandLine.class, line).getOptionObject('b')));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|14", org.apache.commons.cli.CommandLine.class, line).hasOption('c')));
        org.junit.Assert.assertNull("value c", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|17", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testUntypedPattern()|16", org.apache.commons.cli.CommandLine.class, line).getOptionObject('c')));
    }

    @org.junit.Test
    public void testNumberPattern() throws java.lang.Exception {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|0", org.apache.commons.cli.Options.class, org.apache.commons.cli.PatternOptionBuilder.parsePattern("n%d%x%"));
        final org.apache.commons.cli.CommandLineParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine line = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|2", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|3", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|4", java.lang.String[].class, new java.lang.String[]{ "-n", "1", "-d", "2.1", "-x", "3,5" })));
        org.junit.Assert.assertEquals("n object class", java.lang.Long.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|7", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|6", org.apache.commons.cli.CommandLine.class, line).getOptionObject("n")).getClass());
        org.junit.Assert.assertEquals("n value", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|8", new java.lang.Long(1)), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|10", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|9", org.apache.commons.cli.CommandLine.class, line).getOptionObject("n")));
        org.junit.Assert.assertEquals("d object class", java.lang.Double.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|12", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|11", org.apache.commons.cli.CommandLine.class, line).getOptionObject("d")).getClass());
        org.junit.Assert.assertEquals("d value", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|13", new java.lang.Double(2.1)), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|15", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|14", org.apache.commons.cli.CommandLine.class, line).getOptionObject("d")));
        org.junit.Assert.assertNull("x object", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|17", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testNumberPattern()|16", org.apache.commons.cli.CommandLine.class, line).getOptionObject("x")));
    }

    @org.junit.Test
    public void testClassPattern() throws java.lang.Exception {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testClassPattern()|0", org.apache.commons.cli.Options.class, org.apache.commons.cli.PatternOptionBuilder.parsePattern("c+d+"));
        final org.apache.commons.cli.CommandLineParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testClassPattern()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine line = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testClassPattern()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testClassPattern()|2", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testClassPattern()|3", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testClassPattern()|4", java.lang.String[].class, new java.lang.String[]{ "-c", "java.util.Calendar", "-d", "System.DateTime" })));
        org.junit.Assert.assertEquals("c value", java.util.Calendar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testClassPattern()|7", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testClassPattern()|6", org.apache.commons.cli.CommandLine.class, line).getOptionObject("c")));
        org.junit.Assert.assertNull("d value", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testClassPattern()|9", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testClassPattern()|8", org.apache.commons.cli.CommandLine.class, line).getOptionObject("d")));
    }

    @org.junit.Test
    public void testObjectPattern() throws java.lang.Exception {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testObjectPattern()|0", org.apache.commons.cli.Options.class, org.apache.commons.cli.PatternOptionBuilder.parsePattern("o@i@n@"));
        final org.apache.commons.cli.CommandLineParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testObjectPattern()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine line = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testObjectPattern()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testObjectPattern()|2", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testObjectPattern()|3", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testObjectPattern()|4", java.lang.String[].class, new java.lang.String[]{ "-o", "java.lang.String", "-i", "java.util.Calendar", "-n", "System.DateTime" })));
        org.junit.Assert.assertEquals("o value", "", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testObjectPattern()|7", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testObjectPattern()|6", org.apache.commons.cli.CommandLine.class, line).getOptionObject("o")));
        org.junit.Assert.assertNull("i value", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testObjectPattern()|9", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testObjectPattern()|8", org.apache.commons.cli.CommandLine.class, line).getOptionObject("i")));
        org.junit.Assert.assertNull("n value", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testObjectPattern()|11", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testObjectPattern()|10", org.apache.commons.cli.CommandLine.class, line).getOptionObject("n")));
    }

    @org.junit.Test
    public void testURLPattern() throws java.lang.Exception {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testURLPattern()|0", org.apache.commons.cli.Options.class, org.apache.commons.cli.PatternOptionBuilder.parsePattern("u/v/"));
        final org.apache.commons.cli.CommandLineParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testURLPattern()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine line = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testURLPattern()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testURLPattern()|2", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testURLPattern()|3", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testURLPattern()|4", java.lang.String[].class, new java.lang.String[]{ "-u", "http://commons.apache.org", "-v", "foo://commons.apache.org" })));
        org.junit.Assert.assertEquals("u value", eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testURLPattern()|6", java.net.URL.class, new java.net.URL("http://commons.apache.org")), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testURLPattern()|8", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testURLPattern()|7", org.apache.commons.cli.CommandLine.class, line).getOptionObject("u")));
        org.junit.Assert.assertNull("v value", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testURLPattern()|10", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testURLPattern()|9", org.apache.commons.cli.CommandLine.class, line).getOptionObject("v")));
    }

    @org.junit.Test
    public void testExistingFilePattern() throws java.lang.Exception {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePattern()|0", org.apache.commons.cli.Options.class, org.apache.commons.cli.PatternOptionBuilder.parsePattern("g<"));
        final org.apache.commons.cli.CommandLineParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePattern()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine line = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePattern()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePattern()|2", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePattern()|3", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePattern()|4", java.lang.String[].class, new java.lang.String[]{ "-g", "src/test/resources/existing-readable.file" })));
        final java.lang.Object parsedReadableFileStream = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePattern()|7", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePattern()|6", org.apache.commons.cli.CommandLine.class, line).getOptionObject("g"));
        org.junit.Assert.assertNotNull("option g not parsed", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePattern()|8", java.lang.Object.class, parsedReadableFileStream));
        org.junit.Assert.assertTrue("option g not FileInputStream", ((eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePattern()|9", java.lang.Object.class, parsedReadableFileStream)) instanceof java.io.FileInputStream));
    }

    @org.junit.Test
    public void testExistingFilePatternFileNotExist() throws java.lang.Exception {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePatternFileNotExist()|0", org.apache.commons.cli.Options.class, org.apache.commons.cli.PatternOptionBuilder.parsePattern("f<"));
        final org.apache.commons.cli.CommandLineParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePatternFileNotExist()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine line = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePatternFileNotExist()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePatternFileNotExist()|2", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePatternFileNotExist()|3", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePatternFileNotExist()|4", java.lang.String[].class, new java.lang.String[]{ "-f", "non-existing.file" })));
        org.junit.Assert.assertNull("option f parsed", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePatternFileNotExist()|7", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testExistingFilePatternFileNotExist()|6", org.apache.commons.cli.CommandLine.class, line).getOptionObject("f")));
    }

    @org.junit.Test
    public void testRequiredOption() throws java.lang.Exception {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testRequiredOption()|0", org.apache.commons.cli.Options.class, org.apache.commons.cli.PatternOptionBuilder.parsePattern("!n%m%"));
        final org.apache.commons.cli.CommandLineParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testRequiredOption()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testRequiredOption()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testRequiredOption()|2", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testRequiredOption()|3", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testRequiredOption()|4", java.lang.String[].class, new java.lang.String[]{ "" })));
            org.junit.Assert.fail("MissingOptionException wasn't thrown");
        } catch (final org.apache.commons.cli.MissingOptionException e) {
            org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testRequiredOption()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testRequiredOption()|7", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingOptionException>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testRequiredOption()|6", org.apache.commons.cli.MissingOptionException.class, e).getMissingOptions()).size()));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.PatternOptionBuilderTest|testRequiredOption()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testRequiredOption()|10", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingOptionException>observeState("org.apache.commons.cli.PatternOptionBuilderTest|testRequiredOption()|9", org.apache.commons.cli.MissingOptionException.class, e).getMissingOptions()).contains("n")));
        }
    }
}

