/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.cli;


/**
 * Test case for the HelpFormatter class.
 */
public class HelpFormatterTest {
    private static final java.lang.String EOL = java.lang.System.getProperty("line.separator");

    @org.junit.Test
    public void testFindWrapPos() throws java.lang.Exception {
        final org.apache.commons.cli.HelpFormatter hf = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|0", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        java.lang.String text = "This is a test.";
        // text width should be max 8; the wrap position is 7
        org.junit.Assert.assertEquals("wrap position", 7, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|1", org.apache.commons.cli.HelpFormatter.class, hf).findWrapPos(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|2", text), 8, 0)));
        // starting from 8 must give -1 - the wrap pos is after end
        org.junit.Assert.assertEquals("wrap position 2", (-1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|4", org.apache.commons.cli.HelpFormatter.class, hf).findWrapPos(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|5", text), 8, 8)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|7", // words longer than the width are cut
        (text = "aaaa aa"));
        org.junit.Assert.assertEquals("wrap position 3", 3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|8", org.apache.commons.cli.HelpFormatter.class, hf).findWrapPos(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|9", text), 3, 0)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|11", // last word length is equal to the width
        (text = "aaaaaa aaaaaa"));
        org.junit.Assert.assertEquals("wrap position 4", 6, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|12", org.apache.commons.cli.HelpFormatter.class, hf).findWrapPos(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|13", text), 6, 0)));
        org.junit.Assert.assertEquals("wrap position 4", (-1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|15", org.apache.commons.cli.HelpFormatter.class, hf).findWrapPos(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|16", text), 6, 7)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|18", (text = "aaaaaa\n aaaaaa"));
        org.junit.Assert.assertEquals("wrap position 5", 7, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|19", org.apache.commons.cli.HelpFormatter.class, hf).findWrapPos(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|20", text), 6, 0)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|22", (text = "aaaaaa\t aaaaaa"));
        org.junit.Assert.assertEquals("wrap position 6", 7, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|23", org.apache.commons.cli.HelpFormatter.class, hf).findWrapPos(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testFindWrapPos()|24", text), 6, 0)));
    }

    @org.junit.Test
    public void testRenderWrappedTextWordCut() {
        final int width = 7;
        final int padding = 0;
        final java.lang.String text = "Thisisatest.";
        final java.lang.String expected = ("Thisisa" + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "test.";
        final java.lang.StringBuffer sb = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextWordCut()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextWordCut()|6", java.lang.StringBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextWordCut()|1", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter()).renderWrappedText(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextWordCut()|2", java.lang.StringBuffer.class, sb), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextWordCut()|3", width), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextWordCut()|4", padding), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextWordCut()|5", text)));
        org.junit.Assert.assertEquals("cut and wrap", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextWordCut()|7", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextWordCut()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextWordCut()|8", java.lang.StringBuffer.class, sb).toString()));
    }

    @org.junit.Test
    public void testRenderWrappedTextSingleLine() {
        // single line text
        final int width = 12;
        final int padding = 0;
        final java.lang.String text = "This is a test.";
        final java.lang.String expected = ("This is a" + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "test.";
        final java.lang.StringBuffer sb = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLine()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLine()|6", java.lang.StringBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLine()|1", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter()).renderWrappedText(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLine()|2", java.lang.StringBuffer.class, sb), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLine()|3", width), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLine()|4", padding), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLine()|5", text)));
        org.junit.Assert.assertEquals("single line text", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLine()|7", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLine()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLine()|8", java.lang.StringBuffer.class, sb).toString()));
    }

    @org.junit.Test
    public void testRenderWrappedTextSingleLinePadded() {
        // single line padded text
        final int width = 12;
        final int padding = 4;
        final java.lang.String text = "This is a test.";
        final java.lang.String expected = ("This is a" + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "    test.";
        final java.lang.StringBuffer sb = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded()|6", java.lang.StringBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded()|1", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter()).renderWrappedText(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded()|2", java.lang.StringBuffer.class, sb), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded()|3", width), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded()|4", padding), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded()|5", text)));
        org.junit.Assert.assertEquals("single line padded text", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded()|7", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded()|8", java.lang.StringBuffer.class, sb).toString()));
    }

    @org.junit.Test
    public void testRenderWrappedTextSingleLinePadded2() {
        // single line padded text 2
        final int width = 53;
        final int padding = 24;
        final java.lang.String text = "  -p,--period <PERIOD>  PERIOD is time duration of form " + "DATE[-DATE] where DATE has form YYYY[MM[DD]]";
        final java.lang.String expected = ((("  -p,--period <PERIOD>  PERIOD is time duration of" + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "                        form DATE[-DATE] where DATE") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "                        has form YYYY[MM[DD]]";
        final java.lang.StringBuffer sb = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded2()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded2()|6", java.lang.StringBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded2()|1", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter()).renderWrappedText(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded2()|2", java.lang.StringBuffer.class, sb), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded2()|3", width), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded2()|4", padding), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded2()|5", text)));
        org.junit.Assert.assertEquals("single line padded text 2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded2()|7", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded2()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextSingleLinePadded2()|8", java.lang.StringBuffer.class, sb).toString()));
    }

    @org.junit.Test
    public void testRenderWrappedTextMultiLine() {
        // multi line text
        final int width = 16;
        final int padding = 0;
        final java.lang.String expected = ((("aaaa aaaa aaaa" + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "aaaaaa") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "aaaaa";
        final java.lang.StringBuffer sb = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLine()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLine()|6", java.lang.StringBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLine()|1", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter()).renderWrappedText(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLine()|2", java.lang.StringBuffer.class, sb), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLine()|3", width), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLine()|4", padding), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLine()|5", expected)));
        org.junit.Assert.assertEquals("multi line text", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLine()|7", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLine()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLine()|8", java.lang.StringBuffer.class, sb).toString()));
    }

    @org.junit.Test
    public void testRenderWrappedTextMultiLinePadded() {
        // multi-line padded text
        final int width = 16;
        final int padding = 4;
        final java.lang.String text = ((("aaaa aaaa aaaa" + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "aaaaaa") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "aaaaa";
        final java.lang.String expected = ((("aaaa aaaa aaaa" + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "    aaaaaa") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "    aaaaa";
        final java.lang.StringBuffer sb = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLinePadded()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLinePadded()|6", java.lang.StringBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLinePadded()|1", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter()).renderWrappedText(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLinePadded()|2", java.lang.StringBuffer.class, sb), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLinePadded()|3", width), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLinePadded()|4", padding), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLinePadded()|5", text)));
        org.junit.Assert.assertEquals("multi-line padded text", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLinePadded()|7", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLinePadded()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testRenderWrappedTextMultiLinePadded()|8", java.lang.StringBuffer.class, sb).toString()));
    }

    @org.junit.Test
    public void testPrintOptions() throws java.lang.Exception {
        final java.lang.StringBuffer sb = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        final org.apache.commons.cli.HelpFormatter hf = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|1", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        final int leftPad = 1;
        final int descPad = 3;
        final java.lang.String lpad = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|2", org.apache.commons.cli.HelpFormatter.class, hf).createPadding(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|3", leftPad)));
        final java.lang.String dpad = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|5", org.apache.commons.cli.HelpFormatter.class, hf).createPadding(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|6", descPad)));
        org.apache.commons.cli.Options options = null;
        java.lang.String expected = null;
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|9", org.apache.commons.cli.Options.class, (options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|8", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options()).addOption("a", false, "aaaa aaaa aaaa aaaa aaaa")));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|12", (expected = (((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|10", lpad)) + "-a") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|11", dpad))) + "aaaa aaaa aaaa aaaa aaaa"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|18", java.lang.StringBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|13", org.apache.commons.cli.HelpFormatter.class, hf).renderOptions(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|14", java.lang.StringBuffer.class, sb), 60, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|15", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|16", leftPad), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|17", descPad)));
        org.junit.Assert.assertEquals("simple non-wrapped option", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|19", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|20", java.lang.StringBuffer.class, sb).toString()));
        int nextLineTabStop = ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|22", leftPad)) + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|23", descPad))) + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|24", "-a".length()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|30", (expected = ((((((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|25", lpad)) + "-a") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|26", dpad))) + "aaaa aaaa aaaa") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|27", org.apache.commons.cli.HelpFormatter.class, hf).createPadding(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|28", nextLineTabStop))))) + "aaaa aaaa"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|31", java.lang.StringBuffer.class, sb).setLength(0);
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|38", java.lang.StringBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|32", org.apache.commons.cli.HelpFormatter.class, hf).renderOptions(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|33", java.lang.StringBuffer.class, sb), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|34", nextLineTabStop)) + 17), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|35", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|36", leftPad), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|37", descPad)));
        org.junit.Assert.assertEquals("simple wrapped option", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|39", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|41", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|40", java.lang.StringBuffer.class, sb).toString()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|43", org.apache.commons.cli.Options.class, (options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|42", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options()).addOption("a", "aaa", false, "dddd dddd dddd dddd")));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|46", (expected = (((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|44", lpad)) + "-a,--aaa") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|45", dpad))) + "dddd dddd dddd dddd"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|47", java.lang.StringBuffer.class, sb).setLength(0);
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|53", java.lang.StringBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|48", org.apache.commons.cli.HelpFormatter.class, hf).renderOptions(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|49", java.lang.StringBuffer.class, sb), 60, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|50", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|51", leftPad), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|52", descPad)));
        org.junit.Assert.assertEquals("long non-wrapped option", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|54", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|56", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|55", java.lang.StringBuffer.class, sb).toString()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|60", (nextLineTabStop = ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|57", leftPad)) + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|58", descPad))) + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|59", "-a,--aaa".length()))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|66", (expected = ((((((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|61", lpad)) + "-a,--aaa") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|62", dpad))) + "dddd dddd") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|65", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|63", org.apache.commons.cli.HelpFormatter.class, hf).createPadding(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|64", nextLineTabStop))))) + "dddd dddd"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|67", java.lang.StringBuffer.class, sb).setLength(0);
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|73", java.lang.StringBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|68", org.apache.commons.cli.HelpFormatter.class, hf).renderOptions(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|69", java.lang.StringBuffer.class, sb), 25, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|70", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|71", leftPad), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|72", descPad)));
        org.junit.Assert.assertEquals("long wrapped option", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|74", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|76", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|75", java.lang.StringBuffer.class, sb).toString()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|79", org.apache.commons.cli.Options.class, (options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|78", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|77", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options()).addOption("a", "aaa", false, "dddd dddd dddd dddd")).addOption("b", false, "feeee eeee eeee eeee")));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|90", (expected = ((((((((((((((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|80", lpad)) + "-a,--aaa") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|81", dpad))) + "dddd dddd") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|84", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|82", org.apache.commons.cli.HelpFormatter.class, hf).createPadding(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|83", nextLineTabStop))))) + "dddd dddd") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|85", lpad))) + "-b      ") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|86", dpad))) + "feeee eeee") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|89", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|87", org.apache.commons.cli.HelpFormatter.class, hf).createPadding(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|88", nextLineTabStop))))) + "eeee eeee"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|91", java.lang.StringBuffer.class, sb).setLength(0);
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|97", java.lang.StringBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|92", org.apache.commons.cli.HelpFormatter.class, hf).renderOptions(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|93", java.lang.StringBuffer.class, sb), 25, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|94", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|95", leftPad), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|96", descPad)));
        org.junit.Assert.assertEquals("multiple wrapped options", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|98", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|100", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptions()|99", java.lang.StringBuffer.class, sb).toString()));
    }

    @org.junit.Test
    public void testPrintHelpWithEmptySyntax() {
        final org.apache.commons.cli.HelpFormatter formatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintHelpWithEmptySyntax()|0", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintHelpWithEmptySyntax()|1", org.apache.commons.cli.HelpFormatter.class, formatter).printHelp(null, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintHelpWithEmptySyntax()|2", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options()));
            org.junit.Assert.fail("null command line syntax should be rejected");
        } catch (final java.lang.IllegalArgumentException e) {
            // expected
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintHelpWithEmptySyntax()|3", org.apache.commons.cli.HelpFormatter.class, formatter).printHelp("", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintHelpWithEmptySyntax()|4", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options()));
            org.junit.Assert.fail("empty command line syntax should be rejected");
        } catch (final java.lang.IllegalArgumentException e) {
            // expected
        }
    }

    @org.junit.Test
    public void testAutomaticUsage() throws java.lang.Exception {
        final org.apache.commons.cli.HelpFormatter hf = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|0", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        org.apache.commons.cli.Options options = null;
        java.lang.String expected = "usage: app [-a]";
        final java.io.ByteArrayOutputStream out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayOutputStream>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|1", java.io.ByteArrayOutputStream.class, new java.io.ByteArrayOutputStream());
        final java.io.PrintWriter pw = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|3", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayOutputStream>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|2", java.io.ByteArrayOutputStream.class, out)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|5", org.apache.commons.cli.Options.class, (options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|4", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options()).addOption("a", false, "aaaa aaaa aaaa aaaa aaaa")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|6", org.apache.commons.cli.HelpFormatter.class, hf).printUsage(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|7", java.io.PrintWriter.class, pw), 60, "app", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|8", org.apache.commons.cli.Options.class, options));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|9", java.io.PrintWriter.class, pw).flush();
        org.junit.Assert.assertEquals("simple auto usage", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|10", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|13", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayOutputStream>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|11", java.io.ByteArrayOutputStream.class, out).toString()).trim()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayOutputStream>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|14", java.io.ByteArrayOutputStream.class, out).reset();
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|15", (expected = "usage: app [-a] [-b]"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|18", org.apache.commons.cli.Options.class, (options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|17", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|16", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options()).addOption("a", false, "aaaa aaaa aaaa aaaa aaaa")).addOption("b", false, "bbb")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|19", org.apache.commons.cli.HelpFormatter.class, hf).printUsage(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|20", java.io.PrintWriter.class, pw), 60, "app", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|21", org.apache.commons.cli.Options.class, options));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|22", java.io.PrintWriter.class, pw).flush();
        org.junit.Assert.assertEquals("simple auto usage", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|23", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|26", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayOutputStream>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|24", java.io.ByteArrayOutputStream.class, out).toString()).trim()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayOutputStream>observeState("org.apache.commons.cli.HelpFormatterTest|testAutomaticUsage()|27", java.io.ByteArrayOutputStream.class, out).reset();
    }

    // This test ensures the options are properly sorted
    // See https://issues.apache.org/jira/browse/CLI-131
    @org.junit.Test
    public void testPrintUsage() {
        final org.apache.commons.cli.Option optionA = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|0", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("a", "first"));
        final org.apache.commons.cli.Option optionB = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|1", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("b", "second"));
        final org.apache.commons.cli.Option optionC = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|2", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("c", "third"));
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|3", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|4", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|5", org.apache.commons.cli.Option.class, optionA)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|7", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|8", org.apache.commons.cli.Option.class, optionB)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|12", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|10", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|11", org.apache.commons.cli.Option.class, optionC)));
        final org.apache.commons.cli.HelpFormatter helpFormatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|13", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        final java.io.ByteArrayOutputStream bytesOut = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayOutputStream>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|14", java.io.ByteArrayOutputStream.class, new java.io.ByteArrayOutputStream());
        final java.io.PrintWriter printWriter = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|16", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayOutputStream>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|15", java.io.ByteArrayOutputStream.class, bytesOut)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|17", org.apache.commons.cli.HelpFormatter.class, helpFormatter).printUsage(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|18", java.io.PrintWriter.class, printWriter), 80, "app", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|19", org.apache.commons.cli.Options.class, opts));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|20", java.io.PrintWriter.class, printWriter).close();
        org.junit.Assert.assertEquals(("usage: app [-a] [-b] [-c]" + (org.apache.commons.cli.HelpFormatterTest.EOL)), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayOutputStream>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintUsage()|21", java.io.ByteArrayOutputStream.class, bytesOut).toString()));
    }

    // uses the test for CLI-131 to implement CLI-155
    @org.junit.Test
    public void testPrintSortedUsage() {
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|3", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|1", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|2", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("a", "first"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|4", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|5", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("b", "second"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|7", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|8", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("c", "third"))));
        final org.apache.commons.cli.HelpFormatter helpFormatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|10", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|11", org.apache.commons.cli.HelpFormatter.class, helpFormatter).setOptionComparator(new java.util.Comparator<org.apache.commons.cli.Option>() {
            public int compare(final org.apache.commons.cli.Option opt1, final org.apache.commons.cli.Option opt2) {
                // reverses the functionality of the default comparator
                return eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|17", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|13", org.apache.commons.cli.Option.class, opt2).getKey()).compareToIgnoreCase(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|15", org.apache.commons.cli.Option.class, opt1).getKey())));
            }
        });
        final java.io.StringWriter out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|18", java.io.StringWriter.class, new java.io.StringWriter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|19", org.apache.commons.cli.HelpFormatter.class, helpFormatter).printUsage(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|21", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|20", java.io.StringWriter.class, out))), 80, "app", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|22", org.apache.commons.cli.Options.class, opts));
        org.junit.Assert.assertEquals(("usage: app [-c] [-b] [-a]" + (org.apache.commons.cli.HelpFormatterTest.EOL)), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsage()|23", java.io.StringWriter.class, out).toString()));
    }

    @org.junit.Test
    public void testPrintSortedUsageWithNullComparator() {
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|3", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|1", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|2", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("c", "first"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|4", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|5", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("b", "second"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|7", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|8", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("a", "third"))));
        final org.apache.commons.cli.HelpFormatter helpFormatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|10", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|11", org.apache.commons.cli.HelpFormatter.class, helpFormatter).setOptionComparator(null);
        final java.io.StringWriter out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|12", java.io.StringWriter.class, new java.io.StringWriter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|13", org.apache.commons.cli.HelpFormatter.class, helpFormatter).printUsage(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|15", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|14", java.io.StringWriter.class, out))), 80, "app", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|16", org.apache.commons.cli.Options.class, opts));
        org.junit.Assert.assertEquals(("usage: app [-c] [-b] [-a]" + (org.apache.commons.cli.HelpFormatterTest.EOL)), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintSortedUsageWithNullComparator()|17", java.io.StringWriter.class, out).toString()));
    }

    @org.junit.Test
    public void testPrintOptionGroupUsage() {
        final org.apache.commons.cli.OptionGroup group = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|0", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|4", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|1", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|3", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|2", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).build())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|8", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|5", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|7", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|6", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("b")).build())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|12", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|9", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|11", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|10", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("c")).build())));
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|13", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|16", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|14", org.apache.commons.cli.Options.class, options).addOptionGroup(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|15", org.apache.commons.cli.OptionGroup.class, group)));
        final java.io.StringWriter out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|17", java.io.StringWriter.class, new java.io.StringWriter());
        final org.apache.commons.cli.HelpFormatter formatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|18", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|19", org.apache.commons.cli.HelpFormatter.class, formatter).printUsage(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|21", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|20", java.io.StringWriter.class, out))), 80, "app", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|22", org.apache.commons.cli.Options.class, options));
        org.junit.Assert.assertEquals(("usage: app [-a | -b | -c]" + (org.apache.commons.cli.HelpFormatterTest.EOL)), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionGroupUsage()|23", java.io.StringWriter.class, out).toString()));
    }

    @org.junit.Test
    public void testPrintRequiredOptionGroupUsage() {
        final org.apache.commons.cli.OptionGroup group = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|0", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|4", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|1", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|3", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|2", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).build())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|8", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|5", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|7", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|6", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("b")).build())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|12", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|9", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|11", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|10", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("c")).build())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|13", org.apache.commons.cli.OptionGroup.class, group).setRequired(true);
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|14", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|17", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|15", org.apache.commons.cli.Options.class, options).addOptionGroup(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|16", org.apache.commons.cli.OptionGroup.class, group)));
        final java.io.StringWriter out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|18", java.io.StringWriter.class, new java.io.StringWriter());
        final org.apache.commons.cli.HelpFormatter formatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|19", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|20", org.apache.commons.cli.HelpFormatter.class, formatter).printUsage(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|22", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|21", java.io.StringWriter.class, out))), 80, "app", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|23", org.apache.commons.cli.Options.class, options));
        org.junit.Assert.assertEquals(("usage: app -a | -b | -c" + (org.apache.commons.cli.HelpFormatterTest.EOL)), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintRequiredOptionGroupUsage()|24", java.io.StringWriter.class, out).toString()));
    }

    @org.junit.Test
    public void testPrintOptionWithEmptyArgNameUsage() {
        final org.apache.commons.cli.Option option = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|0", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("f", true, null));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|1", org.apache.commons.cli.Option.class, option).setArgName("");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|2", org.apache.commons.cli.Option.class, option).setRequired(true);
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|3", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|4", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|5", org.apache.commons.cli.Option.class, option)));
        final java.io.StringWriter out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|7", java.io.StringWriter.class, new java.io.StringWriter());
        final org.apache.commons.cli.HelpFormatter formatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|8", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|9", org.apache.commons.cli.HelpFormatter.class, formatter).printUsage(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|11", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|10", java.io.StringWriter.class, out))), 80, "app", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|12", org.apache.commons.cli.Options.class, options));
        org.junit.Assert.assertEquals(("usage: app -f" + (org.apache.commons.cli.HelpFormatterTest.EOL)), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testPrintOptionWithEmptyArgNameUsage()|13", java.io.StringWriter.class, out).toString()));
    }

    @org.junit.Test
    public void testDefaultArgName() {
        final org.apache.commons.cli.Option option = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|3", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|2", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|1", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|0", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("f")).hasArg()).required(true)).build());
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|4", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|7", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|5", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|6", org.apache.commons.cli.Option.class, option)));
        final java.io.StringWriter out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|8", java.io.StringWriter.class, new java.io.StringWriter());
        final org.apache.commons.cli.HelpFormatter formatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|9", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|10", org.apache.commons.cli.HelpFormatter.class, formatter).setArgName("argument");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|11", org.apache.commons.cli.HelpFormatter.class, formatter).printUsage(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|13", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|12", java.io.StringWriter.class, out))), 80, "app", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|14", org.apache.commons.cli.Options.class, options));
        org.junit.Assert.assertEquals(("usage: app -f <argument>" + (org.apache.commons.cli.HelpFormatterTest.EOL)), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testDefaultArgName()|15", java.io.StringWriter.class, out).toString()));
    }

    @org.junit.Test
    public void testRtrim() {
        final org.apache.commons.cli.HelpFormatter formatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testRtrim()|0", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        org.junit.Assert.assertEquals(null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRtrim()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testRtrim()|1", org.apache.commons.cli.HelpFormatter.class, formatter).rtrim(null)));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRtrim()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testRtrim()|3", org.apache.commons.cli.HelpFormatter.class, formatter).rtrim("")));
        org.junit.Assert.assertEquals("  foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testRtrim()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testRtrim()|5", org.apache.commons.cli.HelpFormatter.class, formatter).rtrim("  foo  ")));
    }

    @org.junit.Test
    public void testAccessors() {
        final org.apache.commons.cli.HelpFormatter formatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|0", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|1", org.apache.commons.cli.HelpFormatter.class, formatter).setArgName("argname");
        org.junit.Assert.assertEquals("arg name", "argname", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAccessors()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|2", org.apache.commons.cli.HelpFormatter.class, formatter).getArgName()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|4", org.apache.commons.cli.HelpFormatter.class, formatter).setDescPadding(3);
        org.junit.Assert.assertEquals("desc padding", 3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAccessors()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|5", org.apache.commons.cli.HelpFormatter.class, formatter).getDescPadding()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|7", org.apache.commons.cli.HelpFormatter.class, formatter).setLeftPadding(7);
        org.junit.Assert.assertEquals("left padding", 7, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAccessors()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|8", org.apache.commons.cli.HelpFormatter.class, formatter).getLeftPadding()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|10", org.apache.commons.cli.HelpFormatter.class, formatter).setLongOptPrefix("~~");
        org.junit.Assert.assertEquals("long opt prefix", "~~", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAccessors()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|11", org.apache.commons.cli.HelpFormatter.class, formatter).getLongOptPrefix()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|13", org.apache.commons.cli.HelpFormatter.class, formatter).setNewLine("\n");
        org.junit.Assert.assertEquals("new line", "\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAccessors()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|14", org.apache.commons.cli.HelpFormatter.class, formatter).getNewLine()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|16", org.apache.commons.cli.HelpFormatter.class, formatter).setOptPrefix("~");
        org.junit.Assert.assertEquals("opt prefix", "~", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAccessors()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|17", org.apache.commons.cli.HelpFormatter.class, formatter).getOptPrefix()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|19", org.apache.commons.cli.HelpFormatter.class, formatter).setSyntaxPrefix("-> ");
        org.junit.Assert.assertEquals("syntax prefix", "-> ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAccessors()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|20", org.apache.commons.cli.HelpFormatter.class, formatter).getSyntaxPrefix()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|22", org.apache.commons.cli.HelpFormatter.class, formatter).setWidth(80);
        org.junit.Assert.assertEquals("width", 80, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testAccessors()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testAccessors()|23", org.apache.commons.cli.HelpFormatter.class, formatter).getWidth()));
    }

    @org.junit.Test
    public void testHeaderStartingWithLineSeparator() {
        // related to Bugzilla #21215
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testHeaderStartingWithLineSeparator()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        final org.apache.commons.cli.HelpFormatter formatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testHeaderStartingWithLineSeparator()|1", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        final java.lang.String header = (org.apache.commons.cli.HelpFormatterTest.EOL) + "Header";
        final java.lang.String footer = "Footer";
        final java.io.StringWriter out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testHeaderStartingWithLineSeparator()|2", java.io.StringWriter.class, new java.io.StringWriter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testHeaderStartingWithLineSeparator()|3", org.apache.commons.cli.HelpFormatter.class, formatter).printHelp(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testHeaderStartingWithLineSeparator()|5", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testHeaderStartingWithLineSeparator()|4", java.io.StringWriter.class, out))), 80, "foobar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testHeaderStartingWithLineSeparator()|6", header), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testHeaderStartingWithLineSeparator()|7", org.apache.commons.cli.Options.class, options), 2, 2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testHeaderStartingWithLineSeparator()|8", footer), true);
        org.junit.Assert.assertEquals(((((((((("usage: foobar" + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "Header") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "Footer") + (org.apache.commons.cli.HelpFormatterTest.EOL)), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testHeaderStartingWithLineSeparator()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testHeaderStartingWithLineSeparator()|9", java.io.StringWriter.class, out).toString()));
    }

    @org.junit.Test
    public void testIndentedHeaderAndFooter() {
        // related to CLI-207
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testIndentedHeaderAndFooter()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        final org.apache.commons.cli.HelpFormatter formatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testIndentedHeaderAndFooter()|1", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        final java.lang.String header = "  Header1\n  Header2";
        final java.lang.String footer = "  Footer1\n  Footer2";
        final java.io.StringWriter out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testIndentedHeaderAndFooter()|2", java.io.StringWriter.class, new java.io.StringWriter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testIndentedHeaderAndFooter()|3", org.apache.commons.cli.HelpFormatter.class, formatter).printHelp(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testIndentedHeaderAndFooter()|5", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testIndentedHeaderAndFooter()|4", java.io.StringWriter.class, out))), 80, "foobar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testIndentedHeaderAndFooter()|6", header), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testIndentedHeaderAndFooter()|7", org.apache.commons.cli.Options.class, options), 2, 2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testIndentedHeaderAndFooter()|8", footer), true);
        org.junit.Assert.assertEquals(((((((((((("usage: foobar" + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "  Header1") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "  Header2") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "  Footer1") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "  Footer2") + (org.apache.commons.cli.HelpFormatterTest.EOL)), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testIndentedHeaderAndFooter()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testIndentedHeaderAndFooter()|9", java.io.StringWriter.class, out).toString()));
    }

    @org.junit.Test
    public void testOptionWithoutShortFormat() {
        // related to Bugzilla #19383 (CLI-67)
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|3", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|1", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|2", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("a", "aaa", false, "aaaaaaa"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|4", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|5", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option(null, "bbb", false, "bbbbbbb"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|7", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|8", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("c", null, false, "ccccccc"))));
        final org.apache.commons.cli.HelpFormatter formatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|10", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        final java.io.StringWriter out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|11", java.io.StringWriter.class, new java.io.StringWriter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|12", org.apache.commons.cli.HelpFormatter.class, formatter).printHelp(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|14", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|13", java.io.StringWriter.class, out))), 80, "foobar", "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|15", org.apache.commons.cli.Options.class, options), 2, 2, "", true);
        org.junit.Assert.assertEquals(((((((("usage: foobar [-a] [--bbb] [-c]" + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "  -a,--aaa  aaaaaaa") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "     --bbb  bbbbbbb") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "  -c        ccccccc") + (org.apache.commons.cli.HelpFormatterTest.EOL)), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat()|16", java.io.StringWriter.class, out).toString()));
    }

    @org.junit.Test
    public void testOptionWithoutShortFormat2() {
        // related to Bugzilla #27635 (CLI-26)
        final org.apache.commons.cli.Option help = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|0", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("h", "help", false, "print this message"));
        final org.apache.commons.cli.Option version = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|1", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("v", "version", false, "print version information"));
        final org.apache.commons.cli.Option newRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|2", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("n", "new", false, "Create NLT cache entries only for new items"));
        final org.apache.commons.cli.Option trackerRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|3", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("t", "tracker", false, "Create NLT cache entries only for tracker items"));
        final org.apache.commons.cli.Option timeLimit = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|9", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|8", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|7", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|6", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|5", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|4", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("l")).longOpt("limit")).hasArg()).valueSeparator()).desc("Set time limit for execution, in mintues")).build());
        final org.apache.commons.cli.Option age = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|15", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|14", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|13", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|12", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|11", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|10", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("a")).longOpt("age")).hasArg()).valueSeparator()).desc("Age (in days) of cache item before being recomputed")).build());
        final org.apache.commons.cli.Option server = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|21", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|20", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|19", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|18", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|17", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|16", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("s")).longOpt("server")).hasArg()).valueSeparator()).desc("The NLT server address")).build());
        final org.apache.commons.cli.Option numResults = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|27", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|26", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|25", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|24", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|23", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|22", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("r")).longOpt("results")).hasArg()).valueSeparator()).desc("Number of results per item")).build());
        final org.apache.commons.cli.Option configFile = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|33", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|32", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|31", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|30", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|29", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|28", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder()).longOpt("config")).hasArg()).valueSeparator()).desc("Use the specified configuration file")).build());
        final org.apache.commons.cli.Options mOptions = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|34", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|37", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|35", org.apache.commons.cli.Options.class, mOptions).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|36", org.apache.commons.cli.Option.class, help)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|40", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|38", org.apache.commons.cli.Options.class, mOptions).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|39", org.apache.commons.cli.Option.class, version)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|43", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|41", org.apache.commons.cli.Options.class, mOptions).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|42", org.apache.commons.cli.Option.class, newRun)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|46", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|44", org.apache.commons.cli.Options.class, mOptions).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|45", org.apache.commons.cli.Option.class, trackerRun)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|49", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|47", org.apache.commons.cli.Options.class, mOptions).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|48", org.apache.commons.cli.Option.class, timeLimit)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|52", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|50", org.apache.commons.cli.Options.class, mOptions).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|51", org.apache.commons.cli.Option.class, age)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|55", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|53", org.apache.commons.cli.Options.class, mOptions).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|54", org.apache.commons.cli.Option.class, server)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|58", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|56", org.apache.commons.cli.Options.class, mOptions).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|57", org.apache.commons.cli.Option.class, numResults)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|61", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|59", org.apache.commons.cli.Options.class, mOptions).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|60", org.apache.commons.cli.Option.class, configFile)));
        final org.apache.commons.cli.HelpFormatter formatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|62", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        final java.lang.String EOL = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|63", java.lang.System.getProperty("line.separator"));
        final java.io.StringWriter out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|64", java.io.StringWriter.class, new java.io.StringWriter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|65", org.apache.commons.cli.HelpFormatter.class, formatter).printHelp(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|67", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|66", java.io.StringWriter.class, out))), 80, "commandline", "header", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|68", org.apache.commons.cli.Options.class, mOptions), 2, 2, "footer", true);
        org.junit.Assert.assertEquals(((((((((((((((((((((((((("usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|69", EOL))) + "       [-s <arg>] [-t] [-v]") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|70", EOL))) + "header") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|71", EOL))) + "  -a,--age <arg>      Age (in days) of cache item before being recomputed") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|72", EOL))) + "     --config <arg>   Use the specified configuration file") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|73", EOL))) + "  -h,--help           print this message") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|74", EOL))) + "  -l,--limit <arg>    Set time limit for execution, in mintues") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|75", EOL))) + "  -n,--new            Create NLT cache entries only for new items") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|76", EOL))) + "  -r,--results <arg>  Number of results per item") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|77", EOL))) + "  -s,--server <arg>   The NLT server address") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|78", EOL))) + "  -t,--tracker        Create NLT cache entries only for tracker items") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|79", EOL))) + "  -v,--version        print version information") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|80", EOL))) + "footer") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|81", EOL))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|83", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testOptionWithoutShortFormat2()|82", java.io.StringWriter.class, out).toString()));
    }

    @org.junit.Test
    public void testHelpWithLongOptSeparator() throws java.lang.Exception {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|2", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|1", org.apache.commons.cli.Options.class, options).addOption("f", true, "the file"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|10", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|3", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|9", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|8", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|7", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|6", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|5", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|4", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("s")).longOpt("size")).desc("the size")).hasArg()).argName("SIZE")).build())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|17", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|11", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|16", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|15", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|14", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|13", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|12", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder()).longOpt("age")).desc("the age")).hasArg()).build())));
        final org.apache.commons.cli.HelpFormatter formatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|18", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        org.junit.Assert.assertEquals(org.apache.commons.cli.HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|19", org.apache.commons.cli.HelpFormatter.class, formatter).getLongOptSeparator()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|21", org.apache.commons.cli.HelpFormatter.class, formatter).setLongOptSeparator("=");
        org.junit.Assert.assertEquals("=", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|22", org.apache.commons.cli.HelpFormatter.class, formatter).getLongOptSeparator()));
        final java.io.StringWriter out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|24", java.io.StringWriter.class, new java.io.StringWriter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|25", org.apache.commons.cli.HelpFormatter.class, formatter).printHelp(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|27", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|26", java.io.StringWriter.class, out))), 80, "create", "header", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|28", org.apache.commons.cli.Options.class, options), 2, 2, "footer");
        org.junit.Assert.assertEquals(((((((((((("usage: create" + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "header") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "     --age=<arg>    the age") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "  -f <arg>          the file") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "  -s,--size=<SIZE>  the size") + (org.apache.commons.cli.HelpFormatterTest.EOL)) + "footer") + (org.apache.commons.cli.HelpFormatterTest.EOL)), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|30", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testHelpWithLongOptSeparator()|29", java.io.StringWriter.class, out).toString()));
    }

    @org.junit.Test
    public void testUsageWithLongOptSeparator() throws java.lang.Exception {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|2", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|1", org.apache.commons.cli.Options.class, options).addOption("f", true, "the file"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|10", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|3", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|9", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|8", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|7", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|6", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|5", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|4", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder("s")).longOpt("size")).desc("the size")).hasArg()).argName("SIZE")).build())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|17", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|11", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|16", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|15", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|14", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|13", org.apache.commons.cli.Option.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option.Builder>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|12", org.apache.commons.cli.Option.Builder.class, org.apache.commons.cli.Option.builder()).longOpt("age")).desc("the age")).hasArg()).build())));
        final org.apache.commons.cli.HelpFormatter formatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|18", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|19", org.apache.commons.cli.HelpFormatter.class, formatter).setLongOptSeparator("=");
        final java.io.StringWriter out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|20", java.io.StringWriter.class, new java.io.StringWriter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|21", org.apache.commons.cli.HelpFormatter.class, formatter).printUsage(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|23", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|22", java.io.StringWriter.class, out))), 80, "create", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|24", org.apache.commons.cli.Options.class, options));
        org.junit.Assert.assertEquals("usage: create [--age=<arg>] [-f <arg>] [-s <SIZE>]", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|27", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.HelpFormatterTest|testUsageWithLongOptSeparator()|25", java.io.StringWriter.class, out).toString()).trim()));
    }
}

