/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.cli;


/**
 * This is a collection of tests that test real world applications command lines.
 *
 * <p>
 * The following applications are tested:
 * <ul>
 *   <li>ls</li>
 *   <li>Ant</li>
 *   <li>Groovy</li>
 *   <li>man</li>
 * </ul>
 * </p>
 */
// tests some deprecated classes
@java.lang.SuppressWarnings("deprecation")
public class ApplicationTest {
    @org.junit.Test
    public void testLs() throws java.lang.Exception {
        // create the command line parser
        final org.apache.commons.cli.CommandLineParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ApplicationTest|testLs()|0", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|3", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|2", org.apache.commons.cli.Options.class, options).addOption("a", "all", false, "do not hide entries starting with ."));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|4", org.apache.commons.cli.Options.class, options).addOption("A", "almost-all", false, "do not list implied . and .."));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|7", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|6", org.apache.commons.cli.Options.class, options).addOption("b", "escape", false, "print octal escapes for nongraphic characters"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|14", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|8", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testLs()|13", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testLs()|12", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testLs()|11", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testLs()|10", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testLs()|9", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("block-size")).withDescription("use SIZE-byte blocks")).hasArg()).withArgName("SIZE")).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|16", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|15", org.apache.commons.cli.Options.class, options).addOption("B", "ignore-backups", false, "do not list implied entried ending with ~"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|18", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|17", org.apache.commons.cli.Options.class, options).addOption("c", false, "with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|20", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|19", org.apache.commons.cli.Options.class, options).addOption("C", false, "list entries by columns"));
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ApplicationTest|testLs()|21", java.lang.String[].class, new java.lang.String[]{ "--block-size=10" });
        final org.apache.commons.cli.CommandLine line = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testLs()|25", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ApplicationTest|testLs()|22", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testLs()|23", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ApplicationTest|testLs()|24", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testLs()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testLs()|26", org.apache.commons.cli.CommandLine.class, line).hasOption("block-size")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testLs()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testLs()|28", org.apache.commons.cli.CommandLine.class, line).getOptionValue("block-size")), "10");
    }

    /**
     * Ant test
     */
    @org.junit.Test
    public void testAnt() throws java.lang.Exception {
        // use the GNU parser
        final org.apache.commons.cli.CommandLineParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.GnuParser>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|0", org.apache.commons.cli.GnuParser.class, new org.apache.commons.cli.GnuParser());
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|3", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|2", org.apache.commons.cli.Options.class, options).addOption("help", false, "print this message"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|4", org.apache.commons.cli.Options.class, options).addOption("projecthelp", false, "print project help information"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|7", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|6", org.apache.commons.cli.Options.class, options).addOption("version", false, "print the version information and exit"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|9", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|8", org.apache.commons.cli.Options.class, options).addOption("quiet", false, "be extra quiet"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|11", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|10", org.apache.commons.cli.Options.class, options).addOption("verbose", false, "be extra verbose"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|13", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|12", org.apache.commons.cli.Options.class, options).addOption("debug", false, "print debug information"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|15", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|14", org.apache.commons.cli.Options.class, options).addOption("logfile", true, "use given file for log"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|17", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|16", org.apache.commons.cli.Options.class, options).addOption("logger", true, "the class which is to perform the logging"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|19", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|18", org.apache.commons.cli.Options.class, options).addOption("listener", true, "add an instance of a class as a project listener"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|21", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|20", org.apache.commons.cli.Options.class, options).addOption("buildfile", true, "use given buildfile"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|27", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|22", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|26", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|25", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|24", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|23", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withDescription("use value for given property")).hasArgs()).withValueSeparator()).create('D'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|29", org.apache.commons.cli.Options.class, // , null, true, , false, true );
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|28", org.apache.commons.cli.Options.class, options).addOption("find", true, "search for buildfile towards the root of the filesystem and use it"));
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|30", java.lang.String[].class, new java.lang.String[]{ "-buildfile", "mybuild.xml", "-Dproperty=value", "-Dproperty1=value1", "-projecthelp" });
        final org.apache.commons.cli.CommandLine line = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|34", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|31", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|32", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|33", java.lang.String[].class, args)));
        // check multiple values
        final java.lang.String[] opts = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|36", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|35", org.apache.commons.cli.CommandLine.class, line).getOptionValues("D"));
        org.junit.Assert.assertEquals("property", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testAnt()|38", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|37", java.lang.String[].class, opts)[0]));
        org.junit.Assert.assertEquals("value", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testAnt()|40", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|39", java.lang.String[].class, opts)[1]));
        org.junit.Assert.assertEquals("property1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testAnt()|42", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|41", java.lang.String[].class, opts)[2]));
        org.junit.Assert.assertEquals("value1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testAnt()|44", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|43", java.lang.String[].class, opts)[3]));
        // check single value
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testAnt()|46", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|45", org.apache.commons.cli.CommandLine.class, line).getOptionValue("buildfile")), "mybuild.xml");
        // check option
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testAnt()|48", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testAnt()|47", org.apache.commons.cli.CommandLine.class, line).hasOption("projecthelp")));
    }

    @org.junit.Test
    public void testGroovy() throws java.lang.Exception {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|7", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|1", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|6", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|5", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|4", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|3", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|2", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("define")).withDescription("define a system property")).hasArg(true)).withArgName("name=value")).create('D'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|13", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|8", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|12", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|11", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|10", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|9", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasArg(false)).withDescription("usage information")).withLongOpt("help")).create('h'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|19", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|14", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|18", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|17", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|16", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|15", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasArg(false)).withDescription("debug mode will print out full stack traces")).withLongOpt("debug")).create('d'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|25", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|20", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|24", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|23", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|22", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|21", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasArg(false)).withDescription("display the Groovy and JVM versions")).withLongOpt("version")).create('v'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|32", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|26", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|31", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|30", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|29", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|28", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|27", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withArgName("charset")).hasArg()).withDescription("specify the encoding of the files")).withLongOpt("encoding")).create('c'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|38", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|33", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|37", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|36", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|35", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|34", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withArgName("script")).hasArg()).withDescription("specify a command line script")).create('e'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|44", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|39", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|43", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|42", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|41", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|40", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withArgName("extension")).hasOptionalArg()).withDescription("modify files in place; create backup if extension is given (e.g. \'.bak\')")).create('i'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|49", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|45", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|48", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|47", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|46", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasArg(false)).withDescription("process files line by line using implicit 'line' variable")).create('n'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|54", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|50", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|53", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|52", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|51", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasArg(false)).withDescription("process files line by line and print result (see also -n)")).create('p'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|60", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|55", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|59", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|58", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|57", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|56", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withArgName("port")).hasOptionalArg()).withDescription("listen on a port and process inbound lines")).create('l'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|67", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|61", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|66", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|65", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|64", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|63", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|62", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withArgName("splitPattern")).hasOptionalArg()).withDescription("split lines using splitPattern (default \'\\s\') using implicit \'split\' variable")).withLongOpt("autosplit")).create('a'))));
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|68", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine line = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|72", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|69", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|70", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|71", java.lang.String[].class, new java.lang.String[]{ "-e", "println 'hello'" }), true));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testGroovy()|74", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|73", org.apache.commons.cli.CommandLine.class, line).hasOption('e')));
        org.junit.Assert.assertEquals("println 'hello'", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testGroovy()|76", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testGroovy()|75", org.apache.commons.cli.CommandLine.class, line).getOptionValue('e')));
    }

    /**
     * author Slawek Zachcial
     */
    @org.junit.Test
    public void testMan() {
        final java.lang.String cmdLine = "man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] " + "[-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...";
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|23", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|22", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|21", org.apache.commons.cli.Options.class, // FIXME - should generate -p,--preprocessor string
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|20", org.apache.commons.cli.Options.class, // FIXME - should generate -L,--locale locale
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|19", org.apache.commons.cli.Options.class, // FIXME - should generate -m,--systems system
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|18", org.apache.commons.cli.Options.class, // FIXME - should generate -S,--sections list
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|17", org.apache.commons.cli.Options.class, // FIXME - should generate -P,--pager pager
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|16", org.apache.commons.cli.Options.class, // FIXME - should generate -M,--manpath path
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|15", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|14", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|13", org.apache.commons.cli.Options.class, // FIXME - should generate -T,--troff-device device
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|12", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|11", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|10", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|9", org.apache.commons.cli.Options.class, // FIXME - should generate -r,--prompt string
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|8", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|7", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|6", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|3", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|2", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|1", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options()).addOption("a", "all", false, "find all matching manual pages.")).addOption("d", "debug", false, "emit debugging messages.")).addOption("e", "extension", false, "limit search to extension type 'extension'.")).addOption("f", "whatis", false, "equivalent to whatis.")).addOption("k", "apropos", false, "equivalent to apropos.")).addOption("w", "location", false, "print physical location of man page(s).")).addOption("l", "local-file", false, "interpret 'page' argument(s) as local filename(s)")).addOption("u", "update", false, "force a cache consistency check.")).addOption("r", "prompt", true, "provide 'less' pager with prompt.")).addOption("c", "catman", false, "used by catman to reformat out of date cat pages.")).addOption("7", "ascii", false, "display ASCII translation or certain latin1 chars.")).addOption("t", "troff", false, "use troff format pages.")).addOption("T", "troff-device", true, "use groff with selected device.")).addOption("Z", "ditroff", false, "use groff with selected device.")).addOption("D", "default", false, "reset all options to their default values.")).addOption("M", "manpath", true, "set search path for manual pages to 'path'.")).addOption("P", "pager", true, "use program 'pager' to display output.")).addOption("S", "sections", true, "use colon separated section list.")).addOption("m", "systems", true, "search for man pages from other unix system(s).")).addOption("L", "locale", true, "define the locale for this particular man search.")).addOption("p", "preprocessor", true, ("string indicates which preprocessor to run.\n" + (" e - [n]eqn  p - pic     t - tbl\n" + " g - grap    r - refer   v - vgrind")))).addOption("V", "version", false, "show version.")).addOption("h", "help", false, "show this usage message."));
        final org.apache.commons.cli.HelpFormatter hf = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.ApplicationTest|testMan()|24", org.apache.commons.cli.HelpFormatter.class, new org.apache.commons.cli.HelpFormatter());
        final java.lang.String EOL = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|25", java.lang.System.getProperty("line.separator"));
        final java.io.StringWriter out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.ApplicationTest|testMan()|26", java.io.StringWriter.class, new java.io.StringWriter());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.HelpFormatter>observeState("org.apache.commons.cli.ApplicationTest|testMan()|27", org.apache.commons.cli.HelpFormatter.class, hf).printHelp(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintWriter>observeState("org.apache.commons.cli.ApplicationTest|testMan()|29", java.io.PrintWriter.class, new java.io.PrintWriter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.ApplicationTest|testMan()|28", java.io.StringWriter.class, out))), 60, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|30", cmdLine), null, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testMan()|31", org.apache.commons.cli.Options.class, options), org.apache.commons.cli.HelpFormatter.DEFAULT_LEFT_PAD, org.apache.commons.cli.HelpFormatter.DEFAULT_DESC_PAD, null, false);
        org.junit.Assert.assertEquals(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("usage: man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath]" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|32", EOL))) + "           [-Ppager] [-Slist] [-msystem] [-pstring]") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|33", EOL))) + "           [-Llocale] [-eextension] [section] page ...") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|34", EOL))) + " -7,--ascii                display ASCII translation or") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|35", EOL))) + "                           certain latin1 chars.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|36", EOL))) + " -a,--all                  find all matching manual pages.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|37", EOL))) + " -c,--catman               used by catman to reformat out of") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|38", EOL))) + "                           date cat pages.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|39", EOL))) + " -d,--debug                emit debugging messages.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|40", EOL))) + " -D,--default              reset all options to their") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|41", EOL))) + "                           default values.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|42", EOL))) + " -e,--extension            limit search to extension type") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|43", EOL))) + "                           'extension'.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|44", EOL))) + " -f,--whatis               equivalent to whatis.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|45", EOL))) + " -h,--help                 show this usage message.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|46", EOL))) + " -k,--apropos              equivalent to apropos.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|47", EOL))) + " -l,--local-file           interpret 'page' argument(s) as") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|48", EOL))) + "                           local filename(s)") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|49", EOL))) + " -L,--locale <arg>         define the locale for this") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|50", EOL))) + "                           particular man search.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|51", EOL))) + " -M,--manpath <arg>        set search path for manual pages") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|52", EOL))) + "                           to 'path'.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|53", EOL))) + " -m,--systems <arg>        search for man pages from other") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|54", EOL))) + "                           unix system(s).") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|55", EOL))) + " -P,--pager <arg>          use program 'pager' to display") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|56", EOL))) + "                           output.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|57", EOL))) + " -p,--preprocessor <arg>   string indicates which") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|58", EOL))) + "                           preprocessor to run.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|59", EOL))) + "                           e - [n]eqn  p - pic     t - tbl") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|60", EOL))) + "                           g - grap    r - refer   v -") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|61", EOL))) + "                           vgrind") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|62", EOL))) + " -r,--prompt <arg>         provide 'less' pager with prompt.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|63", EOL))) + " -S,--sections <arg>       use colon separated section list.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|64", EOL))) + " -t,--troff                use troff format pages.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|65", EOL))) + " -T,--troff-device <arg>   use groff with selected device.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|66", EOL))) + " -u,--update               force a cache consistency check.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|67", EOL))) + " -V,--version              show version.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|68", EOL))) + " -w,--location             print physical location of man") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|69", EOL))) + "                           page(s).") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|70", EOL))) + " -Z,--ditroff              use groff with selected device.") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|71", EOL))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testMan()|73", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.apache.commons.cli.ApplicationTest|testMan()|72", java.io.StringWriter.class, out).toString()));
    }

    /**
     * Real world test with long and short options.
     */
    @org.junit.Test
    public void testNLT() throws java.lang.Exception {
        final org.apache.commons.cli.Option help = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|0", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("h", "help", false, "print this message"));
        final org.apache.commons.cli.Option version = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|1", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("v", "version", false, "print version information"));
        final org.apache.commons.cli.Option newRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|2", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("n", "new", false, "Create NLT cache entries only for new items"));
        final org.apache.commons.cli.Option trackerRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|3", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("t", "tracker", false, "Create NLT cache entries only for tracker items"));
        final org.apache.commons.cli.Option timeLimit = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|7", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|6", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|5", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|4", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("limit")).hasArg()).withValueSeparator()).withDescription("Set time limit for execution, in minutes")).create("l"));
        final org.apache.commons.cli.Option age = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|13", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|12", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|11", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|10", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|9", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("age")).hasArg()).withValueSeparator()).withDescription("Age (in days) of cache item before being recomputed")).create("a"));
        final org.apache.commons.cli.Option server = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|18", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|17", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|16", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|15", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|14", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("server")).hasArg()).withValueSeparator()).withDescription("The NLT server address")).create("s"));
        final org.apache.commons.cli.Option numResults = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|23", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|22", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|21", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|20", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|19", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("results")).hasArg()).withValueSeparator()).withDescription("Number of results per item")).create("r"));
        final org.apache.commons.cli.Option configFile = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|28", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|27", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|26", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|25", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|24", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("file")).hasArg()).withValueSeparator()).withDescription("Use the specified configuration file")).create());
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|29", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|32", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|30", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|31", org.apache.commons.cli.Option.class, help)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|35", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|33", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|34", org.apache.commons.cli.Option.class, version)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|38", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|36", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|37", org.apache.commons.cli.Option.class, newRun)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|41", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|39", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|40", org.apache.commons.cli.Option.class, trackerRun)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|44", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|42", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|43", org.apache.commons.cli.Option.class, timeLimit)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|47", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|45", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|46", org.apache.commons.cli.Option.class, age)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|50", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|48", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|49", org.apache.commons.cli.Option.class, server)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|53", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|51", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|52", org.apache.commons.cli.Option.class, numResults)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|56", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|54", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|55", org.apache.commons.cli.Option.class, configFile)));
        // create the command line parser
        final org.apache.commons.cli.CommandLineParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|57", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|58", java.lang.String[].class, new java.lang.String[]{ "-v", "-l", "10", "-age", "5", "-file", "filename" });
        final org.apache.commons.cli.CommandLine line = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|62", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|59", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|60", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|61", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testNLT()|64", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|63", org.apache.commons.cli.CommandLine.class, line).hasOption("v")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testNLT()|66", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|65", org.apache.commons.cli.CommandLine.class, line).getOptionValue("l")), "10");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testNLT()|68", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|67", org.apache.commons.cli.CommandLine.class, line).getOptionValue("limit")), "10");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testNLT()|70", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|69", org.apache.commons.cli.CommandLine.class, line).getOptionValue("a")), "5");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testNLT()|72", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|71", org.apache.commons.cli.CommandLine.class, line).getOptionValue("age")), "5");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ApplicationTest|testNLT()|74", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ApplicationTest|testNLT()|73", org.apache.commons.cli.CommandLine.class, line).getOptionValue("file")), "filename");
    }
}

