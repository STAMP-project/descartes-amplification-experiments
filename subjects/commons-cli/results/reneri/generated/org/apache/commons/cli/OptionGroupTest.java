/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.cli;


// tests some deprecated classes
@java.lang.SuppressWarnings("deprecation")
public class OptionGroupTest {
    private org.apache.commons.cli.Options _options = null;

    private final org.apache.commons.cli.Parser parser = new org.apache.commons.cli.PosixParser();

    @org.junit.Before
    public void setUp() {
        final org.apache.commons.cli.Option file = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|0", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("f", "file", false, "file to process"));
        final org.apache.commons.cli.Option dir = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|1", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("d", "directory", false, "directory to process"));
        final org.apache.commons.cli.OptionGroup group = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|2", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|5", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|3", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|4", org.apache.commons.cli.Option.class, file)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|8", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|6", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|7", org.apache.commons.cli.Option.class, dir)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|11", org.apache.commons.cli.Options.class, (_options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|9", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options()).addOptionGroup(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|10", org.apache.commons.cli.OptionGroup.class, group))));
        final org.apache.commons.cli.Option section = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|12", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("s", "section", false, "section to process"));
        final org.apache.commons.cli.Option chapter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|13", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("c", "chapter", false, "chapter to process"));
        final org.apache.commons.cli.OptionGroup group2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|14", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|17", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|15", org.apache.commons.cli.OptionGroup.class, group2).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|16", org.apache.commons.cli.Option.class, section)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|20", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|18", org.apache.commons.cli.OptionGroup.class, group2).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|19", org.apache.commons.cli.Option.class, chapter)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|23", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|21", org.apache.commons.cli.Options.class, _options).addOptionGroup(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|22", org.apache.commons.cli.OptionGroup.class, group2)));
        final org.apache.commons.cli.Option importOpt = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|24", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option(null, "import", false, "section to process"));
        final org.apache.commons.cli.Option exportOpt = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|25", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option(null, "export", false, "chapter to process"));
        final org.apache.commons.cli.OptionGroup group3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|26", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|29", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|27", org.apache.commons.cli.OptionGroup.class, group3).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|28", org.apache.commons.cli.Option.class, importOpt)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|32", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|30", org.apache.commons.cli.OptionGroup.class, group3).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|31", org.apache.commons.cli.Option.class, exportOpt)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|35", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|33", org.apache.commons.cli.Options.class, _options).addOptionGroup(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|34", org.apache.commons.cli.OptionGroup.class, group3)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|37", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|setUp()|36", org.apache.commons.cli.Options.class, _options).addOption("r", "revision", false, "revision number"));
    }

    @org.junit.Test
    public void testSingleOptionFromGroup() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|0", java.lang.String[].class, new java.lang.String[]{ "-f" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|1", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|2", org.apache.commons.cli.Options.class, _options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|3", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -r is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("r")))));
        org.junit.Assert.assertTrue("Confirm -f is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|7", org.apache.commons.cli.CommandLine.class, cl).hasOption("f")));
        org.junit.Assert.assertTrue("Confirm -d is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|9", org.apache.commons.cli.CommandLine.class, cl).hasOption("d")))));
        org.junit.Assert.assertTrue("Confirm -s is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|11", org.apache.commons.cli.CommandLine.class, cl).hasOption("s")))));
        org.junit.Assert.assertTrue("Confirm -c is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|13", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")))));
        org.junit.Assert.assertTrue("Confirm no extra args", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|16", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOptionFromGroup()|15", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 0));
    }

    @org.junit.Test
    public void testSingleOption() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOption()|0", java.lang.String[].class, new java.lang.String[]{ "-r" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOption()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOption()|1", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOption()|2", org.apache.commons.cli.Options.class, _options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOption()|3", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -r is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleOption()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOption()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("r")));
        org.junit.Assert.assertTrue("Confirm -f is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleOption()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOption()|7", org.apache.commons.cli.CommandLine.class, cl).hasOption("f")))));
        org.junit.Assert.assertTrue("Confirm -d is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleOption()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOption()|9", org.apache.commons.cli.CommandLine.class, cl).hasOption("d")))));
        org.junit.Assert.assertTrue("Confirm -s is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleOption()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOption()|11", org.apache.commons.cli.CommandLine.class, cl).hasOption("s")))));
        org.junit.Assert.assertTrue("Confirm -c is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleOption()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOption()|13", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")))));
        org.junit.Assert.assertTrue("Confirm no extra args", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleOption()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOption()|16", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleOption()|15", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 0));
    }

    @org.junit.Test
    public void testTwoValidOptions() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|0", java.lang.String[].class, new java.lang.String[]{ "-r", "-f" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|1", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|2", org.apache.commons.cli.Options.class, _options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|3", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -r is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("r")));
        org.junit.Assert.assertTrue("Confirm -f is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|7", org.apache.commons.cli.CommandLine.class, cl).hasOption("f")));
        org.junit.Assert.assertTrue("Confirm -d is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|9", org.apache.commons.cli.CommandLine.class, cl).hasOption("d")))));
        org.junit.Assert.assertTrue("Confirm -s is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|11", org.apache.commons.cli.CommandLine.class, cl).hasOption("s")))));
        org.junit.Assert.assertTrue("Confirm -c is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|13", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")))));
        org.junit.Assert.assertTrue("Confirm no extra args", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|16", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidOptions()|15", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 0));
    }

    @org.junit.Test
    public void testSingleLongOption() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|0", java.lang.String[].class, new java.lang.String[]{ "--file" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|1", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|2", org.apache.commons.cli.Options.class, _options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|3", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -r is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("r")))));
        org.junit.Assert.assertTrue("Confirm -f is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|7", org.apache.commons.cli.CommandLine.class, cl).hasOption("f")));
        org.junit.Assert.assertTrue("Confirm -d is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|9", org.apache.commons.cli.CommandLine.class, cl).hasOption("d")))));
        org.junit.Assert.assertTrue("Confirm -s is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|11", org.apache.commons.cli.CommandLine.class, cl).hasOption("s")))));
        org.junit.Assert.assertTrue("Confirm -c is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|13", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")))));
        org.junit.Assert.assertTrue("Confirm no extra args", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|16", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testSingleLongOption()|15", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 0));
    }

    @org.junit.Test
    public void testTwoValidLongOptions() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|0", java.lang.String[].class, new java.lang.String[]{ "--revision", "--file" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|1", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|2", org.apache.commons.cli.Options.class, _options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|3", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -r is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("r")));
        org.junit.Assert.assertTrue("Confirm -f is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|7", org.apache.commons.cli.CommandLine.class, cl).hasOption("f")));
        org.junit.Assert.assertTrue("Confirm -d is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|9", org.apache.commons.cli.CommandLine.class, cl).hasOption("d")))));
        org.junit.Assert.assertTrue("Confirm -s is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|11", org.apache.commons.cli.CommandLine.class, cl).hasOption("s")))));
        org.junit.Assert.assertTrue("Confirm -c is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|13", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")))));
        org.junit.Assert.assertTrue("Confirm no extra args", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|16", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoValidLongOptions()|15", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 0));
    }

    @org.junit.Test
    public void testNoOptionsExtraArgs() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|0", java.lang.String[].class, new java.lang.String[]{ "arg1", "arg2" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|1", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|2", org.apache.commons.cli.Options.class, _options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|3", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -r is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("r")))));
        org.junit.Assert.assertTrue("Confirm -f is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|7", org.apache.commons.cli.CommandLine.class, cl).hasOption("f")))));
        org.junit.Assert.assertTrue("Confirm -d is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|9", org.apache.commons.cli.CommandLine.class, cl).hasOption("d")))));
        org.junit.Assert.assertTrue("Confirm -s is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|11", org.apache.commons.cli.CommandLine.class, cl).hasOption("s")))));
        org.junit.Assert.assertTrue("Confirm -c is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|13", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")))));
        org.junit.Assert.assertTrue("Confirm TWO extra args", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|16", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testNoOptionsExtraArgs()|15", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 2));
    }

    @org.junit.Test
    public void testTwoOptionsFromGroup() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroup()|0", java.lang.String[].class, new java.lang.String[]{ "-f", "-d" });
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroup()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroup()|1", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroup()|2", org.apache.commons.cli.Options.class, _options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroup()|3", java.lang.String[].class, args)));
            org.junit.Assert.fail("two arguments from group not allowed");
        } catch (final org.apache.commons.cli.AlreadySelectedException e) {
            org.junit.Assert.assertNotNull("null option group", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroup()|6", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AlreadySelectedException>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroup()|5", org.apache.commons.cli.AlreadySelectedException.class, e).getOptionGroup()));
            org.junit.Assert.assertEquals("selected option", "f", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroup()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroup()|8", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AlreadySelectedException>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroup()|7", org.apache.commons.cli.AlreadySelectedException.class, e).getOptionGroup()).getSelected()));
            org.junit.Assert.assertEquals("option", "d", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroup()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroup()|11", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AlreadySelectedException>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroup()|10", org.apache.commons.cli.AlreadySelectedException.class, e).getOption()).getOpt()));
        }
    }

    @org.junit.Test
    public void testTwoLongOptionsFromGroup() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testTwoLongOptionsFromGroup()|0", java.lang.String[].class, new java.lang.String[]{ "--file", "--directory" });
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoLongOptionsFromGroup()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.OptionGroupTest|testTwoLongOptionsFromGroup()|1", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|testTwoLongOptionsFromGroup()|2", org.apache.commons.cli.Options.class, _options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testTwoLongOptionsFromGroup()|3", java.lang.String[].class, args)));
            org.junit.Assert.fail("two arguments from group not allowed");
        } catch (final org.apache.commons.cli.AlreadySelectedException e) {
            org.junit.Assert.assertNotNull("null option group", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testTwoLongOptionsFromGroup()|6", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AlreadySelectedException>observeState("org.apache.commons.cli.OptionGroupTest|testTwoLongOptionsFromGroup()|5", org.apache.commons.cli.AlreadySelectedException.class, e).getOptionGroup()));
            org.junit.Assert.assertEquals("selected option", "f", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoLongOptionsFromGroup()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testTwoLongOptionsFromGroup()|8", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AlreadySelectedException>observeState("org.apache.commons.cli.OptionGroupTest|testTwoLongOptionsFromGroup()|7", org.apache.commons.cli.AlreadySelectedException.class, e).getOptionGroup()).getSelected()));
            org.junit.Assert.assertEquals("option", "d", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoLongOptionsFromGroup()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|testTwoLongOptionsFromGroup()|11", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.AlreadySelectedException>observeState("org.apache.commons.cli.OptionGroupTest|testTwoLongOptionsFromGroup()|10", org.apache.commons.cli.AlreadySelectedException.class, e).getOption()).getOpt()));
        }
    }

    @org.junit.Test
    public void testTwoOptionsFromDifferentGroup() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|0", java.lang.String[].class, new java.lang.String[]{ "-f", "-s" });
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|4", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|1", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|2", org.apache.commons.cli.Options.class, _options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|3", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue("Confirm -r is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|5", org.apache.commons.cli.CommandLine.class, cl).hasOption("r")))));
        org.junit.Assert.assertTrue("Confirm -f is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|7", org.apache.commons.cli.CommandLine.class, cl).hasOption("f")));
        org.junit.Assert.assertTrue("Confirm -d is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|9", org.apache.commons.cli.CommandLine.class, cl).hasOption("d")))));
        org.junit.Assert.assertTrue("Confirm -s is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|11", org.apache.commons.cli.CommandLine.class, cl).hasOption("s")));
        org.junit.Assert.assertTrue("Confirm -c is NOT set", (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|13", org.apache.commons.cli.CommandLine.class, cl).hasOption("c")))));
        org.junit.Assert.assertTrue("Confirm NO extra args", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|16", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromDifferentGroup()|15", org.apache.commons.cli.CommandLine.class, cl).getArgList()).size())) == 0));
    }

    @org.junit.Test
    public void testTwoOptionsFromGroupWithProperties() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroupWithProperties()|0", java.lang.String[].class, new java.lang.String[]{ "-f" });
        final java.util.Properties properties = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroupWithProperties()|1", java.util.Properties.class, new java.util.Properties());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroupWithProperties()|3", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroupWithProperties()|2", java.util.Properties.class, properties).put("d", "true"));
        final org.apache.commons.cli.CommandLine cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroupWithProperties()|8", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroupWithProperties()|4", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroupWithProperties()|5", org.apache.commons.cli.Options.class, _options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroupWithProperties()|6", java.lang.String[].class, args), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Properties>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroupWithProperties()|7", java.util.Properties.class, properties)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroupWithProperties()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroupWithProperties()|9", org.apache.commons.cli.CommandLine.class, cl).hasOption("f")));
        org.junit.Assert.assertTrue((!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroupWithProperties()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testTwoOptionsFromGroupWithProperties()|11", org.apache.commons.cli.CommandLine.class, cl).hasOption("d")))));
    }

    @org.junit.Test
    public void testValidLongOnlyOptions() throws java.lang.Exception {
        final org.apache.commons.cli.CommandLine cl1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testValidLongOnlyOptions()|3", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.OptionGroupTest|testValidLongOnlyOptions()|0", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|testValidLongOnlyOptions()|1", org.apache.commons.cli.Options.class, _options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testValidLongOnlyOptions()|2", java.lang.String[].class, new java.lang.String[]{ "--export" })));
        org.junit.Assert.assertTrue("Confirm --export is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testValidLongOnlyOptions()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testValidLongOnlyOptions()|4", org.apache.commons.cli.CommandLine.class, cl1).hasOption("export")));
        final org.apache.commons.cli.CommandLine cl2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testValidLongOnlyOptions()|9", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.OptionGroupTest|testValidLongOnlyOptions()|6", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionGroupTest|testValidLongOnlyOptions()|7", org.apache.commons.cli.Options.class, _options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionGroupTest|testValidLongOnlyOptions()|8", java.lang.String[].class, new java.lang.String[]{ "--import" })));
        org.junit.Assert.assertTrue("Confirm --import is set", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testValidLongOnlyOptions()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionGroupTest|testValidLongOnlyOptions()|10", org.apache.commons.cli.CommandLine.class, cl2).hasOption("import")));
    }

    @org.junit.Test
    public void testToString() {
        final org.apache.commons.cli.OptionGroup group1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|0", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|3", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|1", org.apache.commons.cli.OptionGroup.class, group1).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|2", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option(null, "foo", false, "Foo"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|6", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|4", org.apache.commons.cli.OptionGroup.class, group1).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|5", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option(null, "bar", false, "Bar"))));
        if (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testToString()|9", "[--bar Bar, --foo Foo]".equals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testToString()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|7", org.apache.commons.cli.OptionGroup.class, group1).toString()))))) {
            org.junit.Assert.assertEquals("[--foo Foo, --bar Bar]", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testToString()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|10", org.apache.commons.cli.OptionGroup.class, group1).toString()));
        }
        final org.apache.commons.cli.OptionGroup group2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|12", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|15", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|13", org.apache.commons.cli.OptionGroup.class, group2).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|14", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("f", "foo", false, "Foo"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|18", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|16", org.apache.commons.cli.OptionGroup.class, group2).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|17", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("b", "bar", false, "Bar"))));
        if (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testToString()|21", "[-b Bar, -f Foo]".equals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testToString()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|19", org.apache.commons.cli.OptionGroup.class, group2).toString()))))) {
            org.junit.Assert.assertEquals("[-f Foo, -b Bar]", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testToString()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testToString()|22", org.apache.commons.cli.OptionGroup.class, group2).toString()));
        }
    }

    @org.junit.Test
    public void testGetNames() {
        final org.apache.commons.cli.OptionGroup group = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|0", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|3", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|1", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|2", org.apache.commons.cli.Option.class, org.apache.commons.cli.OptionBuilder.create('a'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|6", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|4", org.apache.commons.cli.OptionGroup.class, group).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|5", org.apache.commons.cli.Option.class, org.apache.commons.cli.OptionBuilder.create('b'))));
        org.junit.Assert.assertNotNull("null names", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<java.lang.String>>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|8", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|7", org.apache.commons.cli.OptionGroup.class, group).getNames()));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testGetNames()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<java.lang.String>>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|10", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|9", org.apache.commons.cli.OptionGroup.class, group).getNames()).size()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testGetNames()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<java.lang.String>>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|13", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|12", org.apache.commons.cli.OptionGroup.class, group).getNames()).contains("a")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionGroupTest|testGetNames()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<java.lang.String>>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|16", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionGroupTest|testGetNames()|15", org.apache.commons.cli.OptionGroup.class, group).getNames()).contains("b")));
    }
}

