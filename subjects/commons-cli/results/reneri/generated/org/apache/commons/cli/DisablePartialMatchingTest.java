/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.cli;


public class DisablePartialMatchingTest {
    @org.junit.Test
    public void testDisablePartialMatching() throws java.lang.Exception {
        org.apache.commons.cli.CommandLineParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.DefaultParser>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|0", org.apache.commons.cli.DefaultParser.class, new org.apache.commons.cli.DefaultParser(false));
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|3", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("d", "debug", false, "Turn on debug."))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|7", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|5", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|6", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("e", "extract", false, "Turn on extract."))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|10", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|8", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|9", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("o", "option", true, "Turn on option with argument."))));
        org.apache.commons.cli.CommandLine line = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|14", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|11", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|12", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|13", java.lang.String[].class, new java.lang.String[]{ "-de", "--option=foobar" })));
        org.junit.Assert.assertTrue("There should be an option debug in any case...", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|15", org.apache.commons.cli.CommandLine.class, line).hasOption("debug")));
        org.junit.Assert.assertTrue("There should be an extract option because partial matching is off", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|17", org.apache.commons.cli.CommandLine.class, line).hasOption("extract")));
        org.junit.Assert.assertTrue("There should be an option option with a argument value", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testDisablePartialMatching()|19", org.apache.commons.cli.CommandLine.class, line).hasOption("option")));
    }

    @org.junit.Test
    public void testRegularPartialMatching() throws java.lang.Exception {
        org.apache.commons.cli.CommandLineParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.DefaultParser>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|0", org.apache.commons.cli.DefaultParser.class, new org.apache.commons.cli.DefaultParser());
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|1", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|2", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|3", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("d", "debug", false, "Turn on debug."))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|7", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|5", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|6", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("e", "extract", false, "Turn on extract."))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|10", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|8", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|9", org.apache.commons.cli.Option.class, new org.apache.commons.cli.Option("o", "option", true, "Turn on option with argument."))));
        org.apache.commons.cli.CommandLine line = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|14", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLineParser>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|11", org.apache.commons.cli.CommandLineParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|12", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|13", java.lang.String[].class, new java.lang.String[]{ "-de", "--option=foobar" })));
        org.junit.Assert.assertTrue("There should be an option debug in any case...", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|15", org.apache.commons.cli.CommandLine.class, line).hasOption("debug")));
        org.junit.Assert.assertFalse("There should not be an extract option because partial matching only selects debug", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|17", org.apache.commons.cli.CommandLine.class, line).hasOption("extract")));
        org.junit.Assert.assertTrue("There should be an option option with a argument value", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.DisablePartialMatchingTest|testRegularPartialMatching()|19", org.apache.commons.cli.CommandLine.class, line).hasOption("option")));
    }
}

