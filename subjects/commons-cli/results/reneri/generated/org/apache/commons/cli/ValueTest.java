/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.cli;


// tests some deprecated classes
@java.lang.SuppressWarnings("deprecation")
public class ValueTest {
    private org.apache.commons.cli.CommandLine _cl = null;

    private final org.apache.commons.cli.Options opts = new org.apache.commons.cli.Options();

    @org.junit.Before
    public void setUp() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|1", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|0", org.apache.commons.cli.Options.class, opts).addOption("a", false, "toggle -a"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|3", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|2", org.apache.commons.cli.Options.class, opts).addOption("b", true, "set -b"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|5", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|4", org.apache.commons.cli.Options.class, opts).addOption("c", "c", false, "toggle -c"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|7", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|6", org.apache.commons.cli.Options.class, opts).addOption("d", "d", true, "set -d"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|11", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|8", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|setUp()|10", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ValueTest|setUp()|9", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasOptionalArg()).create('e'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|16", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|12", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|setUp()|15", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ValueTest|setUp()|14", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ValueTest|setUp()|13", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasOptionalArg()).withLongOpt("fish")).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|21", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|17", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|setUp()|20", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ValueTest|setUp()|19", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ValueTest|setUp()|18", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasOptionalArgs()).withLongOpt("gravy")).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|26", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|22", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|setUp()|25", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ValueTest|setUp()|24", org.apache.commons.cli.OptionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ValueTest|setUp()|23", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasOptionalArgs(2)).withLongOpt("hide")).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|30", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|27", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|setUp()|29", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ValueTest|setUp()|28", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasOptionalArgs(2)).create('i'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|34", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|31", org.apache.commons.cli.Options.class, opts).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|setUp()|33", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.ValueTest|setUp()|32", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.hasOptionalArgs()).create('j'))));
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|setUp()|35", java.lang.String[].class, new java.lang.String[]{ "-a", "-b", "foo", "--c", "--d", "bar" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|setUp()|36", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|setUp()|40", org.apache.commons.cli.CommandLine.class, (_cl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|setUp()|37", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|setUp()|38", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|setUp()|39", java.lang.String[].class, args))));
    }

    @org.junit.Test
    public void testShortNoArg() {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortNoArg()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortNoArg()|0", org.apache.commons.cli.CommandLine.class, _cl).hasOption("a")));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortNoArg()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortNoArg()|2", org.apache.commons.cli.CommandLine.class, _cl).getOptionValue("a")));
    }

    @org.junit.Test
    public void testShortNoArgWithOption() {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortNoArgWithOption()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortNoArgWithOption()|0", org.apache.commons.cli.CommandLine.class, _cl).hasOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortNoArgWithOption()|2", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortNoArgWithOption()|1", org.apache.commons.cli.Options.class, opts).getOption("a")))));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortNoArgWithOption()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortNoArgWithOption()|4", org.apache.commons.cli.CommandLine.class, _cl).getOptionValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortNoArgWithOption()|6", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortNoArgWithOption()|5", org.apache.commons.cli.Options.class, opts).getOption("a")))));
    }

    @org.junit.Test
    public void testShortWithArg() {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortWithArg()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortWithArg()|0", org.apache.commons.cli.CommandLine.class, _cl).hasOption("b")));
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortWithArg()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortWithArg()|2", org.apache.commons.cli.CommandLine.class, _cl).getOptionValue("b")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortWithArg()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortWithArg()|4", org.apache.commons.cli.CommandLine.class, _cl).getOptionValue("b")), "foo");
    }

    @org.junit.Test
    public void testShortWithArgWithOption() {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortWithArgWithOption()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortWithArgWithOption()|0", org.apache.commons.cli.CommandLine.class, _cl).hasOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortWithArgWithOption()|2", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortWithArgWithOption()|1", org.apache.commons.cli.Options.class, opts).getOption("b")))));
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortWithArgWithOption()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortWithArgWithOption()|4", org.apache.commons.cli.CommandLine.class, _cl).getOptionValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortWithArgWithOption()|6", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortWithArgWithOption()|5", org.apache.commons.cli.Options.class, opts).getOption("b")))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortWithArgWithOption()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortWithArgWithOption()|8", org.apache.commons.cli.CommandLine.class, _cl).getOptionValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortWithArgWithOption()|10", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortWithArgWithOption()|9", org.apache.commons.cli.Options.class, opts).getOption("b")))), "foo");
    }

    @org.junit.Test
    public void testLongNoArg() {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongNoArg()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongNoArg()|0", org.apache.commons.cli.CommandLine.class, _cl).hasOption("c")));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongNoArg()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongNoArg()|2", org.apache.commons.cli.CommandLine.class, _cl).getOptionValue("c")));
    }

    @org.junit.Test
    public void testLongNoArgWithOption() {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongNoArgWithOption()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongNoArgWithOption()|0", org.apache.commons.cli.CommandLine.class, _cl).hasOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongNoArgWithOption()|2", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongNoArgWithOption()|1", org.apache.commons.cli.Options.class, opts).getOption("c")))));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongNoArgWithOption()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongNoArgWithOption()|4", org.apache.commons.cli.CommandLine.class, _cl).getOptionValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongNoArgWithOption()|6", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongNoArgWithOption()|5", org.apache.commons.cli.Options.class, opts).getOption("c")))));
    }

    @org.junit.Test
    public void testLongWithArg() {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongWithArg()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongWithArg()|0", org.apache.commons.cli.CommandLine.class, _cl).hasOption("d")));
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongWithArg()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongWithArg()|2", org.apache.commons.cli.CommandLine.class, _cl).getOptionValue("d")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongWithArg()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongWithArg()|4", org.apache.commons.cli.CommandLine.class, _cl).getOptionValue("d")), "bar");
    }

    @org.junit.Test
    public void testLongWithArgWithOption() {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongWithArgWithOption()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongWithArgWithOption()|0", org.apache.commons.cli.CommandLine.class, _cl).hasOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongWithArgWithOption()|2", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongWithArgWithOption()|1", org.apache.commons.cli.Options.class, opts).getOption("d")))));
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongWithArgWithOption()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongWithArgWithOption()|4", org.apache.commons.cli.CommandLine.class, _cl).getOptionValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongWithArgWithOption()|6", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongWithArgWithOption()|5", org.apache.commons.cli.Options.class, opts).getOption("d")))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongWithArgWithOption()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongWithArgWithOption()|8", org.apache.commons.cli.CommandLine.class, _cl).getOptionValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongWithArgWithOption()|10", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongWithArgWithOption()|9", org.apache.commons.cli.Options.class, opts).getOption("d")))), "bar");
    }

    @org.junit.Test
    public void testShortOptionalArgNoValue() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValue()|0", java.lang.String[].class, new java.lang.String[]{ "-e" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValue()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValue()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValue()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValue()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValue()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValue()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValue()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption("e")));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValue()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValue()|8", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue("e")));
    }

    @org.junit.Test
    public void testShortOptionalArgNoValueWithOption() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValueWithOption()|0", java.lang.String[].class, new java.lang.String[]{ "-e" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValueWithOption()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValueWithOption()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValueWithOption()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValueWithOption()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValueWithOption()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValueWithOption()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValueWithOption()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValueWithOption()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValueWithOption()|7", org.apache.commons.cli.Options.class, opts).getOption("e")))));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValueWithOption()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValueWithOption()|10", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValueWithOption()|12", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgNoValueWithOption()|11", org.apache.commons.cli.Options.class, opts).getOption("e")))));
    }

    @org.junit.Test
    public void testShortOptionalArgValue() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValue()|0", java.lang.String[].class, new java.lang.String[]{ "-e", "everything" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValue()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValue()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValue()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValue()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValue()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgValue()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValue()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption("e")));
        org.junit.Assert.assertEquals("everything", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgValue()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValue()|8", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue("e")));
    }

    @org.junit.Test
    public void testShortOptionalArgValueWithOption() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValueWithOption()|0", java.lang.String[].class, new java.lang.String[]{ "-e", "everything" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValueWithOption()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValueWithOption()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValueWithOption()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValueWithOption()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValueWithOption()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgValueWithOption()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValueWithOption()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValueWithOption()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValueWithOption()|7", org.apache.commons.cli.Options.class, opts).getOption("e")))));
        org.junit.Assert.assertEquals("everything", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgValueWithOption()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValueWithOption()|10", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValueWithOption()|12", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValueWithOption()|11", org.apache.commons.cli.Options.class, opts).getOption("e")))));
    }

    @org.junit.Test
    public void testLongOptionalNoValue() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValue()|0", java.lang.String[].class, new java.lang.String[]{ "--fish" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValue()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValue()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValue()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValue()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValue()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNoValue()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValue()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption("fish")));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNoValue()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValue()|8", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue("fish")));
    }

    @org.junit.Test
    public void testLongOptionalNoValueWithOption() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValueWithOption()|0", java.lang.String[].class, new java.lang.String[]{ "--fish" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValueWithOption()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValueWithOption()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValueWithOption()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValueWithOption()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValueWithOption()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNoValueWithOption()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValueWithOption()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValueWithOption()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValueWithOption()|7", org.apache.commons.cli.Options.class, opts).getOption("fish")))));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNoValueWithOption()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValueWithOption()|10", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValueWithOption()|12", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNoValueWithOption()|11", org.apache.commons.cli.Options.class, opts).getOption("fish")))));
    }

    @org.junit.Test
    public void testLongOptionalArgValue() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValue()|0", java.lang.String[].class, new java.lang.String[]{ "--fish", "face" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValue()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValue()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValue()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValue()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValue()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalArgValue()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValue()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption("fish")));
        org.junit.Assert.assertEquals("face", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalArgValue()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValue()|8", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue("fish")));
    }

    @org.junit.Test
    public void testLongOptionalArgValueWithOption() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValueWithOption()|0", java.lang.String[].class, new java.lang.String[]{ "--fish", "face" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValueWithOption()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValueWithOption()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValueWithOption()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValueWithOption()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValueWithOption()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalArgValueWithOption()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValueWithOption()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValueWithOption()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValueWithOption()|7", org.apache.commons.cli.Options.class, opts).getOption("fish")))));
        org.junit.Assert.assertEquals("face", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalArgValueWithOption()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValueWithOption()|10", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValueWithOption()|12", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValueWithOption()|11", org.apache.commons.cli.Options.class, opts).getOption("fish")))));
    }

    @org.junit.Test
    public void testShortOptionalArgValues() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|0", java.lang.String[].class, new java.lang.String[]{ "-j", "ink", "idea" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption("j")));
        org.junit.Assert.assertEquals("ink", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|8", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue("j")));
        org.junit.Assert.assertEquals("ink", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|11", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|10", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues("j"))[0]));
        org.junit.Assert.assertEquals("idea", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|14", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|13", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues("j"))[1]));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|17", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValues()|16", org.apache.commons.cli.CommandLine.class, cmd).getArgs()).length), 0);
    }

    @org.junit.Test
    public void testShortOptionalArgValuesWithOption() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|0", java.lang.String[].class, new java.lang.String[]{ "-j", "ink", "idea" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|7", org.apache.commons.cli.Options.class, opts).getOption("j")))));
        org.junit.Assert.assertEquals("ink", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|10", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|12", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|11", org.apache.commons.cli.Options.class, opts).getOption("j")))));
        org.junit.Assert.assertEquals("ink", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|17", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|14", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|16", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|15", org.apache.commons.cli.Options.class, opts).getOption("j"))))[0]));
        org.junit.Assert.assertEquals("idea", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|22", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|19", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|21", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|20", org.apache.commons.cli.Options.class, opts).getOption("j"))))[1]));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|25", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalArgValuesWithOption()|24", org.apache.commons.cli.CommandLine.class, cmd).getArgs()).length), 0);
    }

    @org.junit.Test
    public void testLongOptionalArgValues() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|0", java.lang.String[].class, new java.lang.String[]{ "--gravy", "gold", "garden" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption("gravy")));
        org.junit.Assert.assertEquals("gold", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|8", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue("gravy")));
        org.junit.Assert.assertEquals("gold", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|11", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|10", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues("gravy"))[0]));
        org.junit.Assert.assertEquals("garden", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|14", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|13", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues("gravy"))[1]));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|17", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValues()|16", org.apache.commons.cli.CommandLine.class, cmd).getArgs()).length), 0);
    }

    @org.junit.Test
    public void testLongOptionalArgValuesWithOption() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|0", java.lang.String[].class, new java.lang.String[]{ "--gravy", "gold", "garden" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|7", org.apache.commons.cli.Options.class, opts).getOption("gravy")))));
        org.junit.Assert.assertEquals("gold", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|10", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|12", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|11", org.apache.commons.cli.Options.class, opts).getOption("gravy")))));
        org.junit.Assert.assertEquals("gold", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|17", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|14", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|16", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|15", org.apache.commons.cli.Options.class, opts).getOption("gravy"))))[0]));
        org.junit.Assert.assertEquals("garden", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|22", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|19", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|21", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|20", org.apache.commons.cli.Options.class, opts).getOption("gravy"))))[1]));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|25", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalArgValuesWithOption()|24", org.apache.commons.cli.CommandLine.class, cmd).getArgs()).length), 0);
    }

    @org.junit.Test
    public void testShortOptionalNArgValues() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|0", java.lang.String[].class, new java.lang.String[]{ "-i", "ink", "idea", "isotope", "ice" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption("i")));
        org.junit.Assert.assertEquals("ink", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|8", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue("i")));
        org.junit.Assert.assertEquals("ink", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|11", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|10", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues("i"))[0]));
        org.junit.Assert.assertEquals("idea", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|14", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|13", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues("i"))[1]));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|17", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|16", org.apache.commons.cli.CommandLine.class, cmd).getArgs()).length), 2);
        org.junit.Assert.assertEquals("isotope", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|20", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|19", org.apache.commons.cli.CommandLine.class, cmd).getArgs())[0]));
        org.junit.Assert.assertEquals("ice", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|23", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValues()|22", org.apache.commons.cli.CommandLine.class, cmd).getArgs())[1]));
    }

    @org.junit.Test
    public void testShortOptionalNArgValuesWithOption() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|0", java.lang.String[].class, new java.lang.String[]{ "-i", "ink", "idea", "isotope", "ice" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption("i")));
        org.junit.Assert.assertEquals("ink", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|8", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|10", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|9", org.apache.commons.cli.Options.class, opts).getOption("i")))));
        org.junit.Assert.assertEquals("ink", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|15", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|12", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|14", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|13", org.apache.commons.cli.Options.class, opts).getOption("i"))))[0]));
        org.junit.Assert.assertEquals("idea", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|20", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|17", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|19", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|18", org.apache.commons.cli.Options.class, opts).getOption("i"))))[1]));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|23", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|22", org.apache.commons.cli.CommandLine.class, cmd).getArgs()).length), 2);
        org.junit.Assert.assertEquals("isotope", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|26", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|25", org.apache.commons.cli.CommandLine.class, cmd).getArgs())[0]));
        org.junit.Assert.assertEquals("ice", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|30", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|29", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testShortOptionalNArgValuesWithOption()|28", org.apache.commons.cli.CommandLine.class, cmd).getArgs())[1]));
    }

    @org.junit.Test
    public void testLongOptionalNArgValues() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|0", java.lang.String[].class, new java.lang.String[]{ "--hide", "house", "hair", "head" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption("hide")));
        org.junit.Assert.assertEquals("house", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|8", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue("hide")));
        org.junit.Assert.assertEquals("house", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|11", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|10", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues("hide"))[0]));
        org.junit.Assert.assertEquals("hair", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|14", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|13", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues("hide"))[1]));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|17", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|16", org.apache.commons.cli.CommandLine.class, cmd).getArgs()).length), 1);
        org.junit.Assert.assertEquals("head", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|20", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValues()|19", org.apache.commons.cli.CommandLine.class, cmd).getArgs())[0]));
    }

    @org.junit.Test
    public void testLongOptionalNArgValuesWithOption() throws java.lang.Exception {
        final java.lang.String[] args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|0", java.lang.String[].class, new java.lang.String[]{ "--hide", "house", "hair", "head" });
        final org.apache.commons.cli.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|1", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser());
        final org.apache.commons.cli.CommandLine cmd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|5", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Parser>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|2", org.apache.commons.cli.Parser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|3", org.apache.commons.cli.Options.class, opts), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|4", java.lang.String[].class, args)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|6", org.apache.commons.cli.CommandLine.class, cmd).hasOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|8", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|7", org.apache.commons.cli.Options.class, opts).getOption("hide")))));
        org.junit.Assert.assertEquals("house", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|10", org.apache.commons.cli.CommandLine.class, cmd).getOptionValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|12", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|11", org.apache.commons.cli.Options.class, opts).getOption("hide")))));
        org.junit.Assert.assertEquals("house", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|17", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|14", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|16", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|15", org.apache.commons.cli.Options.class, opts).getOption("hide"))))[0]));
        org.junit.Assert.assertEquals("hair", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|22", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|19", org.apache.commons.cli.CommandLine.class, cmd).getOptionValues(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|21", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|20", org.apache.commons.cli.Options.class, opts).getOption("hide"))))[1]));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|25", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|24", org.apache.commons.cli.CommandLine.class, cmd).getArgs()).length), 1);
        org.junit.Assert.assertEquals("head", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|28", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.ValueTest|testLongOptionalNArgValuesWithOption()|27", org.apache.commons.cli.CommandLine.class, cmd).getArgs())[0]));
    }
}

