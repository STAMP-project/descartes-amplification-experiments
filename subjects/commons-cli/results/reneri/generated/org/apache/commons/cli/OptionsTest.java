/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.cli;


// tests some deprecated classes
@java.lang.SuppressWarnings("deprecation")
public class OptionsTest {
    @org.junit.Test
    public void testSimple() {
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testSimple()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testSimple()|2", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testSimple()|1", org.apache.commons.cli.Options.class, opts).addOption("a", false, "toggle -a"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testSimple()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testSimple()|3", org.apache.commons.cli.Options.class, opts).addOption("b", true, "toggle -b"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testSimple()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testSimple()|5", org.apache.commons.cli.Options.class, opts).hasOption("a")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testSimple()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testSimple()|7", org.apache.commons.cli.Options.class, opts).hasOption("b")));
    }

    @org.junit.Test
    public void testDuplicateSimple() {
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testDuplicateSimple()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testDuplicateSimple()|2", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testDuplicateSimple()|1", org.apache.commons.cli.Options.class, opts).addOption("a", false, "toggle -a"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testDuplicateSimple()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testDuplicateSimple()|3", org.apache.commons.cli.Options.class, opts).addOption("a", true, "toggle -a*"));
        org.junit.Assert.assertEquals("last one in wins", "toggle -a*", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testDuplicateSimple()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testDuplicateSimple()|6", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testDuplicateSimple()|5", org.apache.commons.cli.Options.class, opts).getOption("a")).getDescription()));
    }

    @org.junit.Test
    public void testLong() {
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testLong()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testLong()|2", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testLong()|1", org.apache.commons.cli.Options.class, opts).addOption("a", "--a", false, "toggle -a"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testLong()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testLong()|3", org.apache.commons.cli.Options.class, opts).addOption("b", "--b", true, "set -b"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testLong()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testLong()|5", org.apache.commons.cli.Options.class, opts).hasOption("a")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testLong()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testLong()|7", org.apache.commons.cli.Options.class, opts).hasOption("b")));
    }

    @org.junit.Test
    public void testDuplicateLong() {
        final org.apache.commons.cli.Options opts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testDuplicateLong()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testDuplicateLong()|2", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testDuplicateLong()|1", org.apache.commons.cli.Options.class, opts).addOption("a", "--a", false, "toggle -a"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testDuplicateLong()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testDuplicateLong()|3", org.apache.commons.cli.Options.class, opts).addOption("a", "--a", false, "toggle -a*"));
        org.junit.Assert.assertEquals("last one in wins", "toggle -a*", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testDuplicateLong()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testDuplicateLong()|6", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testDuplicateLong()|5", org.apache.commons.cli.Options.class, opts).getOption("a")).getDescription()));
    }

    @org.junit.Test
    public void testHelpOptions() {
        final org.apache.commons.cli.Option longOnly1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|1", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|0", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("long-only1")).create());
        final org.apache.commons.cli.Option longOnly2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|3", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|2", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("long-only2")).create());
        final org.apache.commons.cli.Option shortOnly1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|4", org.apache.commons.cli.Option.class, org.apache.commons.cli.OptionBuilder.create("1"));
        final org.apache.commons.cli.Option shortOnly2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|5", org.apache.commons.cli.Option.class, org.apache.commons.cli.OptionBuilder.create("2"));
        final org.apache.commons.cli.Option bothA = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|7", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|6", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("bothA")).create("a"));
        final org.apache.commons.cli.Option bothB = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|9", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|8", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("bothB")).create("b"));
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|10", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|13", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|11", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|12", org.apache.commons.cli.Option.class, longOnly1)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|16", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|14", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|15", org.apache.commons.cli.Option.class, longOnly2)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|19", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|17", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|18", org.apache.commons.cli.Option.class, shortOnly1)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|22", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|20", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|21", org.apache.commons.cli.Option.class, shortOnly2)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|25", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|23", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|24", org.apache.commons.cli.Option.class, bothA)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|28", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|26", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|27", org.apache.commons.cli.Option.class, bothB)));
        final java.util.Collection<org.apache.commons.cli.Option> allOptions = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<org.apache.commons.cli.Option>>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|29", java.util.ArrayList.class, new java.util.ArrayList<org.apache.commons.cli.Option>());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testHelpOptions()|32", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.apache.commons.cli.Option>>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|30", java.util.Collection.class, allOptions).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|31", org.apache.commons.cli.Option.class, longOnly1)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testHelpOptions()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.apache.commons.cli.Option>>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|33", java.util.Collection.class, allOptions).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|34", org.apache.commons.cli.Option.class, longOnly2)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testHelpOptions()|38", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.apache.commons.cli.Option>>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|36", java.util.Collection.class, allOptions).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|37", org.apache.commons.cli.Option.class, shortOnly1)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testHelpOptions()|41", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.apache.commons.cli.Option>>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|39", java.util.Collection.class, allOptions).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|40", org.apache.commons.cli.Option.class, shortOnly2)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testHelpOptions()|44", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.apache.commons.cli.Option>>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|42", java.util.Collection.class, allOptions).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|43", org.apache.commons.cli.Option.class, bothA)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testHelpOptions()|47", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.apache.commons.cli.Option>>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|45", java.util.Collection.class, allOptions).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|46", org.apache.commons.cli.Option.class, bothB)));
        final java.util.Collection<org.apache.commons.cli.Option> helpOptions = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.apache.commons.cli.Option>>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|49", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|48", org.apache.commons.cli.Options.class, options).helpOptions());
        org.junit.Assert.assertTrue("Everything in all should be in help", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testHelpOptions()|52", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.apache.commons.cli.Option>>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|50", java.util.Collection.class, helpOptions).containsAll(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.apache.commons.cli.Option>>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|51", java.util.Collection.class, allOptions))));
        org.junit.Assert.assertTrue("Everything in help should be in all", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testHelpOptions()|55", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.apache.commons.cli.Option>>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|53", java.util.Collection.class, allOptions).containsAll(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.apache.commons.cli.Option>>observeState("org.apache.commons.cli.OptionsTest|testHelpOptions()|54", java.util.Collection.class, helpOptions))));
    }

    @org.junit.Test
    public void testMissingOptionException() throws org.apache.commons.cli.ParseException {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionException()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionException()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionException()|1", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionException()|3", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionException()|2", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.isRequired()).create("f"))));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionException()|8", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionException()|5", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser()).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionException()|6", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionException()|7", java.lang.String[].class, new java.lang.String[0])));
            org.junit.Assert.fail("Expected MissingOptionException to be thrown");
        } catch (final org.apache.commons.cli.MissingOptionException e) {
            org.junit.Assert.assertEquals("Missing required option: f", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testMissingOptionException()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingOptionException>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionException()|9", org.apache.commons.cli.MissingOptionException.class, e).getMessage()));
        }
    }

    @org.junit.Test
    public void testMissingOptionsException() throws org.apache.commons.cli.ParseException {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|1", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|3", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|2", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.isRequired()).create("f"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|8", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|5", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|7", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|6", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.isRequired()).create("x"))));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.CommandLine>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|12", org.apache.commons.cli.CommandLine.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.PosixParser>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|9", org.apache.commons.cli.PosixParser.class, new org.apache.commons.cli.PosixParser()).parse(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|10", org.apache.commons.cli.Options.class, options), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|11", java.lang.String[].class, new java.lang.String[0])));
            org.junit.Assert.fail("Expected MissingOptionException to be thrown");
        } catch (final org.apache.commons.cli.MissingOptionException e) {
            org.junit.Assert.assertEquals("Missing required options: f, x", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.MissingOptionException>observeState("org.apache.commons.cli.OptionsTest|testMissingOptionsException()|13", org.apache.commons.cli.MissingOptionException.class, e).getMessage()));
        }
    }

    @org.junit.Test
    public void testToString() {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testToString()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testToString()|2", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testToString()|1", org.apache.commons.cli.Options.class, options).addOption("f", "foo", true, "Foo"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testToString()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testToString()|3", org.apache.commons.cli.Options.class, options).addOption("b", "bar", false, "Bar"));
        final java.lang.String s = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testToString()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testToString()|5", org.apache.commons.cli.Options.class, options).toString());
        org.junit.Assert.assertNotNull("null string returned", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testToString()|7", s));
        org.junit.Assert.assertTrue("foo option missing", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testToString()|10", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testToString()|9", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testToString()|8", s).toLowerCase()).contains("foo")));
        org.junit.Assert.assertTrue("bar option missing", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testToString()|13", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testToString()|12", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testToString()|11", s).toLowerCase()).contains("bar")));
    }

    @org.junit.Test
    public void testGetOptionsGroups() {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        final org.apache.commons.cli.OptionGroup group1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|1", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|4", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|2", org.apache.commons.cli.OptionGroup.class, group1).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|3", org.apache.commons.cli.Option.class, org.apache.commons.cli.OptionBuilder.create('a'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|7", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|5", org.apache.commons.cli.OptionGroup.class, group1).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|6", org.apache.commons.cli.Option.class, org.apache.commons.cli.OptionBuilder.create('b'))));
        final org.apache.commons.cli.OptionGroup group2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|8", org.apache.commons.cli.OptionGroup.class, new org.apache.commons.cli.OptionGroup());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|11", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|9", org.apache.commons.cli.OptionGroup.class, group2).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|10", org.apache.commons.cli.Option.class, org.apache.commons.cli.OptionBuilder.create('x'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|14", org.apache.commons.cli.OptionGroup.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|12", org.apache.commons.cli.OptionGroup.class, group2).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|13", org.apache.commons.cli.Option.class, org.apache.commons.cli.OptionBuilder.create('y'))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|17", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|15", org.apache.commons.cli.Options.class, options).addOptionGroup(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|16", org.apache.commons.cli.OptionGroup.class, group1)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|20", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|18", org.apache.commons.cli.Options.class, options).addOptionGroup(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionGroup>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|19", org.apache.commons.cli.OptionGroup.class, group2)));
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.apache.commons.cli.OptionGroup>>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|22", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|21", org.apache.commons.cli.Options.class, options).getOptionGroups()));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.apache.commons.cli.OptionGroup>>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|24", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetOptionsGroups()|23", org.apache.commons.cli.Options.class, options).getOptionGroups()).size()));
    }

    @org.junit.Test
    public void testGetMatchingOpts() {
        final org.apache.commons.cli.Options options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|0", org.apache.commons.cli.Options.class, new org.apache.commons.cli.Options());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|4", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|1", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|3", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|2", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("version")).create())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|8", org.apache.commons.cli.Options.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|5", org.apache.commons.cli.Options.class, options).addOption(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Option>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|7", org.apache.commons.cli.Option.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.OptionBuilder>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|6", org.apache.commons.cli.OptionBuilder.class, org.apache.commons.cli.OptionBuilder.withLongOpt("verbose")).create())));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|10", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|9", org.apache.commons.cli.Options.class, options).getMatchingOptions("foo")).isEmpty()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|13", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|12", org.apache.commons.cli.Options.class, options).getMatchingOptions("version")).size()));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|16", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.cli.Options>observeState("org.apache.commons.cli.OptionsTest|testGetMatchingOpts()|15", org.apache.commons.cli.Options.class, options).getMatchingOptions("ver")).size()));
    }
}

