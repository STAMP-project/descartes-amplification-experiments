/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.codec.language.bm;


/**
 * Tests Rule.
 *
 * @since 1.6
 */
public class RuleTest {
    private static class NegativeIntegerBaseMatcher extends org.hamcrest.BaseMatcher<java.lang.Integer> {
        @java.lang.Override
        public void describeTo(final org.hamcrest.Description description) {
            description.appendText("value should be negative");
        }

        @java.lang.Override
        public boolean matches(final java.lang.Object item) {
            return (((java.lang.Integer) (item)).intValue()) < 0;
        }
    }

    private org.apache.commons.codec.language.bm.Rule.Phoneme[][] makePhonemes() {
        final java.lang.String[][] words = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|2", java.lang.String[][].class, new java.lang.String[][]{ eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|0", java.lang.String[].class, new java.lang.String[]{ "rinD", "rinDlt", "rina", "rinalt", "rino", "rinolt", "rinu", "rinult" }), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|1", java.lang.String[].class, new java.lang.String[]{ "dortlaj", "dortlej", "ortlaj", "ortlej", "ortlej-dortlaj" }) });
        final org.apache.commons.codec.language.bm.Rule.Phoneme[][] phonemes = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme[][]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|5", org.apache.commons.codec.language.bm.Rule.Phoneme[][].class, new org.apache.commons.codec.language.bm.Rule.Phoneme[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|3", java.lang.String[][].class, words).length)][]);
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|6", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|7", java.lang.String[][].class, words).length)); i++) {
            final java.lang.String[] words_i = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|11", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|9", java.lang.String[][].class, words)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|10", i)]);
            final org.apache.commons.codec.language.bm.Rule.Phoneme[] phonemes_i = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme[]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|16", org.apache.commons.codec.language.bm.Rule.Phoneme[].class, (eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme[][]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|12", org.apache.commons.codec.language.bm.Rule.Phoneme[][].class, phonemes)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|13", i)] = new org.apache.commons.codec.language.bm.Rule.Phoneme[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|14", java.lang.String[].class, words_i).length)]));
            for (int j = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|17", j)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|18", java.lang.String[].class, words_i).length)); j++) {
                eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|26", org.apache.commons.codec.language.bm.Rule.Phoneme.class, (eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme[]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|20", org.apache.commons.codec.language.bm.Rule.Phoneme[].class, phonemes_i)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|21", j)] = new org.apache.commons.codec.language.bm.Rule.Phoneme(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|22", java.lang.String[].class, words_i)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|23", j)]), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Languages.LanguageSet>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|25", org.apache.commons.codec.language.bm.Languages.LanguageSet.class, org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES))));
            }
        }
        return eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme[][]>observeState("org.apache.commons.codec.language.bm.RuleTest|makePhonemes()|27", org.apache.commons.codec.language.bm.Rule.Phoneme[][].class, phonemes);
    }

    @org.junit.Test
    public void testPhonemeComparedToLaterIsNegative() {
        for (final org.apache.commons.codec.language.bm.Rule.Phoneme[] phs : eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme[][]>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|0", org.apache.commons.codec.language.bm.Rule.Phoneme[][].class, makePhonemes())) {
            for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|1", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme[]>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|2", org.apache.commons.codec.language.bm.Rule.Phoneme[].class, phs).length)); i++) {
                for (int j = (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|4", i)) + 1; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|5", j)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme[]>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|6", org.apache.commons.codec.language.bm.Rule.Phoneme[].class, phs).length)); j++) {
                    final int c = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme>>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|8", java.util.Comparator.class, org.apache.commons.codec.language.bm.Rule.Phoneme.COMPARATOR).compare(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|11", org.apache.commons.codec.language.bm.Rule.Phoneme.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme[]>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|9", org.apache.commons.codec.language.bm.Rule.Phoneme[].class, phs)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|10", i)]), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|14", org.apache.commons.codec.language.bm.Rule.Phoneme.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme[]>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|12", org.apache.commons.codec.language.bm.Rule.Phoneme[].class, phs)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|13", j)])));
                    org.junit.Assert.assertThat((((("Comparing " + (eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|19", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|18", org.apache.commons.codec.language.bm.Rule.Phoneme.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme[]>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|16", org.apache.commons.codec.language.bm.Rule.Phoneme[].class, phs)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|17", i)]).getPhonemeText()))) + " to ") + (eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|23", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|22", org.apache.commons.codec.language.bm.Rule.Phoneme.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme[]>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|20", org.apache.commons.codec.language.bm.Rule.Phoneme[].class, phs)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|21", j)]).getPhonemeText()))) + " should be negative"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|25", java.lang.Integer.valueOf(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|24", c))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.RuleTest.NegativeIntegerBaseMatcher>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToLaterIsNegative()|26", org.apache.commons.codec.language.bm.RuleTest.NegativeIntegerBaseMatcher.class, new org.apache.commons.codec.language.bm.RuleTest.NegativeIntegerBaseMatcher()));
                }
            }
        }
    }

    @org.junit.Test
    public void testPhonemeComparedToSelfIsZero() {
        for (final org.apache.commons.codec.language.bm.Rule.Phoneme[] phs : eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme[][]>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToSelfIsZero()|0", org.apache.commons.codec.language.bm.Rule.Phoneme[][].class, makePhonemes())) {
            for (final org.apache.commons.codec.language.bm.Rule.Phoneme ph : eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme[]>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToSelfIsZero()|1", org.apache.commons.codec.language.bm.Rule.Phoneme[].class, phs)) {
                org.junit.Assert.assertEquals(("Phoneme compared to itself should be zero: " + (eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToSelfIsZero()|3", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToSelfIsZero()|2", org.apache.commons.codec.language.bm.Rule.Phoneme.class, ph).getPhonemeText()))), 0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToSelfIsZero()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme>>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToSelfIsZero()|4", java.util.Comparator.class, org.apache.commons.codec.language.bm.Rule.Phoneme.COMPARATOR).compare(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToSelfIsZero()|5", org.apache.commons.codec.language.bm.Rule.Phoneme.class, ph), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testPhonemeComparedToSelfIsZero()|6", org.apache.commons.codec.language.bm.Rule.Phoneme.class, ph))));
            }
        }
    }

    @org.junit.Test
    public void testSubSequenceWorks() {
        // AppendableCharSequence is private to Rule. We can only make it through a Phoneme.
        final org.apache.commons.codec.language.bm.Rule.Phoneme a = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|0", org.apache.commons.codec.language.bm.Rule.Phoneme.class, new org.apache.commons.codec.language.bm.Rule.Phoneme("a", null));
        final org.apache.commons.codec.language.bm.Rule.Phoneme b = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|1", org.apache.commons.codec.language.bm.Rule.Phoneme.class, new org.apache.commons.codec.language.bm.Rule.Phoneme("b", null));
        final org.apache.commons.codec.language.bm.Rule.Phoneme cd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|2", org.apache.commons.codec.language.bm.Rule.Phoneme.class, new org.apache.commons.codec.language.bm.Rule.Phoneme("cd", null));
        final org.apache.commons.codec.language.bm.Rule.Phoneme ef = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|3", org.apache.commons.codec.language.bm.Rule.Phoneme.class, new org.apache.commons.codec.language.bm.Rule.Phoneme("ef", null));
        final org.apache.commons.codec.language.bm.Rule.Phoneme ghi = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|4", org.apache.commons.codec.language.bm.Rule.Phoneme.class, new org.apache.commons.codec.language.bm.Rule.Phoneme("ghi", null));
        final org.apache.commons.codec.language.bm.Rule.Phoneme jkl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|5", org.apache.commons.codec.language.bm.Rule.Phoneme.class, new org.apache.commons.codec.language.bm.Rule.Phoneme("jkl", null));
        org.junit.Assert.assertEquals('a', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|7", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|6", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a).getPhonemeText()).charAt(0)));
        org.junit.Assert.assertEquals('b', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|10", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|9", org.apache.commons.codec.language.bm.Rule.Phoneme.class, b).getPhonemeText()).charAt(0)));
        org.junit.Assert.assertEquals('c', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|13", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|12", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd).getPhonemeText()).charAt(0)));
        org.junit.Assert.assertEquals('d', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|16", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|15", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd).getPhonemeText()).charAt(1)));
        org.junit.Assert.assertEquals('e', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|19", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|18", org.apache.commons.codec.language.bm.Rule.Phoneme.class, ef).getPhonemeText()).charAt(0)));
        org.junit.Assert.assertEquals('f', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|22", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|21", org.apache.commons.codec.language.bm.Rule.Phoneme.class, ef).getPhonemeText()).charAt(1)));
        org.junit.Assert.assertEquals('g', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|25", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|24", org.apache.commons.codec.language.bm.Rule.Phoneme.class, ghi).getPhonemeText()).charAt(0)));
        org.junit.Assert.assertEquals('h', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|28", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|27", org.apache.commons.codec.language.bm.Rule.Phoneme.class, ghi).getPhonemeText()).charAt(1)));
        org.junit.Assert.assertEquals('i', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|32", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|31", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|30", org.apache.commons.codec.language.bm.Rule.Phoneme.class, ghi).getPhonemeText()).charAt(2)));
        org.junit.Assert.assertEquals('j', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|34", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|33", org.apache.commons.codec.language.bm.Rule.Phoneme.class, jkl).getPhonemeText()).charAt(0)));
        org.junit.Assert.assertEquals('k', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|38", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|37", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|36", org.apache.commons.codec.language.bm.Rule.Phoneme.class, jkl).getPhonemeText()).charAt(1)));
        org.junit.Assert.assertEquals('l', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|41", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|40", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|39", org.apache.commons.codec.language.bm.Rule.Phoneme.class, jkl).getPhonemeText()).charAt(2)));
        final org.apache.commons.codec.language.bm.Rule.Phoneme a_b = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|44", org.apache.commons.codec.language.bm.Rule.Phoneme.class, new org.apache.commons.codec.language.bm.Rule.Phoneme(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|42", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|43", org.apache.commons.codec.language.bm.Rule.Phoneme.class, b)));
        org.junit.Assert.assertEquals('a', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|47", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|46", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|45", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b).getPhonemeText()).charAt(0)));
        org.junit.Assert.assertEquals('b', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|50", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|49", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|48", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b).getPhonemeText()).charAt(1)));
        org.junit.Assert.assertEquals("ab", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|54", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|53", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|52", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|51", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b).getPhonemeText()).subSequence(0, 2)).toString()));
        org.junit.Assert.assertEquals("a", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|58", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|57", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|56", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|55", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b).getPhonemeText()).subSequence(0, 1)).toString()));
        org.junit.Assert.assertEquals("b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|62", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|61", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|60", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|59", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b).getPhonemeText()).subSequence(1, 2)).toString()));
        final org.apache.commons.codec.language.bm.Rule.Phoneme cd_ef = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|65", org.apache.commons.codec.language.bm.Rule.Phoneme.class, new org.apache.commons.codec.language.bm.Rule.Phoneme(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|63", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|64", org.apache.commons.codec.language.bm.Rule.Phoneme.class, ef)));
        org.junit.Assert.assertEquals('c', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|68", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|67", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|66", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd_ef).getPhonemeText()).charAt(0)));
        org.junit.Assert.assertEquals('d', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|71", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|70", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|69", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd_ef).getPhonemeText()).charAt(1)));
        org.junit.Assert.assertEquals('e', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|74", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|73", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|72", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd_ef).getPhonemeText()).charAt(2)));
        org.junit.Assert.assertEquals('f', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|77", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|76", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|75", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd_ef).getPhonemeText()).charAt(3)));
        org.junit.Assert.assertEquals("c", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|81", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|80", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|79", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|78", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd_ef).getPhonemeText()).subSequence(0, 1)).toString()));
        org.junit.Assert.assertEquals("d", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|85", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|84", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|83", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|82", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd_ef).getPhonemeText()).subSequence(1, 2)).toString()));
        org.junit.Assert.assertEquals("e", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|89", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|88", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|87", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|86", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd_ef).getPhonemeText()).subSequence(2, 3)).toString()));
        org.junit.Assert.assertEquals("f", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|93", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|92", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|91", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|90", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd_ef).getPhonemeText()).subSequence(3, 4)).toString()));
        org.junit.Assert.assertEquals("cd", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|97", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|96", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|95", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|94", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd_ef).getPhonemeText()).subSequence(0, 2)).toString()));
        org.junit.Assert.assertEquals("de", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|101", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|100", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|99", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|98", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd_ef).getPhonemeText()).subSequence(1, 3)).toString()));
        org.junit.Assert.assertEquals("ef", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|105", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|104", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|103", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|102", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd_ef).getPhonemeText()).subSequence(2, 4)).toString()));
        org.junit.Assert.assertEquals("cde", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|109", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|108", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|107", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|106", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd_ef).getPhonemeText()).subSequence(0, 3)).toString()));
        org.junit.Assert.assertEquals("def", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|113", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|112", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|111", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|110", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd_ef).getPhonemeText()).subSequence(1, 4)).toString()));
        org.junit.Assert.assertEquals("cdef", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|117", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|116", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|115", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|114", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd_ef).getPhonemeText()).subSequence(0, 4)).toString()));
        final org.apache.commons.codec.language.bm.Rule.Phoneme a_b_cd = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|122", org.apache.commons.codec.language.bm.Rule.Phoneme.class, new org.apache.commons.codec.language.bm.Rule.Phoneme(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|120", org.apache.commons.codec.language.bm.Rule.Phoneme.class, new org.apache.commons.codec.language.bm.Rule.Phoneme(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|118", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|119", org.apache.commons.codec.language.bm.Rule.Phoneme.class, b))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|121", org.apache.commons.codec.language.bm.Rule.Phoneme.class, cd)));
        org.junit.Assert.assertEquals('a', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|125", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|124", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|123", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b_cd).getPhonemeText()).charAt(0)));
        org.junit.Assert.assertEquals('b', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|128", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|127", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|126", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b_cd).getPhonemeText()).charAt(1)));
        org.junit.Assert.assertEquals('c', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|131", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|130", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|129", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b_cd).getPhonemeText()).charAt(2)));
        org.junit.Assert.assertEquals('d', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|134", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|133", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|132", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b_cd).getPhonemeText()).charAt(3)));
        org.junit.Assert.assertEquals("a", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|138", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|137", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|136", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|135", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b_cd).getPhonemeText()).subSequence(0, 1)).toString()));
        org.junit.Assert.assertEquals("b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|142", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|141", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|140", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|139", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b_cd).getPhonemeText()).subSequence(1, 2)).toString()));
        org.junit.Assert.assertEquals("c", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|146", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|145", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|144", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|143", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b_cd).getPhonemeText()).subSequence(2, 3)).toString()));
        org.junit.Assert.assertEquals("d", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|150", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|149", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|148", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|147", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b_cd).getPhonemeText()).subSequence(3, 4)).toString()));
        org.junit.Assert.assertEquals("ab", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|154", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|153", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|152", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|151", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b_cd).getPhonemeText()).subSequence(0, 2)).toString()));
        org.junit.Assert.assertEquals("bc", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|158", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|157", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|156", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|155", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b_cd).getPhonemeText()).subSequence(1, 3)).toString()));
        org.junit.Assert.assertEquals("cd", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|162", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|161", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|160", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|159", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b_cd).getPhonemeText()).subSequence(2, 4)).toString()));
        org.junit.Assert.assertEquals("abc", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|166", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|165", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|164", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|163", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b_cd).getPhonemeText()).subSequence(0, 3)).toString()));
        org.junit.Assert.assertEquals("bcd", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|170", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|169", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|168", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|167", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b_cd).getPhonemeText()).subSequence(1, 4)).toString()));
        org.junit.Assert.assertEquals("abcd", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|174", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|173", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|172", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Rule.Phoneme>observeState("org.apache.commons.codec.language.bm.RuleTest|testSubSequenceWorks()|171", org.apache.commons.codec.language.bm.Rule.Phoneme.class, a_b_cd).getPhonemeText()).subSequence(0, 4)).toString()));
    }
}

