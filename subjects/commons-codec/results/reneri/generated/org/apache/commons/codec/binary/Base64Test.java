/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.codec.binary;


/**
 * Test cases for Base64 class.
 *
 * @see <a href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045</a>
 * @version $Id$
 */
public class Base64Test {
    private static final java.nio.charset.Charset CHARSET_UTF8 = org.apache.commons.codec.Charsets.UTF_8;

    private final java.util.Random random = new java.util.Random();

    /**
     *
     *
     * @return Returns the random.
     */
    public java.util.Random getRandom() {
        return eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Random>observeState("org.apache.commons.codec.binary.Base64Test|getRandom()|0", java.util.Random.class, this.random);
    }

    /**
     * Test the isStringBase64 method.
     */
    @org.junit.Test
    public void testIsStringBase64() {
        final java.lang.String nullString = null;
        final java.lang.String emptyString = "";
        final java.lang.String validString = "abc===defg\n\r123456\r789\r\rABC\n\nDEF==GHI\r\nJKL==============";
        final java.lang.String invalidString = (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsStringBase64()|0", validString)) + ((char) (0));// append null

        // character
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsStringBase64()|2", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsStringBase64()|1", nullString)));
            org.junit.Assert.fail("Base64.isStringBase64() should not be null-safe.");
        } catch (final java.lang.NullPointerException npe) {
            org.junit.Assert.assertNotNull("Base64.isStringBase64() should not be null-safe.", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.NullPointerException>observeState("org.apache.commons.codec.binary.Base64Test|testIsStringBase64()|3", java.lang.NullPointerException.class, npe));
        }
        org.junit.Assert.assertTrue("Base64.isStringBase64(empty-string) is true", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsStringBase64()|5", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsStringBase64()|4", emptyString))));
        org.junit.Assert.assertTrue("Base64.isStringBase64(valid-string) is true", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsStringBase64()|7", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsStringBase64()|6", validString))));
        org.junit.Assert.assertFalse("Base64.isStringBase64(invalid-string) is false", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsStringBase64()|9", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsStringBase64()|8", invalidString))));
    }

    /**
     * Test the Base64 implementation
     */
    @org.junit.Test
    public void testBase64() {
        final java.lang.String content = "Hello World";
        java.lang.String encodedContent;
        byte[] encodedBytes = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|2", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|1", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64()|0", content)))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64()|4", (encodedContent = org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|3", byte[].class, encodedBytes))));
        org.junit.Assert.assertEquals("encoding hello world", "SGVsbG8gV29ybGQ=", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64()|5", encodedContent));
        org.apache.commons.codec.binary.Base64 b64 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|6", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64(org.apache.commons.codec.binary.BaseNCodec.MIME_CHUNK_SIZE, null));// null

        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|10", byte[].class, // lineSeparator
        // same as
        // saying
        // no-chunking
        (encodedBytes = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|7", org.apache.commons.codec.binary.Base64.class, b64).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|9", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64()|8", content))))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64()|12", (encodedContent = org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|11", byte[].class, encodedBytes))));
        org.junit.Assert.assertEquals("encoding hello world", "SGVsbG8gV29ybGQ=", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64()|13", encodedContent));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|14", org.apache.commons.codec.binary.Base64.class, (b64 = new org.apache.commons.codec.binary.Base64(0, null))// null lineSeparator same as saying
        );
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|18", byte[].class, // no-chunking
        (encodedBytes = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|15", org.apache.commons.codec.binary.Base64.class, b64).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|17", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64()|16", content))))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64()|20", (encodedContent = org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|19", byte[].class, encodedBytes))));
        org.junit.Assert.assertEquals("encoding hello world", "SGVsbG8gV29ybGQ=", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64()|21", encodedContent));
        // bogus characters to decode (to skip actually) {e-acute*6}
        final byte[] decode = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|23", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|22", org.apache.commons.codec.binary.Base64.class, b64).decode("SGVsbG{\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9}8gV29ybGQ="));
        final java.lang.String decodeString = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64()|25", org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64()|24", byte[].class, decode)));
        org.junit.Assert.assertEquals("decode hello world", "Hello World", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64()|26", decodeString));
    }

    @org.junit.Test
    public void testBase64AtBufferStart() {
        testBase64InBuffer(0, 100);
    }

    @org.junit.Test
    public void testBase64AtBufferEnd() {
        testBase64InBuffer(100, 0);
    }

    @org.junit.Test
    public void testBase64AtBufferMiddle() {
        testBase64InBuffer(100, 100);
    }

    private void testBase64InBuffer(final int startPasSize, final int endPadSize) {
        final java.lang.String content = "Hello World";
        java.lang.String encodedContent;
        final byte[] bytesUtf8 = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|1", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|0", content)));
        byte[] buffer = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|5", byte[].class, org.apache.commons.lang3.ArrayUtils.addAll(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|2", byte[].class, bytesUtf8), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|4", byte[].class, new byte[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|3", endPadSize)])));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|9", byte[].class, (buffer = org.apache.commons.lang3.ArrayUtils.addAll(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|7", byte[].class, new byte[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|6", startPasSize)]), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|8", byte[].class, buffer))));
        final byte[] encodedBytes = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|15", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|10", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64()).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|11", byte[].class, buffer), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|12", startPasSize), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|14", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|13", byte[].class, bytesUtf8).length)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|17", (encodedContent = org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|16", byte[].class, encodedBytes))));
        org.junit.Assert.assertEquals("encoding hello world", "SGVsbG8gV29ybGQ=", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testBase64InBuffer(int,int)|18", encodedContent));
    }

    /**
     * Test our decode with pad character in the middle. (Our current
     * implementation: halt decode and return what we've got so far).
     *
     * The point of this test is not to say
     * "this is the correct way to decode base64." The point is simply to keep
     * us aware of the current logic since 1.4 so we don't accidentally break it
     * without realizing.
     *
     * Note for historians. The 1.3 logic would decode to:
     * "Hello World\u0000Hello World" -- null in the middle --- and 1.4
     * unwittingly changed it to current logic.
     */
    @org.junit.Test
    public void testDecodeWithInnerPad() {
        final java.lang.String content = "SGVsbG8gV29ybGQ=SGVsbG8gV29ybGQ=";
        final byte[] result = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithInnerPad()|1", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodeWithInnerPad()|0", content)));
        final byte[] shouldBe = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithInnerPad()|2", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8("Hello World"));
        org.junit.Assert.assertTrue("decode should halt at pad (=)", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodeWithInnerPad()|5", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithInnerPad()|3", byte[].class, result), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithInnerPad()|4", byte[].class, shouldBe))));
    }

    /**
     * Tests Base64.encodeBase64().
     */
    @org.junit.Test
    public void testChunkedEncodeMultipleOf76() {
        final byte[] expectedEncode = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testChunkedEncodeMultipleOf76()|1", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testChunkedEncodeMultipleOf76()|0", byte[].class, org.apache.commons.codec.binary.Base64TestData.DECODED), true));
        // convert to "\r\n" so we're equal to the old openssl encoding test
        // stored
        // in Base64TestData.ENCODED_76_CHARS_PER_LINE:
        final java.lang.String actualResult = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testChunkedEncodeMultipleOf76()|2", org.apache.commons.codec.binary.Base64TestData.ENCODED_76_CHARS_PER_LINE.replaceAll("\n", "\r\n"));
        final byte[] actualEncode = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testChunkedEncodeMultipleOf76()|4", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testChunkedEncodeMultipleOf76()|3", actualResult)));
        org.junit.Assert.assertTrue("chunkedEncodeMultipleOf76", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testChunkedEncodeMultipleOf76()|7", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testChunkedEncodeMultipleOf76()|5", byte[].class, expectedEncode), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testChunkedEncodeMultipleOf76()|6", byte[].class, actualEncode))));
    }

    /**
     * CODEC-68: isBase64 throws ArrayIndexOutOfBoundsException on some
     * non-BASE64 bytes
     */
    @org.junit.Test
    public void testCodec68() {
        final byte[] x = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodec68()|0", byte[].class, new byte[]{ 'n', 'A', '=', '=', ((byte) (156)) });
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodec68()|2", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodec68()|1", byte[].class, x)));
    }

    @org.junit.Test
    public void testCodeInteger1() {
        final java.lang.String encodedInt1 = "li7dzDacuo67Jg7mtqEm2TRuOMU=";
        final java.math.BigInteger bigInt1 = eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger1()|0", java.math.BigInteger.class, new java.math.BigInteger(("85739377120809420210425962799" + "0318636601332086981")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testCodeInteger1()|1", encodedInt1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testCodeInteger1()|4", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger1()|3", byte[].class, org.apache.commons.codec.binary.Base64.encodeInteger(eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger1()|2", java.math.BigInteger.class, bigInt1))))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger1()|5", java.math.BigInteger.class, bigInt1), eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger1()|9", java.math.BigInteger.class, org.apache.commons.codec.binary.Base64.decodeInteger(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger1()|8", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testCodeInteger1()|6", encodedInt1).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger1()|7", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))));
    }

    @org.junit.Test
    public void testCodeInteger2() {
        final java.lang.String encodedInt2 = "9B5ypLY9pMOmtxCeTDHgwdNFeGs=";
        final java.math.BigInteger bigInt2 = eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger2()|0", java.math.BigInteger.class, new java.math.BigInteger(("13936727572861167254666467268" + "91466679477132949611")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testCodeInteger2()|1", encodedInt2), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testCodeInteger2()|4", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger2()|3", byte[].class, org.apache.commons.codec.binary.Base64.encodeInteger(eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger2()|2", java.math.BigInteger.class, bigInt2))))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger2()|5", java.math.BigInteger.class, bigInt2), eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger2()|9", java.math.BigInteger.class, org.apache.commons.codec.binary.Base64.decodeInteger(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger2()|8", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testCodeInteger2()|6", encodedInt2).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger2()|7", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))));
    }

    @org.junit.Test
    public void testCodeInteger3() {
        final java.lang.String encodedInt3 = "FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2" + "rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg==";
        final java.math.BigInteger bigInt3 = eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger3()|0", java.math.BigInteger.class, new java.math.BigInteger(("10806548154093873461951748545" + ("1196989136416448805819079363524309897749044958112417136240557" + "4495062430572478766856090958495998158114332651671116876320938126"))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testCodeInteger3()|1", encodedInt3), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testCodeInteger3()|4", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger3()|3", byte[].class, org.apache.commons.codec.binary.Base64.encodeInteger(eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger3()|2", java.math.BigInteger.class, bigInt3))))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger3()|5", java.math.BigInteger.class, bigInt3), eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger3()|9", java.math.BigInteger.class, org.apache.commons.codec.binary.Base64.decodeInteger(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger3()|8", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testCodeInteger3()|6", encodedInt3).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger3()|7", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))));
    }

    @org.junit.Test
    public void testCodeInteger4() {
        final java.lang.String encodedInt4 = "ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI" + (("4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o" + "DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv") + "Q0=");
        final java.math.BigInteger bigInt4 = eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger4()|0", java.math.BigInteger.class, new java.math.BigInteger(("80624726256040348115552042320" + (((("6968135001872753709424419772586693950232350200555646471175944" + "519297087885987040810778908507262272892702303774422853675597") + "748008534040890923814202286633163248086055216976551456088015") + "338880713818192088877057717530169381044092839402438015097654") + "53542091716518238707344493641683483917"))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testCodeInteger4()|1", encodedInt4), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testCodeInteger4()|4", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger4()|3", byte[].class, org.apache.commons.codec.binary.Base64.encodeInteger(eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger4()|2", java.math.BigInteger.class, bigInt4))))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger4()|5", java.math.BigInteger.class, bigInt4), eu.stamp_project.reneri.instrumentation.StateObserver.<java.math.BigInteger>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger4()|9", java.math.BigInteger.class, org.apache.commons.codec.binary.Base64.decodeInteger(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger4()|8", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testCodeInteger4()|6", encodedInt4).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testCodeInteger4()|7", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))));
    }

    @org.junit.Test
    public void testCodeIntegerEdgeCases() {
        // TODO
    }

    @org.junit.Test
    public void testCodeIntegerNull() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodeIntegerNull()|0", byte[].class, org.apache.commons.codec.binary.Base64.encodeInteger(null));
            org.junit.Assert.fail("Exception not thrown when passing in null to encodeInteger(BigInteger)");
        } catch (final java.lang.NullPointerException npe) {
            // expected
        } catch (final java.lang.Exception e) {
            org.junit.Assert.fail("Incorrect Exception caught when passing in null to encodeInteger(BigInteger)");
        }
    }

    @org.junit.Test
    public void testConstructors() {
        org.apache.commons.codec.binary.Base64 base64;
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|0", org.apache.commons.codec.binary.Base64.class, (base64 = new org.apache.commons.codec.binary.Base64()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|1", org.apache.commons.codec.binary.Base64.class, (base64 = new org.apache.commons.codec.binary.Base64((-1))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|3", org.apache.commons.codec.binary.Base64.class, (base64 = new org.apache.commons.codec.binary.Base64((-1), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|2", byte[].class, new byte[]{  }))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|5", org.apache.commons.codec.binary.Base64.class, (base64 = new org.apache.commons.codec.binary.Base64(64, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|4", byte[].class, new byte[]{  }))));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|7", org.apache.commons.codec.binary.Base64.class, (base64 = new org.apache.commons.codec.binary.Base64((-1), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|6", byte[].class, new byte[]{ 'A' })))// TODO do we need to
            );
            // check sep if len
            // = -1?
            org.junit.Assert.fail("Should have rejected attempt to use 'A' as a line separator");
        } catch (final java.lang.IllegalArgumentException ignored) {
            // Expected
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|9", org.apache.commons.codec.binary.Base64.class, (base64 = new org.apache.commons.codec.binary.Base64(64, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|8", byte[].class, new byte[]{ 'A' }))));
            org.junit.Assert.fail("Should have rejected attempt to use 'A' as a line separator");
        } catch (final java.lang.IllegalArgumentException ignored) {
            // Expected
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|11", org.apache.commons.codec.binary.Base64.class, (base64 = new org.apache.commons.codec.binary.Base64(64, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|10", byte[].class, new byte[]{ '=' }))));
            org.junit.Assert.fail("Should have rejected attempt to use '=' as a line separator");
        } catch (final java.lang.IllegalArgumentException ignored) {
            // Expected
        }
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|13", org.apache.commons.codec.binary.Base64.class, (base64 = new org.apache.commons.codec.binary.Base64(64, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|12", byte[].class, new byte[]{ '$' })))// OK
        );
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|15", org.apache.commons.codec.binary.Base64.class, (base64 = new org.apache.commons.codec.binary.Base64(64, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|14", byte[].class, new byte[]{ 'A', '$' }))));
            org.junit.Assert.fail("Should have rejected attempt to use 'A$' as a line separator");
        } catch (final java.lang.IllegalArgumentException ignored) {
            // Expected
        }
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|17", org.apache.commons.codec.binary.Base64.class, (base64 = new org.apache.commons.codec.binary.Base64(64, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|16", byte[].class, new byte[]{ ' ', '$', '\n', '\r', '\t' })))// OK
        );
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructors()|18", org.apache.commons.codec.binary.Base64.class, base64));
    }

    @org.junit.Test
    public void testConstructor_Int_ByteArray_Boolean() {
        final org.apache.commons.codec.binary.Base64 base64 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean()|1", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64(65, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean()|0", byte[].class, new byte[]{ '\t' }), false));
        final byte[] encoded = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean()|4", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean()|2", org.apache.commons.codec.binary.Base64.class, base64).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean()|3", byte[].class, org.apache.commons.codec.binary.Base64TestData.DECODED)));
        java.lang.String expectedResult = org.apache.commons.codec.binary.Base64TestData.ENCODED_64_CHARS_PER_LINE;
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean()|6", (expectedResult = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean()|5", expectedResult).replace('\n', '\t')));
        final java.lang.String result = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean()|8", org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean()|7", byte[].class, encoded)));
        org.junit.Assert.assertEquals("new Base64(65, \\t, false)", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean()|9", expectedResult), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean()|10", result));
    }

    @org.junit.Test
    public void testConstructor_Int_ByteArray_Boolean_UrlSafe() {
        // url-safe variation
        final org.apache.commons.codec.binary.Base64 base64 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|1", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64(64, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|0", byte[].class, new byte[]{ '\t' }), true));
        final byte[] encoded = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|4", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|2", org.apache.commons.codec.binary.Base64.class, base64).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|3", byte[].class, org.apache.commons.codec.binary.Base64TestData.DECODED)));
        java.lang.String expectedResult = org.apache.commons.codec.binary.Base64TestData.ENCODED_64_CHARS_PER_LINE;
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|6", (expectedResult = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|5", expectedResult).replaceAll("=", ""))// url-safe has no
        );
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|8", // == padding.
        (expectedResult = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|7", expectedResult).replace('\n', '\t')));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|10", (expectedResult = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|9", expectedResult).replace('+', '-')));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|12", (expectedResult = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|11", expectedResult).replace('/', '_')));
        final java.lang.String result = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|14", org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|13", byte[].class, encoded)));
        org.junit.Assert.assertEquals("new Base64(64, \\t, true)", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|15", result), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testConstructor_Int_ByteArray_Boolean_UrlSafe()|16", expectedResult));
    }

    /**
     * Tests conditional true branch for "marker0" test.
     */
    @org.junit.Test
    public void testDecodePadMarkerIndex2() {
        org.junit.Assert.assertEquals("A", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadMarkerIndex2()|3", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadMarkerIndex2()|2", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadMarkerIndex2()|1", byte[].class, "QQ==".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadMarkerIndex2()|0", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
    }

    /**
     * Tests conditional branches for "marker1" test.
     */
    @org.junit.Test
    public void testDecodePadMarkerIndex3() {
        org.junit.Assert.assertEquals("AA", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadMarkerIndex3()|3", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadMarkerIndex3()|2", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadMarkerIndex3()|1", byte[].class, "QUE=".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadMarkerIndex3()|0", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
        org.junit.Assert.assertEquals("AAA", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadMarkerIndex3()|7", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadMarkerIndex3()|6", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadMarkerIndex3()|5", byte[].class, "QUFB".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadMarkerIndex3()|4", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
    }

    @org.junit.Test
    public void testDecodePadOnly() {
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|2", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|1", byte[].class, "====".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|0", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))).length));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|7", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|6", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|5", byte[].class, "====".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|4", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
        // Test truncated padding
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|10", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|9", byte[].class, "===".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|8", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))).length));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|14", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|13", byte[].class, "==".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|12", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))).length));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|18", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|17", byte[].class, "=".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|16", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))).length));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|22", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|21", byte[].class, "".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnly()|20", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))).length));
    }

    @org.junit.Test
    public void testDecodePadOnlyChunked() {
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|2", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|1", byte[].class, "====\n".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|0", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))).length));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|7", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|6", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|5", byte[].class, "====\n".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|4", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
        // Test truncated padding
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|10", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|9", byte[].class, "===\n".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|8", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))).length));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|14", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|13", byte[].class, "==\n".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|12", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))).length));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|18", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|17", byte[].class, "=\n".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|16", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))).length));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|22", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|21", byte[].class, "\n".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodePadOnlyChunked()|20", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))).length));
    }

    @org.junit.Test
    public void testDecodeWithWhitespace() throws java.lang.Exception {
        final java.lang.String orig = "I am a late night coder.";
        final byte[] encodedArray = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|3", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|2", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|0", orig).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|1", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8)))));
        final java.lang.StringBuilder intermediate = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|6", java.lang.StringBuilder.class, new java.lang.StringBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|5", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|4", byte[].class, encodedArray)))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|8", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|7", java.lang.StringBuilder.class, intermediate).insert(2, ' '));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|10", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|9", java.lang.StringBuilder.class, intermediate).insert(5, '\t'));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|12", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|11", java.lang.StringBuilder.class, intermediate).insert(10, '\r'));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|14", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|13", java.lang.StringBuilder.class, intermediate).insert(15, '\n'));
        final byte[] encodedWithWS = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|18", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|15", java.lang.StringBuilder.class, intermediate).toString()).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|17", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8)));
        final byte[] decodedWithWS = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|20", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|19", byte[].class, encodedWithWS)));
        final java.lang.String dest = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|22", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|21", byte[].class, decodedWithWS)));
        org.junit.Assert.assertEquals("Dest string doesn't equal the original", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|23", orig), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodeWithWhitespace()|24", dest));
    }

    /**
     * Test encode and decode of empty byte array.
     */
    @org.junit.Test
    public void testEmptyBase64() {
        byte[] empty = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEmptyBase64()|0", byte[].class, new byte[0]);
        byte[] result = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEmptyBase64()|2", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEmptyBase64()|1", byte[].class, empty)));
        org.junit.Assert.assertEquals("empty base64 encode", 0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEmptyBase64()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEmptyBase64()|3", byte[].class, result).length));
        org.junit.Assert.assertEquals("empty base64 encode", null, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEmptyBase64()|5", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(null)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEmptyBase64()|6", byte[].class, (empty = new byte[0]));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEmptyBase64()|8", byte[].class, (result = org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEmptyBase64()|7", byte[].class, empty))));
        org.junit.Assert.assertEquals("empty base64 decode", 0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEmptyBase64()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEmptyBase64()|9", byte[].class, result).length));
        org.junit.Assert.assertEquals("empty base64 encode", null, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEmptyBase64()|11", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(((byte[]) (null)))));
    }

    // encode/decode a large random array
    @org.junit.Test
    public void testEncodeDecodeRandom() {
        for (int i = 1; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|0", i)) < 5; i++) {
            final byte[] data = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|3", byte[].class, new byte[(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Random>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|1", java.util.Random.class, this.getRandom()).nextInt(10000))) + 1]);
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Random>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|4", java.util.Random.class, this.getRandom()).nextBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|5", byte[].class, data));
            final byte[] enc = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|7", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|6", byte[].class, data)));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|9", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|8", byte[].class, enc))));
            final byte[] data2 = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|11", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|10", byte[].class, enc)));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|14", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|12", byte[].class, data), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeRandom()|13", byte[].class, data2))));
        }
    }

    // encode/decode random arrays from size 0 to size 11
    @org.junit.Test
    public void testEncodeDecodeSmall() {
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|0", i)) < 12; i++) {
            final byte[] data = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|2", byte[].class, new byte[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|1", i)]);
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Random>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|3", java.util.Random.class, this.getRandom()).nextBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|4", byte[].class, data));
            final byte[] enc = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|6", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|5", byte[].class, data)));
            org.junit.Assert.assertTrue((("\"" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|8", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|7", byte[].class, enc))))) + "\" is Base64 data."), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|10", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|9", byte[].class, enc))));
            final byte[] data2 = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|12", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|11", byte[].class, enc)));
            org.junit.Assert.assertTrue((((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|14", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|13", byte[].class, data)))) + " equals ") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|16", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|15", byte[].class, data2))))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|19", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|17", byte[].class, data), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecodeSmall()|18", byte[].class, data2))));
        }
    }

    @org.junit.Test
    public void testEncodeOverMaxSize() throws java.lang.Exception {
        testEncodeOverMaxSize((-1));
        testEncodeOverMaxSize(0);
        testEncodeOverMaxSize(1);
        testEncodeOverMaxSize(2);
    }

    @org.junit.Test
    public void testCodec112() {
        // size calculation assumes always chunked
        final byte[] in = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodec112()|0", byte[].class, new byte[]{ 0 });
        final byte[] out = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodec112()|2", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodec112()|1", byte[].class, in)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodec112()|6", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodec112()|3", byte[].class, in), false, false, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testCodec112()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testCodec112()|4", byte[].class, out).length)));
    }

    private void testEncodeOverMaxSize(final int maxSize) throws java.lang.Exception {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeOverMaxSize(int)|2", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeOverMaxSize(int)|0", byte[].class, org.apache.commons.codec.binary.Base64TestData.DECODED), true, false, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeOverMaxSize(int)|1", maxSize)));
            org.junit.Assert.fail(("Expected " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeOverMaxSize(int)|3", java.lang.IllegalArgumentException.class.getName()))));
        } catch (final java.lang.IllegalArgumentException e) {
            // Expected
        }
    }

    @org.junit.Test
    public void testIgnoringNonBase64InDecode() throws java.lang.Exception {
        org.junit.Assert.assertEquals("The quick brown fox jumped over the lazy dogs.", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIgnoringNonBase64InDecode()|3", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIgnoringNonBase64InDecode()|2", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIgnoringNonBase64InDecode()|1", byte[].class, "VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\n\r\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testIgnoringNonBase64InDecode()|0", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
    }

    @org.junit.Test
    public void testIsArrayByteBase64() {
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|1", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|0", byte[].class, new byte[]{ java.lang.Byte.MIN_VALUE }))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|3", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|2", byte[].class, new byte[]{ -125 }))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|5", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|4", byte[].class, new byte[]{ -10 }))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|7", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|6", byte[].class, new byte[]{ 0 }))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|9", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|8", byte[].class, new byte[]{ 64, java.lang.Byte.MAX_VALUE }))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|11", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|10", byte[].class, new byte[]{ java.lang.Byte.MAX_VALUE }))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|13", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|12", byte[].class, new byte[]{ 'A' }))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|15", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|14", byte[].class, new byte[]{ 'A', java.lang.Byte.MIN_VALUE }))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|17", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|16", byte[].class, new byte[]{ 'A', 'Z', 'a' }))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|19", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|18", byte[].class, new byte[]{ '/', '=', '+' }))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|21", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIsArrayByteBase64()|20", byte[].class, new byte[]{ '$' }))));
    }

    /**
     * Tests isUrlSafe.
     */
    @org.junit.Test
    public void testIsUrlSafe() {
        final org.apache.commons.codec.binary.Base64 base64Standard = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testIsUrlSafe()|0", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64(false));
        final org.apache.commons.codec.binary.Base64 base64URLSafe = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testIsUrlSafe()|1", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64(true));
        org.junit.Assert.assertFalse("Base64.isUrlSafe=false", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsUrlSafe()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testIsUrlSafe()|2", org.apache.commons.codec.binary.Base64.class, base64Standard).isUrlSafe()));
        org.junit.Assert.assertTrue("Base64.isUrlSafe=true", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsUrlSafe()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testIsUrlSafe()|4", org.apache.commons.codec.binary.Base64.class, base64URLSafe).isUrlSafe()));
        final byte[] whiteSpace = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIsUrlSafe()|6", byte[].class, new byte[]{ ' ', '\n', '\r', '\t' });
        org.junit.Assert.assertTrue("Base64.isBase64(whiteSpace)=true", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testIsUrlSafe()|8", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testIsUrlSafe()|7", byte[].class, whiteSpace))));
    }

    @org.junit.Test
    public void testKnownDecodings() {
        org.junit.Assert.assertEquals("The quick brown fox jumped over the lazy dogs.", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|3", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|2", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|1", byte[].class, "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|0", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
        org.junit.Assert.assertEquals("It was the best of times, it was the worst of times.", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|7", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|6", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|5", byte[].class, "SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|4", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
        org.junit.Assert.assertEquals("http://jakarta.apache.org/commmons", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|11", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|10", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|9", byte[].class, "aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|8", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
        org.junit.Assert.assertEquals("AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|15", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|14", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|13", byte[].class, "QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|12", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
        org.junit.Assert.assertEquals("{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|19", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|18", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|17", byte[].class, "eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|16", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
        org.junit.Assert.assertEquals("xyzzy!", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|23", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|22", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|21", byte[].class, "eHl6enkh".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testKnownDecodings()|20", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
    }

    @org.junit.Test
    public void testKnownEncodings() {
        org.junit.Assert.assertEquals("VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|3", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|2", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|1", byte[].class, "The quick brown fox jumped over the lazy dogs.".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|0", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
        org.junit.Assert.assertEquals("YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\r\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\r\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\r\nbGFoIGJsYWg=\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|7", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|6", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|5", byte[].class, "blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|4", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
        org.junit.Assert.assertEquals("SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|11", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|10", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|9", byte[].class, "It was the best of times, it was the worst of times.".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|8", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
        org.junit.Assert.assertEquals("aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|15", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|14", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|13", byte[].class, "http://jakarta.apache.org/commmons".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|12", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
        org.junit.Assert.assertEquals("QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|19", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|18", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|17", byte[].class, "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|16", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
        org.junit.Assert.assertEquals("eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|23", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|22", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|21", byte[].class, "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|20", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
        org.junit.Assert.assertEquals("eHl6enkh", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|27", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|26", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|25", byte[].class, "xyzzy!".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testKnownEncodings()|24", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
    }

    @org.junit.Test
    public void testNonBase64Test() throws java.lang.Exception {
        final byte[] bArray = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testNonBase64Test()|0", byte[].class, new byte[]{ '%' });
        org.junit.Assert.assertFalse(("Invalid Base64 array was incorrectly validated as " + "an array of Base64 encoded data"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testNonBase64Test()|2", org.apache.commons.codec.binary.Base64.isBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testNonBase64Test()|1", byte[].class, bArray))));
        try {
            final org.apache.commons.codec.binary.Base64 b64 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testNonBase64Test()|3", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64());
            final byte[] result = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testNonBase64Test()|6", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testNonBase64Test()|4", org.apache.commons.codec.binary.Base64.class, b64).decode(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testNonBase64Test()|5", byte[].class, bArray)));
            org.junit.Assert.assertEquals(("The result should be empty as the test encoded content did " + "not contain any valid base 64 characters"), 0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testNonBase64Test()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testNonBase64Test()|7", byte[].class, result).length));
        } catch (final java.lang.Exception e) {
            org.junit.Assert.fail(("Exception was thrown when trying to decode " + (("invalid base64 encoded data - RFC 2045 requires that all " + "non base64 character be discarded, an exception should not") + " have been thrown")));
        }
    }

    @org.junit.Test
    public void testObjectDecodeWithInvalidParameter() throws java.lang.Exception {
        final org.apache.commons.codec.binary.Base64 b64 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithInvalidParameter()|0", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64());
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithInvalidParameter()|3", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithInvalidParameter()|1", org.apache.commons.codec.binary.Base64.class, b64).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithInvalidParameter()|2", java.lang.Integer.valueOf(5))));
            org.junit.Assert.fail("decode(Object) didn't throw an exception when passed an Integer object");
        } catch (final org.apache.commons.codec.DecoderException e) {
            // ignored
        }
    }

    @org.junit.Test
    public void testObjectDecodeWithValidParameter() throws java.lang.Exception {
        final java.lang.String original = "Hello World!";
        final java.lang.Object o = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithValidParameter()|3", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithValidParameter()|2", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithValidParameter()|0", original).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithValidParameter()|1", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8)))));
        final org.apache.commons.codec.binary.Base64 b64 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithValidParameter()|4", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64());
        final java.lang.Object oDecoded = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithValidParameter()|7", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithValidParameter()|5", org.apache.commons.codec.binary.Base64.class, b64).decode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithValidParameter()|6", java.lang.Object.class, o)));
        final byte[] baDecoded = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithValidParameter()|8", byte[].class, ((byte[]) (oDecoded)));
        final java.lang.String dest = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithValidParameter()|10", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithValidParameter()|9", byte[].class, baDecoded)));
        org.junit.Assert.assertEquals("dest string does not equal original", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithValidParameter()|11", original), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testObjectDecodeWithValidParameter()|12", dest));
    }

    @org.junit.Test
    public void testObjectEncodeWithInvalidParameter() throws java.lang.Exception {
        final org.apache.commons.codec.binary.Base64 b64 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithInvalidParameter()|0", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64());
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithInvalidParameter()|2", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithInvalidParameter()|1", org.apache.commons.codec.binary.Base64.class, b64).encode("Yadayadayada"));
            org.junit.Assert.fail("encode(Object) didn't throw an exception when passed a String object");
        } catch (final org.apache.commons.codec.EncoderException e) {
            // Expected
        }
    }

    @org.junit.Test
    public void testObjectEncodeWithValidParameter() throws java.lang.Exception {
        final java.lang.String original = "Hello World!";
        final java.lang.Object origObj = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithValidParameter()|2", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithValidParameter()|0", original).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithValidParameter()|1", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8)));
        final org.apache.commons.codec.binary.Base64 b64 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithValidParameter()|3", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64());
        final java.lang.Object oEncoded = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithValidParameter()|6", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithValidParameter()|4", org.apache.commons.codec.binary.Base64.class, b64).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithValidParameter()|5", java.lang.Object.class, origObj)));
        final byte[] bArray = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithValidParameter()|8", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithValidParameter()|7", byte[].class, ((byte[]) (oEncoded)))));
        final java.lang.String dest = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithValidParameter()|10", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithValidParameter()|9", byte[].class, bArray)));
        org.junit.Assert.assertEquals("dest string does not equal original", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithValidParameter()|11", original), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testObjectEncodeWithValidParameter()|12", dest));
    }

    @org.junit.Test
    public void testObjectEncode() throws java.lang.Exception {
        final org.apache.commons.codec.binary.Base64 b64 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncode()|0", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64());
        org.junit.Assert.assertEquals("SGVsbG8gV29ybGQ=", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testObjectEncode()|5", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncode()|4", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncode()|1", org.apache.commons.codec.binary.Base64.class, b64).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncode()|3", byte[].class, "Hello World".getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base64Test|testObjectEncode()|2", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base64Test.CHARSET_UTF8))))))));
    }

    @org.junit.Test
    public void testPairs() {
        org.junit.Assert.assertEquals("AAA=", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testPairs()|2", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testPairs()|1", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testPairs()|0", byte[].class, new byte[]{ 0, 0 }))))));
        for (int i = -128; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testPairs()|3", i)) <= 127; i++) {
            final byte[] test = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testPairs()|6", byte[].class, new byte[]{ eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testPairs()|4", ((byte) (i))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testPairs()|5", ((byte) (i))) });
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testPairs()|11", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testPairs()|7", byte[].class, test), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testPairs()|10", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testPairs()|9", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testPairs()|8", byte[].class, test))))))));
        }
    }

    /**
     * Tests RFC 2045 section 2.1 CRLF definition.
     */
    @org.junit.Test
    public void testRfc2045Section2Dot1CrLfDefinition() {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc2045Section2Dot1CrLfDefinition()|2", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc2045Section2Dot1CrLfDefinition()|0", byte[].class, new byte[]{ 13, 10 }), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc2045Section2Dot1CrLfDefinition()|1", byte[].class, org.apache.commons.codec.binary.Base64.CHUNK_SEPARATOR))));
    }

    /**
     * Tests RFC 2045 section 6.8 chuck size definition.
     */
    @org.junit.Test
    public void testRfc2045Section6Dot8ChunkSizeDefinition() {
        org.junit.Assert.assertEquals(76, org.apache.commons.codec.binary.BaseNCodec.MIME_CHUNK_SIZE);
    }

    /**
     * Tests RFC 1421 section 4.3.2.4 chuck size definition.
     */
    @org.junit.Test
    public void testRfc1421Section6Dot8ChunkSizeDefinition() {
        org.junit.Assert.assertEquals(64, org.apache.commons.codec.binary.BaseNCodec.PEM_CHUNK_SIZE);
    }

    /**
     * Tests RFC 4648 section 10 test vectors.
     * <ul>
     * <li>BASE64("") = ""</li>
     * <li>BASE64("f") = "Zg=="</li>
     * <li>BASE64("fo") = "Zm8="</li>
     * <li>BASE64("foo") = "Zm9v"</li>
     * <li>BASE64("foob") = "Zm9vYg=="</li>
     * <li>BASE64("fooba") = "Zm9vYmE="</li>
     * <li>BASE64("foobar") = "Zm9vYmFy"</li>
     * </ul>
     *
     * @see <a href="http://tools.ietf.org/html/rfc4648">http://tools.ietf.org/
     * html/rfc4648</a>
     */
    @org.junit.Test
    public void testRfc4648Section10Decode() {
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Decode()|1", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Decode()|0", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64("")))));
        org.junit.Assert.assertEquals("f", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Decode()|3", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Decode()|2", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64("Zg==")))));
        org.junit.Assert.assertEquals("fo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Decode()|5", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Decode()|4", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64("Zm8=")))));
        org.junit.Assert.assertEquals("foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Decode()|7", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Decode()|6", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64("Zm9v")))));
        org.junit.Assert.assertEquals("foob", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Decode()|9", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Decode()|8", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64("Zm9vYg==")))));
        org.junit.Assert.assertEquals("fooba", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Decode()|11", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Decode()|10", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64("Zm9vYmE=")))));
        org.junit.Assert.assertEquals("foobar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Decode()|13", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Decode()|12", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64("Zm9vYmFy")))));
    }

    /**
     * Tests RFC 4648 section 10 test vectors.
     * <ul>
     * <li>BASE64("") = ""</li>
     * <li>BASE64("f") = "Zg=="</li>
     * <li>BASE64("fo") = "Zm8="</li>
     * <li>BASE64("foo") = "Zm9v"</li>
     * <li>BASE64("foob") = "Zm9vYg=="</li>
     * <li>BASE64("fooba") = "Zm9vYmE="</li>
     * <li>BASE64("foobar") = "Zm9vYmFy"</li>
     * </ul>
     *
     * @see <a href="http://tools.ietf.org/html/rfc4648">http://tools.ietf.org/
     * html/rfc4648</a>
     */
    @org.junit.Test
    public void testRfc4648Section10DecodeWithCrLf() {
        final java.lang.String CRLF = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|1", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|0", byte[].class, org.apache.commons.codec.binary.Base64.CHUNK_SEPARATOR)));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|4", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|3", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(("" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|2", CRLF))))))));
        org.junit.Assert.assertEquals("f", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|7", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|6", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(("Zg==" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|5", CRLF))))))));
        org.junit.Assert.assertEquals("fo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|10", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|9", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(("Zm8=" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|8", CRLF))))))));
        org.junit.Assert.assertEquals("foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|13", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|12", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(("Zm9v" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|11", CRLF))))))));
        org.junit.Assert.assertEquals("foob", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|16", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|15", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(("Zm9vYg==" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|14", CRLF))))))));
        org.junit.Assert.assertEquals("fooba", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|19", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|18", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(("Zm9vYmE=" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|17", CRLF))))))));
        org.junit.Assert.assertEquals("foobar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|22", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|21", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(("Zm9vYmFy" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10DecodeWithCrLf()|20", CRLF))))))));
    }

    /**
     * Tests RFC 4648 section 10 test vectors.
     * <ul>
     * <li>BASE64("") = ""</li>
     * <li>BASE64("f") = "Zg=="</li>
     * <li>BASE64("fo") = "Zm8="</li>
     * <li>BASE64("foo") = "Zm9v"</li>
     * <li>BASE64("foob") = "Zm9vYg=="</li>
     * <li>BASE64("fooba") = "Zm9vYmE="</li>
     * <li>BASE64("foobar") = "Zm9vYmFy"</li>
     * </ul>
     *
     * @see <a href="http://tools.ietf.org/html/rfc4648">http://tools.ietf.org/
     * html/rfc4648</a>
     */
    @org.junit.Test
    public void testRfc4648Section10Encode() {
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Encode()|1", org.apache.commons.codec.binary.Base64.encodeBase64String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Encode()|0", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8("")))));
        org.junit.Assert.assertEquals("Zg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Encode()|3", org.apache.commons.codec.binary.Base64.encodeBase64String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Encode()|2", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8("f")))));
        org.junit.Assert.assertEquals("Zm8=", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Encode()|5", org.apache.commons.codec.binary.Base64.encodeBase64String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Encode()|4", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8("fo")))));
        org.junit.Assert.assertEquals("Zm9v", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Encode()|7", org.apache.commons.codec.binary.Base64.encodeBase64String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Encode()|6", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8("foo")))));
        org.junit.Assert.assertEquals("Zm9vYg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Encode()|9", org.apache.commons.codec.binary.Base64.encodeBase64String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Encode()|8", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8("foob")))));
        org.junit.Assert.assertEquals("Zm9vYmE=", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Encode()|11", org.apache.commons.codec.binary.Base64.encodeBase64String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Encode()|10", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8("fooba")))));
        org.junit.Assert.assertEquals("Zm9vYmFy", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Encode()|13", org.apache.commons.codec.binary.Base64.encodeBase64String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testRfc4648Section10Encode()|12", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8("foobar")))));
    }

    /**
     * Tests RFC 4648 section 10 test vectors.
     * <ul>
     * <li>BASE64("") = ""</li>
     * <li>BASE64("f") = "Zg=="</li>
     * <li>BASE64("fo") = "Zm8="</li>
     * <li>BASE64("foo") = "Zm9v"</li>
     * <li>BASE64("foob") = "Zm9vYg=="</li>
     * <li>BASE64("fooba") = "Zm9vYmE="</li>
     * <li>BASE64("foobar") = "Zm9vYmFy"</li>
     * </ul>
     *
     * @see <a href="http://tools.ietf.org/html/rfc4648">http://tools.ietf.org/
     * html/rfc4648</a>
     */
    @org.junit.Test
    public void testRfc4648Section10DecodeEncode() {
        testDecodeEncode("");
        testDecodeEncode("Zg==");
        testDecodeEncode("Zm8=");
        testDecodeEncode("Zm9v");
        testDecodeEncode("Zm9vYg==");
        testDecodeEncode("Zm9vYmE=");
        testDecodeEncode("Zm9vYmFy");
    }

    private void testDecodeEncode(final java.lang.String encodedText) {
        final java.lang.String decodedText = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodeEncode(java.lang.String)|2", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeEncode(java.lang.String)|1", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodeEncode(java.lang.String)|0", encodedText)))));
        final java.lang.String encodedText2 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodeEncode(java.lang.String)|5", org.apache.commons.codec.binary.Base64.encodeBase64String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testDecodeEncode(java.lang.String)|4", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodeEncode(java.lang.String)|3", decodedText)))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodeEncode(java.lang.String)|6", encodedText), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testDecodeEncode(java.lang.String)|7", encodedText2));
    }

    /**
     * Tests RFC 4648 section 10 test vectors.
     * <ul>
     * <li>BASE64("") = ""</li>
     * <li>BASE64("f") = "Zg=="</li>
     * <li>BASE64("fo") = "Zm8="</li>
     * <li>BASE64("foo") = "Zm9v"</li>
     * <li>BASE64("foob") = "Zm9vYg=="</li>
     * <li>BASE64("fooba") = "Zm9vYmE="</li>
     * <li>BASE64("foobar") = "Zm9vYmFy"</li>
     * </ul>
     *
     * @see <a href="http://tools.ietf.org/html/rfc4648">http://tools.ietf.org/
     * html/rfc4648</a>
     */
    @org.junit.Test
    public void testRfc4648Section10EncodeDecode() {
        testEncodeDecode("");
        testEncodeDecode("f");
        testEncodeDecode("fo");
        testEncodeDecode("foo");
        testEncodeDecode("foob");
        testEncodeDecode("fooba");
        testEncodeDecode("foobar");
    }

    private void testEncodeDecode(final java.lang.String plainText) {
        final java.lang.String encodedText = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecode(java.lang.String)|2", org.apache.commons.codec.binary.Base64.encodeBase64String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecode(java.lang.String)|1", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecode(java.lang.String)|0", plainText)))));
        final java.lang.String decodedText = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecode(java.lang.String)|5", org.apache.commons.codec.binary.StringUtils.newStringUsAscii(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testEncodeDecode(java.lang.String)|4", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecode(java.lang.String)|3", encodedText)))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecode(java.lang.String)|6", plainText), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testEncodeDecode(java.lang.String)|7", decodedText));
    }

    @org.junit.Test
    public void testSingletons() {
        org.junit.Assert.assertEquals("AA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|2", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|1", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|0", byte[].class, new byte[]{ ((byte) (0)) }))))));
        org.junit.Assert.assertEquals("AQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|5", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|4", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|3", byte[].class, new byte[]{ ((byte) (1)) }))))));
        org.junit.Assert.assertEquals("Ag==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|8", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|7", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|6", byte[].class, new byte[]{ ((byte) (2)) }))))));
        org.junit.Assert.assertEquals("Aw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|11", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|10", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|9", byte[].class, new byte[]{ ((byte) (3)) }))))));
        org.junit.Assert.assertEquals("BA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|14", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|13", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|12", byte[].class, new byte[]{ ((byte) (4)) }))))));
        org.junit.Assert.assertEquals("BQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|17", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|16", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|15", byte[].class, new byte[]{ ((byte) (5)) }))))));
        org.junit.Assert.assertEquals("Bg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|20", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|19", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|18", byte[].class, new byte[]{ ((byte) (6)) }))))));
        org.junit.Assert.assertEquals("Bw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|23", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|22", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|21", byte[].class, new byte[]{ ((byte) (7)) }))))));
        org.junit.Assert.assertEquals("CA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|26", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|25", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|24", byte[].class, new byte[]{ ((byte) (8)) }))))));
        org.junit.Assert.assertEquals("CQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|29", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|28", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|27", byte[].class, new byte[]{ ((byte) (9)) }))))));
        org.junit.Assert.assertEquals("Cg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|32", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|31", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|30", byte[].class, new byte[]{ ((byte) (10)) }))))));
        org.junit.Assert.assertEquals("Cw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|35", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|34", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|33", byte[].class, new byte[]{ ((byte) (11)) }))))));
        org.junit.Assert.assertEquals("DA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|38", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|37", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|36", byte[].class, new byte[]{ ((byte) (12)) }))))));
        org.junit.Assert.assertEquals("DQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|41", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|40", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|39", byte[].class, new byte[]{ ((byte) (13)) }))))));
        org.junit.Assert.assertEquals("Dg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|44", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|43", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|42", byte[].class, new byte[]{ ((byte) (14)) }))))));
        org.junit.Assert.assertEquals("Dw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|47", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|46", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|45", byte[].class, new byte[]{ ((byte) (15)) }))))));
        org.junit.Assert.assertEquals("EA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|50", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|49", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|48", byte[].class, new byte[]{ ((byte) (16)) }))))));
        org.junit.Assert.assertEquals("EQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|53", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|52", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|51", byte[].class, new byte[]{ ((byte) (17)) }))))));
        org.junit.Assert.assertEquals("Eg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|56", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|55", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|54", byte[].class, new byte[]{ ((byte) (18)) }))))));
        org.junit.Assert.assertEquals("Ew==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|59", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|58", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|57", byte[].class, new byte[]{ ((byte) (19)) }))))));
        org.junit.Assert.assertEquals("FA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|62", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|61", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|60", byte[].class, new byte[]{ ((byte) (20)) }))))));
        org.junit.Assert.assertEquals("FQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|65", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|64", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|63", byte[].class, new byte[]{ ((byte) (21)) }))))));
        org.junit.Assert.assertEquals("Fg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|68", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|67", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|66", byte[].class, new byte[]{ ((byte) (22)) }))))));
        org.junit.Assert.assertEquals("Fw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|71", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|70", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|69", byte[].class, new byte[]{ ((byte) (23)) }))))));
        org.junit.Assert.assertEquals("GA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|74", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|73", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|72", byte[].class, new byte[]{ ((byte) (24)) }))))));
        org.junit.Assert.assertEquals("GQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|77", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|76", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|75", byte[].class, new byte[]{ ((byte) (25)) }))))));
        org.junit.Assert.assertEquals("Gg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|80", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|79", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|78", byte[].class, new byte[]{ ((byte) (26)) }))))));
        org.junit.Assert.assertEquals("Gw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|83", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|82", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|81", byte[].class, new byte[]{ ((byte) (27)) }))))));
        org.junit.Assert.assertEquals("HA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|86", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|85", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|84", byte[].class, new byte[]{ ((byte) (28)) }))))));
        org.junit.Assert.assertEquals("HQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|89", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|88", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|87", byte[].class, new byte[]{ ((byte) (29)) }))))));
        org.junit.Assert.assertEquals("Hg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|92", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|91", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|90", byte[].class, new byte[]{ ((byte) (30)) }))))));
        org.junit.Assert.assertEquals("Hw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|95", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|94", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|93", byte[].class, new byte[]{ ((byte) (31)) }))))));
        org.junit.Assert.assertEquals("IA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|98", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|97", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|96", byte[].class, new byte[]{ ((byte) (32)) }))))));
        org.junit.Assert.assertEquals("IQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|101", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|100", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|99", byte[].class, new byte[]{ ((byte) (33)) }))))));
        org.junit.Assert.assertEquals("Ig==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|104", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|103", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|102", byte[].class, new byte[]{ ((byte) (34)) }))))));
        org.junit.Assert.assertEquals("Iw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|107", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|106", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|105", byte[].class, new byte[]{ ((byte) (35)) }))))));
        org.junit.Assert.assertEquals("JA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|110", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|109", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|108", byte[].class, new byte[]{ ((byte) (36)) }))))));
        org.junit.Assert.assertEquals("JQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|113", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|112", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|111", byte[].class, new byte[]{ ((byte) (37)) }))))));
        org.junit.Assert.assertEquals("Jg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|116", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|115", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|114", byte[].class, new byte[]{ ((byte) (38)) }))))));
        org.junit.Assert.assertEquals("Jw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|119", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|118", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|117", byte[].class, new byte[]{ ((byte) (39)) }))))));
        org.junit.Assert.assertEquals("KA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|122", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|121", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|120", byte[].class, new byte[]{ ((byte) (40)) }))))));
        org.junit.Assert.assertEquals("KQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|125", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|124", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|123", byte[].class, new byte[]{ ((byte) (41)) }))))));
        org.junit.Assert.assertEquals("Kg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|128", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|127", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|126", byte[].class, new byte[]{ ((byte) (42)) }))))));
        org.junit.Assert.assertEquals("Kw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|131", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|130", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|129", byte[].class, new byte[]{ ((byte) (43)) }))))));
        org.junit.Assert.assertEquals("LA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|134", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|133", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|132", byte[].class, new byte[]{ ((byte) (44)) }))))));
        org.junit.Assert.assertEquals("LQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|137", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|136", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|135", byte[].class, new byte[]{ ((byte) (45)) }))))));
        org.junit.Assert.assertEquals("Lg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|140", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|139", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|138", byte[].class, new byte[]{ ((byte) (46)) }))))));
        org.junit.Assert.assertEquals("Lw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|143", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|142", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|141", byte[].class, new byte[]{ ((byte) (47)) }))))));
        org.junit.Assert.assertEquals("MA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|146", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|145", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|144", byte[].class, new byte[]{ ((byte) (48)) }))))));
        org.junit.Assert.assertEquals("MQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|149", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|148", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|147", byte[].class, new byte[]{ ((byte) (49)) }))))));
        org.junit.Assert.assertEquals("Mg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|152", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|151", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|150", byte[].class, new byte[]{ ((byte) (50)) }))))));
        org.junit.Assert.assertEquals("Mw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|155", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|154", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|153", byte[].class, new byte[]{ ((byte) (51)) }))))));
        org.junit.Assert.assertEquals("NA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|158", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|157", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|156", byte[].class, new byte[]{ ((byte) (52)) }))))));
        org.junit.Assert.assertEquals("NQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|161", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|160", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|159", byte[].class, new byte[]{ ((byte) (53)) }))))));
        org.junit.Assert.assertEquals("Ng==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|164", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|163", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|162", byte[].class, new byte[]{ ((byte) (54)) }))))));
        org.junit.Assert.assertEquals("Nw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|167", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|166", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|165", byte[].class, new byte[]{ ((byte) (55)) }))))));
        org.junit.Assert.assertEquals("OA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|170", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|169", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|168", byte[].class, new byte[]{ ((byte) (56)) }))))));
        org.junit.Assert.assertEquals("OQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|173", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|172", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|171", byte[].class, new byte[]{ ((byte) (57)) }))))));
        org.junit.Assert.assertEquals("Og==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|176", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|175", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|174", byte[].class, new byte[]{ ((byte) (58)) }))))));
        org.junit.Assert.assertEquals("Ow==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|179", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|178", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|177", byte[].class, new byte[]{ ((byte) (59)) }))))));
        org.junit.Assert.assertEquals("PA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|182", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|181", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|180", byte[].class, new byte[]{ ((byte) (60)) }))))));
        org.junit.Assert.assertEquals("PQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|185", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|184", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|183", byte[].class, new byte[]{ ((byte) (61)) }))))));
        org.junit.Assert.assertEquals("Pg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|188", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|187", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|186", byte[].class, new byte[]{ ((byte) (62)) }))))));
        org.junit.Assert.assertEquals("Pw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|191", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|190", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|189", byte[].class, new byte[]{ ((byte) (63)) }))))));
        org.junit.Assert.assertEquals("QA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|194", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|193", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|192", byte[].class, new byte[]{ ((byte) (64)) }))))));
        org.junit.Assert.assertEquals("QQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|197", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|196", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|195", byte[].class, new byte[]{ ((byte) (65)) }))))));
        org.junit.Assert.assertEquals("Qg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|200", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|199", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|198", byte[].class, new byte[]{ ((byte) (66)) }))))));
        org.junit.Assert.assertEquals("Qw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|203", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|202", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|201", byte[].class, new byte[]{ ((byte) (67)) }))))));
        org.junit.Assert.assertEquals("RA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|206", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|205", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|204", byte[].class, new byte[]{ ((byte) (68)) }))))));
        org.junit.Assert.assertEquals("RQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|209", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|208", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|207", byte[].class, new byte[]{ ((byte) (69)) }))))));
        org.junit.Assert.assertEquals("Rg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|212", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|211", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|210", byte[].class, new byte[]{ ((byte) (70)) }))))));
        org.junit.Assert.assertEquals("Rw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|215", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|214", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|213", byte[].class, new byte[]{ ((byte) (71)) }))))));
        org.junit.Assert.assertEquals("SA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|218", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|217", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|216", byte[].class, new byte[]{ ((byte) (72)) }))))));
        org.junit.Assert.assertEquals("SQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|221", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|220", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|219", byte[].class, new byte[]{ ((byte) (73)) }))))));
        org.junit.Assert.assertEquals("Sg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|224", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|223", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|222", byte[].class, new byte[]{ ((byte) (74)) }))))));
        org.junit.Assert.assertEquals("Sw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|227", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|226", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|225", byte[].class, new byte[]{ ((byte) (75)) }))))));
        org.junit.Assert.assertEquals("TA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|230", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|229", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|228", byte[].class, new byte[]{ ((byte) (76)) }))))));
        org.junit.Assert.assertEquals("TQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|233", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|232", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|231", byte[].class, new byte[]{ ((byte) (77)) }))))));
        org.junit.Assert.assertEquals("Tg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|236", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|235", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|234", byte[].class, new byte[]{ ((byte) (78)) }))))));
        org.junit.Assert.assertEquals("Tw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|239", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|238", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|237", byte[].class, new byte[]{ ((byte) (79)) }))))));
        org.junit.Assert.assertEquals("UA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|242", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|241", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|240", byte[].class, new byte[]{ ((byte) (80)) }))))));
        org.junit.Assert.assertEquals("UQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|245", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|244", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|243", byte[].class, new byte[]{ ((byte) (81)) }))))));
        org.junit.Assert.assertEquals("Ug==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|248", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|247", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|246", byte[].class, new byte[]{ ((byte) (82)) }))))));
        org.junit.Assert.assertEquals("Uw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|251", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|250", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|249", byte[].class, new byte[]{ ((byte) (83)) }))))));
        org.junit.Assert.assertEquals("VA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|254", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|253", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|252", byte[].class, new byte[]{ ((byte) (84)) }))))));
        org.junit.Assert.assertEquals("VQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|257", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|256", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|255", byte[].class, new byte[]{ ((byte) (85)) }))))));
        org.junit.Assert.assertEquals("Vg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|260", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|259", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|258", byte[].class, new byte[]{ ((byte) (86)) }))))));
        org.junit.Assert.assertEquals("Vw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|263", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|262", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|261", byte[].class, new byte[]{ ((byte) (87)) }))))));
        org.junit.Assert.assertEquals("WA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|266", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|265", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|264", byte[].class, new byte[]{ ((byte) (88)) }))))));
        org.junit.Assert.assertEquals("WQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|269", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|268", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|267", byte[].class, new byte[]{ ((byte) (89)) }))))));
        org.junit.Assert.assertEquals("Wg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|272", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|271", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|270", byte[].class, new byte[]{ ((byte) (90)) }))))));
        org.junit.Assert.assertEquals("Ww==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|275", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|274", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|273", byte[].class, new byte[]{ ((byte) (91)) }))))));
        org.junit.Assert.assertEquals("XA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|278", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|277", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|276", byte[].class, new byte[]{ ((byte) (92)) }))))));
        org.junit.Assert.assertEquals("XQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|281", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|280", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|279", byte[].class, new byte[]{ ((byte) (93)) }))))));
        org.junit.Assert.assertEquals("Xg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|284", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|283", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|282", byte[].class, new byte[]{ ((byte) (94)) }))))));
        org.junit.Assert.assertEquals("Xw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|287", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|286", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|285", byte[].class, new byte[]{ ((byte) (95)) }))))));
        org.junit.Assert.assertEquals("YA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|290", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|289", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|288", byte[].class, new byte[]{ ((byte) (96)) }))))));
        org.junit.Assert.assertEquals("YQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|293", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|292", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|291", byte[].class, new byte[]{ ((byte) (97)) }))))));
        org.junit.Assert.assertEquals("Yg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|296", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|295", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|294", byte[].class, new byte[]{ ((byte) (98)) }))))));
        org.junit.Assert.assertEquals("Yw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|299", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|298", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|297", byte[].class, new byte[]{ ((byte) (99)) }))))));
        org.junit.Assert.assertEquals("ZA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|302", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|301", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|300", byte[].class, new byte[]{ ((byte) (100)) }))))));
        org.junit.Assert.assertEquals("ZQ==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|305", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|304", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|303", byte[].class, new byte[]{ ((byte) (101)) }))))));
        org.junit.Assert.assertEquals("Zg==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|308", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|307", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|306", byte[].class, new byte[]{ ((byte) (102)) }))))));
        org.junit.Assert.assertEquals("Zw==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|311", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|310", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|309", byte[].class, new byte[]{ ((byte) (103)) }))))));
        org.junit.Assert.assertEquals("aA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|314", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|313", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|312", byte[].class, new byte[]{ ((byte) (104)) }))))));
        for (int i = -128; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|315", i)) <= 127; i++) {
            final byte[] test = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|317", byte[].class, new byte[]{ eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|316", ((byte) (i))) });
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletons()|322", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|318", byte[].class, test), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|321", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|320", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletons()|319", byte[].class, test))))))));
        }
    }

    @org.junit.Test
    public void testSingletonsChunked() {
        org.junit.Assert.assertEquals("AA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|2", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|1", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|0", byte[].class, new byte[]{ ((byte) (0)) }))))));
        org.junit.Assert.assertEquals("AQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|5", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|4", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|3", byte[].class, new byte[]{ ((byte) (1)) }))))));
        org.junit.Assert.assertEquals("Ag==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|8", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|7", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|6", byte[].class, new byte[]{ ((byte) (2)) }))))));
        org.junit.Assert.assertEquals("Aw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|11", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|10", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|9", byte[].class, new byte[]{ ((byte) (3)) }))))));
        org.junit.Assert.assertEquals("BA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|14", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|13", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|12", byte[].class, new byte[]{ ((byte) (4)) }))))));
        org.junit.Assert.assertEquals("BQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|17", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|16", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|15", byte[].class, new byte[]{ ((byte) (5)) }))))));
        org.junit.Assert.assertEquals("Bg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|20", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|19", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|18", byte[].class, new byte[]{ ((byte) (6)) }))))));
        org.junit.Assert.assertEquals("Bw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|23", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|22", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|21", byte[].class, new byte[]{ ((byte) (7)) }))))));
        org.junit.Assert.assertEquals("CA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|26", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|25", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|24", byte[].class, new byte[]{ ((byte) (8)) }))))));
        org.junit.Assert.assertEquals("CQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|29", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|28", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|27", byte[].class, new byte[]{ ((byte) (9)) }))))));
        org.junit.Assert.assertEquals("Cg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|32", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|31", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|30", byte[].class, new byte[]{ ((byte) (10)) }))))));
        org.junit.Assert.assertEquals("Cw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|35", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|34", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|33", byte[].class, new byte[]{ ((byte) (11)) }))))));
        org.junit.Assert.assertEquals("DA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|38", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|37", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|36", byte[].class, new byte[]{ ((byte) (12)) }))))));
        org.junit.Assert.assertEquals("DQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|41", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|40", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|39", byte[].class, new byte[]{ ((byte) (13)) }))))));
        org.junit.Assert.assertEquals("Dg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|44", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|43", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|42", byte[].class, new byte[]{ ((byte) (14)) }))))));
        org.junit.Assert.assertEquals("Dw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|47", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|46", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|45", byte[].class, new byte[]{ ((byte) (15)) }))))));
        org.junit.Assert.assertEquals("EA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|50", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|49", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|48", byte[].class, new byte[]{ ((byte) (16)) }))))));
        org.junit.Assert.assertEquals("EQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|53", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|52", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|51", byte[].class, new byte[]{ ((byte) (17)) }))))));
        org.junit.Assert.assertEquals("Eg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|56", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|55", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|54", byte[].class, new byte[]{ ((byte) (18)) }))))));
        org.junit.Assert.assertEquals("Ew==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|59", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|58", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|57", byte[].class, new byte[]{ ((byte) (19)) }))))));
        org.junit.Assert.assertEquals("FA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|62", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|61", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|60", byte[].class, new byte[]{ ((byte) (20)) }))))));
        org.junit.Assert.assertEquals("FQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|65", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|64", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|63", byte[].class, new byte[]{ ((byte) (21)) }))))));
        org.junit.Assert.assertEquals("Fg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|68", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|67", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|66", byte[].class, new byte[]{ ((byte) (22)) }))))));
        org.junit.Assert.assertEquals("Fw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|71", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|70", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|69", byte[].class, new byte[]{ ((byte) (23)) }))))));
        org.junit.Assert.assertEquals("GA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|74", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|73", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|72", byte[].class, new byte[]{ ((byte) (24)) }))))));
        org.junit.Assert.assertEquals("GQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|77", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|76", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|75", byte[].class, new byte[]{ ((byte) (25)) }))))));
        org.junit.Assert.assertEquals("Gg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|80", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|79", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|78", byte[].class, new byte[]{ ((byte) (26)) }))))));
        org.junit.Assert.assertEquals("Gw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|83", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|82", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|81", byte[].class, new byte[]{ ((byte) (27)) }))))));
        org.junit.Assert.assertEquals("HA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|86", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|85", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|84", byte[].class, new byte[]{ ((byte) (28)) }))))));
        org.junit.Assert.assertEquals("HQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|89", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|88", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|87", byte[].class, new byte[]{ ((byte) (29)) }))))));
        org.junit.Assert.assertEquals("Hg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|92", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|91", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|90", byte[].class, new byte[]{ ((byte) (30)) }))))));
        org.junit.Assert.assertEquals("Hw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|95", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|94", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|93", byte[].class, new byte[]{ ((byte) (31)) }))))));
        org.junit.Assert.assertEquals("IA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|98", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|97", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|96", byte[].class, new byte[]{ ((byte) (32)) }))))));
        org.junit.Assert.assertEquals("IQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|101", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|100", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|99", byte[].class, new byte[]{ ((byte) (33)) }))))));
        org.junit.Assert.assertEquals("Ig==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|104", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|103", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|102", byte[].class, new byte[]{ ((byte) (34)) }))))));
        org.junit.Assert.assertEquals("Iw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|107", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|106", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|105", byte[].class, new byte[]{ ((byte) (35)) }))))));
        org.junit.Assert.assertEquals("JA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|110", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|109", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|108", byte[].class, new byte[]{ ((byte) (36)) }))))));
        org.junit.Assert.assertEquals("JQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|113", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|112", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|111", byte[].class, new byte[]{ ((byte) (37)) }))))));
        org.junit.Assert.assertEquals("Jg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|116", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|115", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|114", byte[].class, new byte[]{ ((byte) (38)) }))))));
        org.junit.Assert.assertEquals("Jw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|119", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|118", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|117", byte[].class, new byte[]{ ((byte) (39)) }))))));
        org.junit.Assert.assertEquals("KA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|122", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|121", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|120", byte[].class, new byte[]{ ((byte) (40)) }))))));
        org.junit.Assert.assertEquals("KQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|125", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|124", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|123", byte[].class, new byte[]{ ((byte) (41)) }))))));
        org.junit.Assert.assertEquals("Kg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|128", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|127", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|126", byte[].class, new byte[]{ ((byte) (42)) }))))));
        org.junit.Assert.assertEquals("Kw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|131", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|130", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|129", byte[].class, new byte[]{ ((byte) (43)) }))))));
        org.junit.Assert.assertEquals("LA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|134", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|133", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|132", byte[].class, new byte[]{ ((byte) (44)) }))))));
        org.junit.Assert.assertEquals("LQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|137", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|136", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|135", byte[].class, new byte[]{ ((byte) (45)) }))))));
        org.junit.Assert.assertEquals("Lg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|140", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|139", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|138", byte[].class, new byte[]{ ((byte) (46)) }))))));
        org.junit.Assert.assertEquals("Lw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|143", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|142", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|141", byte[].class, new byte[]{ ((byte) (47)) }))))));
        org.junit.Assert.assertEquals("MA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|146", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|145", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|144", byte[].class, new byte[]{ ((byte) (48)) }))))));
        org.junit.Assert.assertEquals("MQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|149", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|148", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|147", byte[].class, new byte[]{ ((byte) (49)) }))))));
        org.junit.Assert.assertEquals("Mg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|152", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|151", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|150", byte[].class, new byte[]{ ((byte) (50)) }))))));
        org.junit.Assert.assertEquals("Mw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|155", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|154", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|153", byte[].class, new byte[]{ ((byte) (51)) }))))));
        org.junit.Assert.assertEquals("NA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|158", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|157", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|156", byte[].class, new byte[]{ ((byte) (52)) }))))));
        org.junit.Assert.assertEquals("NQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|161", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|160", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|159", byte[].class, new byte[]{ ((byte) (53)) }))))));
        org.junit.Assert.assertEquals("Ng==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|164", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|163", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|162", byte[].class, new byte[]{ ((byte) (54)) }))))));
        org.junit.Assert.assertEquals("Nw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|167", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|166", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|165", byte[].class, new byte[]{ ((byte) (55)) }))))));
        org.junit.Assert.assertEquals("OA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|170", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|169", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|168", byte[].class, new byte[]{ ((byte) (56)) }))))));
        org.junit.Assert.assertEquals("OQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|173", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|172", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|171", byte[].class, new byte[]{ ((byte) (57)) }))))));
        org.junit.Assert.assertEquals("Og==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|176", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|175", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|174", byte[].class, new byte[]{ ((byte) (58)) }))))));
        org.junit.Assert.assertEquals("Ow==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|179", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|178", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|177", byte[].class, new byte[]{ ((byte) (59)) }))))));
        org.junit.Assert.assertEquals("PA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|182", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|181", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|180", byte[].class, new byte[]{ ((byte) (60)) }))))));
        org.junit.Assert.assertEquals("PQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|185", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|184", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|183", byte[].class, new byte[]{ ((byte) (61)) }))))));
        org.junit.Assert.assertEquals("Pg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|188", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|187", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|186", byte[].class, new byte[]{ ((byte) (62)) }))))));
        org.junit.Assert.assertEquals("Pw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|191", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|190", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|189", byte[].class, new byte[]{ ((byte) (63)) }))))));
        org.junit.Assert.assertEquals("QA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|194", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|193", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|192", byte[].class, new byte[]{ ((byte) (64)) }))))));
        org.junit.Assert.assertEquals("QQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|197", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|196", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|195", byte[].class, new byte[]{ ((byte) (65)) }))))));
        org.junit.Assert.assertEquals("Qg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|200", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|199", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|198", byte[].class, new byte[]{ ((byte) (66)) }))))));
        org.junit.Assert.assertEquals("Qw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|203", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|202", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|201", byte[].class, new byte[]{ ((byte) (67)) }))))));
        org.junit.Assert.assertEquals("RA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|206", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|205", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|204", byte[].class, new byte[]{ ((byte) (68)) }))))));
        org.junit.Assert.assertEquals("RQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|209", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|208", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|207", byte[].class, new byte[]{ ((byte) (69)) }))))));
        org.junit.Assert.assertEquals("Rg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|212", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|211", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|210", byte[].class, new byte[]{ ((byte) (70)) }))))));
        org.junit.Assert.assertEquals("Rw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|215", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|214", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|213", byte[].class, new byte[]{ ((byte) (71)) }))))));
        org.junit.Assert.assertEquals("SA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|218", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|217", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|216", byte[].class, new byte[]{ ((byte) (72)) }))))));
        org.junit.Assert.assertEquals("SQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|221", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|220", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|219", byte[].class, new byte[]{ ((byte) (73)) }))))));
        org.junit.Assert.assertEquals("Sg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|224", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|223", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|222", byte[].class, new byte[]{ ((byte) (74)) }))))));
        org.junit.Assert.assertEquals("Sw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|227", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|226", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|225", byte[].class, new byte[]{ ((byte) (75)) }))))));
        org.junit.Assert.assertEquals("TA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|230", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|229", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|228", byte[].class, new byte[]{ ((byte) (76)) }))))));
        org.junit.Assert.assertEquals("TQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|233", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|232", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|231", byte[].class, new byte[]{ ((byte) (77)) }))))));
        org.junit.Assert.assertEquals("Tg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|236", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|235", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|234", byte[].class, new byte[]{ ((byte) (78)) }))))));
        org.junit.Assert.assertEquals("Tw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|239", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|238", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|237", byte[].class, new byte[]{ ((byte) (79)) }))))));
        org.junit.Assert.assertEquals("UA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|242", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|241", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|240", byte[].class, new byte[]{ ((byte) (80)) }))))));
        org.junit.Assert.assertEquals("UQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|245", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|244", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|243", byte[].class, new byte[]{ ((byte) (81)) }))))));
        org.junit.Assert.assertEquals("Ug==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|248", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|247", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|246", byte[].class, new byte[]{ ((byte) (82)) }))))));
        org.junit.Assert.assertEquals("Uw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|251", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|250", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|249", byte[].class, new byte[]{ ((byte) (83)) }))))));
        org.junit.Assert.assertEquals("VA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|254", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|253", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|252", byte[].class, new byte[]{ ((byte) (84)) }))))));
        org.junit.Assert.assertEquals("VQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|257", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|256", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|255", byte[].class, new byte[]{ ((byte) (85)) }))))));
        org.junit.Assert.assertEquals("Vg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|260", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|259", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|258", byte[].class, new byte[]{ ((byte) (86)) }))))));
        org.junit.Assert.assertEquals("Vw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|263", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|262", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|261", byte[].class, new byte[]{ ((byte) (87)) }))))));
        org.junit.Assert.assertEquals("WA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|266", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|265", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|264", byte[].class, new byte[]{ ((byte) (88)) }))))));
        org.junit.Assert.assertEquals("WQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|269", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|268", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|267", byte[].class, new byte[]{ ((byte) (89)) }))))));
        org.junit.Assert.assertEquals("Wg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|272", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|271", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|270", byte[].class, new byte[]{ ((byte) (90)) }))))));
        org.junit.Assert.assertEquals("Ww==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|275", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|274", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|273", byte[].class, new byte[]{ ((byte) (91)) }))))));
        org.junit.Assert.assertEquals("XA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|278", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|277", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|276", byte[].class, new byte[]{ ((byte) (92)) }))))));
        org.junit.Assert.assertEquals("XQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|281", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|280", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|279", byte[].class, new byte[]{ ((byte) (93)) }))))));
        org.junit.Assert.assertEquals("Xg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|284", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|283", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|282", byte[].class, new byte[]{ ((byte) (94)) }))))));
        org.junit.Assert.assertEquals("Xw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|287", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|286", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|285", byte[].class, new byte[]{ ((byte) (95)) }))))));
        org.junit.Assert.assertEquals("YA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|290", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|289", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|288", byte[].class, new byte[]{ ((byte) (96)) }))))));
        org.junit.Assert.assertEquals("YQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|293", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|292", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|291", byte[].class, new byte[]{ ((byte) (97)) }))))));
        org.junit.Assert.assertEquals("Yg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|296", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|295", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|294", byte[].class, new byte[]{ ((byte) (98)) }))))));
        org.junit.Assert.assertEquals("Yw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|299", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|298", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|297", byte[].class, new byte[]{ ((byte) (99)) }))))));
        org.junit.Assert.assertEquals("ZA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|302", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|301", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|300", byte[].class, new byte[]{ ((byte) (100)) }))))));
        org.junit.Assert.assertEquals("ZQ==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|305", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|304", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|303", byte[].class, new byte[]{ ((byte) (101)) }))))));
        org.junit.Assert.assertEquals("Zg==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|308", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|307", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|306", byte[].class, new byte[]{ ((byte) (102)) }))))));
        org.junit.Assert.assertEquals("Zw==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|311", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|310", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|309", byte[].class, new byte[]{ ((byte) (103)) }))))));
        org.junit.Assert.assertEquals("aA==\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|314", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|313", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testSingletonsChunked()|312", byte[].class, new byte[]{ ((byte) (104)) }))))));
    }

    @org.junit.Test
    public void testTriplets() {
        org.junit.Assert.assertEquals("AAAA", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|2", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|1", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|0", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (0)) }))))));
        org.junit.Assert.assertEquals("AAAB", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|5", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|4", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|3", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (1)) }))))));
        org.junit.Assert.assertEquals("AAAC", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|8", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|7", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|6", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (2)) }))))));
        org.junit.Assert.assertEquals("AAAD", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|11", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|10", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|9", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (3)) }))))));
        org.junit.Assert.assertEquals("AAAE", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|14", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|13", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|12", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (4)) }))))));
        org.junit.Assert.assertEquals("AAAF", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|17", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|16", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|15", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (5)) }))))));
        org.junit.Assert.assertEquals("AAAG", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|20", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|19", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|18", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (6)) }))))));
        org.junit.Assert.assertEquals("AAAH", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|23", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|22", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|21", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (7)) }))))));
        org.junit.Assert.assertEquals("AAAI", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|26", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|25", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|24", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (8)) }))))));
        org.junit.Assert.assertEquals("AAAJ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|29", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|28", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|27", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (9)) }))))));
        org.junit.Assert.assertEquals("AAAK", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|32", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|31", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|30", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (10)) }))))));
        org.junit.Assert.assertEquals("AAAL", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|35", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|34", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|33", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (11)) }))))));
        org.junit.Assert.assertEquals("AAAM", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|38", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|37", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|36", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (12)) }))))));
        org.junit.Assert.assertEquals("AAAN", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|41", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|40", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|39", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (13)) }))))));
        org.junit.Assert.assertEquals("AAAO", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|44", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|43", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|42", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (14)) }))))));
        org.junit.Assert.assertEquals("AAAP", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|47", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|46", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|45", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (15)) }))))));
        org.junit.Assert.assertEquals("AAAQ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|50", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|49", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|48", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (16)) }))))));
        org.junit.Assert.assertEquals("AAAR", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|53", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|52", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|51", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (17)) }))))));
        org.junit.Assert.assertEquals("AAAS", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|56", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|55", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|54", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (18)) }))))));
        org.junit.Assert.assertEquals("AAAT", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|59", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|58", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|57", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (19)) }))))));
        org.junit.Assert.assertEquals("AAAU", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|62", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|61", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|60", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (20)) }))))));
        org.junit.Assert.assertEquals("AAAV", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|65", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|64", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|63", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (21)) }))))));
        org.junit.Assert.assertEquals("AAAW", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|68", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|67", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|66", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (22)) }))))));
        org.junit.Assert.assertEquals("AAAX", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|71", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|70", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|69", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (23)) }))))));
        org.junit.Assert.assertEquals("AAAY", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|74", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|73", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|72", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (24)) }))))));
        org.junit.Assert.assertEquals("AAAZ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|77", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|76", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|75", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (25)) }))))));
        org.junit.Assert.assertEquals("AAAa", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|80", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|79", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|78", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (26)) }))))));
        org.junit.Assert.assertEquals("AAAb", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|83", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|82", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|81", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (27)) }))))));
        org.junit.Assert.assertEquals("AAAc", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|86", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|85", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|84", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (28)) }))))));
        org.junit.Assert.assertEquals("AAAd", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|89", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|88", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|87", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (29)) }))))));
        org.junit.Assert.assertEquals("AAAe", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|92", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|91", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|90", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (30)) }))))));
        org.junit.Assert.assertEquals("AAAf", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|95", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|94", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|93", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (31)) }))))));
        org.junit.Assert.assertEquals("AAAg", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|98", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|97", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|96", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (32)) }))))));
        org.junit.Assert.assertEquals("AAAh", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|101", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|100", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|99", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (33)) }))))));
        org.junit.Assert.assertEquals("AAAi", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|104", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|103", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|102", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (34)) }))))));
        org.junit.Assert.assertEquals("AAAj", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|107", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|106", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|105", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (35)) }))))));
        org.junit.Assert.assertEquals("AAAk", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|110", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|109", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|108", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (36)) }))))));
        org.junit.Assert.assertEquals("AAAl", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|113", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|112", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|111", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (37)) }))))));
        org.junit.Assert.assertEquals("AAAm", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|116", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|115", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|114", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (38)) }))))));
        org.junit.Assert.assertEquals("AAAn", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|119", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|118", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|117", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (39)) }))))));
        org.junit.Assert.assertEquals("AAAo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|122", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|121", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|120", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (40)) }))))));
        org.junit.Assert.assertEquals("AAAp", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|125", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|124", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|123", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (41)) }))))));
        org.junit.Assert.assertEquals("AAAq", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|128", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|127", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|126", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (42)) }))))));
        org.junit.Assert.assertEquals("AAAr", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|131", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|130", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|129", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (43)) }))))));
        org.junit.Assert.assertEquals("AAAs", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|134", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|133", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|132", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (44)) }))))));
        org.junit.Assert.assertEquals("AAAt", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|137", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|136", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|135", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (45)) }))))));
        org.junit.Assert.assertEquals("AAAu", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|140", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|139", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|138", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (46)) }))))));
        org.junit.Assert.assertEquals("AAAv", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|143", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|142", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|141", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (47)) }))))));
        org.junit.Assert.assertEquals("AAAw", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|146", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|145", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|144", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (48)) }))))));
        org.junit.Assert.assertEquals("AAAx", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|149", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|148", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|147", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (49)) }))))));
        org.junit.Assert.assertEquals("AAAy", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|152", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|151", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|150", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (50)) }))))));
        org.junit.Assert.assertEquals("AAAz", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|155", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|154", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|153", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (51)) }))))));
        org.junit.Assert.assertEquals("AAA0", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|158", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|157", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|156", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (52)) }))))));
        org.junit.Assert.assertEquals("AAA1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|161", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|160", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|159", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (53)) }))))));
        org.junit.Assert.assertEquals("AAA2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|164", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|163", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|162", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (54)) }))))));
        org.junit.Assert.assertEquals("AAA3", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|167", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|166", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|165", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (55)) }))))));
        org.junit.Assert.assertEquals("AAA4", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|170", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|169", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|168", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (56)) }))))));
        org.junit.Assert.assertEquals("AAA5", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|173", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|172", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|171", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (57)) }))))));
        org.junit.Assert.assertEquals("AAA6", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|176", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|175", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|174", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (58)) }))))));
        org.junit.Assert.assertEquals("AAA7", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|179", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|178", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|177", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (59)) }))))));
        org.junit.Assert.assertEquals("AAA8", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|182", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|181", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|180", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (60)) }))))));
        org.junit.Assert.assertEquals("AAA9", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|185", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|184", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|183", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (61)) }))))));
        org.junit.Assert.assertEquals("AAA+", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|188", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|187", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|186", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (62)) }))))));
        org.junit.Assert.assertEquals("AAA/", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTriplets()|191", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|190", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTriplets()|189", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (63)) }))))));
    }

    @org.junit.Test
    public void testTripletsChunked() {
        org.junit.Assert.assertEquals("AAAA\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|2", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|1", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|0", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (0)) }))))));
        org.junit.Assert.assertEquals("AAAB\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|5", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|4", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|3", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (1)) }))))));
        org.junit.Assert.assertEquals("AAAC\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|8", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|7", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|6", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (2)) }))))));
        org.junit.Assert.assertEquals("AAAD\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|11", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|10", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|9", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (3)) }))))));
        org.junit.Assert.assertEquals("AAAE\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|14", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|13", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|12", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (4)) }))))));
        org.junit.Assert.assertEquals("AAAF\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|17", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|16", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|15", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (5)) }))))));
        org.junit.Assert.assertEquals("AAAG\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|20", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|19", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|18", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (6)) }))))));
        org.junit.Assert.assertEquals("AAAH\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|23", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|22", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|21", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (7)) }))))));
        org.junit.Assert.assertEquals("AAAI\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|26", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|25", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|24", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (8)) }))))));
        org.junit.Assert.assertEquals("AAAJ\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|29", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|28", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|27", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (9)) }))))));
        org.junit.Assert.assertEquals("AAAK\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|32", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|31", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|30", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (10)) }))))));
        org.junit.Assert.assertEquals("AAAL\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|35", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|34", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|33", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (11)) }))))));
        org.junit.Assert.assertEquals("AAAM\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|38", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|37", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|36", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (12)) }))))));
        org.junit.Assert.assertEquals("AAAN\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|41", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|40", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|39", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (13)) }))))));
        org.junit.Assert.assertEquals("AAAO\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|44", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|43", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|42", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (14)) }))))));
        org.junit.Assert.assertEquals("AAAP\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|47", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|46", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|45", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (15)) }))))));
        org.junit.Assert.assertEquals("AAAQ\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|50", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|49", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|48", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (16)) }))))));
        org.junit.Assert.assertEquals("AAAR\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|53", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|52", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|51", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (17)) }))))));
        org.junit.Assert.assertEquals("AAAS\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|56", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|55", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|54", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (18)) }))))));
        org.junit.Assert.assertEquals("AAAT\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|59", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|58", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|57", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (19)) }))))));
        org.junit.Assert.assertEquals("AAAU\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|62", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|61", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|60", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (20)) }))))));
        org.junit.Assert.assertEquals("AAAV\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|65", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|64", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|63", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (21)) }))))));
        org.junit.Assert.assertEquals("AAAW\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|68", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|67", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|66", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (22)) }))))));
        org.junit.Assert.assertEquals("AAAX\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|71", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|70", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|69", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (23)) }))))));
        org.junit.Assert.assertEquals("AAAY\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|74", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|73", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|72", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (24)) }))))));
        org.junit.Assert.assertEquals("AAAZ\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|77", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|76", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|75", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (25)) }))))));
        org.junit.Assert.assertEquals("AAAa\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|80", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|79", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|78", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (26)) }))))));
        org.junit.Assert.assertEquals("AAAb\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|83", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|82", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|81", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (27)) }))))));
        org.junit.Assert.assertEquals("AAAc\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|86", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|85", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|84", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (28)) }))))));
        org.junit.Assert.assertEquals("AAAd\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|89", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|88", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|87", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (29)) }))))));
        org.junit.Assert.assertEquals("AAAe\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|92", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|91", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|90", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (30)) }))))));
        org.junit.Assert.assertEquals("AAAf\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|95", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|94", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|93", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (31)) }))))));
        org.junit.Assert.assertEquals("AAAg\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|98", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|97", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|96", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (32)) }))))));
        org.junit.Assert.assertEquals("AAAh\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|101", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|100", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|99", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (33)) }))))));
        org.junit.Assert.assertEquals("AAAi\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|104", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|103", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|102", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (34)) }))))));
        org.junit.Assert.assertEquals("AAAj\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|107", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|106", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|105", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (35)) }))))));
        org.junit.Assert.assertEquals("AAAk\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|110", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|109", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|108", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (36)) }))))));
        org.junit.Assert.assertEquals("AAAl\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|113", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|112", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|111", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (37)) }))))));
        org.junit.Assert.assertEquals("AAAm\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|116", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|115", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|114", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (38)) }))))));
        org.junit.Assert.assertEquals("AAAn\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|119", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|118", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|117", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (39)) }))))));
        org.junit.Assert.assertEquals("AAAo\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|122", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|121", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|120", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (40)) }))))));
        org.junit.Assert.assertEquals("AAAp\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|125", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|124", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|123", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (41)) }))))));
        org.junit.Assert.assertEquals("AAAq\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|128", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|127", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|126", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (42)) }))))));
        org.junit.Assert.assertEquals("AAAr\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|131", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|130", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|129", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (43)) }))))));
        org.junit.Assert.assertEquals("AAAs\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|134", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|133", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|132", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (44)) }))))));
        org.junit.Assert.assertEquals("AAAt\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|137", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|136", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|135", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (45)) }))))));
        org.junit.Assert.assertEquals("AAAu\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|140", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|139", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|138", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (46)) }))))));
        org.junit.Assert.assertEquals("AAAv\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|143", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|142", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|141", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (47)) }))))));
        org.junit.Assert.assertEquals("AAAw\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|146", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|145", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|144", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (48)) }))))));
        org.junit.Assert.assertEquals("AAAx\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|149", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|148", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|147", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (49)) }))))));
        org.junit.Assert.assertEquals("AAAy\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|152", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|151", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|150", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (50)) }))))));
        org.junit.Assert.assertEquals("AAAz\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|155", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|154", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|153", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (51)) }))))));
        org.junit.Assert.assertEquals("AAA0\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|158", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|157", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|156", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (52)) }))))));
        org.junit.Assert.assertEquals("AAA1\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|161", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|160", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|159", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (53)) }))))));
        org.junit.Assert.assertEquals("AAA2\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|164", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|163", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|162", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (54)) }))))));
        org.junit.Assert.assertEquals("AAA3\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|167", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|166", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|165", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (55)) }))))));
        org.junit.Assert.assertEquals("AAA4\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|170", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|169", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|168", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (56)) }))))));
        org.junit.Assert.assertEquals("AAA5\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|173", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|172", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|171", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (57)) }))))));
        org.junit.Assert.assertEquals("AAA6\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|176", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|175", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|174", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (58)) }))))));
        org.junit.Assert.assertEquals("AAA7\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|179", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|178", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|177", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (59)) }))))));
        org.junit.Assert.assertEquals("AAA8\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|182", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|181", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|180", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (60)) }))))));
        org.junit.Assert.assertEquals("AAA9\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|185", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|184", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|183", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (61)) }))))));
        org.junit.Assert.assertEquals("AAA+\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|188", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|187", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|186", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (62)) }))))));
        org.junit.Assert.assertEquals("AAA/\r\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|191", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|190", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64Chunked(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testTripletsChunked()|189", byte[].class, new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (63)) }))))));
    }

    /**
     * Tests url-safe Base64 against random data, sizes 0 to 150.
     */
    @org.junit.Test
    public void testUrlSafe() {
        // test random data of sizes 0 thru 150
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|0", i)) <= 150; i++) {
            final byte[][] randomData = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|2", byte[][].class, org.apache.commons.codec.binary.Base64TestData.randomData(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|1", i), true));
            final byte[] encoded = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|4", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|3", byte[][].class, randomData)[1]);
            final byte[] decoded = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|6", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|5", byte[][].class, randomData)[0]);
            final byte[] result = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|8", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|7", byte[].class, encoded)));
            org.junit.Assert.assertTrue(("url-safe i=" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|9", i))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|12", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|10", byte[].class, decoded), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|11", byte[].class, result))));
            org.junit.Assert.assertFalse((("url-safe i=" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|13", i))) + " no '='"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|15", org.apache.commons.codec.binary.Base64TestData.bytesContain(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|14", byte[].class, encoded), ((byte) ('=')))));
            org.junit.Assert.assertFalse((("url-safe i=" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|16", i))) + " no \'\\\'"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|18", org.apache.commons.codec.binary.Base64TestData.bytesContain(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|17", byte[].class, encoded), ((byte) ('\\')))));
            org.junit.Assert.assertFalse((("url-safe i=" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|19", i))) + " no '+'"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|21", org.apache.commons.codec.binary.Base64TestData.bytesContain(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUrlSafe()|20", byte[].class, encoded), ((byte) ('+')))));
        }
    }

    /**
     * Base64 encoding of UUID's is a common use-case, especially in URL-SAFE
     * mode. This test case ends up being the "URL-SAFE" JUnit's.
     *
     * @throws DecoderException
     * 		if Hex.decode() fails - a serious problem since Hex comes
     * 		from our own commons-codec!
     */
    @org.junit.Test
    public void testUUID() throws org.apache.commons.codec.DecoderException {
        // The 4 UUID's below contains mixtures of + and / to help us test the
        // URL-SAFE encoding mode.
        final byte[][] ids = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|0", byte[][].class, new byte[4][]);
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|2", byte[].class, // ids[0] was chosen so that it encodes with at least one +.
        (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|1", byte[][].class, ids)[0] = org.apache.commons.codec.binary.Hex.decodeHex("94ed8d0319e4493399560fb67404d370")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|4", byte[].class, // ids[1] was chosen so that it encodes with both / and +.
        (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|3", byte[][].class, ids)[1] = org.apache.commons.codec.binary.Hex.decodeHex("2bf7cc2701fe4397b49ebeed5acc7090")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|6", byte[].class, // ids[2] was chosen so that it encodes with at least one /.
        (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|5", byte[][].class, ids)[2] = org.apache.commons.codec.binary.Hex.decodeHex("64be154b6ffa40258d1a01288e7c31ca")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|8", byte[].class, // ids[3] was chosen so that it encodes with both / and +, with /
        // right at the beginning.
        (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|7", byte[][].class, ids)[3] = org.apache.commons.codec.binary.Hex.decodeHex("ff7f8fc01cdb471a8c8b5a9306183fe8")));
        final byte[][] standard = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|9", byte[][].class, new byte[4][]);
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|11", byte[].class, (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|10", byte[][].class, standard)[0] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("lO2NAxnkSTOZVg+2dATTcA==")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|13", byte[].class, (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|12", byte[][].class, standard)[1] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("K/fMJwH+Q5e0nr7tWsxwkA==")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|15", byte[].class, (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|14", byte[][].class, standard)[2] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("ZL4VS2/6QCWNGgEojnwxyg==")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|17", byte[].class, (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|16", byte[][].class, standard)[3] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("/3+PwBzbRxqMi1qTBhg/6A==")));
        final byte[][] urlSafe1 = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|18", byte[][].class, new byte[4][]);
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|20", byte[].class, // regular padding (two '==' signs).
        (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|19", byte[][].class, urlSafe1)[0] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("lO2NAxnkSTOZVg-2dATTcA==")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|22", byte[].class, (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|21", byte[][].class, urlSafe1)[1] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("K_fMJwH-Q5e0nr7tWsxwkA==")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|24", byte[].class, (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|23", byte[][].class, urlSafe1)[2] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("ZL4VS2_6QCWNGgEojnwxyg==")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|26", byte[].class, (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|25", byte[][].class, urlSafe1)[3] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("_3-PwBzbRxqMi1qTBhg_6A==")));
        final byte[][] urlSafe2 = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|27", byte[][].class, new byte[4][]);
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|29", byte[].class, // single padding (only one '=' sign).
        (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|28", byte[][].class, urlSafe2)[0] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("lO2NAxnkSTOZVg-2dATTcA=")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|31", byte[].class, (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|30", byte[][].class, urlSafe2)[1] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("K_fMJwH-Q5e0nr7tWsxwkA=")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|33", byte[].class, (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|32", byte[][].class, urlSafe2)[2] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("ZL4VS2_6QCWNGgEojnwxyg=")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|35", byte[].class, (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|34", byte[][].class, urlSafe2)[3] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("_3-PwBzbRxqMi1qTBhg_6A=")));
        final byte[][] urlSafe3 = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|36", byte[][].class, new byte[4][]);
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|38", byte[].class, // no padding (no '=' signs).
        (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|37", byte[][].class, urlSafe3)[0] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("lO2NAxnkSTOZVg-2dATTcA")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|40", byte[].class, (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|39", byte[][].class, urlSafe3)[1] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("K_fMJwH-Q5e0nr7tWsxwkA")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|42", byte[].class, (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|41", byte[][].class, urlSafe3)[2] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("ZL4VS2_6QCWNGgEojnwxyg")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|44", byte[].class, (eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|43", byte[][].class, urlSafe3)[3] = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("_3-PwBzbRxqMi1qTBhg_6A")));
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|45", i)) < 4; i++) {
            final byte[] encodedStandard = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|49", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|48", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|46", byte[][].class, ids)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|47", i)])));
            final byte[] encodedUrlSafe = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|53", byte[].class, org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|52", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|50", byte[][].class, ids)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|51", i)])));
            final byte[] decodedStandard = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|57", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|56", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|54", byte[][].class, standard)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|55", i)])));
            final byte[] decodedUrlSafe1 = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|61", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|60", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|58", byte[][].class, urlSafe1)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|59", i)])));
            final byte[] decodedUrlSafe2 = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|65", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|64", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|62", byte[][].class, urlSafe2)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|63", i)])));
            final byte[] decodedUrlSafe3 = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|69", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|68", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|66", byte[][].class, urlSafe3)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|67", i)])));
            // Very important debugging output should anyone
            // ever need to delve closely into this stuff.
            // {
            // System.out.println("reference: [" + Hex.encodeHexString(ids[i]) + "]");
            // System.out.println("standard:  [" + Hex.encodeHexString(decodedStandard) + "] From: ["
            // + StringUtils.newStringUtf8(standard[i]) + "]");
            // System.out.println("safe1:     [" + Hex.encodeHexString(decodedUrlSafe1) + "] From: ["
            // + StringUtils.newStringUtf8(urlSafe1[i]) + "]");
            // System.out.println("safe2:     [" + Hex.encodeHexString(decodedUrlSafe2) + "] From: ["
            // + StringUtils.newStringUtf8(urlSafe2[i]) + "]");
            // System.out.println("safe3:     [" + Hex.encodeHexString(decodedUrlSafe3) + "] From: ["
            // + StringUtils.newStringUtf8(urlSafe3[i]) + "]");
            // }
            org.junit.Assert.assertTrue("standard encode uuid", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|74", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|70", byte[].class, encodedStandard), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|73", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|71", byte[][].class, standard)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|72", i)]))));
            org.junit.Assert.assertTrue("url-safe encode uuid", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|79", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|75", byte[].class, encodedUrlSafe), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|78", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|76", byte[][].class, urlSafe3)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|77", i)]))));
            org.junit.Assert.assertTrue("standard decode uuid", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|84", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|80", byte[].class, decodedStandard), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|83", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|81", byte[][].class, ids)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|82", i)]))));
            org.junit.Assert.assertTrue("url-safe1 decode uuid", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|89", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|85", byte[].class, decodedUrlSafe1), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|88", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|86", byte[][].class, ids)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|87", i)]))));
            org.junit.Assert.assertTrue("url-safe2 decode uuid", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|94", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|90", byte[].class, decodedUrlSafe2), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|93", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|91", byte[][].class, ids)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|92", i)]))));
            org.junit.Assert.assertTrue("url-safe3 decode uuid", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|99", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|95", byte[].class, decodedUrlSafe3), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|98", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base64Test|testUUID()|96", byte[][].class, ids)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testUUID()|97", i)]))));
        }
    }

    @org.junit.Test
    public void testByteToStringVariations() throws org.apache.commons.codec.DecoderException {
        final org.apache.commons.codec.binary.Base64 base64 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|0", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64(0));
        final byte[] b1 = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|1", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8("Hello World"));
        final byte[] b2 = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|2", byte[].class, new byte[0]);
        final byte[] b3 = null;
        final byte[] b4 = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|3", byte[].class, org.apache.commons.codec.binary.Hex.decodeHex("2bf7cc2701fe4397b49ebeed5acc7090"));// for

        // url-safe
        // tests
        org.junit.Assert.assertEquals("byteToString Hello World", "SGVsbG8gV29ybGQ=", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|4", org.apache.commons.codec.binary.Base64.class, base64).encodeToString(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|5", byte[].class, b1))));
        org.junit.Assert.assertEquals("byteToString static Hello World", "SGVsbG8gV29ybGQ=", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|8", org.apache.commons.codec.binary.Base64.encodeBase64String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|7", byte[].class, b1))));
        org.junit.Assert.assertEquals("byteToString \"\"", "", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|9", org.apache.commons.codec.binary.Base64.class, base64).encodeToString(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|10", byte[].class, b2))));
        org.junit.Assert.assertEquals("byteToString static \"\"", "", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|13", org.apache.commons.codec.binary.Base64.encodeBase64String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|12", byte[].class, b2))));
        org.junit.Assert.assertEquals("byteToString null", null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|14", org.apache.commons.codec.binary.Base64.class, base64).encodeToString(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|15", byte[].class, b3))));
        org.junit.Assert.assertEquals("byteToString static null", null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|18", org.apache.commons.codec.binary.Base64.encodeBase64String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|17", byte[].class, b3))));
        org.junit.Assert.assertEquals("byteToString UUID", "K/fMJwH+Q5e0nr7tWsxwkA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|19", org.apache.commons.codec.binary.Base64.class, base64).encodeToString(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|20", byte[].class, b4))));
        org.junit.Assert.assertEquals("byteToString static UUID", "K/fMJwH+Q5e0nr7tWsxwkA==", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|23", org.apache.commons.codec.binary.Base64.encodeBase64String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|22", byte[].class, b4))));
        org.junit.Assert.assertEquals("byteToString static-url-safe UUID", "K_fMJwH-Q5e0nr7tWsxwkA", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|25", org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testByteToStringVariations()|24", byte[].class, b4))));
    }

    @org.junit.Test
    public void testStringToByteVariations() throws org.apache.commons.codec.DecoderException {
        final org.apache.commons.codec.binary.Base64 base64 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|0", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64());
        final java.lang.String s1 = "SGVsbG8gV29ybGQ=\r\n";
        final java.lang.String s2 = "";
        final java.lang.String s3 = null;
        final java.lang.String s4a = "K/fMJwH+Q5e0nr7tWsxwkA==\r\n";
        final java.lang.String s4b = "K_fMJwH-Q5e0nr7tWsxwkA";
        final byte[] b4 = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|1", byte[].class, org.apache.commons.codec.binary.Hex.decodeHex("2bf7cc2701fe4397b49ebeed5acc7090"));// for

        // url-safe
        // tests
        org.junit.Assert.assertEquals("StringToByte Hello World", "Hello World", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|5", org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|4", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|2", org.apache.commons.codec.binary.Base64.class, base64).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|3", s1))))));
        org.junit.Assert.assertEquals("StringToByte Hello World", "Hello World", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|9", org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|8", byte[].class, ((byte[]) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|6", org.apache.commons.codec.binary.Base64.class, base64).decode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|7", java.lang.Object.class, ((java.lang.Object) (s1))))))))));
        org.junit.Assert.assertEquals("StringToByte static Hello World", "Hello World", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|12", org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|11", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|10", s1))))));
        org.junit.Assert.assertEquals("StringToByte \"\"", "", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|16", org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|15", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|13", org.apache.commons.codec.binary.Base64.class, base64).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|14", s2))))));
        org.junit.Assert.assertEquals("StringToByte static \"\"", "", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|19", org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|18", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|17", s2))))));
        org.junit.Assert.assertEquals("StringToByte null", null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|23", org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|22", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|20", org.apache.commons.codec.binary.Base64.class, base64).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|21", s3))))));
        org.junit.Assert.assertEquals("StringToByte static null", null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|26", org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|25", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|24", s3))))));
        org.junit.Assert.assertTrue("StringToByte UUID", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|31", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|27", byte[].class, b4), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|30", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|28", org.apache.commons.codec.binary.Base64.class, base64).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|29", s4b))))));
        org.junit.Assert.assertTrue("StringToByte static UUID", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|35", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|32", byte[].class, b4), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|34", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|33", s4a))))));
        org.junit.Assert.assertTrue("StringToByte static-url-safe UUID", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|39", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|36", byte[].class, b4), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|38", byte[].class, org.apache.commons.codec.binary.Base64.decodeBase64(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testStringToByteVariations()|37", s4b))))));
    }

    private java.lang.String toString(final byte[] data) {
        final java.lang.StringBuilder buf = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|toString(byte[])|0", java.lang.StringBuilder.class, new java.lang.StringBuilder());
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|toString(byte[])|1", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|toString(byte[])|3", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|toString(byte[])|2", byte[].class, data).length)); i++) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|toString(byte[])|8", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|toString(byte[])|4", java.lang.StringBuilder.class, buf).append(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|toString(byte[])|7", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|toString(byte[])|5", byte[].class, data)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|toString(byte[])|6", i)])));
            if ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|toString(byte[])|9", i)) != ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|toString(byte[])|11", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|toString(byte[])|10", byte[].class, data).length)) - 1)) {
                eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|toString(byte[])|13", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|toString(byte[])|12", java.lang.StringBuilder.class, buf).append(","));
            }
        }
        return eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|toString(byte[])|15", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.binary.Base64Test|toString(byte[])|14", java.lang.StringBuilder.class, buf).toString());
    }

    /**
     * Tests a lineSeparator much bigger than DEFAULT_BUFFER_SIZE.
     *
     * @see "<a href='http://mail-archives.apache.org/mod_mbox/commons-dev/201202.mbox/%3C4F3C85D7.5060706@snafu.de%3E'>dev@commons.apache.org</a>"
     */
    @org.junit.Test
    @org.junit.Ignore
    public void testHugeLineSeparator() {
        final int BaseNCodec_DEFAULT_BUFFER_SIZE = 8192;
        final int Base64_BYTES_PER_ENCODED_BLOCK = 4;
        final byte[] baLineSeparator = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testHugeLineSeparator()|1", byte[].class, new byte[((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testHugeLineSeparator()|0", BaseNCodec_DEFAULT_BUFFER_SIZE)) * 4) - 3]);
        final org.apache.commons.codec.binary.Base64 b64 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testHugeLineSeparator()|4", org.apache.commons.codec.binary.Base64.class, new org.apache.commons.codec.binary.Base64(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testHugeLineSeparator()|2", Base64_BYTES_PER_ENCODED_BLOCK), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testHugeLineSeparator()|3", byte[].class, baLineSeparator)));
        final java.lang.String strOriginal = "Hello World";
        final java.lang.String strDecoded = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testHugeLineSeparator()|11", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testHugeLineSeparator()|10", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testHugeLineSeparator()|5", org.apache.commons.codec.binary.Base64.class, b64).decode(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testHugeLineSeparator()|9", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base64>observeState("org.apache.commons.codec.binary.Base64Test|testHugeLineSeparator()|6", org.apache.commons.codec.binary.Base64.class, b64).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base64Test|testHugeLineSeparator()|8", byte[].class, org.apache.commons.codec.binary.StringUtils.getBytesUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testHugeLineSeparator()|7", strOriginal)))))))));
        org.junit.Assert.assertEquals("testDEFAULT_BUFFER_SIZE", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testHugeLineSeparator()|12", strOriginal), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base64Test|testHugeLineSeparator()|13", strDecoded));
    }
}

