/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.codec.language;


/**
 * Tests {@link DoubleMetaphone}.
 *
 * <p>Keep this file in UTF-8 encoding for proper Javadoc processing.</p>
 *
 * @see "http://www.cuj.com/documents/s=8038/cuj0006philips/"
 * @version $Id$
 */
public class DoubleMetaphoneTest extends org.apache.commons.codec.StringEncoderAbstractTest<org.apache.commons.codec.language.DoubleMetaphone> {
    /**
     * Test data from http://aspell.net/test/orig/batch0.tab.
     *
     * "Copyright (C) 2002 Kevin Atkinson (kevina@gnu.org). Verbatim copying
     * and distribution of this entire article is permitted in any medium,
     * provided this notice is preserved."
     *
     * Massaged the test data in the array below.
     */
    private static final java.lang.String[][] FIXTURE = new java.lang.String[][]{ new java.lang.String[]{ "Accosinly", "Occasionally" }, new java.lang.String[]{ "Ciculer", "Circler" }, new java.lang.String[]{ "Circue", "Circle" }, new java.lang.String[]{ "Maddness", "Madness" }, new java.lang.String[]{ "Occusionaly", "Occasionally" }, new java.lang.String[]{ "Steffen", "Stephen" }, new java.lang.String[]{ "Thw", "The" }, new java.lang.String[]{ "Unformanlly", "Unfortunately" }, new java.lang.String[]{ "Unfortally", "Unfortunately" }, new java.lang.String[]{ "abilitey", "ability" }, new java.lang.String[]{ "abouy", "about" }, new java.lang.String[]{ "absorbtion", "absorption" }, new java.lang.String[]{ "accidently", "accidentally" }, new java.lang.String[]{ "accomodate", "accommodate" }, new java.lang.String[]{ "acommadate", "accommodate" }, new java.lang.String[]{ "acord", "accord" }, new java.lang.String[]{ "adultry", "adultery" }, new java.lang.String[]{ "aggresive", "aggressive" }, new java.lang.String[]{ "alchohol", "alcohol" }, new java.lang.String[]{ "alchoholic", "alcoholic" }, new java.lang.String[]{ "allieve", "alive" }, new java.lang.String[]{ "alot", "a lot" }, new java.lang.String[]{ "alright", "all right" }, new java.lang.String[]{ "amature", "amateur" }, new java.lang.String[]{ "ambivilant", "ambivalent" }, new java.lang.String[]{ "amification", "amplification" }, new java.lang.String[]{ "amourfous", "amorphous" }, new java.lang.String[]{ "annoint", "anoint" }, new java.lang.String[]{ "annonsment", "announcement" }, new java.lang.String[]{ "annoyting", "anting" }, new java.lang.String[]{ "annuncio", "announce" }, new java.lang.String[]{ "anonomy", "anatomy" }, new java.lang.String[]{ "anotomy", "anatomy" }, new java.lang.String[]{ "antidesestablishmentarianism", "antidisestablishmentarianism" }, new java.lang.String[]{ "antidisestablishmentarism", "antidisestablishmentarianism" }, new java.lang.String[]{ "anynomous", "anonymous" }, new java.lang.String[]{ "appelet", "applet" }, new java.lang.String[]{ "appreceiated", "appreciated" }, new java.lang.String[]{ "appresteate", "appreciate" }, new java.lang.String[]{ "aquantance", "acquaintance" }, new java.lang.String[]{ "aratictature", "architecture" }, new java.lang.String[]{ "archeype", "archetype" }, new java.lang.String[]{ "aricticure", "architecture" }, new java.lang.String[]{ "artic", "arctic" }, new java.lang.String[]{ "asentote", "asymptote" }, new java.lang.String[]{ "ast", "at" }, new java.lang.String[]{ "asterick", "asterisk" }, new java.lang.String[]{ "asymetric", "asymmetric" }, new java.lang.String[]{ "atentively", "attentively" }, new java.lang.String[]{ "autoamlly", "automatically" }, new java.lang.String[]{ "bankrot", "bankrupt" }, new java.lang.String[]{ "basicly", "basically" }, new java.lang.String[]{ "batallion", "battalion" }, new java.lang.String[]{ "bbrose", "browse" }, new java.lang.String[]{ "beauro", "bureau" }, new java.lang.String[]{ "beaurocracy", "bureaucracy" }, new java.lang.String[]{ "beggining", "beginning" }, new java.lang.String[]{ "beging", "beginning" }, new java.lang.String[]{ "behaviour", "behavior" }, new java.lang.String[]{ "beleive", "believe" }, new java.lang.String[]{ "belive", "believe" }, new java.lang.String[]{ "benidifs", "benefits" }, new java.lang.String[]{ "bigginging", "beginning" }, new java.lang.String[]{ "blait", "bleat" }, new java.lang.String[]{ "bouyant", "buoyant" }, new java.lang.String[]{ "boygot", "boycott" }, new java.lang.String[]{ "brocolli", "broccoli" }, new java.lang.String[]{ "buch", "bush" }, new java.lang.String[]{ "buder", "butter" }, new java.lang.String[]{ "budr", "butter" }, new java.lang.String[]{ "budter", "butter" }, new java.lang.String[]{ "buracracy", "bureaucracy" }, new java.lang.String[]{ "burracracy", "bureaucracy" }, new java.lang.String[]{ "buton", "button" }, new java.lang.String[]{ "byby", "by by" }, new java.lang.String[]{ "cauler", "caller" }, new java.lang.String[]{ "ceasar", "caesar" }, new java.lang.String[]{ "cemetary", "cemetery" }, new java.lang.String[]{ "changeing", "changing" }, new java.lang.String[]{ "cheet", "cheat" }, new java.lang.String[]{ "cicle", "circle" }, new java.lang.String[]{ "cimplicity", "simplicity" }, new java.lang.String[]{ "circumstaces", "circumstances" }, new java.lang.String[]{ "clob", "club" }, new java.lang.String[]{ "coaln", "colon" }, new java.lang.String[]{ "cocamena", "cockamamie" }, new java.lang.String[]{ "colleaque", "colleague" }, new java.lang.String[]{ "colloquilism", "colloquialism" }, new java.lang.String[]{ "columne", "column" }, new java.lang.String[]{ "comiler", "compiler" }, new java.lang.String[]{ "comitmment", "commitment" }, new java.lang.String[]{ "comitte", "committee" }, new java.lang.String[]{ "comittmen", "commitment" }, new java.lang.String[]{ "comittmend", "commitment" }, new java.lang.String[]{ "commerciasl", "commercials" }, new java.lang.String[]{ "commited", "committed" }, new java.lang.String[]{ "commitee", "committee" }, new java.lang.String[]{ "companys", "companies" }, new java.lang.String[]{ "compicated", "complicated" }, new java.lang.String[]{ "comupter", "computer" }, new java.lang.String[]{ "concensus", "consensus" }, new java.lang.String[]{ "confusionism", "confucianism" }, new java.lang.String[]{ "congradulations", "congratulations" }, new java.lang.String[]{ "conibation", "contribution" }, new java.lang.String[]{ "consident", "consistent" }, new java.lang.String[]{ "consident", "consonant" }, new java.lang.String[]{ "contast", "constant" }, new java.lang.String[]{ "contastant", "constant" }, new java.lang.String[]{ "contunie", "continue" }, new java.lang.String[]{ "cooly", "coolly" }, new java.lang.String[]{ "copping", "coping" }, new java.lang.String[]{ "cosmoplyton", "cosmopolitan" }, new java.lang.String[]{ "courst", "court" }, new java.lang.String[]{ "crasy", "crazy" }, new java.lang.String[]{ "cravets", "caveats" }, new java.lang.String[]{ "credetability", "credibility" }, new java.lang.String[]{ "criqitue", "critique" }, new java.lang.String[]{ "croke", "croak" }, new java.lang.String[]{ "crucifiction", "crucifixion" }, new java.lang.String[]{ "crusifed", "crucified" }, new java.lang.String[]{ "ctitique", "critique" }, new java.lang.String[]{ "cumba", "combo" }, new java.lang.String[]{ "custamisation", "customization" }, new java.lang.String[]{ "dag", "dog" }, new java.lang.String[]{ "daly", "daily" }, new java.lang.String[]{ "danguages", "dangerous" }, new java.lang.String[]{ "deaft", "draft" }, new java.lang.String[]{ "defence", "defense" }, new java.lang.String[]{ "defenly", "defiantly" }, new java.lang.String[]{ "definate", "definite" }, new java.lang.String[]{ "definately", "definitely" }, new java.lang.String[]{ "dependeble", "dependable" }, new java.lang.String[]{ "descrption", "description" }, new java.lang.String[]{ "descrptn", "description" }, new java.lang.String[]{ "desparate", "desperate" }, new java.lang.String[]{ "dessicate", "desiccate" }, new java.lang.String[]{ "destint", "distant" }, new java.lang.String[]{ "develepment", "developments" }, new java.lang.String[]{ "developement", "development" }, new java.lang.String[]{ "develpond", "development" }, new java.lang.String[]{ "devulge", "divulge" }, new java.lang.String[]{ "diagree", "disagree" }, new java.lang.String[]{ "dieties", "deities" }, new java.lang.String[]{ "dinasaur", "dinosaur" }, new java.lang.String[]{ "dinasour", "dinosaur" }, new java.lang.String[]{ "direcyly", "directly" }, new java.lang.String[]{ "discuess", "discuss" }, new java.lang.String[]{ "disect", "dissect" }, new java.lang.String[]{ "disippate", "dissipate" }, new java.lang.String[]{ "disition", "decision" }, new java.lang.String[]{ "dispair", "despair" }, new java.lang.String[]{ "disssicion", "discussion" }, new java.lang.String[]{ "distarct", "distract" }, new java.lang.String[]{ "distart", "distort" }, new java.lang.String[]{ "distroy", "destroy" }, new java.lang.String[]{ "documtations", "documentation" }, new java.lang.String[]{ "doenload", "download" }, new java.lang.String[]{ "dongle", "dangle" }, new java.lang.String[]{ "doog", "dog" }, new java.lang.String[]{ "dramaticly", "dramatically" }, new java.lang.String[]{ "drunkeness", "drunkenness" }, new java.lang.String[]{ "ductioneery", "dictionary" }, new java.lang.String[]{ "dur", "due" }, new java.lang.String[]{ "duren", "during" }, new java.lang.String[]{ "dymatic", "dynamic" }, new java.lang.String[]{ "dynaic", "dynamic" }, new java.lang.String[]{ "ecstacy", "ecstasy" }, new java.lang.String[]{ "efficat", "efficient" }, new java.lang.String[]{ "efficity", "efficacy" }, new java.lang.String[]{ "effots", "efforts" }, new java.lang.String[]{ "egsistence", "existence" }, new java.lang.String[]{ "eitiology", "etiology" }, new java.lang.String[]{ "elagent", "elegant" }, new java.lang.String[]{ "elligit", "elegant" }, new java.lang.String[]{ "embarass", "embarrass" }, new java.lang.String[]{ "embarassment", "embarrassment" }, new java.lang.String[]{ "embaress", "embarrass" }, new java.lang.String[]{ "encapsualtion", "encapsulation" }, new java.lang.String[]{ "encyclapidia", "encyclopedia" }, new java.lang.String[]{ "encyclopia", "encyclopedia" }, new java.lang.String[]{ "engins", "engine" }, new java.lang.String[]{ "enhence", "enhance" }, new java.lang.String[]{ "enligtment", "Enlightenment" }, new java.lang.String[]{ "ennuui", "ennui" }, new java.lang.String[]{ "enought", "enough" }, new java.lang.String[]{ "enventions", "inventions" }, new java.lang.String[]{ "envireminakl", "environmental" }, new java.lang.String[]{ "enviroment", "environment" }, new java.lang.String[]{ "epitomy", "epitome" }, new java.lang.String[]{ "equire", "acquire" }, new java.lang.String[]{ "errara", "error" }, new java.lang.String[]{ "erro", "error" }, new java.lang.String[]{ "evaualtion", "evaluation" }, new java.lang.String[]{ "evething", "everything" }, new java.lang.String[]{ "evtually", "eventually" }, new java.lang.String[]{ "excede", "exceed" }, new java.lang.String[]{ "excercise", "exercise" }, new java.lang.String[]{ "excpt", "except" }, new java.lang.String[]{ "excution", "execution" }, new java.lang.String[]{ "exhileration", "exhilaration" }, new java.lang.String[]{ "existance", "existence" }, new java.lang.String[]{ "expleyly", "explicitly" }, new java.lang.String[]{ "explity", "explicitly" }, new java.lang.String[]{ "expresso", "espresso" }, new java.lang.String[]{ "exspidient", "expedient" }, new java.lang.String[]{ "extions", "extensions" }, new java.lang.String[]{ "factontion", "factorization" }, new java.lang.String[]{ "failer", "failure" }, new java.lang.String[]{ "famdasy", "fantasy" }, new java.lang.String[]{ "faver", "favor" }, new java.lang.String[]{ "faxe", "fax" }, new java.lang.String[]{ "febuary", "february" }, new java.lang.String[]{ "firey", "fiery" }, new java.lang.String[]{ "fistival", "festival" }, new java.lang.String[]{ "flatterring", "flattering" }, new java.lang.String[]{ "fluk", "flux" }, new java.lang.String[]{ "flukse", "flux" }, new java.lang.String[]{ "fone", "phone" }, new java.lang.String[]{ "forsee", "foresee" }, new java.lang.String[]{ "frustartaion", "frustrating" }, new java.lang.String[]{ "fuction", "function" }, new java.lang.String[]{ "funetik", "phonetic" }, new java.lang.String[]{ "futs", "guts" }, new java.lang.String[]{ "gamne", "came" }, new java.lang.String[]{ "gaurd", "guard" }, new java.lang.String[]{ "generly", "generally" }, new java.lang.String[]{ "ghandi", "gandhi" }, new java.lang.String[]{ "goberment", "government" }, new java.lang.String[]{ "gobernement", "government" }, new java.lang.String[]{ "gobernment", "government" }, new java.lang.String[]{ "gotton", "gotten" }, new java.lang.String[]{ "gracefull", "graceful" }, new java.lang.String[]{ "gradualy", "gradually" }, new java.lang.String[]{ "grammer", "grammar" }, new java.lang.String[]{ "hallo", "hello" }, new java.lang.String[]{ "hapily", "happily" }, new java.lang.String[]{ "harrass", "harass" }, new java.lang.String[]{ "havne", "have" }, new java.lang.String[]{ "heellp", "help" }, new java.lang.String[]{ "heighth", "height" }, new java.lang.String[]{ "hellp", "help" }, new java.lang.String[]{ "helo", "hello" }, new java.lang.String[]{ "herlo", "hello" }, new java.lang.String[]{ "hifin", "hyphen" }, new java.lang.String[]{ "hifine", "hyphen" }, new java.lang.String[]{ "higer", "higher" }, new java.lang.String[]{ "hiphine", "hyphen" }, new java.lang.String[]{ "hippie", "hippy" }, new java.lang.String[]{ "hippopotamous", "hippopotamus" }, new java.lang.String[]{ "hlp", "help" }, new java.lang.String[]{ "hourse", "horse" }, new java.lang.String[]{ "houssing", "housing" }, new java.lang.String[]{ "howaver", "however" }, new java.lang.String[]{ "howver", "however" }, new java.lang.String[]{ "humaniti", "humanity" }, new java.lang.String[]{ "hyfin", "hyphen" }, new java.lang.String[]{ "hypotathes", "hypothesis" }, new java.lang.String[]{ "hypotathese", "hypothesis" }, new java.lang.String[]{ "hystrical", "hysterical" }, new java.lang.String[]{ "ident", "indent" }, new java.lang.String[]{ "illegitament", "illegitimate" }, new java.lang.String[]{ "imbed", "embed" }, new java.lang.String[]{ "imediaetly", "immediately" }, new java.lang.String[]{ "imfamy", "infamy" }, new java.lang.String[]{ "immenant", "immanent" }, new java.lang.String[]{ "implemtes", "implements" }, new java.lang.String[]{ "inadvertant", "inadvertent" }, new java.lang.String[]{ "incase", "in case" }, new java.lang.String[]{ "incedious", "insidious" }, new java.lang.String[]{ "incompleet", "incomplete" }, new java.lang.String[]{ "incomplot", "incomplete" }, new java.lang.String[]{ "inconvenant", "inconvenient" }, new java.lang.String[]{ "inconvience", "inconvenience" }, new java.lang.String[]{ "independant", "independent" }, new java.lang.String[]{ "independenent", "independent" }, new java.lang.String[]{ "indepnends", "independent" }, new java.lang.String[]{ "indepth", "in depth" }, new java.lang.String[]{ "indispensible", "indispensable" }, new java.lang.String[]{ "inefficite", "inefficient" }, new java.lang.String[]{ "inerface", "interface" }, new java.lang.String[]{ "infact", "in fact" }, new java.lang.String[]{ "influencial", "influential" }, new java.lang.String[]{ "inital", "initial" }, new java.lang.String[]{ "initinized", "initialized" }, new java.lang.String[]{ "initized", "initialized" }, new java.lang.String[]{ "innoculate", "inoculate" }, new java.lang.String[]{ "insistant", "insistent" }, new java.lang.String[]{ "insistenet", "insistent" }, new java.lang.String[]{ "instulation", "installation" }, new java.lang.String[]{ "intealignt", "intelligent" }, new java.lang.String[]{ "intejilent", "intelligent" }, new java.lang.String[]{ "intelegent", "intelligent" }, new java.lang.String[]{ "intelegnent", "intelligent" }, new java.lang.String[]{ "intelejent", "intelligent" }, new java.lang.String[]{ "inteligent", "intelligent" }, new java.lang.String[]{ "intelignt", "intelligent" }, new java.lang.String[]{ "intellagant", "intelligent" }, new java.lang.String[]{ "intellegent", "intelligent" }, new java.lang.String[]{ "intellegint", "intelligent" }, new java.lang.String[]{ "intellgnt", "intelligent" }, new java.lang.String[]{ "intensionality", "intensionally" }, new java.lang.String[]{ "interate", "iterate" }, new java.lang.String[]{ "internation", "international" }, new java.lang.String[]{ "interpretate", "interpret" }, new java.lang.String[]{ "interpretter", "interpreter" }, new java.lang.String[]{ "intertes", "interested" }, new java.lang.String[]{ "intertesd", "interested" }, new java.lang.String[]{ "invermeantial", "environmental" }, new java.lang.String[]{ "irregardless", "regardless" }, new java.lang.String[]{ "irresistable", "irresistible" }, new java.lang.String[]{ "irritible", "irritable" }, new java.lang.String[]{ "islams", "muslims" }, new java.lang.String[]{ "isotrop", "isotope" }, new java.lang.String[]{ "isreal", "israel" }, new java.lang.String[]{ "johhn", "john" }, new java.lang.String[]{ "judgement", "judgment" }, new java.lang.String[]{ "kippur", "kipper" }, new java.lang.String[]{ "knawing", "knowing" }, new java.lang.String[]{ "latext", "latest" }, new java.lang.String[]{ "leasve", "leave" }, new java.lang.String[]{ "lesure", "leisure" }, new java.lang.String[]{ "liasion", "lesion" }, new java.lang.String[]{ "liason", "liaison" }, new java.lang.String[]{ "libary", "library" }, new java.lang.String[]{ "likly", "likely" }, new java.lang.String[]{ "lilometer", "kilometer" }, new java.lang.String[]{ "liquify", "liquefy" }, new java.lang.String[]{ "lloyer", "layer" }, new java.lang.String[]{ "lossing", "losing" }, new java.lang.String[]{ "luser", "laser" }, new java.lang.String[]{ "maintanence", "maintenance" }, new java.lang.String[]{ "majaerly", "majority" }, new java.lang.String[]{ "majoraly", "majority" }, new java.lang.String[]{ "maks", "masks" }, new java.lang.String[]{ "mandelbrot", "Mandelbrot" }, new java.lang.String[]{ "mant", "want" }, new java.lang.String[]{ "marshall", "marshal" }, new java.lang.String[]{ "maxium", "maximum" }, new java.lang.String[]{ "meory", "memory" }, new java.lang.String[]{ "metter", "better" }, new java.lang.String[]{ "mic", "mike" }, new java.lang.String[]{ "midia", "media" }, new java.lang.String[]{ "millenium", "millennium" }, new java.lang.String[]{ "miniscule", "minuscule" }, new java.lang.String[]{ "minkay", "monkey" }, new java.lang.String[]{ "minum", "minimum" }, new java.lang.String[]{ "mischievious", "mischievous" }, new java.lang.String[]{ "misilous", "miscellaneous" }, new java.lang.String[]{ "momento", "memento" }, new java.lang.String[]{ "monkay", "monkey" }, new java.lang.String[]{ "mosaik", "mosaic" }, new java.lang.String[]{ "mostlikely", "most likely" }, new java.lang.String[]{ "mousr", "mouser" }, new java.lang.String[]{ "mroe", "more" }, new java.lang.String[]{ "neccessary", "necessary" }, new java.lang.String[]{ "necesary", "necessary" }, new java.lang.String[]{ "necesser", "necessary" }, new java.lang.String[]{ "neice", "niece" }, new java.lang.String[]{ "neighbour", "neighbor" }, new java.lang.String[]{ "nemonic", "pneumonic" }, new java.lang.String[]{ "nevade", "Nevada" }, new java.lang.String[]{ "nickleodeon", "nickelodeon" }, new java.lang.String[]{ "nieve", "naive" }, new java.lang.String[]{ "noone", "no one" }, new java.lang.String[]{ "noticably", "noticeably" }, new java.lang.String[]{ "notin", "not in" }, new java.lang.String[]{ "nozled", "nuzzled" }, new java.lang.String[]{ "objectsion", "objects" }, new java.lang.String[]{ "obsfuscate", "obfuscate" }, new java.lang.String[]{ "ocassion", "occasion" }, new java.lang.String[]{ "occuppied", "occupied" }, new java.lang.String[]{ "occurence", "occurrence" }, new java.lang.String[]{ "octagenarian", "octogenarian" }, new java.lang.String[]{ "olf", "old" }, new java.lang.String[]{ "opposim", "opossum" }, new java.lang.String[]{ "organise", "organize" }, new java.lang.String[]{ "organiz", "organize" }, new java.lang.String[]{ "orientate", "orient" }, new java.lang.String[]{ "oscilascope", "oscilloscope" }, new java.lang.String[]{ "oving", "moving" }, new java.lang.String[]{ "paramers", "parameters" }, new java.lang.String[]{ "parametic", "parameter" }, new java.lang.String[]{ "paranets", "parameters" }, new java.lang.String[]{ "partrucal", "particular" }, new java.lang.String[]{ "pataphysical", "metaphysical" }, new java.lang.String[]{ "patten", "pattern" }, new java.lang.String[]{ "permissable", "permissible" }, new java.lang.String[]{ "permition", "permission" }, new java.lang.String[]{ "permmasivie", "permissive" }, new java.lang.String[]{ "perogative", "prerogative" }, new java.lang.String[]{ "persue", "pursue" }, new java.lang.String[]{ "phantasia", "fantasia" }, new java.lang.String[]{ "phenominal", "phenomenal" }, new java.lang.String[]{ "picaresque", "picturesque" }, new java.lang.String[]{ "playwrite", "playwright" }, new java.lang.String[]{ "poeses", "poesies" }, new java.lang.String[]{ "polation", "politician" }, new java.lang.String[]{ "poligamy", "polygamy" }, new java.lang.String[]{ "politict", "politic" }, new java.lang.String[]{ "pollice", "police" }, new java.lang.String[]{ "polypropalene", "polypropylene" }, new java.lang.String[]{ "pompom", "pompon" }, new java.lang.String[]{ "possable", "possible" }, new java.lang.String[]{ "practicle", "practical" }, new java.lang.String[]{ "pragmaticism", "pragmatism" }, new java.lang.String[]{ "preceeding", "preceding" }, new java.lang.String[]{ "precion", "precision" }, new java.lang.String[]{ "precios", "precision" }, new java.lang.String[]{ "preemptory", "peremptory" }, new java.lang.String[]{ "prefices", "prefixes" }, new java.lang.String[]{ "prefixt", "prefixed" }, new java.lang.String[]{ "presbyterian", "Presbyterian" }, new java.lang.String[]{ "presue", "pursue" }, new java.lang.String[]{ "presued", "pursued" }, new java.lang.String[]{ "privielage", "privilege" }, new java.lang.String[]{ "priviledge", "privilege" }, new java.lang.String[]{ "proceedures", "procedures" }, new java.lang.String[]{ "pronensiation", "pronunciation" }, new java.lang.String[]{ "pronisation", "pronunciation" }, new java.lang.String[]{ "pronounciation", "pronunciation" }, new java.lang.String[]{ "properally", "properly" }, new java.lang.String[]{ "proplematic", "problematic" }, new java.lang.String[]{ "protray", "portray" }, new java.lang.String[]{ "pscolgst", "psychologist" }, new java.lang.String[]{ "psicolagest", "psychologist" }, new java.lang.String[]{ "psycolagest", "psychologist" }, new java.lang.String[]{ "quoz", "quiz" }, new java.lang.String[]{ "radious", "radius" }, new java.lang.String[]{ "ramplily", "rampantly" }, new java.lang.String[]{ "reccomend", "recommend" }, new java.lang.String[]{ "reccona", "raccoon" }, new java.lang.String[]{ "recieve", "receive" }, new java.lang.String[]{ "reconise", "recognize" }, new java.lang.String[]{ "rectangeles", "rectangle" }, new java.lang.String[]{ "redign", "redesign" }, new java.lang.String[]{ "reoccurring", "recurring" }, new java.lang.String[]{ "repitition", "repetition" }, new java.lang.String[]{ "replasments", "replacement" }, new java.lang.String[]{ "reposable", "responsible" }, new java.lang.String[]{ "reseblence", "resemblance" }, new java.lang.String[]{ "respct", "respect" }, new java.lang.String[]{ "respecally", "respectfully" }, new java.lang.String[]{ "roon", "room" }, new java.lang.String[]{ "rought", "roughly" }, new java.lang.String[]{ "rsx", "RSX" }, new java.lang.String[]{ "rudemtry", "rudimentary" }, new java.lang.String[]{ "runnung", "running" }, new java.lang.String[]{ "sacreligious", "sacrilegious" }, new java.lang.String[]{ "saftly", "safely" }, new java.lang.String[]{ "salut", "salute" }, new java.lang.String[]{ "satifly", "satisfy" }, new java.lang.String[]{ "scrabdle", "scrabble" }, new java.lang.String[]{ "searcheable", "searchable" }, new java.lang.String[]{ "secion", "section" }, new java.lang.String[]{ "seferal", "several" }, new java.lang.String[]{ "segements", "segments" }, new java.lang.String[]{ "sence", "sense" }, new java.lang.String[]{ "seperate", "separate" }, new java.lang.String[]{ "sherbert", "sherbet" }, new java.lang.String[]{ "sicolagest", "psychologist" }, new java.lang.String[]{ "sieze", "seize" }, new java.lang.String[]{ "simpfilty", "simplicity" }, new java.lang.String[]{ "simplye", "simply" }, new java.lang.String[]{ "singal", "signal" }, new java.lang.String[]{ "sitte", "site" }, new java.lang.String[]{ "situration", "situation" }, new java.lang.String[]{ "slyph", "sylph" }, new java.lang.String[]{ "smil", "smile" }, new java.lang.String[]{ "snuck", "sneaked" }, new java.lang.String[]{ "sometmes", "sometimes" }, new java.lang.String[]{ "soonec", "sonic" }, new java.lang.String[]{ "specificialy", "specifically" }, new java.lang.String[]{ "spel", "spell" }, new java.lang.String[]{ "spoak", "spoke" }, new java.lang.String[]{ "sponsered", "sponsored" }, new java.lang.String[]{ "stering", "steering" }, new java.lang.String[]{ "straightjacket", "straitjacket" }, new java.lang.String[]{ "stumach", "stomach" }, new java.lang.String[]{ "stutent", "student" }, new java.lang.String[]{ "styleguide", "style guide" }, new java.lang.String[]{ "subisitions", "substitutions" }, new java.lang.String[]{ "subjecribed", "subscribed" }, new java.lang.String[]{ "subpena", "subpoena" }, new java.lang.String[]{ "substations", "substitutions" }, new java.lang.String[]{ "suger", "sugar" }, new java.lang.String[]{ "supercede", "supersede" }, new java.lang.String[]{ "superfulous", "superfluous" }, new java.lang.String[]{ "susan", "Susan" }, new java.lang.String[]{ "swimwear", "swim wear" }, new java.lang.String[]{ "syncorization", "synchronization" }, new java.lang.String[]{ "taff", "tough" }, new java.lang.String[]{ "taht", "that" }, new java.lang.String[]{ "tattos", "tattoos" }, new java.lang.String[]{ "techniquely", "technically" }, new java.lang.String[]{ "teh", "the" }, new java.lang.String[]{ "tem", "team" }, new java.lang.String[]{ "teo", "two" }, new java.lang.String[]{ "teridical", "theoretical" }, new java.lang.String[]{ "tesst", "test" }, new java.lang.String[]{ "tets", "tests" }, new java.lang.String[]{ "thanot", "than or" }, new java.lang.String[]{ "theirselves", "themselves" }, new java.lang.String[]{ "theridically", "theoretical" }, new java.lang.String[]{ "thredically", "theoretically" }, new java.lang.String[]{ "thruout", "throughout" }, new java.lang.String[]{ "ths", "this" }, new java.lang.String[]{ "titalate", "titillate" }, new java.lang.String[]{ "tobagan", "tobaggon" }, new java.lang.String[]{ "tommorrow", "tomorrow" }, new java.lang.String[]{ "tomorow", "tomorrow" }, new java.lang.String[]{ "tradegy", "tragedy" }, new java.lang.String[]{ "trubbel", "trouble" }, new java.lang.String[]{ "ttest", "test" }, new java.lang.String[]{ "tunnellike", "tunnel like" }, new java.lang.String[]{ "tured", "turned" }, new java.lang.String[]{ "tyrrany", "tyranny" }, new java.lang.String[]{ "unatourral", "unnatural" }, new java.lang.String[]{ "unaturral", "unnatural" }, new java.lang.String[]{ "unconisitional", "unconstitutional" }, new java.lang.String[]{ "unconscience", "unconscious" }, new java.lang.String[]{ "underladder", "under ladder" }, new java.lang.String[]{ "unentelegible", "unintelligible" }, new java.lang.String[]{ "unfortunently", "unfortunately" }, new java.lang.String[]{ "unnaturral", "unnatural" }, new java.lang.String[]{ "upcast", "up cast" }, new java.lang.String[]{ "upmost", "utmost" }, new java.lang.String[]{ "uranisium", "uranium" }, new java.lang.String[]{ "verison", "version" }, new java.lang.String[]{ "vinagarette", "vinaigrette" }, new java.lang.String[]{ "volumptuous", "voluptuous" }, new java.lang.String[]{ "volunteerism", "voluntarism" }, new java.lang.String[]{ "volye", "volley" }, new java.lang.String[]{ "wadting", "wasting" }, new java.lang.String[]{ "waite", "wait" }, new java.lang.String[]{ "wan't", "won't" }, new java.lang.String[]{ "warloord", "warlord" }, new java.lang.String[]{ "whaaat", "what" }, new java.lang.String[]{ "whard", "ward" }, new java.lang.String[]{ "whimp", "wimp" }, new java.lang.String[]{ "wicken", "weaken" }, new java.lang.String[]{ "wierd", "weird" }, new java.lang.String[]{ "wrank", "rank" }, new java.lang.String[]{ "writeen", "righten" }, new java.lang.String[]{ "writting", "writing" }, new java.lang.String[]{ "wundeews", "windows" }, new java.lang.String[]{ "yeild", "yield" }, new java.lang.String[]{ "youe", "your" } };

    /**
     * A subset of FIXTURE generated by this test.
     */
    private static final java.lang.String[][] MATCHES = new java.lang.String[][]{ new java.lang.String[]{ "Accosinly", "Occasionally" }, new java.lang.String[]{ "Maddness", "Madness" }, new java.lang.String[]{ "Occusionaly", "Occasionally" }, new java.lang.String[]{ "Steffen", "Stephen" }, new java.lang.String[]{ "Thw", "The" }, new java.lang.String[]{ "Unformanlly", "Unfortunately" }, new java.lang.String[]{ "Unfortally", "Unfortunately" }, new java.lang.String[]{ "abilitey", "ability" }, new java.lang.String[]{ "absorbtion", "absorption" }, new java.lang.String[]{ "accidently", "accidentally" }, new java.lang.String[]{ "accomodate", "accommodate" }, new java.lang.String[]{ "acommadate", "accommodate" }, new java.lang.String[]{ "acord", "accord" }, new java.lang.String[]{ "adultry", "adultery" }, new java.lang.String[]{ "aggresive", "aggressive" }, new java.lang.String[]{ "alchohol", "alcohol" }, new java.lang.String[]{ "alchoholic", "alcoholic" }, new java.lang.String[]{ "allieve", "alive" }, new java.lang.String[]{ "alot", "a lot" }, new java.lang.String[]{ "alright", "all right" }, new java.lang.String[]{ "amature", "amateur" }, new java.lang.String[]{ "ambivilant", "ambivalent" }, new java.lang.String[]{ "amourfous", "amorphous" }, new java.lang.String[]{ "annoint", "anoint" }, new java.lang.String[]{ "annonsment", "announcement" }, new java.lang.String[]{ "annoyting", "anting" }, new java.lang.String[]{ "annuncio", "announce" }, new java.lang.String[]{ "anotomy", "anatomy" }, new java.lang.String[]{ "antidesestablishmentarianism", "antidisestablishmentarianism" }, new java.lang.String[]{ "antidisestablishmentarism", "antidisestablishmentarianism" }, new java.lang.String[]{ "anynomous", "anonymous" }, new java.lang.String[]{ "appelet", "applet" }, new java.lang.String[]{ "appreceiated", "appreciated" }, new java.lang.String[]{ "appresteate", "appreciate" }, new java.lang.String[]{ "aquantance", "acquaintance" }, new java.lang.String[]{ "aricticure", "architecture" }, new java.lang.String[]{ "asterick", "asterisk" }, new java.lang.String[]{ "asymetric", "asymmetric" }, new java.lang.String[]{ "atentively", "attentively" }, new java.lang.String[]{ "bankrot", "bankrupt" }, new java.lang.String[]{ "basicly", "basically" }, new java.lang.String[]{ "batallion", "battalion" }, new java.lang.String[]{ "bbrose", "browse" }, new java.lang.String[]{ "beauro", "bureau" }, new java.lang.String[]{ "beaurocracy", "bureaucracy" }, new java.lang.String[]{ "beggining", "beginning" }, new java.lang.String[]{ "behaviour", "behavior" }, new java.lang.String[]{ "beleive", "believe" }, new java.lang.String[]{ "belive", "believe" }, new java.lang.String[]{ "blait", "bleat" }, new java.lang.String[]{ "bouyant", "buoyant" }, new java.lang.String[]{ "boygot", "boycott" }, new java.lang.String[]{ "brocolli", "broccoli" }, new java.lang.String[]{ "buder", "butter" }, new java.lang.String[]{ "budr", "butter" }, new java.lang.String[]{ "budter", "butter" }, new java.lang.String[]{ "buracracy", "bureaucracy" }, new java.lang.String[]{ "burracracy", "bureaucracy" }, new java.lang.String[]{ "buton", "button" }, new java.lang.String[]{ "byby", "by by" }, new java.lang.String[]{ "cauler", "caller" }, new java.lang.String[]{ "ceasar", "caesar" }, new java.lang.String[]{ "cemetary", "cemetery" }, new java.lang.String[]{ "changeing", "changing" }, new java.lang.String[]{ "cheet", "cheat" }, new java.lang.String[]{ "cimplicity", "simplicity" }, new java.lang.String[]{ "circumstaces", "circumstances" }, new java.lang.String[]{ "clob", "club" }, new java.lang.String[]{ "coaln", "colon" }, new java.lang.String[]{ "colleaque", "colleague" }, new java.lang.String[]{ "colloquilism", "colloquialism" }, new java.lang.String[]{ "columne", "column" }, new java.lang.String[]{ "comitmment", "commitment" }, new java.lang.String[]{ "comitte", "committee" }, new java.lang.String[]{ "comittmen", "commitment" }, new java.lang.String[]{ "comittmend", "commitment" }, new java.lang.String[]{ "commerciasl", "commercials" }, new java.lang.String[]{ "commited", "committed" }, new java.lang.String[]{ "commitee", "committee" }, new java.lang.String[]{ "companys", "companies" }, new java.lang.String[]{ "comupter", "computer" }, new java.lang.String[]{ "concensus", "consensus" }, new java.lang.String[]{ "confusionism", "confucianism" }, new java.lang.String[]{ "congradulations", "congratulations" }, new java.lang.String[]{ "contunie", "continue" }, new java.lang.String[]{ "cooly", "coolly" }, new java.lang.String[]{ "copping", "coping" }, new java.lang.String[]{ "cosmoplyton", "cosmopolitan" }, new java.lang.String[]{ "crasy", "crazy" }, new java.lang.String[]{ "croke", "croak" }, new java.lang.String[]{ "crucifiction", "crucifixion" }, new java.lang.String[]{ "crusifed", "crucified" }, new java.lang.String[]{ "cumba", "combo" }, new java.lang.String[]{ "custamisation", "customization" }, new java.lang.String[]{ "dag", "dog" }, new java.lang.String[]{ "daly", "daily" }, new java.lang.String[]{ "defence", "defense" }, new java.lang.String[]{ "definate", "definite" }, new java.lang.String[]{ "definately", "definitely" }, new java.lang.String[]{ "dependeble", "dependable" }, new java.lang.String[]{ "descrption", "description" }, new java.lang.String[]{ "descrptn", "description" }, new java.lang.String[]{ "desparate", "desperate" }, new java.lang.String[]{ "dessicate", "desiccate" }, new java.lang.String[]{ "destint", "distant" }, new java.lang.String[]{ "develepment", "developments" }, new java.lang.String[]{ "developement", "development" }, new java.lang.String[]{ "develpond", "development" }, new java.lang.String[]{ "devulge", "divulge" }, new java.lang.String[]{ "dieties", "deities" }, new java.lang.String[]{ "dinasaur", "dinosaur" }, new java.lang.String[]{ "dinasour", "dinosaur" }, new java.lang.String[]{ "discuess", "discuss" }, new java.lang.String[]{ "disect", "dissect" }, new java.lang.String[]{ "disippate", "dissipate" }, new java.lang.String[]{ "disition", "decision" }, new java.lang.String[]{ "dispair", "despair" }, new java.lang.String[]{ "distarct", "distract" }, new java.lang.String[]{ "distart", "distort" }, new java.lang.String[]{ "distroy", "destroy" }, new java.lang.String[]{ "doenload", "download" }, new java.lang.String[]{ "dongle", "dangle" }, new java.lang.String[]{ "doog", "dog" }, new java.lang.String[]{ "dramaticly", "dramatically" }, new java.lang.String[]{ "drunkeness", "drunkenness" }, new java.lang.String[]{ "ductioneery", "dictionary" }, new java.lang.String[]{ "ecstacy", "ecstasy" }, new java.lang.String[]{ "egsistence", "existence" }, new java.lang.String[]{ "eitiology", "etiology" }, new java.lang.String[]{ "elagent", "elegant" }, new java.lang.String[]{ "embarass", "embarrass" }, new java.lang.String[]{ "embarassment", "embarrassment" }, new java.lang.String[]{ "embaress", "embarrass" }, new java.lang.String[]{ "encapsualtion", "encapsulation" }, new java.lang.String[]{ "encyclapidia", "encyclopedia" }, new java.lang.String[]{ "encyclopia", "encyclopedia" }, new java.lang.String[]{ "engins", "engine" }, new java.lang.String[]{ "enhence", "enhance" }, new java.lang.String[]{ "ennuui", "ennui" }, new java.lang.String[]{ "enventions", "inventions" }, new java.lang.String[]{ "envireminakl", "environmental" }, new java.lang.String[]{ "enviroment", "environment" }, new java.lang.String[]{ "epitomy", "epitome" }, new java.lang.String[]{ "equire", "acquire" }, new java.lang.String[]{ "errara", "error" }, new java.lang.String[]{ "evaualtion", "evaluation" }, new java.lang.String[]{ "excede", "exceed" }, new java.lang.String[]{ "excercise", "exercise" }, new java.lang.String[]{ "excpt", "except" }, new java.lang.String[]{ "exhileration", "exhilaration" }, new java.lang.String[]{ "existance", "existence" }, new java.lang.String[]{ "expleyly", "explicitly" }, new java.lang.String[]{ "explity", "explicitly" }, new java.lang.String[]{ "failer", "failure" }, new java.lang.String[]{ "faver", "favor" }, new java.lang.String[]{ "faxe", "fax" }, new java.lang.String[]{ "firey", "fiery" }, new java.lang.String[]{ "fistival", "festival" }, new java.lang.String[]{ "flatterring", "flattering" }, new java.lang.String[]{ "flukse", "flux" }, new java.lang.String[]{ "fone", "phone" }, new java.lang.String[]{ "forsee", "foresee" }, new java.lang.String[]{ "frustartaion", "frustrating" }, new java.lang.String[]{ "funetik", "phonetic" }, new java.lang.String[]{ "gaurd", "guard" }, new java.lang.String[]{ "generly", "generally" }, new java.lang.String[]{ "ghandi", "gandhi" }, new java.lang.String[]{ "gotton", "gotten" }, new java.lang.String[]{ "gracefull", "graceful" }, new java.lang.String[]{ "gradualy", "gradually" }, new java.lang.String[]{ "grammer", "grammar" }, new java.lang.String[]{ "hallo", "hello" }, new java.lang.String[]{ "hapily", "happily" }, new java.lang.String[]{ "harrass", "harass" }, new java.lang.String[]{ "heellp", "help" }, new java.lang.String[]{ "heighth", "height" }, new java.lang.String[]{ "hellp", "help" }, new java.lang.String[]{ "helo", "hello" }, new java.lang.String[]{ "hifin", "hyphen" }, new java.lang.String[]{ "hifine", "hyphen" }, new java.lang.String[]{ "hiphine", "hyphen" }, new java.lang.String[]{ "hippie", "hippy" }, new java.lang.String[]{ "hippopotamous", "hippopotamus" }, new java.lang.String[]{ "hourse", "horse" }, new java.lang.String[]{ "houssing", "housing" }, new java.lang.String[]{ "howaver", "however" }, new java.lang.String[]{ "howver", "however" }, new java.lang.String[]{ "humaniti", "humanity" }, new java.lang.String[]{ "hyfin", "hyphen" }, new java.lang.String[]{ "hystrical", "hysterical" }, new java.lang.String[]{ "illegitament", "illegitimate" }, new java.lang.String[]{ "imbed", "embed" }, new java.lang.String[]{ "imediaetly", "immediately" }, new java.lang.String[]{ "immenant", "immanent" }, new java.lang.String[]{ "implemtes", "implements" }, new java.lang.String[]{ "inadvertant", "inadvertent" }, new java.lang.String[]{ "incase", "in case" }, new java.lang.String[]{ "incedious", "insidious" }, new java.lang.String[]{ "incompleet", "incomplete" }, new java.lang.String[]{ "incomplot", "incomplete" }, new java.lang.String[]{ "inconvenant", "inconvenient" }, new java.lang.String[]{ "inconvience", "inconvenience" }, new java.lang.String[]{ "independant", "independent" }, new java.lang.String[]{ "independenent", "independent" }, new java.lang.String[]{ "indepnends", "independent" }, new java.lang.String[]{ "indepth", "in depth" }, new java.lang.String[]{ "indispensible", "indispensable" }, new java.lang.String[]{ "inefficite", "inefficient" }, new java.lang.String[]{ "infact", "in fact" }, new java.lang.String[]{ "influencial", "influential" }, new java.lang.String[]{ "innoculate", "inoculate" }, new java.lang.String[]{ "insistant", "insistent" }, new java.lang.String[]{ "insistenet", "insistent" }, new java.lang.String[]{ "instulation", "installation" }, new java.lang.String[]{ "intealignt", "intelligent" }, new java.lang.String[]{ "intelegent", "intelligent" }, new java.lang.String[]{ "intelegnent", "intelligent" }, new java.lang.String[]{ "intelejent", "intelligent" }, new java.lang.String[]{ "inteligent", "intelligent" }, new java.lang.String[]{ "intelignt", "intelligent" }, new java.lang.String[]{ "intellagant", "intelligent" }, new java.lang.String[]{ "intellegent", "intelligent" }, new java.lang.String[]{ "intellegint", "intelligent" }, new java.lang.String[]{ "intellgnt", "intelligent" }, new java.lang.String[]{ "intensionality", "intensionally" }, new java.lang.String[]{ "internation", "international" }, new java.lang.String[]{ "interpretate", "interpret" }, new java.lang.String[]{ "interpretter", "interpreter" }, new java.lang.String[]{ "intertes", "interested" }, new java.lang.String[]{ "intertesd", "interested" }, new java.lang.String[]{ "invermeantial", "environmental" }, new java.lang.String[]{ "irresistable", "irresistible" }, new java.lang.String[]{ "irritible", "irritable" }, new java.lang.String[]{ "isreal", "israel" }, new java.lang.String[]{ "johhn", "john" }, new java.lang.String[]{ "kippur", "kipper" }, new java.lang.String[]{ "knawing", "knowing" }, new java.lang.String[]{ "lesure", "leisure" }, new java.lang.String[]{ "liasion", "lesion" }, new java.lang.String[]{ "liason", "liaison" }, new java.lang.String[]{ "likly", "likely" }, new java.lang.String[]{ "liquify", "liquefy" }, new java.lang.String[]{ "lloyer", "layer" }, new java.lang.String[]{ "lossing", "losing" }, new java.lang.String[]{ "luser", "laser" }, new java.lang.String[]{ "maintanence", "maintenance" }, new java.lang.String[]{ "mandelbrot", "Mandelbrot" }, new java.lang.String[]{ "marshall", "marshal" }, new java.lang.String[]{ "maxium", "maximum" }, new java.lang.String[]{ "mic", "mike" }, new java.lang.String[]{ "midia", "media" }, new java.lang.String[]{ "millenium", "millennium" }, new java.lang.String[]{ "miniscule", "minuscule" }, new java.lang.String[]{ "minkay", "monkey" }, new java.lang.String[]{ "mischievious", "mischievous" }, new java.lang.String[]{ "momento", "memento" }, new java.lang.String[]{ "monkay", "monkey" }, new java.lang.String[]{ "mosaik", "mosaic" }, new java.lang.String[]{ "mostlikely", "most likely" }, new java.lang.String[]{ "mousr", "mouser" }, new java.lang.String[]{ "mroe", "more" }, new java.lang.String[]{ "necesary", "necessary" }, new java.lang.String[]{ "necesser", "necessary" }, new java.lang.String[]{ "neice", "niece" }, new java.lang.String[]{ "neighbour", "neighbor" }, new java.lang.String[]{ "nemonic", "pneumonic" }, new java.lang.String[]{ "nevade", "Nevada" }, new java.lang.String[]{ "nickleodeon", "nickelodeon" }, new java.lang.String[]{ "nieve", "naive" }, new java.lang.String[]{ "noone", "no one" }, new java.lang.String[]{ "notin", "not in" }, new java.lang.String[]{ "nozled", "nuzzled" }, new java.lang.String[]{ "objectsion", "objects" }, new java.lang.String[]{ "ocassion", "occasion" }, new java.lang.String[]{ "occuppied", "occupied" }, new java.lang.String[]{ "occurence", "occurrence" }, new java.lang.String[]{ "octagenarian", "octogenarian" }, new java.lang.String[]{ "opposim", "opossum" }, new java.lang.String[]{ "organise", "organize" }, new java.lang.String[]{ "organiz", "organize" }, new java.lang.String[]{ "orientate", "orient" }, new java.lang.String[]{ "oscilascope", "oscilloscope" }, new java.lang.String[]{ "parametic", "parameter" }, new java.lang.String[]{ "permissable", "permissible" }, new java.lang.String[]{ "permmasivie", "permissive" }, new java.lang.String[]{ "persue", "pursue" }, new java.lang.String[]{ "phantasia", "fantasia" }, new java.lang.String[]{ "phenominal", "phenomenal" }, new java.lang.String[]{ "playwrite", "playwright" }, new java.lang.String[]{ "poeses", "poesies" }, new java.lang.String[]{ "poligamy", "polygamy" }, new java.lang.String[]{ "politict", "politic" }, new java.lang.String[]{ "pollice", "police" }, new java.lang.String[]{ "polypropalene", "polypropylene" }, new java.lang.String[]{ "possable", "possible" }, new java.lang.String[]{ "practicle", "practical" }, new java.lang.String[]{ "pragmaticism", "pragmatism" }, new java.lang.String[]{ "preceeding", "preceding" }, new java.lang.String[]{ "precios", "precision" }, new java.lang.String[]{ "preemptory", "peremptory" }, new java.lang.String[]{ "prefixt", "prefixed" }, new java.lang.String[]{ "presbyterian", "Presbyterian" }, new java.lang.String[]{ "presue", "pursue" }, new java.lang.String[]{ "presued", "pursued" }, new java.lang.String[]{ "privielage", "privilege" }, new java.lang.String[]{ "priviledge", "privilege" }, new java.lang.String[]{ "proceedures", "procedures" }, new java.lang.String[]{ "pronensiation", "pronunciation" }, new java.lang.String[]{ "pronounciation", "pronunciation" }, new java.lang.String[]{ "properally", "properly" }, new java.lang.String[]{ "proplematic", "problematic" }, new java.lang.String[]{ "protray", "portray" }, new java.lang.String[]{ "pscolgst", "psychologist" }, new java.lang.String[]{ "psicolagest", "psychologist" }, new java.lang.String[]{ "psycolagest", "psychologist" }, new java.lang.String[]{ "quoz", "quiz" }, new java.lang.String[]{ "radious", "radius" }, new java.lang.String[]{ "reccomend", "recommend" }, new java.lang.String[]{ "reccona", "raccoon" }, new java.lang.String[]{ "recieve", "receive" }, new java.lang.String[]{ "reconise", "recognize" }, new java.lang.String[]{ "rectangeles", "rectangle" }, new java.lang.String[]{ "reoccurring", "recurring" }, new java.lang.String[]{ "repitition", "repetition" }, new java.lang.String[]{ "replasments", "replacement" }, new java.lang.String[]{ "respct", "respect" }, new java.lang.String[]{ "respecally", "respectfully" }, new java.lang.String[]{ "rsx", "RSX" }, new java.lang.String[]{ "runnung", "running" }, new java.lang.String[]{ "sacreligious", "sacrilegious" }, new java.lang.String[]{ "salut", "salute" }, new java.lang.String[]{ "searcheable", "searchable" }, new java.lang.String[]{ "seferal", "several" }, new java.lang.String[]{ "segements", "segments" }, new java.lang.String[]{ "sence", "sense" }, new java.lang.String[]{ "seperate", "separate" }, new java.lang.String[]{ "sicolagest", "psychologist" }, new java.lang.String[]{ "sieze", "seize" }, new java.lang.String[]{ "simplye", "simply" }, new java.lang.String[]{ "sitte", "site" }, new java.lang.String[]{ "slyph", "sylph" }, new java.lang.String[]{ "smil", "smile" }, new java.lang.String[]{ "sometmes", "sometimes" }, new java.lang.String[]{ "soonec", "sonic" }, new java.lang.String[]{ "specificialy", "specifically" }, new java.lang.String[]{ "spel", "spell" }, new java.lang.String[]{ "spoak", "spoke" }, new java.lang.String[]{ "sponsered", "sponsored" }, new java.lang.String[]{ "stering", "steering" }, new java.lang.String[]{ "straightjacket", "straitjacket" }, new java.lang.String[]{ "stumach", "stomach" }, new java.lang.String[]{ "stutent", "student" }, new java.lang.String[]{ "styleguide", "style guide" }, new java.lang.String[]{ "subpena", "subpoena" }, new java.lang.String[]{ "substations", "substitutions" }, new java.lang.String[]{ "supercede", "supersede" }, new java.lang.String[]{ "superfulous", "superfluous" }, new java.lang.String[]{ "susan", "Susan" }, new java.lang.String[]{ "swimwear", "swim wear" }, new java.lang.String[]{ "syncorization", "synchronization" }, new java.lang.String[]{ "taff", "tough" }, new java.lang.String[]{ "taht", "that" }, new java.lang.String[]{ "tattos", "tattoos" }, new java.lang.String[]{ "techniquely", "technically" }, new java.lang.String[]{ "teh", "the" }, new java.lang.String[]{ "tem", "team" }, new java.lang.String[]{ "teo", "two" }, new java.lang.String[]{ "teridical", "theoretical" }, new java.lang.String[]{ "tesst", "test" }, new java.lang.String[]{ "theridically", "theoretical" }, new java.lang.String[]{ "thredically", "theoretically" }, new java.lang.String[]{ "thruout", "throughout" }, new java.lang.String[]{ "ths", "this" }, new java.lang.String[]{ "titalate", "titillate" }, new java.lang.String[]{ "tobagan", "tobaggon" }, new java.lang.String[]{ "tommorrow", "tomorrow" }, new java.lang.String[]{ "tomorow", "tomorrow" }, new java.lang.String[]{ "trubbel", "trouble" }, new java.lang.String[]{ "ttest", "test" }, new java.lang.String[]{ "tyrrany", "tyranny" }, new java.lang.String[]{ "unatourral", "unnatural" }, new java.lang.String[]{ "unaturral", "unnatural" }, new java.lang.String[]{ "unconisitional", "unconstitutional" }, new java.lang.String[]{ "unconscience", "unconscious" }, new java.lang.String[]{ "underladder", "under ladder" }, new java.lang.String[]{ "unentelegible", "unintelligible" }, new java.lang.String[]{ "unfortunently", "unfortunately" }, new java.lang.String[]{ "unnaturral", "unnatural" }, new java.lang.String[]{ "upcast", "up cast" }, new java.lang.String[]{ "verison", "version" }, new java.lang.String[]{ "vinagarette", "vinaigrette" }, new java.lang.String[]{ "volunteerism", "voluntarism" }, new java.lang.String[]{ "volye", "volley" }, new java.lang.String[]{ "waite", "wait" }, new java.lang.String[]{ "wan't", "won't" }, new java.lang.String[]{ "warloord", "warlord" }, new java.lang.String[]{ "whaaat", "what" }, new java.lang.String[]{ "whard", "ward" }, new java.lang.String[]{ "whimp", "wimp" }, new java.lang.String[]{ "wicken", "weaken" }, new java.lang.String[]{ "wierd", "weird" }, new java.lang.String[]{ "wrank", "rank" }, new java.lang.String[]{ "writeen", "righten" }, new java.lang.String[]{ "writting", "writing" }, new java.lang.String[]{ "wundeews", "windows" }, new java.lang.String[]{ "yeild", "yield" } };

    /**
     * Tests encoding APIs in one place.
     */
    private void assertDoubleMetaphone(final java.lang.String expected, final java.lang.String source) {
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|0", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|1", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|2", source))));
        try {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|4", expected), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|7", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|5", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|6", java.lang.Object.class, ((java.lang.Object) (source))))));
        } catch (final org.apache.commons.codec.EncoderException e) {
            org.junit.Assert.fail(("Unexpected expection: " + (eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.EncoderException>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|8", org.apache.commons.codec.EncoderException.class, e))));
        }
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|9", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|10", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).doubleMetaphone(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|11", source))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|13", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|14", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).doubleMetaphone(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphone(java.lang.String,java.lang.String)|15", source), false)));
    }

    /**
     * Tests encoding APIs in one place.
     */
    public void assertDoubleMetaphoneAlt(final java.lang.String expected, final java.lang.String source) {
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphoneAlt(java.lang.String,java.lang.String)|0", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphoneAlt(java.lang.String,java.lang.String)|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphoneAlt(java.lang.String,java.lang.String)|1", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).doubleMetaphone(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|assertDoubleMetaphoneAlt(java.lang.String,java.lang.String)|2", source), true)));
    }

    @java.lang.Override
    protected org.apache.commons.codec.language.DoubleMetaphone createStringEncoder() {
        return eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|createStringEncoder()|0", org.apache.commons.codec.language.DoubleMetaphone.class, new org.apache.commons.codec.language.DoubleMetaphone());
    }

    public void doubleMetaphoneEqualTest(final java.lang.String[][] pairs, final boolean useAlternate) {
        this.validateFixture(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|0", java.lang.String[][].class, pairs));
        for (final java.lang.String[] pair : eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|1", java.lang.String[][].class, pairs)) {
            final java.lang.String name0 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|2", java.lang.String[].class, pair)[0]);
            final java.lang.String name1 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|5", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|4", java.lang.String[].class, pair)[1]);
            final java.lang.String failMsg = ((((("Expected match between " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|6", name0))) + " and ") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|7", name1))) + " (use alternate: ") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|8", useAlternate))) + ")";
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|9", failMsg), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|10", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).isDoubleMetaphoneEqual(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|11", name0), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|12", name1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|13", useAlternate))));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|15", failMsg), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|16", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).isDoubleMetaphoneEqual(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|17", name1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|18", name0), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|19", useAlternate))));
            if (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|21", useAlternate))) {
                org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|22", failMsg), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|23", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).isDoubleMetaphoneEqual(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|24", name0), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|25", name1))));
                org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|27", failMsg), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|31", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|28", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).isDoubleMetaphoneEqual(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|29", name1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneEqualTest(java.lang.String[][],boolean)|30", name0))));
            }
        }
    }

    public void doubleMetaphoneNotEqualTest(final boolean alternate) {
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneNotEqualTest(boolean)|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneNotEqualTest(boolean)|0", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).isDoubleMetaphoneEqual("Brain", "Band", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneNotEqualTest(boolean)|1", alternate))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneNotEqualTest(boolean)|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneNotEqualTest(boolean)|3", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).isDoubleMetaphoneEqual("Band", "Brain", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneNotEqualTest(boolean)|4", alternate))));
        if (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneNotEqualTest(boolean)|6", alternate))) {
            org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneNotEqualTest(boolean)|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneNotEqualTest(boolean)|7", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).isDoubleMetaphoneEqual("Brain", "Band")));
            org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneNotEqualTest(boolean)|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|doubleMetaphoneNotEqualTest(boolean)|9", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).isDoubleMetaphoneEqual("Band", "Brain")));
        }
    }

    @org.junit.Test
    public void testCCedilla() {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testCCedilla()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testCCedilla()|0", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).isDoubleMetaphoneEqual("\u00e7", "S")));// c-cedilla

    }

    @org.junit.Test
    public void testCodec184() throws java.lang.Throwable {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testCodec184()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testCodec184()|0", org.apache.commons.codec.language.DoubleMetaphone.class, new org.apache.commons.codec.language.DoubleMetaphone()).isDoubleMetaphoneEqual("", "", false)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testCodec184()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testCodec184()|2", org.apache.commons.codec.language.DoubleMetaphone.class, new org.apache.commons.codec.language.DoubleMetaphone()).isDoubleMetaphoneEqual("", "", true)));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testCodec184()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testCodec184()|4", org.apache.commons.codec.language.DoubleMetaphone.class, new org.apache.commons.codec.language.DoubleMetaphone()).isDoubleMetaphoneEqual("aa", "", false)));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testCodec184()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testCodec184()|6", org.apache.commons.codec.language.DoubleMetaphone.class, new org.apache.commons.codec.language.DoubleMetaphone()).isDoubleMetaphoneEqual("aa", "", true)));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testCodec184()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testCodec184()|8", org.apache.commons.codec.language.DoubleMetaphone.class, new org.apache.commons.codec.language.DoubleMetaphone()).isDoubleMetaphoneEqual("", "aa", false)));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testCodec184()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testCodec184()|10", org.apache.commons.codec.language.DoubleMetaphone.class, new org.apache.commons.codec.language.DoubleMetaphone()).isDoubleMetaphoneEqual("", "aa", true)));
    }

    @org.junit.Test
    public void testDoubleMetaphone() {
        assertDoubleMetaphone("TSTN", "testing");
        assertDoubleMetaphone("0", "The");
        assertDoubleMetaphone("KK", "quick");
        assertDoubleMetaphone("PRN", "brown");
        assertDoubleMetaphone("FKS", "fox");
        assertDoubleMetaphone("JMPT", "jumped");
        assertDoubleMetaphone("AFR", "over");
        assertDoubleMetaphone("0", "the");
        assertDoubleMetaphone("LS", "lazy");
        assertDoubleMetaphone("TKS", "dogs");
        assertDoubleMetaphone("MKFR", "MacCafferey");
        assertDoubleMetaphone("STFN", "Stephan");
        assertDoubleMetaphone("KSSK", "Kuczewski");
        assertDoubleMetaphone("MKLL", "McClelland");
        assertDoubleMetaphone("SNHS", "san jose");
        assertDoubleMetaphone("SNFP", "xenophobia");
        assertDoubleMetaphoneAlt("TSTN", "testing");
        assertDoubleMetaphoneAlt("T", "The");
        assertDoubleMetaphoneAlt("KK", "quick");
        assertDoubleMetaphoneAlt("PRN", "brown");
        assertDoubleMetaphoneAlt("FKS", "fox");
        assertDoubleMetaphoneAlt("AMPT", "jumped");
        assertDoubleMetaphoneAlt("AFR", "over");
        assertDoubleMetaphoneAlt("T", "the");
        assertDoubleMetaphoneAlt("LS", "lazy");
        assertDoubleMetaphoneAlt("TKS", "dogs");
        assertDoubleMetaphoneAlt("MKFR", "MacCafferey");
        assertDoubleMetaphoneAlt("STFN", "Stephan");
        assertDoubleMetaphoneAlt("KXFS", "Kutchefski");
        assertDoubleMetaphoneAlt("MKLL", "McClelland");
        assertDoubleMetaphoneAlt("SNHS", "san jose");
        assertDoubleMetaphoneAlt("SNFP", "xenophobia");
        assertDoubleMetaphoneAlt("FKR", "Fokker");
        assertDoubleMetaphoneAlt("AK", "Joqqi");
        assertDoubleMetaphoneAlt("HF", "Hovvi");
        assertDoubleMetaphoneAlt("XRN", "Czerny");
    }

    @org.junit.Test
    public void testEmpty() {
        org.junit.Assert.assertEquals(null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testEmpty()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testEmpty()|0", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).doubleMetaphone(null)));
        org.junit.Assert.assertEquals(null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testEmpty()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testEmpty()|2", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).doubleMetaphone("")));
        org.junit.Assert.assertEquals(null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testEmpty()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testEmpty()|4", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).doubleMetaphone(" ")));
        org.junit.Assert.assertEquals(null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testEmpty()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testEmpty()|6", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).doubleMetaphone("\t\n\r ")));
    }

    @org.junit.Test
    public void testIsDoubleMetaphoneEqualBasic() {
        final java.lang.String[][] testFixture = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualBasic()|10", java.lang.String[][].class, new java.lang.String[][]{ eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualBasic()|0", java.lang.String[].class, new java.lang.String[]{ "", "" }), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualBasic()|1", java.lang.String[].class, new java.lang.String[]{ "Case", "case" }), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualBasic()|2", java.lang.String[].class, new java.lang.String[]{ "CASE", "Case" }), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualBasic()|3", java.lang.String[].class, new java.lang.String[]{ "caSe", "cAsE" }), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualBasic()|4", java.lang.String[].class, new java.lang.String[]{ "cookie", "quick" }), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualBasic()|5", java.lang.String[].class, new java.lang.String[]{ "quick", "cookie" }), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualBasic()|6", java.lang.String[].class, new java.lang.String[]{ "Brian", "Bryan" }), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualBasic()|7", java.lang.String[].class, new java.lang.String[]{ "Auto", "Otto" }), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualBasic()|8", java.lang.String[].class, new java.lang.String[]{ "Steven", "Stefan" }), eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualBasic()|9", java.lang.String[].class, new java.lang.String[]{ "Philipowitz", "Filipowicz" }) });
        doubleMetaphoneEqualTest(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualBasic()|11", java.lang.String[][].class, testFixture), false);
        doubleMetaphoneEqualTest(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualBasic()|12", java.lang.String[][].class, testFixture), true);
    }

    /**
     * Example in the original article but failures in this Java impl:
     */
    @org.junit.Test
    public void testIsDoubleMetaphoneEqualExtended1() {
        // String[][] testFixture = new String[][] { { "Smith", "Schmidt" }
        // };
        // doubleMetaphoneEqualTest(testFixture, false);
        // doubleMetaphoneEqualTest(testFixture, true);
    }

    @org.junit.Test
    public void testIsDoubleMetaphoneEqualExtended2() {
        final java.lang.String[][] testFixture = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended2()|1", java.lang.String[][].class, new java.lang.String[][]{ eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended2()|0", java.lang.String[].class, new java.lang.String[]{ "Jablonski", "Yablonsky" }) });
        // doubleMetaphoneEqualTest(testFixture, false);
        doubleMetaphoneEqualTest(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended2()|2", java.lang.String[][].class, testFixture), true);
    }

    /**
     * Used to generate the MATCHES array and test possible matches from the
     * FIXTURE array.
     */
    @org.junit.Test
    public void testIsDoubleMetaphoneEqualExtended3() {
        this.validateFixture(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|0", java.lang.String[][].class, org.apache.commons.codec.language.DoubleMetaphoneTest.FIXTURE));
        final java.lang.StringBuilder failures = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|1", java.lang.StringBuilder.class, new java.lang.StringBuilder());
        final java.lang.StringBuilder matches = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|2", java.lang.StringBuilder.class, new java.lang.StringBuilder());
        final java.lang.String cr = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|3", java.lang.System.lineSeparator());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|6", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|4", java.lang.StringBuilder.class, matches).append(("private static final String[][] MATCHES = {" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|5", cr)))));
        int failCount = 0;
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|7", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|8", java.lang.String[][].class, org.apache.commons.codec.language.DoubleMetaphoneTest.FIXTURE).length)); i++) {
            final java.lang.String name0 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|12", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|10", java.lang.String[][].class, org.apache.commons.codec.language.DoubleMetaphoneTest.FIXTURE)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|11", i)])[0]);
            final java.lang.String name1 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|16", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|14", java.lang.String[][].class, org.apache.commons.codec.language.DoubleMetaphoneTest.FIXTURE)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|15", i)])[1]);
            final boolean match1 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|18", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).isDoubleMetaphoneEqual(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|19", name0), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|20", name1), false));
            final boolean match2 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|22", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).isDoubleMetaphoneEqual(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|23", name0), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|24", name1), true));
            if (((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|26", match1)) == false) && ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|27", match2)) == false)) {
                final java.lang.String failMsg = ((((("[" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|28", i))) + "] ") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|29", name0))) + " and ") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|30", name1))) + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|31", cr));
                eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|34", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|32", java.lang.StringBuilder.class, failures).append(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|33", failMsg)));
                failCount++;
            }else {
                eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|39", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|35", java.lang.StringBuilder.class, matches).append(((((("{\"" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|36", name0))) + "\", \"") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|37", name1))) + "\"},") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|38", cr)))));
            }
        }
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|41", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|40", java.lang.StringBuilder.class, matches).append("};"));
        // Turn on to print a new MATCH array
        // System.out.println(matches.toString());
        if ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualExtended3()|42", failCount)) > 0) {
            // Turn on to see which pairs do NOT match.
            // String msg = failures.toString();
            // fail(failCount + " failures out of " + FIXTURE.length + ". The
            // following could be made to match: " + cr + msg);
        }
    }

    @org.junit.Test
    public void testIsDoubleMetaphoneEqualWithMATCHES() {
        this.validateFixture(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|0", java.lang.String[][].class, org.apache.commons.codec.language.DoubleMetaphoneTest.MATCHES));
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|1", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|2", java.lang.String[][].class, org.apache.commons.codec.language.DoubleMetaphoneTest.MATCHES).length)); i++) {
            final java.lang.String name0 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|6", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|4", java.lang.String[][].class, org.apache.commons.codec.language.DoubleMetaphoneTest.MATCHES)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|5", i)])[0]);
            final java.lang.String name1 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|10", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|8", java.lang.String[][].class, org.apache.commons.codec.language.DoubleMetaphoneTest.MATCHES)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|9", i)])[1]);
            final boolean match1 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|12", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).isDoubleMetaphoneEqual(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|13", name0), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|14", name1), false));
            final boolean match2 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|16", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).isDoubleMetaphoneEqual(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|17", name0), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|18", name1), true));
            if (((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|20", match1)) == false) && ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|21", match2)) == false)) {
                org.junit.Assert.fail(((((("Expected match [" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|22", i))) + "] ") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|23", name0))) + " and ") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testIsDoubleMetaphoneEqualWithMATCHES()|24", name1))));
            }
        }
    }

    @org.junit.Test
    public void testIsDoubleMetaphoneNotEqual() {
        doubleMetaphoneNotEqualTest(false);
        doubleMetaphoneNotEqualTest(true);
    }

    @org.junit.Test
    public void testNTilde() {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testNTilde()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testNTilde()|0", org.apache.commons.codec.language.DoubleMetaphone.class, this.getStringEncoder()).isDoubleMetaphoneEqual("\u00f1", "N")));// n-tilde

    }

    /**
     * Test setting maximum length
     */
    @org.junit.Test
    public void testSetMaxCodeLength() {
        final java.lang.String value = "jumped";
        final org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|0", org.apache.commons.codec.language.DoubleMetaphone.class, new org.apache.commons.codec.language.DoubleMetaphone());
        // Sanity check of default settings
        org.junit.Assert.assertEquals("Default Max Code Length", 4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|1", org.apache.commons.codec.language.DoubleMetaphone.class, doubleMetaphone).getMaxCodeLen()));
        org.junit.Assert.assertEquals("Default Primary", "JMPT", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|3", org.apache.commons.codec.language.DoubleMetaphone.class, doubleMetaphone).doubleMetaphone(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|4", value), false)));
        org.junit.Assert.assertEquals("Default Alternate", "AMPT", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|6", org.apache.commons.codec.language.DoubleMetaphone.class, doubleMetaphone).doubleMetaphone(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|7", value), true)));
        // Check setting Max Code Length
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|9", org.apache.commons.codec.language.DoubleMetaphone.class, doubleMetaphone).setMaxCodeLen(3);
        org.junit.Assert.assertEquals("Set Max Code Length", 3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|10", org.apache.commons.codec.language.DoubleMetaphone.class, doubleMetaphone).getMaxCodeLen()));
        org.junit.Assert.assertEquals("Max=3 Primary", "JMP", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|12", org.apache.commons.codec.language.DoubleMetaphone.class, doubleMetaphone).doubleMetaphone(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|13", value), false)));
        org.junit.Assert.assertEquals("Max=3 Alternate", "AMP", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.DoubleMetaphone>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|15", org.apache.commons.codec.language.DoubleMetaphone.class, doubleMetaphone).doubleMetaphone(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|testSetMaxCodeLength()|16", value), true)));
    }

    public void validateFixture(final java.lang.String[][] pairs) {
        if ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|validateFixture(java.lang.String[][])|1", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|validateFixture(java.lang.String[][])|0", java.lang.String[][].class, pairs).length)) == 0) {
            org.junit.Assert.fail("Test fixture is empty");
        }
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|validateFixture(java.lang.String[][])|2", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|validateFixture(java.lang.String[][])|4", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|validateFixture(java.lang.String[][])|3", java.lang.String[][].class, pairs).length)); i++) {
            if ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|validateFixture(java.lang.String[][])|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|validateFixture(java.lang.String[][])|7", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.language.DoubleMetaphoneTest|validateFixture(java.lang.String[][])|5", java.lang.String[][].class, pairs)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|validateFixture(java.lang.String[][])|6", i)]).length)) != 2) {
                org.junit.Assert.fail(("Error in test fixture in the data array at index " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.DoubleMetaphoneTest|validateFixture(java.lang.String[][])|9", i))));
            }
        }
    }
}

