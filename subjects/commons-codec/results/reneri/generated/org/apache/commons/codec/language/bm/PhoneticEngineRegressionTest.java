/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.codec.language.bm;


/**
 * Tests PhoneticEngine and Languages.LanguageSet in ways very similar to code found in solr-3.6.0.
 *
 * @since 1.7
 */
public class PhoneticEngineRegressionTest {
    @org.junit.Test
    public void testSolrGENERIC() {
        java.util.Map<java.lang.String, java.lang.String> args;
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|0", java.util.Map.class, // concat is true, ruleType is EXACT
        (args = new java.util.TreeMap<>()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|1", java.util.Map.class, args).put("nameType", "GENERIC"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|4", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|3", java.util.Map.class, args), true, "Angelo")), "YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|5", java.util.Map.class, args).put("ruleType", "EXACT"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|8", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|7", java.util.Map.class, args), true, "Angelo")), "anZelo|andZelo|angelo|anhelo|anjelo|anxelo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|10", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|9", java.util.Map.class, args), true, "D'Angelo")), "(anZelo|andZelo|angelo|anhelo|anjelo|anxelo)-(danZelo|dandZelo|dangelo|danhelo|danjelo|danxelo)");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|11", java.util.Map.class, args).put("languageSet", "italian,greek,spanish"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|14", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|13", java.util.Map.class, args), true, "Angelo")), "andZelo|angelo|anxelo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|16", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|15", java.util.Map.class, args), true, "1234")), "");
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|17", java.util.Map.class, // concat is false, ruleType is EXACT
        (args = new java.util.TreeMap<>()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|19", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|18", java.util.Map.class, args), false, "Angelo")), "YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|20", java.util.Map.class, args).put("ruleType", "EXACT"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|23", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|22", java.util.Map.class, args), false, "Angelo")), "anZelo|andZelo|angelo|anhelo|anjelo|anxelo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|25", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|24", java.util.Map.class, args), false, "D'Angelo")), "(anZelo|andZelo|angelo|anhelo|anjelo|anxelo)-(danZelo|dandZelo|dangelo|danhelo|danjelo|danxelo)");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|26", java.util.Map.class, args).put("languageSet", "italian,greek,spanish"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|29", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|28", java.util.Map.class, args), false, "Angelo")), "andZelo|angelo|anxelo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|31", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|30", java.util.Map.class, args), false, "1234")), "");
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|32", java.util.Map.class, // concat is true, ruleType is APPROX
        (args = new java.util.TreeMap<>()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|34", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|33", java.util.Map.class, args), true, "Angelo")), "YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|35", java.util.Map.class, args).put("ruleType", "APPROX"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|38", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|37", java.util.Map.class, args), true, "Angelo")), "YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|40", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|39", java.util.Map.class, args), true, "D'Angelo")), "(YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo)-(dYngYlo|dYngilo|dagilo|dangYlo|dangilo|daniilo|danilo|danxilo|danzilo|dogilo|dongYlo|dongilo|doniilo|donilo|donxilo|donzilo)");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|42", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|41", java.util.Map.class, args).put("languageSet", "italian,greek,spanish"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|44", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|43", java.util.Map.class, args), true, "Angelo")), "angilo|anxilo|anzilo|ongilo|onxilo|onzilo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|46", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|45", java.util.Map.class, args), true, "1234")), "");
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|47", java.util.Map.class, // concat is false, ruleType is APPROX
        (args = new java.util.TreeMap<>()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|49", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|48", java.util.Map.class, args), false, "Angelo")), "YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|51", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|50", java.util.Map.class, args).put("ruleType", "APPROX"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|53", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|52", java.util.Map.class, args), false, "Angelo")), "YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|55", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|54", java.util.Map.class, args), false, "D'Angelo")), "(YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo)-(dYngYlo|dYngilo|dagilo|dangYlo|dangilo|daniilo|danilo|danxilo|danzilo|dogilo|dongYlo|dongilo|doniilo|donilo|donxilo|donzilo)");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|57", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|56", java.util.Map.class, args).put("languageSet", "italian,greek,spanish"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|59", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|58", java.util.Map.class, args), false, "Angelo")), "angilo|anxilo|anzilo|ongilo|onxilo|onzilo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|61", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrGENERIC()|60", java.util.Map.class, args), false, "1234")), "");
    }

    @org.junit.Test
    public void testSolrASHKENAZI() {
        java.util.Map<java.lang.String, java.lang.String> args;
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|0", java.util.Map.class, // concat is true, ruleType is EXACT
        (args = new java.util.TreeMap<>()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|1", java.util.Map.class, args).put("nameType", "ASHKENAZI"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|4", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|3", java.util.Map.class, args), true, "Angelo")), "YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|5", java.util.Map.class, args).put("ruleType", "EXACT"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|8", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|7", java.util.Map.class, args), true, "Angelo")), "andZelo|angelo|anhelo|anxelo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|10", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|9", java.util.Map.class, args), true, "D'Angelo")), "dandZelo|dangelo|danhelo|danxelo");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|11", java.util.Map.class, args).put("languageSet", "italian,greek,spanish"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|14", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|13", java.util.Map.class, args), true, "Angelo")), "angelo|anxelo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|16", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|15", java.util.Map.class, args), true, "1234")), "");
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|17", java.util.Map.class, // concat is false, ruleType is EXACT
        (args = new java.util.TreeMap<>()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|18", java.util.Map.class, args).put("nameType", "ASHKENAZI"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|21", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|20", java.util.Map.class, args), false, "Angelo")), "YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|22", java.util.Map.class, args).put("ruleType", "EXACT"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|25", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|24", java.util.Map.class, args), false, "Angelo")), "andZelo|angelo|anhelo|anxelo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|27", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|26", java.util.Map.class, args), false, "D'Angelo")), "dandZelo|dangelo|danhelo|danxelo");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|28", java.util.Map.class, args).put("languageSet", "italian,greek,spanish"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|31", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|30", java.util.Map.class, args), false, "Angelo")), "angelo|anxelo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|33", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|32", java.util.Map.class, args), false, "1234")), "");
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|34", java.util.Map.class, // concat is true, ruleType is APPROX
        (args = new java.util.TreeMap<>()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|35", java.util.Map.class, args).put("nameType", "ASHKENAZI"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|38", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|37", java.util.Map.class, args), true, "Angelo")), "YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|40", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|39", java.util.Map.class, args).put("ruleType", "APPROX"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|42", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|41", java.util.Map.class, args), true, "Angelo")), "YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|44", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|43", java.util.Map.class, args), true, "D'Angelo")), "dYngYlo|dYngilo|dangYlo|dangilo|danilo|danxilo|danzilo|dongYlo|dongilo|donilo|donxilo|donzilo");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|46", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|45", java.util.Map.class, args).put("languageSet", "italian,greek,spanish"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|48", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|47", java.util.Map.class, args), true, "Angelo")), "angilo|anxilo|ongilo|onxilo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|50", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|49", java.util.Map.class, args), true, "1234")), "");
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|51", java.util.Map.class, // concat is false, ruleType is APPROX
        (args = new java.util.TreeMap<>()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|53", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|52", java.util.Map.class, args).put("nameType", "ASHKENAZI"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|55", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|54", java.util.Map.class, args), false, "Angelo")), "YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|57", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|56", java.util.Map.class, args).put("ruleType", "APPROX"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|59", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|58", java.util.Map.class, args), false, "Angelo")), "YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|61", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|60", java.util.Map.class, args), false, "D'Angelo")), "dYngYlo|dYngilo|dangYlo|dangilo|danilo|danxilo|danzilo|dongYlo|dongilo|donilo|donxilo|donzilo");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|63", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|62", java.util.Map.class, args).put("languageSet", "italian,greek,spanish"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|65", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|64", java.util.Map.class, args), false, "Angelo")), "angilo|anxilo|ongilo|onxilo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|67", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrASHKENAZI()|66", java.util.Map.class, args), false, "1234")), "");
    }

    @org.junit.Test
    public void testSolrSEPHARDIC() {
        java.util.Map<java.lang.String, java.lang.String> args;
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|0", java.util.Map.class, // concat is true, ruleType is EXACT
        (args = new java.util.TreeMap<>()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|1", java.util.Map.class, args).put("nameType", "SEPHARDIC"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|4", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|3", java.util.Map.class, args), true, "Angelo")), "anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|5", java.util.Map.class, args).put("ruleType", "EXACT"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|8", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|7", java.util.Map.class, args), true, "Angelo")), "anZelo|andZelo|anxelo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|10", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|9", java.util.Map.class, args), true, "D'Angelo")), "anZelo|andZelo|anxelo");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|11", java.util.Map.class, args).put("languageSet", "italian,greek,spanish"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|14", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|13", java.util.Map.class, args), true, "Angelo")), "andZelo|anxelo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|16", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|15", java.util.Map.class, args), true, "1234")), "");
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|17", java.util.Map.class, // concat is false, ruleType is EXACT
        (args = new java.util.TreeMap<>()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|18", java.util.Map.class, args).put("nameType", "SEPHARDIC"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|21", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|20", java.util.Map.class, args), false, "Angelo")), "anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|22", java.util.Map.class, args).put("ruleType", "EXACT"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|25", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|24", java.util.Map.class, args), false, "Angelo")), "anZelo|andZelo|anxelo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|27", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|26", java.util.Map.class, args), false, "D'Angelo")), "danZelo|dandZelo|danxelo");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|28", java.util.Map.class, args).put("languageSet", "italian,greek,spanish"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|31", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|30", java.util.Map.class, args), false, "Angelo")), "andZelo|anxelo");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|33", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|32", java.util.Map.class, args), false, "1234")), "");
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|34", java.util.Map.class, // concat is true, ruleType is APPROX
        (args = new java.util.TreeMap<>()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|35", java.util.Map.class, args).put("nameType", "SEPHARDIC"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|38", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|37", java.util.Map.class, args), true, "Angelo")), "anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|40", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|39", java.util.Map.class, args).put("ruleType", "APPROX"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|42", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|41", java.util.Map.class, args), true, "Angelo")), "anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|44", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|43", java.util.Map.class, args), true, "D'Angelo")), "anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|46", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|45", java.util.Map.class, args).put("languageSet", "italian,greek,spanish"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|48", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|47", java.util.Map.class, args), true, "Angelo")), "anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|50", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|49", java.util.Map.class, args), true, "1234")), "");
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|51", java.util.Map.class, // concat is false, ruleType is APPROX
        (args = new java.util.TreeMap<>()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|53", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|52", java.util.Map.class, args).put("nameType", "SEPHARDIC"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|55", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|54", java.util.Map.class, args), false, "Angelo")), "anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|57", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|56", java.util.Map.class, args).put("ruleType", "APPROX"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|59", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|58", java.util.Map.class, args), false, "Angelo")), "anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|61", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|60", java.util.Map.class, args), false, "D'Angelo")), "danhila|danhilu|danzila|danzilu|nhila|nhilu|nzila|nzilu");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|63", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|62", java.util.Map.class, args).put("languageSet", "italian,greek,spanish"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|65", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|64", java.util.Map.class, args), false, "Angelo")), "anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|67", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testSolrSEPHARDIC()|66", java.util.Map.class, args), false, "1234")), "");
    }

    @org.junit.Test
    public void testCompatibilityWithOriginalVersion() {
        // see CODEC-187
        // comparison: http://stevemorse.org/census/soundex.html
        final java.util.Map<java.lang.String, java.lang.String> args = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.TreeMap<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|0", java.util.TreeMap.class, new java.util.TreeMap<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|1", java.util.Map.class, args).put("nameType", "GENERIC"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|3", java.util.Map.class, args).put("ruleType", "APPROX"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|6", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|5", java.util.Map.class, args), true, "abram")), "Ybram|Ybrom|abram|abran|abrom|abron|avram|avrom|obram|obran|obrom|obron|ovram|ovrom");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|8", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|7", java.util.Map.class, args), true, "Bendzin")), "bndzn|bntsn|bnzn|vndzn|vntsn");
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|9", java.util.Map.class, args).put("nameType", "ASHKENAZI"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|11", java.util.Map.class, args).put("ruleType", "APPROX"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|14", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|13", java.util.Map.class, args), true, "abram")), "Ybram|Ybrom|abram|abrom|avram|avrom|imbram|imbrom|obram|obrom|ombram|ombrom|ovram|ovrom");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|16", org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|testCompatibilityWithOriginalVersion()|15", java.util.Map.class, args), true, "Halpern")), "YlpYrn|Ylpirn|alpYrn|alpirn|olpYrn|olpirn|xalpirn|xolpirn");
    }

    /**
     * This code is similar in style to code found in Solr:
     * solr/core/src/java/org/apache/solr/analysis/BeiderMorseFilterFactory.java
     *
     * Making a JUnit test out of it to protect Solr from possible future
     * regressions in Commons-Codec.
     */
    private static java.lang.String encode(final java.util.Map<java.lang.String, java.lang.String> args, final boolean concat, final java.lang.String input) {
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet;
        org.apache.commons.codec.language.bm.PhoneticEngine engine;
        // PhoneticEngine = NameType + RuleType + concat
        // we use common-codec's defaults: GENERIC + APPROX + true
        final java.lang.String nameTypeArg = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|1", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|0", java.util.Map.class, args).get("nameType"));
        final org.apache.commons.codec.language.bm.NameType nameType = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.NameType>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|6", org.apache.commons.codec.language.bm.NameType.class, ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|2", nameTypeArg)) == null ? eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.NameType>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|3", org.apache.commons.codec.language.bm.NameType.class, org.apache.commons.codec.language.bm.NameType.GENERIC) : eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.NameType>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|5", org.apache.commons.codec.language.bm.NameType.class, org.apache.commons.codec.language.bm.NameType.valueOf(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|4", nameTypeArg)))));
        final java.lang.String ruleTypeArg = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|7", java.util.Map.class, args).get("ruleType"));
        final org.apache.commons.codec.language.bm.RuleType ruleType = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.RuleType>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|13", org.apache.commons.codec.language.bm.RuleType.class, ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|9", ruleTypeArg)) == null ? eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.RuleType>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|10", org.apache.commons.codec.language.bm.RuleType.class, org.apache.commons.codec.language.bm.RuleType.APPROX) : eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.RuleType>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|12", org.apache.commons.codec.language.bm.RuleType.class, org.apache.commons.codec.language.bm.RuleType.valueOf(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|11", ruleTypeArg)))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.PhoneticEngine>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|17", org.apache.commons.codec.language.bm.PhoneticEngine.class, (engine = new org.apache.commons.codec.language.bm.PhoneticEngine(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.NameType>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|14", org.apache.commons.codec.language.bm.NameType.class, nameType), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.RuleType>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|15", org.apache.commons.codec.language.bm.RuleType.class, ruleType), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|16", concat))));
        // LanguageSet: defaults to automagic, otherwise a comma-separated list.
        final java.lang.String languageSetArg = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|19", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|18", java.util.Map.class, args).get("languageSet"));
        if (((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|20", languageSetArg)) == null) || (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|22", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|21", languageSetArg).equals("auto")))) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Languages.LanguageSet>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|23", org.apache.commons.codec.language.bm.Languages.LanguageSet.class, (languageSet = null));
        }else {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Languages.LanguageSet>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|28", org.apache.commons.codec.language.bm.Languages.LanguageSet.class, (languageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashSet<java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|27", java.util.HashSet.class, new java.util.HashSet<>(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|26", java.util.List.class, java.util.Arrays.asList(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|25", java.lang.String[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|24", languageSetArg).split(",")))))))));
        }
        /* org/apache/lucene/analysis/phonetic/BeiderMorseFilter.java (lines 96-98) does this:

        encoded = (languages == null)
        ? engine.encode(termAtt.toString())
        : engine.encode(termAtt.toString(), languages);

        Hence our approach, below:
         */
        if ((eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Languages.LanguageSet>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|29", org.apache.commons.codec.language.bm.Languages.LanguageSet.class, languageSet)) == null) {
            return eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|32", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.PhoneticEngine>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|30", org.apache.commons.codec.language.bm.PhoneticEngine.class, engine).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|31", input)));
        }
        return eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|36", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.PhoneticEngine>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|33", org.apache.commons.codec.language.bm.PhoneticEngine.class, engine).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|34", input), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.language.bm.Languages.LanguageSet>observeState("org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest|encode(java.util.Map,boolean,java.lang.String)|35", org.apache.commons.codec.language.bm.Languages.LanguageSet.class, languageSet)));
    }
}

