/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.codec.binary;


public class Base32Test {
    private static final java.nio.charset.Charset CHARSET_UTF8 = org.apache.commons.codec.Charsets.UTF_8;

    private static final java.lang.String[][] BASE32_TEST_CASES = new java.lang.String[][]{ // RFC 4648
    new java.lang.String[]{ "", "" }, new java.lang.String[]{ "f", "MY======" }, new java.lang.String[]{ "fo", "MZXQ====" }, new java.lang.String[]{ "foo", "MZXW6===" }, new java.lang.String[]{ "foob", "MZXW6YQ=" }, new java.lang.String[]{ "fooba", "MZXW6YTB" }, new java.lang.String[]{ "foobar", "MZXW6YTBOI======" } };

    private static final java.lang.Object[][] BASE32_BINARY_TEST_CASES;

    // { null, "O0o0O0o0" }
    // BASE32_BINARY_TEST_CASES[2][0] = new Hex().decode("739ce739ce");
    static {
        final org.apache.commons.codec.binary.Hex hex = new org.apache.commons.codec.binary.Hex();
        try {
            BASE32_BINARY_TEST_CASES = new java.lang.Object[][]{ new java.lang.Object[]{ hex.decode("623a01735836e9a126e12fbf95e013ee6892997c"), "MI5AC42YG3U2CJXBF67ZLYAT5ZUJFGL4" }, new java.lang.Object[]{ hex.decode("623a01735836e9a126e12fbf95e013ee6892997c"), "mi5ac42yg3u2cjxbf67zlyat5zujfgl4" }, new java.lang.Object[]{ hex.decode("739ce42108"), "OOOOIIII" } };
        } catch (final org.apache.commons.codec.DecoderException de) {
            throw new java.lang.Error(":(", de);
        }
    }

    private static final java.lang.String[][] BASE32HEX_TEST_CASES = new java.lang.String[][]{ // RFC 4648
    new java.lang.String[]{ "", "" }, new java.lang.String[]{ "f", "CO======" }, new java.lang.String[]{ "fo", "CPNG====" }, new java.lang.String[]{ "foo", "CPNMU===" }, new java.lang.String[]{ "foob", "CPNMUOG=" }, new java.lang.String[]{ "fooba", "CPNMUOJ1" }, new java.lang.String[]{ "foobar", "CPNMUOJ1E8======" } };

    private static final java.lang.String[][] BASE32_TEST_CASES_CHUNKED = new java.lang.String[][]{ // Chunked
    new java.lang.String[]{ "", "" }, new java.lang.String[]{ "f", "MY======\r\n" }, new java.lang.String[]{ "fo", "MZXQ====\r\n" }, new java.lang.String[]{ "foo", "MZXW6===\r\n" }, new java.lang.String[]{ "foob", "MZXW6YQ=\r\n" }, new java.lang.String[]{ "fooba", "MZXW6YTB\r\n" }, new java.lang.String[]{ "foobar", "MZXW6YTBOI======\r\n" } };

    private static final java.lang.String[][] BASE32_PAD_TEST_CASES = new java.lang.String[][]{ // RFC 4648
    new java.lang.String[]{ "", "" }, new java.lang.String[]{ "f", "MY%%%%%%" }, new java.lang.String[]{ "fo", "MZXQ%%%%" }, new java.lang.String[]{ "foo", "MZXW6%%%" }, new java.lang.String[]{ "foob", "MZXW6YQ%" }, new java.lang.String[]{ "fooba", "MZXW6YTB" }, new java.lang.String[]{ "foobar", "MZXW6YTBOI%%%%%%" } };

    @org.junit.Test
    public void testBase64AtBufferStart() {
        testBase64InBuffer(0, 100);
    }

    @org.junit.Test
    public void testBase64AtBufferEnd() {
        testBase64InBuffer(100, 0);
    }

    @org.junit.Test
    public void testBase64AtBufferMiddle() {
        testBase64InBuffer(100, 100);
    }

    private void testBase64InBuffer(final int startPasSize, final int endPadSize) {
        final org.apache.commons.codec.binary.Base32 codec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|0", org.apache.commons.codec.binary.Base32.class, new org.apache.commons.codec.binary.Base32());
        for (final java.lang.String[] element : eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|1", java.lang.String[][].class, org.apache.commons.codec.binary.Base32Test.BASE32_TEST_CASES)) {
            final byte[] bytes = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|5", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|2", java.lang.String[].class, element)[0]).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|4", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base32Test.CHARSET_UTF8)));
            byte[] buffer = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|9", byte[].class, org.apache.commons.lang3.ArrayUtils.addAll(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|6", byte[].class, bytes), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|8", byte[].class, new byte[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|7", endPadSize)])));
            eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|13", byte[].class, (buffer = org.apache.commons.lang3.ArrayUtils.addAll(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|11", byte[].class, new byte[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|10", startPasSize)]), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|12", byte[].class, buffer))));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|15", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|14", java.lang.String[].class, element)[1]), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|22", org.apache.commons.codec.binary.StringUtils.newStringUtf8(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|21", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|16", org.apache.commons.codec.binary.Base32.class, codec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|17", byte[].class, buffer), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|18", startPasSize), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|20", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase64InBuffer(int,int)|19", byte[].class, bytes).length))))));
        }
    }

    @org.junit.Test
    public void testBase32Chunked() throws java.lang.Exception {
        final org.apache.commons.codec.binary.Base32 codec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32Chunked()|0", org.apache.commons.codec.binary.Base32.class, new org.apache.commons.codec.binary.Base32(20));
        for (final java.lang.String[] element : eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32Chunked()|1", java.lang.String[][].class, org.apache.commons.codec.binary.Base32Test.BASE32_TEST_CASES_CHUNKED)) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32Chunked()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32Chunked()|2", java.lang.String[].class, element)[1]), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32Chunked()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32Chunked()|4", org.apache.commons.codec.binary.Base32.class, codec).encodeAsString(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32Chunked()|8", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32Chunked()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32Chunked()|5", java.lang.String[].class, element)[0]).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base32Test|testBase32Chunked()|7", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base32Test.CHARSET_UTF8))))));
        }
    }

    @org.junit.Test
    public void testBase32HexSamples() throws java.lang.Exception {
        final org.apache.commons.codec.binary.Base32 codec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamples()|0", org.apache.commons.codec.binary.Base32.class, new org.apache.commons.codec.binary.Base32(true));
        for (final java.lang.String[] element : eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamples()|1", java.lang.String[][].class, org.apache.commons.codec.binary.Base32Test.BASE32HEX_TEST_CASES)) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32HexSamples()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamples()|2", java.lang.String[].class, element)[1]), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32HexSamples()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamples()|4", org.apache.commons.codec.binary.Base32.class, codec).encodeAsString(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamples()|8", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32HexSamples()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamples()|5", java.lang.String[].class, element)[0]).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamples()|7", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base32Test.CHARSET_UTF8))))));
        }
    }

    @org.junit.Test
    public void testBase32HexSamplesReverse() throws java.lang.Exception {
        final org.apache.commons.codec.binary.Base32 codec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverse()|0", org.apache.commons.codec.binary.Base32.class, new org.apache.commons.codec.binary.Base32(true));
        for (final java.lang.String[] element : eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverse()|1", java.lang.String[][].class, org.apache.commons.codec.binary.Base32Test.BASE32HEX_TEST_CASES)) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverse()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverse()|2", java.lang.String[].class, element)[0]), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverse()|9", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverse()|7", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverse()|4", org.apache.commons.codec.binary.Base32.class, codec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverse()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverse()|5", java.lang.String[].class, element)[1]))), eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverse()|8", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base32Test.CHARSET_UTF8))));
        }
    }

    @org.junit.Test
    public void testBase32HexSamplesReverseLowercase() throws java.lang.Exception {
        final org.apache.commons.codec.binary.Base32 codec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverseLowercase()|0", org.apache.commons.codec.binary.Base32.class, new org.apache.commons.codec.binary.Base32(true));
        for (final java.lang.String[] element : eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverseLowercase()|1", java.lang.String[][].class, org.apache.commons.codec.binary.Base32Test.BASE32HEX_TEST_CASES)) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverseLowercase()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverseLowercase()|2", java.lang.String[].class, element)[0]), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverseLowercase()|10", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverseLowercase()|8", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverseLowercase()|4", org.apache.commons.codec.binary.Base32.class, codec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverseLowercase()|7", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverseLowercase()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverseLowercase()|5", java.lang.String[].class, element)[1]).toLowerCase()))), eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base32Test|testBase32HexSamplesReverseLowercase()|9", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base32Test.CHARSET_UTF8))));
        }
    }

    @org.junit.Test
    public void testBase32Samples() throws java.lang.Exception {
        final org.apache.commons.codec.binary.Base32 codec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32Samples()|0", org.apache.commons.codec.binary.Base32.class, new org.apache.commons.codec.binary.Base32());
        for (final java.lang.String[] element : eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32Samples()|1", java.lang.String[][].class, org.apache.commons.codec.binary.Base32Test.BASE32_TEST_CASES)) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32Samples()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32Samples()|2", java.lang.String[].class, element)[1]), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32Samples()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32Samples()|4", org.apache.commons.codec.binary.Base32.class, codec).encodeAsString(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32Samples()|8", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32Samples()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32Samples()|5", java.lang.String[].class, element)[0]).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base32Test|testBase32Samples()|7", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base32Test.CHARSET_UTF8))))));
        }
    }

    @org.junit.Test
    public void testBase32BinarySamples() throws java.lang.Exception {
        final org.apache.commons.codec.binary.Base32 codec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamples()|0", org.apache.commons.codec.binary.Base32.class, new org.apache.commons.codec.binary.Base32());
        for (final java.lang.Object[] element : eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[][]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamples()|1", java.lang.Object[][].class, org.apache.commons.codec.binary.Base32Test.BASE32_BINARY_TEST_CASES)) {
            java.lang.String expected;
            if ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamples()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamples()|2", java.lang.Object[].class, element).length)) > 2) {
                eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamples()|5", (expected = ((java.lang.String) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamples()|4", java.lang.Object[].class, element)[2]))));
            }else {
                eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamples()|7", (expected = ((java.lang.String) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamples()|6", java.lang.Object[].class, element)[1]))));
            }
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamples()|9", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamples()|8", expected).toUpperCase()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamples()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamples()|10", org.apache.commons.codec.binary.Base32.class, codec).encodeAsString(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamples()|12", byte[].class, ((byte[]) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamples()|11", java.lang.Object[].class, element)[0]))))));
        }
    }

    @org.junit.Test
    public void testBase32BinarySamplesReverse() throws java.lang.Exception {
        final org.apache.commons.codec.binary.Base32 codec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamplesReverse()|0", org.apache.commons.codec.binary.Base32.class, new org.apache.commons.codec.binary.Base32());
        for (final java.lang.Object[] element : eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[][]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamplesReverse()|1", java.lang.Object[][].class, org.apache.commons.codec.binary.Base32Test.BASE32_BINARY_TEST_CASES)) {
            org.junit.Assert.assertArrayEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamplesReverse()|3", byte[].class, ((byte[]) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamplesReverse()|2", java.lang.Object[].class, element)[0]))), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamplesReverse()|7", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamplesReverse()|4", org.apache.commons.codec.binary.Base32.class, codec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamplesReverse()|6", ((java.lang.String) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32BinarySamplesReverse()|5", java.lang.Object[].class, element)[1]))))));
        }
    }

    @org.junit.Test
    public void testBase32SamplesNonDefaultPadding() throws java.lang.Exception {
        final org.apache.commons.codec.binary.Base32 codec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32SamplesNonDefaultPadding()|0", org.apache.commons.codec.binary.Base32.class, new org.apache.commons.codec.binary.Base32(((byte) (37))));// '%' <=> 0x25

        for (final java.lang.String[] element : eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[][]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32SamplesNonDefaultPadding()|1", java.lang.String[][].class, org.apache.commons.codec.binary.Base32Test.BASE32_PAD_TEST_CASES)) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32SamplesNonDefaultPadding()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32SamplesNonDefaultPadding()|2", java.lang.String[].class, element)[1]), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32SamplesNonDefaultPadding()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testBase32SamplesNonDefaultPadding()|4", org.apache.commons.codec.binary.Base32.class, codec).encodeAsString(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32SamplesNonDefaultPadding()|8", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testBase32SamplesNonDefaultPadding()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.apache.commons.codec.binary.Base32Test|testBase32SamplesNonDefaultPadding()|5", java.lang.String[].class, element)[0]).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.binary.Base32Test|testBase32SamplesNonDefaultPadding()|7", java.nio.charset.Charset.class, org.apache.commons.codec.binary.Base32Test.CHARSET_UTF8))))));
        }
    }

    @org.junit.Test
    public void testCodec200() {
        final org.apache.commons.codec.binary.Base32 codec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testCodec200()|0", org.apache.commons.codec.binary.Base32.class, new org.apache.commons.codec.binary.Base32(true, ((byte) ('W'))));// should be allowed

        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testCodec200()|1", org.apache.commons.codec.binary.Base32.class, codec));
    }

    @org.junit.Test
    public void testRandomBytes() {
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|0", i)) < 20; i++) {
            final org.apache.commons.codec.binary.Base32 codec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|1", org.apache.commons.codec.binary.Base32.class, new org.apache.commons.codec.binary.Base32());
            final byte[][] b = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|4", byte[][].class, org.apache.commons.codec.binary.Base32TestData.randomData(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|2", org.apache.commons.codec.binary.Base32.class, codec), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|3", i)));
            org.junit.Assert.assertEquals(((("" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|5", i))) + " ") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|6", org.apache.commons.codec.binary.Base32.class, codec).lineLength))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|9", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|8", byte[][].class, b)[1]).length), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|11", org.apache.commons.codec.binary.Base32.class, codec).getEncodedLength(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|13", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytes()|12", byte[][].class, b)[0]))));
            // assertEquals(b[0],codec.decode(b[1]));
        }
    }

    @org.junit.Test
    public void testRandomBytesChunked() {
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|0", i)) < 20; i++) {
            final org.apache.commons.codec.binary.Base32 codec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|1", org.apache.commons.codec.binary.Base32.class, new org.apache.commons.codec.binary.Base32(10));
            final byte[][] b = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|4", byte[][].class, org.apache.commons.codec.binary.Base32TestData.randomData(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|2", org.apache.commons.codec.binary.Base32.class, codec), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|3", i)));
            org.junit.Assert.assertEquals(((("" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|5", i))) + " ") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|6", org.apache.commons.codec.binary.Base32.class, codec).lineLength))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|9", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|8", byte[][].class, b)[1]).length), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|11", org.apache.commons.codec.binary.Base32.class, codec).getEncodedLength(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|13", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesChunked()|12", byte[][].class, b)[0]))));
            // assertEquals(b[0],codec.decode(b[1]));
        }
    }

    @org.junit.Test
    public void testRandomBytesHex() {
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|0", i)) < 20; i++) {
            final org.apache.commons.codec.binary.Base32 codec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|1", org.apache.commons.codec.binary.Base32.class, new org.apache.commons.codec.binary.Base32(true));
            final byte[][] b = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|4", byte[][].class, org.apache.commons.codec.binary.Base32TestData.randomData(eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|2", org.apache.commons.codec.binary.Base32.class, codec), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|3", i)));
            org.junit.Assert.assertEquals(((("" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|5", i))) + " ") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|6", org.apache.commons.codec.binary.Base32.class, codec).lineLength))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|9", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|8", byte[][].class, b)[1]).length), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|11", org.apache.commons.codec.binary.Base32.class, codec).getEncodedLength(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|13", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[][]>observeState("org.apache.commons.codec.binary.Base32Test|testRandomBytesHex()|12", byte[][].class, b)[0]))));
            // assertEquals(b[0],codec.decode(b[1]));
        }
    }

    @org.junit.Test
    public void testSingleCharEncoding() {
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|0", i)) < 20; i++) {
            org.apache.commons.codec.binary.Base32 codec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|1", org.apache.commons.codec.binary.Base32.class, new org.apache.commons.codec.binary.Base32());
            final org.apache.commons.codec.binary.BaseNCodec.Context context = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.BaseNCodec.Context>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|2", org.apache.commons.codec.binary.BaseNCodec.Context.class, new org.apache.commons.codec.binary.BaseNCodec.Context());
            final byte[] unencoded = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|4", byte[].class, new byte[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|3", i)]);
            final byte[] allInOne = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|7", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|5", org.apache.commons.codec.binary.Base32.class, codec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|6", byte[].class, unencoded)));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|8", org.apache.commons.codec.binary.Base32.class, (codec = new org.apache.commons.codec.binary.Base32()));
            for (int j = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|9", j)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|10", byte[].class, unencoded).length)); j++) {
                eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|12", org.apache.commons.codec.binary.Base32.class, codec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|13", byte[].class, unencoded), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|14", j), 1, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.BaseNCodec.Context>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|15", org.apache.commons.codec.binary.BaseNCodec.Context.class, context));
            }
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|16", org.apache.commons.codec.binary.Base32.class, codec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|17", byte[].class, unencoded), 0, (-1), eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.BaseNCodec.Context>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|18", org.apache.commons.codec.binary.BaseNCodec.Context.class, context));
            final byte[] singly = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|21", byte[].class, new byte[eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|19", byte[].class, allInOne).length)]);
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.Base32>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|22", org.apache.commons.codec.binary.Base32.class, codec).readResults(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|23", byte[].class, singly), 0, 100, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.binary.BaseNCodec.Context>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|24", org.apache.commons.codec.binary.BaseNCodec.Context.class, context)));
            if (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|28", java.util.Arrays.equals(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|26", byte[].class, allInOne), eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.binary.Base32Test|testSingleCharEncoding()|27", byte[].class, singly))))) {
                org.junit.Assert.fail();
            }
        }
    }
}

