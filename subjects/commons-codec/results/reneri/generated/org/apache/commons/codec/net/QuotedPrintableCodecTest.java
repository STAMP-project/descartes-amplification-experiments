/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.codec.net;


/**
 * Quoted-printable codec test cases
 *
 * @version $Id$
 */
public class QuotedPrintableCodecTest {
    static final int[] SWISS_GERMAN_STUFF_UNICODE = new int[]{ 71, 114, 252, 101, 122, 105, 95, 122, 228, 109, 228 };

    static final int[] RUSSIAN_STUFF_UNICODE = new int[]{ 1042, 1089, 1077, 1084, 95, 1087, 1088, 1080, 1074, 1077, 1090 };

    private java.lang.String constructString(final int[] unicodeChars) {
        final java.lang.StringBuilder buffer = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|constructString(int[])|0", java.lang.StringBuilder.class, new java.lang.StringBuilder());
        if ((eu.stamp_project.reneri.instrumentation.StateObserver.<int[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|constructString(int[])|1", int[].class, unicodeChars)) != null) {
            for (final int unicodeChar : eu.stamp_project.reneri.instrumentation.StateObserver.<int[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|constructString(int[])|2", int[].class, unicodeChars)) {
                eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|constructString(int[])|5", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|constructString(int[])|3", java.lang.StringBuilder.class, buffer).append(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|constructString(int[])|4", ((char) (unicodeChar)))));
            }
        }
        return eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|constructString(int[])|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|constructString(int[])|6", java.lang.StringBuilder.class, buffer).toString());
    }

    @org.junit.Test
    public void testUTF8RoundTrip() throws java.lang.Exception {
        final java.lang.String ru_msg = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|1", constructString(eu.stamp_project.reneri.instrumentation.StateObserver.<int[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|0", int[].class, org.apache.commons.codec.net.QuotedPrintableCodecTest.RUSSIAN_STUFF_UNICODE)));
        final java.lang.String ch_msg = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|3", constructString(eu.stamp_project.reneri.instrumentation.StateObserver.<int[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|2", int[].class, org.apache.commons.codec.net.QuotedPrintableCodecTest.SWISS_GERMAN_STUFF_UNICODE)));
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|4", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec());
        org.junit.Assert.assertEquals("=D0=92=D1=81=D0=B5=D0=BC_=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|5", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|6", ru_msg), org.apache.commons.codec.CharEncoding.UTF_8)));
        org.junit.Assert.assertEquals("Gr=C3=BCezi_z=C3=A4m=C3=A4", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|8", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|9", ch_msg), org.apache.commons.codec.CharEncoding.UTF_8)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|11", ru_msg), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|12", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|13", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|14", ru_msg), org.apache.commons.codec.CharEncoding.UTF_8)), org.apache.commons.codec.CharEncoding.UTF_8)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|17", ch_msg), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|18", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|19", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUTF8RoundTrip()|20", ch_msg), org.apache.commons.codec.CharEncoding.UTF_8)), org.apache.commons.codec.CharEncoding.UTF_8)));
    }

    @org.junit.Test
    public void testBasicEncodeDecode() throws java.lang.Exception {
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testBasicEncodeDecode()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec());
        final java.lang.String plain = "= Hello there =\r\n";
        final java.lang.String encoded = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testBasicEncodeDecode()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testBasicEncodeDecode()|1", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testBasicEncodeDecode()|2", plain)));
        org.junit.Assert.assertEquals("Basic quoted-printable encoding test", "=3D Hello there =3D=0D=0A", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testBasicEncodeDecode()|4", encoded));
        org.junit.Assert.assertEquals("Basic quoted-printable decoding test", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testBasicEncodeDecode()|5", plain), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testBasicEncodeDecode()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testBasicEncodeDecode()|6", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testBasicEncodeDecode()|7", encoded))));
    }

    @org.junit.Test
    public void testSafeCharEncodeDecode() throws java.lang.Exception {
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSafeCharEncodeDecode()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec());
        final java.lang.String plain = "abc123_-.*~!@#$%^&()+{}\"\\;:`,/[]";
        final java.lang.String encoded = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSafeCharEncodeDecode()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSafeCharEncodeDecode()|1", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSafeCharEncodeDecode()|2", plain)));
        org.junit.Assert.assertEquals("Safe chars quoted-printable encoding test", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSafeCharEncodeDecode()|4", plain), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSafeCharEncodeDecode()|5", encoded));
        org.junit.Assert.assertEquals("Safe chars quoted-printable decoding test", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSafeCharEncodeDecode()|6", plain), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSafeCharEncodeDecode()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSafeCharEncodeDecode()|7", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSafeCharEncodeDecode()|8", encoded))));
    }

    @org.junit.Test
    public void testUnsafeEncodeDecode() throws java.lang.Exception {
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUnsafeEncodeDecode()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec());
        final java.lang.String plain = "=\r\n";
        final java.lang.String encoded = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUnsafeEncodeDecode()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUnsafeEncodeDecode()|1", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUnsafeEncodeDecode()|2", plain)));
        org.junit.Assert.assertEquals("Unsafe chars quoted-printable encoding test", "=3D=0D=0A", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUnsafeEncodeDecode()|4", encoded));
        org.junit.Assert.assertEquals("Unsafe chars quoted-printable decoding test", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUnsafeEncodeDecode()|5", plain), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUnsafeEncodeDecode()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUnsafeEncodeDecode()|6", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUnsafeEncodeDecode()|7", encoded))));
    }

    @org.junit.Test
    public void testEncodeDecodeNull() throws java.lang.Exception {
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeDecodeNull()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec());
        org.junit.Assert.assertNull("Null string quoted-printable encoding test", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeDecodeNull()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeDecodeNull()|1", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(((java.lang.String) (null)))));
        org.junit.Assert.assertNull("Null string quoted-printable decoding test", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeDecodeNull()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeDecodeNull()|3", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(((java.lang.String) (null)))));
    }

    @org.junit.Test
    public void testDecodeInvalid() throws java.lang.Exception {
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeInvalid()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec());
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeInvalid()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeInvalid()|1", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode("="));
            org.junit.Assert.fail("DecoderException should have been thrown");
        } catch (final org.apache.commons.codec.DecoderException e) {
            // Expected. Move on
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeInvalid()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeInvalid()|3", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode("=A"));
            org.junit.Assert.fail("DecoderException should have been thrown");
        } catch (final org.apache.commons.codec.DecoderException e) {
            // Expected. Move on
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeInvalid()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeInvalid()|5", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode("=WW"));
            org.junit.Assert.fail("DecoderException should have been thrown");
        } catch (final org.apache.commons.codec.DecoderException e) {
            // Expected. Move on
        }
    }

    @org.junit.Test
    public void testEncodeNull() throws java.lang.Exception {
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeNull()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec());
        final byte[] plain = null;
        final byte[] encoded = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeNull()|3", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeNull()|1", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeNull()|2", byte[].class, plain)));
        org.junit.Assert.assertEquals("Encoding a null string should return null", null, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeNull()|4", byte[].class, encoded));
    }

    @org.junit.Test
    public void testEncodeUrlWithNullBitSet() throws java.lang.Exception {
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeUrlWithNullBitSet()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec());
        final java.lang.String plain = "1+1 = 2";
        final java.lang.String encoded = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeUrlWithNullBitSet()|5", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeUrlWithNullBitSet()|4", byte[].class, org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(null, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeUrlWithNullBitSet()|3", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeUrlWithNullBitSet()|1", plain).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeUrlWithNullBitSet()|2", java.nio.charset.Charset.class, org.apache.commons.codec.Charsets.UTF_8)))))));
        org.junit.Assert.assertEquals("Basic quoted-printable encoding test", "1+1 =3D 2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeUrlWithNullBitSet()|6", encoded));
        org.junit.Assert.assertEquals("Basic quoted-printable decoding test", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeUrlWithNullBitSet()|7", plain), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeUrlWithNullBitSet()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeUrlWithNullBitSet()|8", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeUrlWithNullBitSet()|9", encoded))));
    }

    @org.junit.Test
    public void testDecodeWithNullArray() throws java.lang.Exception {
        final byte[] plain = null;
        final byte[] result = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeWithNullArray()|1", byte[].class, org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeWithNullArray()|0", byte[].class, plain)));
        org.junit.Assert.assertEquals("Result should be null", null, eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeWithNullArray()|2", byte[].class, result));
    }

    @org.junit.Test
    public void testEncodeStringWithNull() throws java.lang.Exception {
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeStringWithNull()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec());
        final java.lang.String test = null;
        final java.lang.String result = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeStringWithNull()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeStringWithNull()|1", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeStringWithNull()|2", test), "charset"));
        org.junit.Assert.assertEquals("Result should be null", null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeStringWithNull()|4", result));
    }

    @org.junit.Test
    public void testDecodeStringWithNull() throws java.lang.Exception {
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeStringWithNull()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec());
        final java.lang.String test = null;
        final java.lang.String result = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeStringWithNull()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeStringWithNull()|1", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeStringWithNull()|2", test), "charset"));
        org.junit.Assert.assertEquals("Result should be null", null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeStringWithNull()|4", result));
    }

    @org.junit.Test
    public void testEncodeObjects() throws java.lang.Exception {
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec());
        final java.lang.String plain = "1+1 = 2";
        java.lang.String encoded = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|3", ((java.lang.String) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|1", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|2", java.lang.Object.class, ((java.lang.Object) (plain)))))));
        org.junit.Assert.assertEquals("Basic quoted-printable encoding test", "1+1 =3D 2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|4", encoded));
        final byte[] plainBA = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|7", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|5", plain).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|6", java.nio.charset.Charset.class, org.apache.commons.codec.Charsets.UTF_8)));
        final byte[] encodedBA = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|10", byte[].class, ((byte[]) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|8", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|9", java.lang.Object.class, ((java.lang.Object) (plainBA)))))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|12", (encoded = new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|11", byte[].class, encodedBA))));
        org.junit.Assert.assertEquals("Basic quoted-printable encoding test", "1+1 =3D 2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|13", encoded));
        final java.lang.Object result = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|15", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|14", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(((java.lang.Object) (null))));
        org.junit.Assert.assertEquals("Encoding a null Object should return null", null, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|16", java.lang.Object.class, result));
        try {
            final java.lang.Object dObj = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|17", new java.lang.Double(3.0));
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|20", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|18", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testEncodeObjects()|19", java.lang.Object.class, dObj)));
            org.junit.Assert.fail("Trying to url encode a Double object should cause an exception.");
        } catch (final org.apache.commons.codec.EncoderException ee) {
            // Exception expected, test segment passes.
        }
    }

    @org.junit.Test(expected = java.nio.charset.UnsupportedCharsetException.class)
    public void testInvalidEncoding() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testInvalidEncoding()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec("NONSENSE"));
        } catch (java.nio.charset.UnsupportedCharsetException a1553628734544) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.apache.commons.codec.net.QuotedPrintableCodecTest|testInvalidEncoding()|!", a1553628734544);
            throw a1553628734544;
        }
    }

    @org.junit.Test
    public void testDecodeObjects() throws java.lang.Exception {
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec());
        final java.lang.String plain = "1+1 =3D 2";
        java.lang.String decoded = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|3", ((java.lang.String) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|1", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|2", java.lang.Object.class, ((java.lang.Object) (plain)))))));
        org.junit.Assert.assertEquals("Basic quoted-printable decoding test", "1+1 = 2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|4", decoded));
        final byte[] plainBA = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|7", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|5", plain).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|6", java.nio.charset.Charset.class, org.apache.commons.codec.Charsets.UTF_8)));
        final byte[] decodedBA = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|10", byte[].class, ((byte[]) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|8", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|9", java.lang.Object.class, ((java.lang.Object) (plainBA)))))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|12", (decoded = new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|11", byte[].class, decodedBA))));
        org.junit.Assert.assertEquals("Basic quoted-printable decoding test", "1+1 = 2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|13", decoded));
        final java.lang.Object result = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|15", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|14", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(((java.lang.Object) (null))));
        org.junit.Assert.assertEquals("Decoding a null Object should return null", null, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|16", java.lang.Object.class, result));
        try {
            final java.lang.Object dObj = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|17", new java.lang.Double(3.0));
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|20", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|18", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDecodeObjects()|19", java.lang.Object.class, dObj)));
            org.junit.Assert.fail("Trying to url encode a Double object should cause an exception.");
        } catch (final org.apache.commons.codec.DecoderException ee) {
            // Exception expected, test segment passes.
        }
    }

    @org.junit.Test
    public void testDefaultEncoding() throws java.lang.Exception {
        final java.lang.String plain = "Hello there!";
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDefaultEncoding()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec("UnicodeBig"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDefaultEncoding()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDefaultEncoding()|1", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDefaultEncoding()|2", plain))// To work around a weird quirk in Java 1.2.2
        );
        final java.lang.String encoded1 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDefaultEncoding()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDefaultEncoding()|4", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDefaultEncoding()|5", plain), "UnicodeBig"));
        final java.lang.String encoded2 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDefaultEncoding()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDefaultEncoding()|7", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDefaultEncoding()|8", plain)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDefaultEncoding()|10", encoded1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testDefaultEncoding()|11", encoded2));
    }

    @org.junit.Test
    public void testSoftLineBreakDecode() throws java.lang.Exception {
        final java.lang.String qpdata = "If you believe that truth=3Dbeauty, then surely=20=\r\nmathematics is the most beautiful branch of philosophy.";
        final java.lang.String expected = "If you believe that truth=beauty, then surely mathematics is the most beautiful branch of philosophy.";
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakDecode()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakDecode()|1", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakDecode()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakDecode()|2", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakDecode()|3", qpdata))));
        final java.lang.String encoded = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakDecode()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakDecode()|5", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakDecode()|6", expected)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakDecode()|8", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakDecode()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakDecode()|9", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakDecode()|10", encoded))));
    }

    @org.junit.Test
    public void testSoftLineBreakEncode() throws java.lang.Exception {
        final java.lang.String qpdata = "If you believe that truth=3Dbeauty, then surely mathematics is the most b=\r\neautiful branch of philosophy.";
        final java.lang.String expected = "If you believe that truth=beauty, then surely mathematics is the most beautiful branch of philosophy.";
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakEncode()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec(true));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakEncode()|1", qpdata), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakEncode()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakEncode()|2", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakEncode()|3", expected))));
        final java.lang.String decoded = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakEncode()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakEncode()|5", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakEncode()|6", qpdata)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakEncode()|8", qpdata), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakEncode()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakEncode()|9", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSoftLineBreakEncode()|10", decoded))));
    }

    @org.junit.Test
    public void testSkipNotEncodedCRLF() throws java.lang.Exception {
        final java.lang.String qpdata = "CRLF in an\n encoded text should be=20=\r\n\rskipped in the\r decoding.";
        final java.lang.String expected = "CRLF in an encoded text should be skipped in the decoding.";
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSkipNotEncodedCRLF()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec(true));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSkipNotEncodedCRLF()|1", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSkipNotEncodedCRLF()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSkipNotEncodedCRLF()|2", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSkipNotEncodedCRLF()|3", qpdata))));
        final java.lang.String encoded = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSkipNotEncodedCRLF()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSkipNotEncodedCRLF()|5", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSkipNotEncodedCRLF()|6", expected)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSkipNotEncodedCRLF()|8", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSkipNotEncodedCRLF()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSkipNotEncodedCRLF()|9", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).decode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testSkipNotEncodedCRLF()|10", encoded))));
    }

    @org.junit.Test
    public void testTrailingSpecial() throws java.lang.Exception {
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testTrailingSpecial()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec(true));
        java.lang.String plain = "This is a example of a quoted-printable text file. This might contain sp=cial chars.";
        java.lang.String expected = "This is a example of a quoted-printable text file. This might contain sp=3D=\r\ncial chars.";
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testTrailingSpecial()|1", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testTrailingSpecial()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testTrailingSpecial()|2", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testTrailingSpecial()|3", plain))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testTrailingSpecial()|5", (plain = "This is a example of a quoted-printable text file. This might contain ta\tbs as well."));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testTrailingSpecial()|6", (expected = "This is a example of a quoted-printable text file. This might contain ta=09=\r\nbs as well."));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testTrailingSpecial()|7", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testTrailingSpecial()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testTrailingSpecial()|8", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testTrailingSpecial()|9", plain))));
    }

    @org.junit.Test
    public void testUltimateSoftBreak() throws java.lang.Exception {
        final org.apache.commons.codec.net.QuotedPrintableCodec qpcodec = eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|0", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec(true));
        java.lang.String plain = "This is a example of a quoted-printable text file. There is no end to it\t";
        java.lang.String expected = "This is a example of a quoted-printable text file. There is no end to i=\r\nt=09";
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|1", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|2", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|3", plain))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|5", (plain = "This is a example of a quoted-printable text file. There is no end to it "));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|6", (expected = "This is a example of a quoted-printable text file. There is no end to i=\r\nt=20"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|7", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|8", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|9", plain))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|11", // whitespace before soft break
        (plain = "This is a example of a quoted-printable text file. There is no end to   "));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|12", (expected = "This is a example of a quoted-printable text file. There is no end to=20=\r\n =20"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|13", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|14", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|15", plain))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|17", // non-printable character before soft break
        (plain = "This is a example of a quoted-printable text file. There is no end to=  "));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|18", (expected = "This is a example of a quoted-printable text file. There is no end to=3D=\r\n =20"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|19", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|20", org.apache.commons.codec.net.QuotedPrintableCodec.class, qpcodec).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testUltimateSoftBreak()|21", plain))));
    }

    @org.junit.Test
    public void testFinalBytes() throws java.lang.Exception {
        // whitespace, but does not need to be encoded
        final java.lang.String plain = "This is a example of a quoted=printable text file. There is no tt";
        final java.lang.String expected = "This is a example of a quoted=3Dprintable text file. There is no tt";
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testFinalBytes()|0", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testFinalBytes()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.apache.commons.codec.net.QuotedPrintableCodec>observeState("org.apache.commons.codec.net.QuotedPrintableCodecTest|testFinalBytes()|1", org.apache.commons.codec.net.QuotedPrintableCodec.class, new org.apache.commons.codec.net.QuotedPrintableCodec(true)).encode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.apache.commons.codec.net.QuotedPrintableCodecTest|testFinalBytes()|2", plain))));
    }
}

