{
    "mutators": [
        "void",
        "null",
        "empty",
        "true",
        "false",
        "0",
        "1",
        "(short)0",
        "(short)1",
        "(byte)0",
        "(byte)1",
        "0L",
        "1L",
        "0.0",
        "1.0",
        "0.0f",
        "1.0f",
        "'\\40'",
        "'A'",
        "\"\"",
        "\"A\""
    ],
    "mutations": [
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "empty",
            "method": {
                "name": "digest",
                "description": "(Ljava/io/File;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "digest",
                "description": "(Ljava/io/File;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "empty",
            "method": {
                "name": "digest",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "digest",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "digest",
                "description": "(Ljava/lang/String;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "digest",
                "description": "(Ljava/lang/String;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "empty",
            "method": {
                "name": "digest",
                "description": "(Ljava/nio/ByteBuffer;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "digest",
                "description": "(Ljava/nio/ByteBuffer;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "digest",
                "description": "(Ljava/security/MessageDigest;Ljava/io/File;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "digest",
                "description": "(Ljava/security/MessageDigest;Ljava/io/File;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "digest",
                "description": "(Ljava/security/MessageDigest;Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "digest",
                "description": "(Ljava/security/MessageDigest;Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "digest",
                "description": "(Ljava/security/MessageDigest;Ljava/nio/ByteBuffer;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "digest",
                "description": "(Ljava/security/MessageDigest;Ljava/nio/ByteBuffer;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "empty",
            "method": {
                "name": "digest",
                "description": "([B)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "digest",
                "description": "([B)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"\"",
            "method": {
                "name": "digestAsHex",
                "description": "(Ljava/io/File;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"A\"",
            "method": {
                "name": "digestAsHex",
                "description": "(Ljava/io/File;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "digestAsHex",
                "description": "(Ljava/io/File;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"\"",
            "method": {
                "name": "digestAsHex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"A\"",
            "method": {
                "name": "digestAsHex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "digestAsHex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "digestAsHex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "digestAsHex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "digestAsHex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"\"",
            "method": {
                "name": "digestAsHex",
                "description": "(Ljava/nio/ByteBuffer;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"A\"",
            "method": {
                "name": "digestAsHex",
                "description": "(Ljava/nio/ByteBuffer;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "digestAsHex",
                "description": "(Ljava/nio/ByteBuffer;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"\"",
            "method": {
                "name": "digestAsHex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"A\"",
            "method": {
                "name": "digestAsHex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "digestAsHex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getDigest",
                "description": "(Ljava/lang/String;)Ljava/security/MessageDigest;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testInternalNoSuchAlgorithmException(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "null",
            "method": {
                "name": "getDigest",
                "description": "(Ljava/lang/String;Ljava/security/MessageDigest;)Ljava/security/MessageDigest;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 66,
                "ordered": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getMd2Digest",
                "description": "()Ljava/security/MessageDigest;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getMd5Digest",
                "description": "()Ljava/security/MessageDigest;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getSha1Digest",
                "description": "()Ljava/security/MessageDigest;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getSha256Digest",
                "description": "()Ljava/security/MessageDigest;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getSha384Digest",
                "description": "()Ljava/security/MessageDigest;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getSha512Digest",
                "description": "()Ljava/security/MessageDigest;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "false",
            "method": {
                "name": "isAvailable",
                "description": "(Ljava/lang/String;)Z",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 66,
                "ordered": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isAvailable",
                "description": "(Ljava/lang/String;)Z",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 8,
                "ordered": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "md2",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md2",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "md2",
                "description": "(Ljava/lang/String;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md2",
                "description": "(Ljava/lang/String;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "md2",
                "description": "([B)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md2",
                "description": "([B)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "md2Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "md2Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md2Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "md2Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "md2Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md2Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "md2Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "md2Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md2Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "md5",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md5",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "md5",
                "description": "(Ljava/lang/String;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md5",
                "description": "(Ljava/lang/String;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "md5",
                "description": "([B)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md5",
                "description": "([B)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "md5Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "md5Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md5Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "md5Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "md5Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md5Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "md5Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "md5Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md5Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "sha1",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha1",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "sha1",
                "description": "(Ljava/lang/String;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha1",
                "description": "(Ljava/lang/String;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "sha1",
                "description": "([B)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha1",
                "description": "([B)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha1Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha1Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha1Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha1Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha1Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha1Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha1Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha1Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha1Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "sha256",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha256",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "sha256",
                "description": "(Ljava/lang/String;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha256",
                "description": "(Ljava/lang/String;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "sha256",
                "description": "([B)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha256",
                "description": "([B)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha256Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha256Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha256Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha256Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha256Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha256Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha256Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha256Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha256Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "sha384",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha384",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "sha384",
                "description": "(Ljava/lang/String;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha384",
                "description": "(Ljava/lang/String;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "sha384",
                "description": "([B)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha384",
                "description": "([B)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha384Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha384Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha384Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha384Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha384Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha384Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha384Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha384Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha384Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "sha512",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha512",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "sha512",
                "description": "(Ljava/lang/String;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha512",
                "description": "(Ljava/lang/String;)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "sha512",
                "description": "([B)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha512",
                "description": "([B)[B",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha512Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha512Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha512Hex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha512Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha512Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha512Hex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha512Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha512Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha512Hex",
                "description": "([B)Ljava/lang/String;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "updateDigest",
                "description": "(Ljava/security/MessageDigest;Ljava/io/File;)Ljava/security/MessageDigest;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "updateDigest",
                "description": "(Ljava/security/MessageDigest;Ljava/io/InputStream;)Ljava/security/MessageDigest;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "updateDigest",
                "description": "(Ljava/security/MessageDigest;Ljava/lang/String;)Ljava/security/MessageDigest;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "updateDigest",
                "description": "(Ljava/security/MessageDigest;Ljava/nio/ByteBuffer;)Ljava/security/MessageDigest;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "updateDigest",
                "description": "(Ljava/security/MessageDigest;[B)Ljava/security/MessageDigest;",
                "class": "DigestUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "'A'",
            "method": {
                "name": "charAt",
                "description": "(Ljava/lang/String;I)C",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "'\\40'",
            "method": {
                "name": "charAt",
                "description": "(Ljava/lang/String;I)C",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "cleanInput",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "cleanInput",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "cleanInput",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "false",
            "method": {
                "name": "conditionC0",
                "description": "(Ljava/lang/String;I)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "conditionC0",
                "description": "(Ljava/lang/String;I)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "conditionCH0",
                "description": "(Ljava/lang/String;I)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "conditionCH0",
                "description": "(Ljava/lang/String;I)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "conditionCH1",
                "description": "(Ljava/lang/String;I)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "conditionCH1",
                "description": "(Ljava/lang/String;I)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "conditionL0",
                "description": "(Ljava/lang/String;I)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "conditionL0",
                "description": "(Ljava/lang/String;I)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "conditionM0",
                "description": "(Ljava/lang/String;I)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "conditionM0",
                "description": "(Ljava/lang/String;I)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "contains",
                "description": "(Ljava/lang/String;II[Ljava/lang/String;)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "contains",
                "description": "(Ljava/lang/String;II[Ljava/lang/String;)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "doubleMetaphone",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "doubleMetaphone",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "doubleMetaphone",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "doubleMetaphone",
                "description": "(Ljava/lang/String;Z)Ljava/lang/String;",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "doubleMetaphone",
                "description": "(Ljava/lang/String;Z)Ljava/lang/String;",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "doubleMetaphone",
                "description": "(Ljava/lang/String;Z)Ljava/lang/String;",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeWithInvalidObject(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "0",
            "method": {
                "name": "handleAEIOUY",
                "description": "(Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "1",
            "method": {
                "name": "handleAEIOUY",
                "description": "(Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "0",
            "method": {
                "name": "handleC",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "1",
            "method": {
                "name": "handleC",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "handleCC",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "1",
            "method": {
                "name": "handleCC",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "handleCH",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "handleCH",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "handleD",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "handleD",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "handleG",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "1",
            "method": {
                "name": "handleG",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "0",
            "method": {
                "name": "handleGH",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "handleGH",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "0",
            "method": {
                "name": "handleH",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "handleH",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "0",
            "method": {
                "name": "handleJ",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "handleJ",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "0",
            "method": {
                "name": "handleL",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "1",
            "method": {
                "name": "handleL",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "handleP",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "handleP",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "handleR",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "1",
            "method": {
                "name": "handleR",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "0",
            "method": {
                "name": "handleS",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "handleS",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "handleSC",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "1",
            "method": {
                "name": "handleSC",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "0",
            "method": {
                "name": "handleT",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "1",
            "method": {
                "name": "handleT",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "handleW",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "handleW",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "handleX",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "1",
            "method": {
                "name": "handleX",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "handleZ",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "1",
            "method": {
                "name": "handleZ",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isDoubleMetaphoneEqual",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isDoubleMetaphoneEqual",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isDoubleMetaphoneEqual",
                "description": "(Ljava/lang/String;Ljava/lang/String;Z)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isDoubleMetaphoneEqual",
                "description": "(Ljava/lang/String;Ljava/lang/String;Z)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isSilentStart",
                "description": "(Ljava/lang/String;)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 10,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isSilentStart",
                "description": "(Ljava/lang/String;)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isSlavoGermanic",
                "description": "(Ljava/lang/String;)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 14,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isSlavoGermanic",
                "description": "(Ljava/lang/String;)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 9,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isVowel",
                "description": "(C)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isVowel",
                "description": "(C)Z",
                "class": "DoubleMetaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "equals",
                "description": "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testEqualsString(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS2(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testEqualsString(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "equals",
                "description": "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testEqualsString(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS2(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testEqualsString(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getByteBuffer",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/nio/ByteBuffer;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getByteBufferUtf8",
                "description": "(Ljava/lang/String;)Ljava/nio/ByteBuffer;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "getBytes",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString(org.apache.commons.codec.binary.BaseNCodecTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.binary.Base64Test.testIsStringBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testRead0(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getBytes",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString(org.apache.commons.codec.binary.BaseNCodecTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.binary.Base64Test.testIsStringBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testRead0(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "getBytesIso8859_1",
                "description": "(Ljava/lang/String;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getBytesIso8859_1",
                "description": "(Ljava/lang/String;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "getBytesUnchecked",
                "description": "(Ljava/lang/String;Ljava/lang/String;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedNullInput(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getBytesUnchecked",
                "description": "(Ljava/lang/String;Ljava/lang/String;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedNullInput(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "getBytesUsAscii",
                "description": "(Ljava/lang/String;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getBytesUsAscii",
                "description": "(Ljava/lang/String;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "getBytesUtf16",
                "description": "(Ljava/lang/String;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getBytesUtf16",
                "description": "(Ljava/lang/String;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "getBytesUtf16Be",
                "description": "(Ljava/lang/String;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getBytesUtf16Be",
                "description": "(Ljava/lang/String;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "getBytesUtf16Le",
                "description": "(Ljava/lang/String;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getBytesUtf16Le",
                "description": "(Ljava/lang/String;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "getBytesUtf8",
                "description": "(Ljava/lang/String;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString(org.apache.commons.codec.binary.BaseNCodecTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.binary.Base64Test.testIsStringBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testRead0(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getBytesUtf8",
                "description": "(Ljava/lang/String;)[B",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString(org.apache.commons.codec.binary.BaseNCodecTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.binary.Base64Test.testIsStringBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testRead0(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "newIllegalStateException",
                "description": "(Ljava/lang/String;Ljava/io/UnsupportedEncodingException;)Ljava/lang/IllegalStateException;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "newString",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "newString",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "newString",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "newString",
                "description": "([BLjava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructors(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "newString",
                "description": "([BLjava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructors(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "newString",
                "description": "([BLjava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructors(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "newStringIso8859_1",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "newStringIso8859_1",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "newStringIso8859_1",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "newStringUsAscii",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "newStringUsAscii",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "newStringUsAscii",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "newStringUtf16",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "newStringUtf16",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "newStringUtf16",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "newStringUtf16Be",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "newStringUtf16Be",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "newStringUtf16Be",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "newStringUtf16Le",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "newStringUtf16Le",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "newStringUtf16Le",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "newStringUtf8",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructors(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "newStringUtf8",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructors(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "newStringUtf8",
                "description": "([B)Ljava/lang/String;",
                "class": "StringUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructors(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeStringEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeClassCastException(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "decode",
                "description": "(Ljava/nio/ByteBuffer;)[B",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferOddCharacters(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferOddCharacters(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/nio/ByteBuffer;)[B",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferOddCharacters(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "decode",
                "description": "([B)[B",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayOddCharacters(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayOddCharacters(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "([B)[B",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayOddCharacters(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "decodeHex",
                "description": "(Ljava/lang/String;)[B",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters1(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexStringEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters1(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decodeHex",
                "description": "(Ljava/lang/String;)[B",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters1(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexStringEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters1(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "decodeHex",
                "description": "([C)[B",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters3(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters1(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayOddCharacters(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferOddCharacters(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters1(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters5(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexStringEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeStringEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters3(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decodeHex",
                "description": "([C)[B",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters3(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters1(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayOddCharacters(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferOddCharacters(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters1(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters5(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexStringEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeStringEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeClassCastException(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeStringEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayObjectEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "empty",
            "method": {
                "name": "encode",
                "description": "(Ljava/nio/ByteBuffer;)[B",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/nio/ByteBuffer;)[B",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encode",
                "description": "([B)[B",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "([B)[B",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeHex",
                "description": "(Ljava/nio/ByteBuffer;)[C",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHex_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeHex",
                "description": "(Ljava/nio/ByteBuffer;)[C",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHex_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeHex",
                "description": "(Ljava/nio/ByteBuffer;Z)[C",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHex_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeHex",
                "description": "(Ljava/nio/ByteBuffer;Z)[C",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHex_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeHex",
                "description": "(Ljava/nio/ByteBuffer;[C)[C",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHex_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeHex",
                "description": "(Ljava/nio/ByteBuffer;[C)[C",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHex_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeHex",
                "description": "([B)[C",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeStringEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayZeroes(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeHex",
                "description": "([B)[C",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeStringEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeHex",
                "description": "([BZ)[C",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeStringEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeHex",
                "description": "([BZ)[C",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeStringEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeHex",
                "description": "([B[C)[C",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeStringEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHex_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeHex",
                "description": "([B[C)[C",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferObjectEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeStringEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHex_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encodeHexString",
                "description": "(Ljava/nio/ByteBuffer;)Ljava/lang/String;",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encodeHexString",
                "description": "(Ljava/nio/ByteBuffer;)Ljava/lang/String;",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeHexString",
                "description": "(Ljava/nio/ByteBuffer;)Ljava/lang/String;",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroes(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encodeHexString",
                "description": "(Ljava/nio/ByteBuffer;Z)Ljava/lang/String;",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encodeHexString",
                "description": "(Ljava/nio/ByteBuffer;Z)Ljava/lang/String;",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeHexString",
                "description": "(Ljava/nio/ByteBuffer;Z)Ljava/lang/String;",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encodeHexString",
                "description": "([B)Ljava/lang/String;",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayOfZeroes(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encodeHexString",
                "description": "([B)Ljava/lang/String;",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeHexString",
                "description": "([B)Ljava/lang/String;",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayOfZeroes(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha224(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha384(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testSha256(org.apache.commons.codec.digest.DigestUtilsTest)",
                    "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex(org.apache.commons.codec.digest.DigestUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encodeHexString",
                "description": "([BZ)Ljava/lang/String;",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encodeHexString",
                "description": "([BZ)Ljava/lang/String;",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeHexString",
                "description": "([BZ)Ljava/lang/String;",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToLowerCase(org.apache.commons.codec.binary.HexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToUpperCase(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "toDigit",
                "description": "(CI)I",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "toDigit",
                "description": "(CI)I",
                "class": "Hex",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testRequiredCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.HexTest.testCustomCharset(org.apache.commons.codec.binary.HexTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0(org.apache.commons.codec.binary.HexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "decode",
                "description": "([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "decodeBase64",
                "description": "(Ljava/lang/String;)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decodeBase64",
                "description": "(Ljava/lang/String;)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "decodeBase64",
                "description": "([B)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decodeBase64",
                "description": "([B)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decodeInteger",
                "description": "([B)Ljava/math/BigInteger;",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "encode",
                "description": "([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeBase64",
                "description": "([B)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeBase64",
                "description": "([B)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeBase64",
                "description": "([BZ)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeBase64",
                "description": "([BZ)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeBase64",
                "description": "([BZZ)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeBase64",
                "description": "([BZZ)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeBase64",
                "description": "([BZZI)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeBase64",
                "description": "([BZZI)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeBase64Chunked",
                "description": "([B)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeBase64Chunked",
                "description": "([B)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encodeBase64String",
                "description": "([B)Ljava/lang/String;",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encodeBase64String",
                "description": "([B)Ljava/lang/String;",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeBase64String",
                "description": "([B)Ljava/lang/String;",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeBase64URLSafe",
                "description": "([B)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeBase64URLSafe",
                "description": "([B)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encodeBase64URLSafeString",
                "description": "([B)Ljava/lang/String;",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encodeBase64URLSafeString",
                "description": "([B)Ljava/lang/String;",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeBase64URLSafeString",
                "description": "([B)Ljava/lang/String;",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeInteger",
                "description": "(Ljava/math/BigInteger;)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testCodeIntegerNull(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testCodeIntegerNull(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeInteger",
                "description": "(Ljava/math/BigInteger;)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testCodeIntegerNull(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testCodeIntegerNull(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isBase64",
                "description": "(B)Z",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsStringBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isBase64",
                "description": "(B)Z",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsStringBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isBase64",
                "description": "(Ljava/lang/String;)Z",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testIsStringBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testIsStringBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isBase64",
                "description": "(Ljava/lang/String;)Z",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testIsStringBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testIsStringBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isBase64",
                "description": "([B)Z",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsStringBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isBase64",
                "description": "([B)Z",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsStringBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isInAlphabet",
                "description": "(B)Z",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructors(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testRead0(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testConstructors(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isInAlphabet",
                "description": "(B)Z",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructors(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testRead0(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isUrlSafe",
                "description": "()Z",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isUrlSafe",
                "description": "()Z",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "toIntegerBytes",
                "description": "(Ljava/math/BigInteger;)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "toIntegerBytes",
                "description": "(Ljava/math/BigInteger;)[B",
                "class": "Base64",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "available",
                "description": "(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "available",
                "description": "(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "containsAlphabetOrPad",
                "description": "([B)Z",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad(org.apache.commons.codec.binary.BaseNCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testRead0(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructors(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad(org.apache.commons.codec.binary.BaseNCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "containsAlphabetOrPad",
                "description": "([B)Z",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad(org.apache.commons.codec.binary.BaseNCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testRead0(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructors(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad(org.apache.commons.codec.binary.BaseNCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;)[B",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;)[B",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "decode",
                "description": "([B)[B",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "([B)[B",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testEmptyBase64(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encode",
                "description": "([B)[B",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "([B)[B",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encode",
                "description": "([BII)[B",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "([BII)[B",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encodeAsString",
                "description": "([B)Ljava/lang/String;",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encodeAsString",
                "description": "([B)Ljava/lang/String;",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeAsString",
                "description": "([B)Ljava/lang/String;",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encodeToString",
                "description": "([B)Ljava/lang/String;",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encodeToString",
                "description": "([B)Ljava/lang/String;",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeToString",
                "description": "([B)Ljava/lang/String;",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "ensureBufferSize",
                "description": "(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "ensureBufferSize",
                "description": "(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0L",
            "method": {
                "name": "getEncodedLength",
                "description": "([B)J",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1L",
            "method": {
                "name": "getEncodedLength",
                "description": "([B)J",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(org.apache.commons.codec.binary.Base64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "false",
            "method": {
                "name": "hasData",
                "description": "(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 25,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "true",
            "method": {
                "name": "hasData",
                "description": "(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isInAlphabet",
                "description": "(Ljava/lang/String;)Z",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString(org.apache.commons.codec.binary.BaseNCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString(org.apache.commons.codec.binary.BaseNCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "true",
            "method": {
                "name": "isInAlphabet",
                "description": "(Ljava/lang/String;)Z",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString(org.apache.commons.codec.binary.BaseNCodecTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isInAlphabet",
                "description": "([BZ)Z",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean(org.apache.commons.codec.binary.BaseNCodecTest)",
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString(org.apache.commons.codec.binary.BaseNCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean(org.apache.commons.codec.binary.BaseNCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isInAlphabet",
                "description": "([BZ)Z",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean(org.apache.commons.codec.binary.BaseNCodecTest)",
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString(org.apache.commons.codec.binary.BaseNCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean(org.apache.commons.codec.binary.BaseNCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isWhiteSpace",
                "description": "(B)Z",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsWhiteSpace(org.apache.commons.codec.binary.BaseNCodecTest)",
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean(org.apache.commons.codec.binary.BaseNCodecTest)",
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString(org.apache.commons.codec.binary.BaseNCodecTest)",
                    "org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsStringBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsWhiteSpace(org.apache.commons.codec.binary.BaseNCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isWhiteSpace",
                "description": "(B)Z",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsWhiteSpace(org.apache.commons.codec.binary.BaseNCodecTest)",
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean(org.apache.commons.codec.binary.BaseNCodecTest)",
                    "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString(org.apache.commons.codec.binary.BaseNCodecTest)",
                    "org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsStringBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "readResults",
                "description": "([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "readResults",
                "description": "([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "resizeBuffer",
                "description": "(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)[B",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "resizeBuffer",
                "description": "(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)[B",
                "class": "BaseNCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec68(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownDecodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodec112(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testNonBase64Test(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTriplets(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testTripletsChunked(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testKnownEncodings(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testBase64(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger2(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger3(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger4(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testSingletons(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder(org.apache.commons.codec.binary.Base64Codec13Test)",
                    "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testCodeInteger1(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testPairs(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base64Test.testUrlSafe(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testUUID(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom(org.apache.commons.codec.binary.Base64Test)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "decodeQuotedPrintable",
                "description": "([B)[B",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeWithNullArray(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeWithNullArray(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decodeQuotedPrintable",
                "description": "([B)[B",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeWithNullArray(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encode",
                "description": "([B)[B",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "([B)[B",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "encodeByte",
                "description": "(IZLjava/io/ByteArrayOutputStream;)I",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "encodeByte",
                "description": "(IZLjava/io/ByteArrayOutputStream;)I",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "encodeQuotedPrintable",
                "description": "(ILjava/io/ByteArrayOutputStream;)I",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "encodeQuotedPrintable",
                "description": "(ILjava/io/ByteArrayOutputStream;)I",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeQuotedPrintable",
                "description": "(Ljava/util/BitSet;[B)[B",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeQuotedPrintable",
                "description": "(Ljava/util/BitSet;[B)[B",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeQuotedPrintable",
                "description": "(Ljava/util/BitSet;[BZ)[B",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeQuotedPrintable",
                "description": "(Ljava/util/BitSet;[BZ)[B",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "getUnsignedOctet",
                "description": "(I[B)I",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "getUnsignedOctet",
                "description": "(I[B)I",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isWhitespace",
                "description": "(I)Z",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isWhitespace",
                "description": "(I)Z",
                "class": "QuotedPrintableCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getInitializedMac",
                "description": "(Ljava/lang/String;[B)Ljavax/crypto/Mac;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullAlgo(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testNullKey(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullAlgo(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getInitializedMac",
                "description": "(Lorg/apache/commons/codec/digest/HmacAlgorithms;[B)Ljavax/crypto/Mac;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testNullKey(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "empty",
            "method": {
                "name": "hmac",
                "description": "(Ljava/io/File;)[B",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "hmac",
                "description": "(Ljava/io/File;)[B",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "hmac",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "hmac",
                "description": "(Ljava/io/InputStream;)[B",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "hmac",
                "description": "(Ljava/lang/String;)[B",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "hmac",
                "description": "(Ljava/lang/String;)[B",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "empty",
            "method": {
                "name": "hmac",
                "description": "(Ljava/nio/ByteBuffer;)[B",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "hmac",
                "description": "(Ljava/nio/ByteBuffer;)[B",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"\"",
            "method": {
                "name": "hmacHex",
                "description": "(Ljava/io/File;)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"A\"",
            "method": {
                "name": "hmacHex",
                "description": "(Ljava/io/File;)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "hmacHex",
                "description": "(Ljava/io/File;)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "hmacHex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "hmacHex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "hmacHex",
                "description": "(Ljava/io/InputStream;)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "hmacHex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "hmacHex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "hmacHex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"\"",
            "method": {
                "name": "hmacHex",
                "description": "(Ljava/nio/ByteBuffer;)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"A\"",
            "method": {
                "name": "hmacHex",
                "description": "(Ljava/nio/ByteBuffer;)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "hmacHex",
                "description": "(Ljava/nio/ByteBuffer;)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "hmacHex",
                "description": "([B)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "hmacHex",
                "description": "([B)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "hmacHex",
                "description": "([B)Ljava/lang/String;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "false",
            "method": {
                "name": "isAvailable",
                "description": "(Ljava/lang/String;)Z",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "true",
            "method": {
                "name": "isAvailable",
                "description": "(Ljava/lang/String;)Z",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "false",
            "method": {
                "name": "isAvailable",
                "description": "(Lorg/apache/commons/codec/digest/HmacAlgorithms;)Z",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 96,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "true",
            "method": {
                "name": "isAvailable",
                "description": "(Lorg/apache/commons/codec/digest/HmacAlgorithms;)Z",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 96,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "updateHmac",
                "description": "(Ljavax/crypto/Mac;Ljava/io/InputStream;)Ljavax/crypto/Mac;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "updateHmac",
                "description": "(Ljavax/crypto/Mac;Ljava/lang/String;)Ljavax/crypto/Mac;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString(org.apache.commons.codec.digest.HmacUtilsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA256](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA512](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacMD5](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA1](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA224](org.apache.commons.codec.digest.HmacAlgorithmsTest)",
                    "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac[HmacSHA384](org.apache.commons.codec.digest.HmacAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "updateHmac",
                "description": "(Ljavax/crypto/Mac;[B)Ljavax/crypto/Mac;",
                "class": "HmacUtils",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray(org.apache.commons.codec.digest.HmacUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "cleanName",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "cleanName",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "cleanName",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 7,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeNull(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_One_Letter_to_Nothing(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Space_to_Nothing(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeNull(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_One_Letter_to_Nothing(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Space_to_Nothing(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeNull(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_One_Letter_to_Nothing(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Space_to_Nothing(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "getFirst3Last3",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3_PETE_Returns_PETE(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3__ALEXANDER_Returns_Aleder(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3_PETE_Returns_PETE(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "getFirst3Last3",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3_PETE_Returns_PETE(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3__ALEXANDER_Returns_Aleder(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3_PETE_Returns_PETE(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getFirst3Last3",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3_PETE_Returns_PETE(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3__ALEXANDER_Returns_Aleder(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3_PETE_Returns_PETE(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "getMinRating",
                "description": "(I)I",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_1_Returns5_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_2_Returns5_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_7_Return4_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_10_Returns3_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_7_Returns4_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_13_Returns_1_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_11_Returns_3_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_8_Returns3_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_1_Returns5_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "getMinRating",
                "description": "(I)I",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_1_Returns5_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_2_Returns5_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_7_Return4_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_10_Returns3_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_7_Returns4_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_13_Returns_1_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_11_Returns_3_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_8_Returns3_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_1_Returns5_Successfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isEncodeEquals",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Z",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 11,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameToSingleLetter_KARL_C_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isEncodeEquals",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Z",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameToSingleLetter_KARL_C_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isVowel",
                "description": "(Ljava/lang/String;)Z",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testIsVowel_SmallD_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__DECLAN_Returns_DCLN(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testIsVowel_CapitalA_ReturnsTrue(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisVowel_SingleVowel_ReturnsTrue(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isVowel",
                "description": "(Ljava/lang/String;)Z",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testIsVowel_SmallD_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__DECLAN_Returns_DCLN(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testIsVowel_CapitalA_ReturnsTrue(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisVowel_SingleVowel_ReturnsTrue(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testIsVowel_SmallD_ReturnsFalse(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "leftToRightThenRightToLeftProcessing",
                "description": "(Ljava/lang/String;Ljava/lang/String;)I",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "leftToRightThenRightToLeftProcessing",
                "description": "(Ljava/lang/String;Ljava/lang/String;)I",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "removeAccents",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NINO_NoChange(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "removeAccents",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NINO_NoChange(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "removeAccents",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NINO_NoChange(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "removeDoubleConsonants",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleDoubleVowel_BEETLE_NotRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "removeDoubleConsonants",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleDoubleVowel_BEETLE_NotRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "removeDoubleConsonants",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleDoubleVowel_BEETLE_NotRemoved(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "removeVowels",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__DECLAN_Returns_DCLN(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "removeVowels",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__DECLAN_Returns_DCLN(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "removeVowels",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "MatchRatingApproachEncoder",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__DECLAN_Returns_DCLN(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)",
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR(org.apache.commons.codec.language.MatchRatingApproachEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "body",
                "description": "([III)[I",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "body",
                "description": "([III)[I",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "byteToUnsigned",
                "description": "(B)I",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "byteToUnsigned",
                "description": "(B)I",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "crypt",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "crypt",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "crypt",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "crypt",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "crypt",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "crypt",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "dEncrypt",
                "description": "(IIIII[I)I",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "dEncrypt",
                "description": "(IIIII[I)I",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "desSetKey",
                "description": "([B)[I",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "desSetKey",
                "description": "([B)[I",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "fourBytesToInt",
                "description": "([BI)I",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "fourBytesToInt",
                "description": "([BI)I",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "hPermOp",
                "description": "(III)I",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "hPermOp",
                "description": "(III)I",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "intToFourBytes",
                "description": "(I[BI)V",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "permOp",
                "description": "(IIII[I)V",
                "class": "UnixCrypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "canEncode",
                "description": "(B)Z",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "canEncode",
                "description": "(B)Z",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "containsSpace",
                "description": "([B)Z",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "containsSpace",
                "description": "([B)Z",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeNullObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeUnsupportedObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeUnsupportedObject(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "decode",
                "description": "([B)[B",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "([B)[B",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "doEncode",
                "description": "([BIZ)[B",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "doEncode",
                "description": "([BIZ)[B",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testEncodeNullObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testEncodeUnsupportedObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testEncodeUnsupportedObject(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encode",
                "description": "([B)[B",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "([B)[B",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "expectedDecodingBytes",
                "description": "([B)I",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "expectedDecodingBytes",
                "description": "([B)I",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "expectedEncodingBytes",
                "description": "([B)I",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "expectedEncodingBytes",
                "description": "([B)I",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "inAlwaysEncodeCharsRange",
                "description": "(B)Z",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "true",
            "method": {
                "name": "inAlwaysEncodeCharsRange",
                "description": "(B)Z",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "insertAlwaysEncodeChar",
                "description": "(B)V",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 8,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeNullObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testEncodeNullObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testEncodeUnsupportedObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeUnsupportedObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "insertAlwaysEncodeChars",
                "description": "([B)V",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isAsciiChar",
                "description": "(B)Z",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isAsciiChar",
                "description": "(B)Z",
                "class": "PercentCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "apr1Crypt",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "apr1Crypt",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "apr1Crypt",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "apr1Crypt",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "apr1Crypt",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "apr1Crypt",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "apr1Crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "apr1Crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "apr1Crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "apr1Crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "apr1Crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "apr1Crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "md5Crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "md5Crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md5Crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "md5Crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "md5Crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md5Crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "md5Crypt",
                "description": "([BLjava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "md5Crypt",
                "description": "([BLjava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "md5Crypt",
                "description": "([BLjava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "Md5Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "decodeUrl",
                "description": "([B)[B",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeWithNullArray(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeWithNullArray(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decodeUrl",
                "description": "([B)[B",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeWithNullArray(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encode",
                "description": "([B)[B",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeNull(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "([B)[B",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "encodeUrl",
                "description": "(Ljava/util/BitSet;[B)[B",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeNull(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeUrl",
                "description": "(Ljava/util/BitSet;[B)[B",
                "class": "URLCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeNull(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "false",
            "method": {
                "name": "contains",
                "description": "(Ljava/lang/CharSequence;C)Z",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "true",
            "method": {
                "name": "contains",
                "description": "(Ljava/lang/CharSequence;C)Z",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "null",
            "method": {
                "name": "createScanner",
                "description": "(Ljava/lang/String;)Ljava/util/Scanner;",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "false",
            "method": {
                "name": "endsWith",
                "description": "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "true",
            "method": {
                "name": "endsWith",
                "description": "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "null",
            "method": {
                "name": "getInstance",
                "description": "(Lorg/apache/commons/codec/language/bm/NameType;Lorg/apache/commons/codec/language/bm/RuleType;Ljava/lang/String;)Ljava/util/List;",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "null",
            "method": {
                "name": "getInstance",
                "description": "(Lorg/apache/commons/codec/language/bm/NameType;Lorg/apache/commons/codec/language/bm/RuleType;Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;)Ljava/util/List;",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "null",
            "method": {
                "name": "getInstanceMap",
                "description": "(Lorg/apache/commons/codec/language/bm/NameType;Lorg/apache/commons/codec/language/bm/RuleType;Ljava/lang/String;)Ljava/util/Map;",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "null",
            "method": {
                "name": "getInstanceMap",
                "description": "(Lorg/apache/commons/codec/language/bm/NameType;Lorg/apache/commons/codec/language/bm/RuleType;Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;)Ljava/util/Map;",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "null",
            "method": {
                "name": "parsePhoneme",
                "description": "(Ljava/lang/String;)Lorg/apache/commons/codec/language/bm/Rule$Phoneme;",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "null",
            "method": {
                "name": "parsePhonemeExpr",
                "description": "(Ljava/lang/String;)Lorg/apache/commons/codec/language/bm/Rule$PhonemeExpr;",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "null",
            "method": {
                "name": "pattern",
                "description": "(Ljava/lang/String;)Lorg/apache/commons/codec/language/bm/Rule$RPattern;",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "false",
            "method": {
                "name": "patternAndContextMatches",
                "description": "(Ljava/lang/CharSequence;I)Z",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "true",
            "method": {
                "name": "patternAndContextMatches",
                "description": "(Ljava/lang/CharSequence;I)Z",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "false",
            "method": {
                "name": "startsWith",
                "description": "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "true",
            "method": {
                "name": "startsWith",
                "description": "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "\"\"",
            "method": {
                "name": "stripQuotes",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "NON_VIABLE",
            "mutator": "\"A\"",
            "method": {
                "name": "stripQuotes",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "stripQuotes",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Rule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "doDecoding",
                "description": "([B)[B",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testNullInput(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testNullInput(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "doDecoding",
                "description": "([B)[B",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testNullInput(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "doEncoding",
                "description": "([B)[B",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testNullInput(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testNullInput(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "doEncoding",
                "description": "([B)[B",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testNullInput(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "QCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "doDecoding",
                "description": "([B)[B",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testNullInput(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testNullInput(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "doDecoding",
                "description": "([B)[B",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testNullInput(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "doEncoding",
                "description": "([B)[B",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testNullInput(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testNullInput(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "doEncoding",
                "description": "([B)[B",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testNullInput(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "BCodec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObjectException(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObjectException(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectException(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectException(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "fromAscii",
                "description": "([B)[B",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "fromAscii",
                "description": "([B)[B",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "fromAscii",
                "description": "([C)[B",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "fromAscii",
                "description": "([C)[B",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isEmpty",
                "description": "([B)Z",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isEmpty",
                "description": "([B)Z",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "toAsciiBytes",
                "description": "([B)[B",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "toAsciiBytes",
                "description": "([B)[B",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "toAsciiChars",
                "description": "([B)[C",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "toAsciiChars",
                "description": "([B)[C",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString(org.apache.commons.codec.binary.BinaryCodecTest)",
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "toAsciiString",
                "description": "([B)Ljava/lang/String;",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "toAsciiString",
                "description": "([B)Ljava/lang/String;",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "toAsciiString",
                "description": "([B)Ljava/lang/String;",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "toByteArray",
                "description": "(Ljava/lang/String;)[B",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "toByteArray",
                "description": "(Ljava/lang/String;)[B",
                "class": "BinaryCodec",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString(org.apache.commons.codec.binary.BinaryCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testEncodeEmpty(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isLastChar",
                "description": "(II)Z",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testWhy(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testPHTOF(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testMetaphone(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testWhy(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isLastChar",
                "description": "(II)Z",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testWhy(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testPHTOF(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testMetaphone(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isMetaphoneEqual",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Z",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "true",
            "method": {
                "name": "isMetaphoneEqual",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Z",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 15,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isNextChar",
                "description": "(Ljava/lang/StringBuilder;IC)Z",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testPHTOF(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testMetaphone(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testPHTOF(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isNextChar",
                "description": "(Ljava/lang/StringBuilder;IC)Z",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testPHTOF(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testMetaphone(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isPreviousChar",
                "description": "(Ljava/lang/StringBuilder;IC)Z",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testExceedLength(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWhy(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testPHTOF(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testMetaphone(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isPreviousChar",
                "description": "(Ljava/lang/StringBuilder;IC)Z",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testExceedLength(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWhy(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testPHTOF(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testMetaphone(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testExceedLength(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isVowel",
                "description": "(Ljava/lang/StringBuilder;I)Z",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testWhy(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testMetaphone(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isVowel",
                "description": "(Ljava/lang/StringBuilder;I)Z",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testWhy(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testMetaphone(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testWhy(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "metaphone",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testEncodeEmpty(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testEncodeNull(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testExceedLength(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWhy(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testPHTOF(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testMetaphone(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testExceedLength(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "metaphone",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testEncodeEmpty(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testEncodeNull(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testExceedLength(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWhy(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testPHTOF(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testMetaphone(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testExceedLength(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "metaphone",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testEncodeEmpty(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testEncodeNull(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testExceedLength(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWhy(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testPHTOF(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testMetaphone(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testExceedLength(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "regionMatch",
                "description": "(Ljava/lang/StringBuilder;ILjava/lang/String;)Z",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testPHTOF(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testMetaphone(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "regionMatch",
                "description": "(Ljava/lang/StringBuilder;ILjava/lang/String;)Z",
                "class": "Metaphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testPHTOF(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testMetaphone(org.apache.commons.codec.language.MetaphoneTest)",
                    "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY(org.apache.commons.codec.language.MetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "cleanup",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "cleanup",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "cleanup",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "soundex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "soundex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "soundex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "soundex",
                "description": "(Ljava/lang/String;Z)[Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "soundex",
                "description": "(Ljava/lang/String;Z)[Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "stripQuotes",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": ["org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "stripQuotes",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": ["org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "stripQuotes",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": ["org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha256Crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall(org.apache.commons.codec.digest.Sha256CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha256Crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall(org.apache.commons.codec.digest.Sha256CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha256Crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall(org.apache.commons.codec.digest.Sha256CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha256Crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings(org.apache.commons.codec.digest.Sha256CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha256Crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings(org.apache.commons.codec.digest.Sha256CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha256Crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings(org.apache.commons.codec.digest.Sha256CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha2Crypt",
                "description": "([BLjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha2Crypt",
                "description": "([BLjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha2Crypt",
                "description": "([BLjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha512Crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha512Crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha512Crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "sha512Crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "sha512Crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "sha512Crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Sha2Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "crypt",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "crypt",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "crypt",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "crypt",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "crypt",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "crypt",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "crypt",
                "description": "([B)Ljava/lang/String;",
                "class": "Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "crypt",
                "description": "([BLjava/lang/String;)Ljava/lang/String;",
                "class": "Crypt",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings(org.apache.commons.codec.digest.UnixCryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt(org.apache.commons.codec.digest.CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0L",
            "method": {
                "name": "fromLittleEndian",
                "description": "([BII)J",
                "class": "XXHash32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)",
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[0](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1L",
            "method": {
                "name": "fromLittleEndian",
                "description": "([BII)J",
                "class": "XXHash32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)",
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[0](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "getInt",
                "description": "([BI)I",
                "class": "XXHash32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)",
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[0](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "getInt",
                "description": "([BI)I",
                "class": "XXHash32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)",
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[0](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0L",
            "method": {
                "name": "getValue",
                "description": "()J",
                "class": "XXHash32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)",
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[0](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1L",
            "method": {
                "name": "getValue",
                "description": "()J",
                "class": "XXHash32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)",
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[0](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "initializeState",
                "description": "()V",
                "class": "XXHash32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)",
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[0](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "process",
                "description": "([BI)V",
                "class": "XXHash32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)",
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[0](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "void",
            "method": {
                "name": "reset",
                "description": "()V",
                "class": "XXHash32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "void",
            "method": {
                "name": "update",
                "description": "(I)V",
                "class": "XXHash32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "update",
                "description": "([BII)V",
                "class": "XXHash32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)",
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[0](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.XXHash32Test.verifyChecksum[1](org.apache.commons.codec.digest.XXHash32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "append",
                "description": "(C)V",
                "class": "DoubleMetaphone$DoubleMetaphoneResult",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "append",
                "description": "(CC)V",
                "class": "DoubleMetaphone$DoubleMetaphoneResult",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "append",
                "description": "(Ljava/lang/String;)V",
                "class": "DoubleMetaphone$DoubleMetaphoneResult",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "append",
                "description": "(Ljava/lang/String;Ljava/lang/String;)V",
                "class": "DoubleMetaphone$DoubleMetaphoneResult",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "appendAlternate",
                "description": "(C)V",
                "class": "DoubleMetaphone$DoubleMetaphoneResult",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "appendAlternate",
                "description": "(Ljava/lang/String;)V",
                "class": "DoubleMetaphone$DoubleMetaphoneResult",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "appendPrimary",
                "description": "(C)V",
                "class": "DoubleMetaphone$DoubleMetaphoneResult",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "appendPrimary",
                "description": "(Ljava/lang/String;)V",
                "class": "DoubleMetaphone$DoubleMetaphoneResult",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "false",
            "method": {
                "name": "isComplete",
                "description": "()Z",
                "class": "DoubleMetaphone$DoubleMetaphoneResult",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 15,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isComplete",
                "description": "()Z",
                "class": "DoubleMetaphone$DoubleMetaphoneResult",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3(org.apache.commons.codec.language.DoubleMetaphoneTest)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary(org.apache.commons.codec.language.DoubleMetaphone2Test)",
                    "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(org.apache.commons.codec.language.DoubleMetaphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual(org.apache.commons.codec.language.DoubleMetaphoneTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "applyFinalRules",
                "description": "(Lorg/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder;Ljava/util/Map;)Lorg/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder;",
                "class": "PhoneticEngine",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "PhoneticEngine",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "PhoneticEngine",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "PhoneticEngine",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;)Ljava/lang/String;",
                "class": "PhoneticEngine",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;)Ljava/lang/String;",
                "class": "PhoneticEngine",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;)Ljava/lang/String;",
                "class": "PhoneticEngine",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "join",
                "description": "(Ljava/lang/Iterable;Ljava/lang/String;)Ljava/lang/String;",
                "class": "PhoneticEngine",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "join",
                "description": "(Ljava/lang/Iterable;Ljava/lang/String;)Ljava/lang/String;",
                "class": "PhoneticEngine",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "join",
                "description": "(Ljava/lang/Iterable;Ljava/lang/String;)Ljava/lang/String;",
                "class": "PhoneticEngine",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "arrayContains",
                "description": "([CC)Z",
                "class": "ColognePhonetic",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "arrayContains",
                "description": "([CC)Z",
                "class": "ColognePhonetic",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "colognePhonetic",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "ColognePhonetic",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "colognePhonetic",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "ColognePhonetic",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "colognePhonetic",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "ColognePhonetic",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "ColognePhonetic",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 12,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isEncodeEqual",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Z",
                "class": "ColognePhonetic",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 7,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "true",
            "method": {
                "name": "isEncodeEqual",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Z",
                "class": "ColognePhonetic",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 15,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "preprocess",
                "description": "(Ljava/lang/String;)[C",
                "class": "ColognePhonetic",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "preprocess",
                "description": "(Ljava/lang/String;)[C",
                "class": "ColognePhonetic",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "decodeText",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "RFC1522Codec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.RFC1522CodecTest.testNullInput(org.apache.commons.codec.net.RFC1522CodecTest)",
                    "org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid(org.apache.commons.codec.net.RFC1522CodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.RFC1522CodecTest.testNullInput(org.apache.commons.codec.net.RFC1522CodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "decodeText",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "RFC1522Codec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.RFC1522CodecTest.testNullInput(org.apache.commons.codec.net.RFC1522CodecTest)",
                    "org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid(org.apache.commons.codec.net.RFC1522CodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.RFC1522CodecTest.testNullInput(org.apache.commons.codec.net.RFC1522CodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "decodeText",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "RFC1522Codec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.net.RFC1522CodecTest.testNullInput(org.apache.commons.codec.net.RFC1522CodecTest)",
                    "org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid(org.apache.commons.codec.net.RFC1522CodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testDecodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid(org.apache.commons.codec.net.RFC1522CodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encodeText",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "RFC1522Codec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.RFC1522CodecTest.testNullInput(org.apache.commons.codec.net.RFC1522CodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.RFC1522CodecTest.testNullInput(org.apache.commons.codec.net.RFC1522CodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encodeText",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "RFC1522Codec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.RFC1522CodecTest.testNullInput(org.apache.commons.codec.net.RFC1522CodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.RFC1522CodecTest.testNullInput(org.apache.commons.codec.net.RFC1522CodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "null",
            "method": {
                "name": "encodeText",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
                "class": "RFC1522Codec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.RFC1522CodecTest.testNullInput(org.apache.commons.codec.net.RFC1522CodecTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encodeText",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "RFC1522Codec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encodeText",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "RFC1522Codec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encodeText",
                "description": "(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;",
                "class": "RFC1522Codec",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testEncodeObjects(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.BCodecTest)",
                    "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.BCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "addLeft",
                "description": "(C)V",
                "class": "ColognePhonetic$CologneInputBuffer",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "empty",
            "method": {
                "name": "copyData",
                "description": "(II)[C",
                "class": "ColognePhonetic$CologneInputBuffer",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "copyData",
                "description": "(II)[C",
                "class": "ColognePhonetic$CologneInputBuffer",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "'A'",
            "method": {
                "name": "getNextChar",
                "description": "()C",
                "class": "ColognePhonetic$CologneInputBuffer",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "'\\40'",
            "method": {
                "name": "getNextChar",
                "description": "()C",
                "class": "ColognePhonetic$CologneInputBuffer",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "getNextPos",
                "description": "()I",
                "class": "ColognePhonetic$CologneInputBuffer",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "getNextPos",
                "description": "()I",
                "class": "ColognePhonetic$CologneInputBuffer",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "'A'",
            "method": {
                "name": "removeNext",
                "description": "()C",
                "class": "ColognePhonetic$CologneInputBuffer",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "TIMED_OUT",
            "mutator": "'\\40'",
            "method": {
                "name": "removeNext",
                "description": "()C",
                "class": "ColognePhonetic$CologneInputBuffer",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "available",
                "description": "()I",
                "class": "BaseNCodecInputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "available",
                "description": "()I",
                "class": "BaseNCodecInputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "read",
                "description": "()I",
                "class": "BaseNCodecInputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "read",
                "description": "()I",
                "class": "BaseNCodecInputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "read",
                "description": "([BII)I",
                "class": "BaseNCodecInputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testRead0(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "read",
                "description": "([BII)I",
                "class": "BaseNCodecInputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testRead0(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte(org.apache.commons.codec.binary.Base64InputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "void",
            "method": {
                "name": "reset",
                "description": "()V",
                "class": "BaseNCodecInputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0L",
            "method": {
                "name": "skip",
                "description": "(J)J",
                "class": "BaseNCodecInputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1L",
            "method": {
                "name": "skip",
                "description": "(J)J",
                "class": "BaseNCodecInputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "BeiderMorseEncoder",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "BeiderMorseEncoder",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "BeiderMorseEncoder",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 13,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "BeiderMorseEncoder",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "setConcat",
                "description": "(Z)V",
                "class": "BeiderMorseEncoder",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "setMaxPhonemes",
                "description": "(I)V",
                "class": "BeiderMorseEncoder",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "setNameType",
                "description": "(Lorg/apache/commons/codec/language/bm/NameType;)V",
                "class": "BeiderMorseEncoder",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "setRuleType",
                "description": "(Lorg/apache/commons/codec/language/bm/RuleType;)V",
                "class": "BeiderMorseEncoder",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "Nysiis",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.NysiisTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testEncodeEmpty(org.apache.commons.codec.language.NysiisTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.NysiisTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.NysiisTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isVowel",
                "description": "(C)Z",
                "class": "Nysiis",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testBran(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testFal(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testOthers(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule5(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule7(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnat(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTranan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testCap(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule6(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSpecialBranches(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTrueVariant(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDropBy(org.apache.commons.codec.language.NysiisTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.NysiisTest.testBran(org.apache.commons.codec.language.NysiisTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isVowel",
                "description": "(C)Z",
                "class": "Nysiis",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testBran(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testFal(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testOthers(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule5(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule7(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnat(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTranan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testCap(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule6(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSpecialBranches(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTrueVariant(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDropBy(org.apache.commons.codec.language.NysiisTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "nysiis",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Nysiis",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.language.NysiisTest.testEncodeNull(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testEncodeEmpty(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testLocaleIndependence(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testBran(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testFal(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testOthers(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule5(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule7(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnat(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTranan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testCap(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule6(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSpecialBranches(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTrueVariant(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDropBy(org.apache.commons.codec.language.NysiisTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "nysiis",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Nysiis",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.language.NysiisTest.testEncodeNull(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testEncodeEmpty(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testLocaleIndependence(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testBran(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testFal(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testOthers(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule5(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule7(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnat(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTranan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testCap(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule6(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSpecialBranches(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTrueVariant(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDropBy(org.apache.commons.codec.language.NysiisTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "nysiis",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Nysiis",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.language.NysiisTest.testEncodeNull(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testEncodeEmpty(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testLocaleIndependence(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testBran(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testFal(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testOthers(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule5(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule7(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnat(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTranan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testCap(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule6(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSpecialBranches(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTrueVariant(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDropBy(org.apache.commons.codec.language.NysiisTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "transcodeRemaining",
                "description": "(CCCC)[C",
                "class": "Nysiis",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testBran(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testFal(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testOthers(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule5(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule7(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnat(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTranan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testCap(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule6(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSpecialBranches(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTrueVariant(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDropBy(org.apache.commons.codec.language.NysiisTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot2(org.apache.commons.codec.language.NysiisTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "transcodeRemaining",
                "description": "(CCCC)[C",
                "class": "Nysiis",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testBran(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testFal(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testOthers(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule5(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule7(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnat(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTranan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testCap(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule6(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSpecialBranches(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTrueVariant(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDropBy(org.apache.commons.codec.language.NysiisTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "void",
            "method": {
                "name": "main",
                "description": "([Ljava/lang/String;)V",
                "class": "Digest",
                "package": "org.apache.commons.codec.cli"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "void",
            "method": {
                "name": "println",
                "description": "(Ljava/lang/String;[B)V",
                "class": "Digest",
                "package": "org.apache.commons.codec.cli"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "void",
            "method": {
                "name": "println",
                "description": "(Ljava/lang/String;[BLjava/lang/String;)V",
                "class": "Digest",
                "package": "org.apache.commons.codec.cli"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "void",
            "method": {
                "name": "run",
                "description": "()V",
                "class": "Digest",
                "package": "org.apache.commons.codec.cli"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "void",
            "method": {
                "name": "run",
                "description": "(Ljava/lang/String;Ljava/lang/String;)V",
                "class": "Digest",
                "package": "org.apache.commons.codec.cli"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "void",
            "method": {
                "name": "run",
                "description": "(Ljava/lang/String;Ljava/security/MessageDigest;)V",
                "class": "Digest",
                "package": "org.apache.commons.codec.cli"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "void",
            "method": {
                "name": "run",
                "description": "(Ljava/lang/String;Ljava/security/MessageDigest;[Ljava/io/File;)V",
                "class": "Digest",
                "package": "org.apache.commons.codec.cli"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "void",
            "method": {
                "name": "run",
                "description": "([Ljava/lang/String;)V",
                "class": "Digest",
                "package": "org.apache.commons.codec.cli"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "Soundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.SoundexTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeEmpty(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.SoundexTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.SoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "false",
            "method": {
                "name": "hasMarker",
                "description": "([C)Z",
                "class": "Soundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "true",
            "method": {
                "name": "hasMarker",
                "description": "([C)Z",
                "class": "Soundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "'A'",
            "method": {
                "name": "map",
                "description": "(C)C",
                "class": "Soundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testBadCharacters(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBasic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch4(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testGenealogy(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testSimplifiedSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testB650(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testLocaleIndependence(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testWikipediaAmericanSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testDifference(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute(org.apache.commons.codec.language.SoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "'\\40'",
            "method": {
                "name": "map",
                "description": "(C)C",
                "class": "Soundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testBadCharacters(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBasic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch4(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testGenealogy(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testSimplifiedSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testB650(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testLocaleIndependence(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testWikipediaAmericanSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testDifference(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute(org.apache.commons.codec.language.SoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "soundex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Soundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.SoundexTest.testEncodeEmpty(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeNull(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testBadCharacters(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBasic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch4(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testGenealogy(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testSimplifiedSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testB650(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testLocaleIndependence(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testWikipediaAmericanSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testDifference(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute(org.apache.commons.codec.language.SoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "soundex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Soundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.SoundexTest.testEncodeEmpty(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeNull(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testBadCharacters(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBasic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch4(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testGenealogy(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testSimplifiedSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testB650(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testLocaleIndependence(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testWikipediaAmericanSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testDifference(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute(org.apache.commons.codec.language.SoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "soundex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Soundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.SoundexTest.testEncodeEmpty(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeNull(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testBadCharacters(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBasic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch4(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testGenealogy(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testSimplifiedSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testB650(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testLocaleIndependence(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testWikipediaAmericanSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testDifference(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute(org.apache.commons.codec.language.SoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "clean",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "SoundexUtils",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.NysiisTest.testEncodeEmpty(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncode(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeEmpty(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.NysiisTest.testLocaleIndependence(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testBadCharacters(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBasic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch4(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testGenealogy(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testSimplifiedSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testB650(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testLocaleIndependence(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testWikipediaAmericanSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.SoundexTest.testDifference(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.NysiisTest.testBran(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testFal(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testOthers(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule5(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule7(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnat(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTranan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testCap(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule6(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSpecialBranches(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTrueVariant(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDropBy(org.apache.commons.codec.language.NysiisTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncode(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "clean",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "SoundexUtils",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.NysiisTest.testEncodeEmpty(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncode(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeEmpty(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.NysiisTest.testLocaleIndependence(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testBadCharacters(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBasic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch4(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testGenealogy(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testSimplifiedSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testB650(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testLocaleIndependence(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testWikipediaAmericanSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.SoundexTest.testDifference(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.NysiisTest.testBran(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testFal(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testOthers(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule5(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule7(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnat(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTranan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testCap(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule6(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSpecialBranches(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTrueVariant(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDropBy(org.apache.commons.codec.language.NysiisTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncode(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "clean",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "SoundexUtils",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.NysiisTest.testEncodeEmpty(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncode(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeEmpty(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.NysiisTest.testLocaleIndependence(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testBadCharacters(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBasic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch4(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testGenealogy(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testMsSqlServer3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testSimplifiedSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testB650(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeBatch3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx1(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testHWRuleEx3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testLocaleIndependence(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance2(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testNewInstance3(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testWikipediaAmericanSoundex(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot2(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.SoundexTest.testDifference(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.NysiisTest.testBran(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testFal(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testOthers(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule4Dot1(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule5(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule7(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnad(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSnat(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTranan(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testCap(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testRule6(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testSpecialBranches(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testTrueVariant(org.apache.commons.codec.language.NysiisTest)",
                    "org.apache.commons.codec.language.NysiisTest.testDropBy(org.apache.commons.codec.language.NysiisTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.NysiisTest.testEncodeEmpty(org.apache.commons.codec.language.NysiisTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "difference",
                "description": "(Lorg/apache/commons/codec/StringEncoder;Ljava/lang/String;Ljava/lang/String;)I",
                "class": "SoundexUtils",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testDifference(org.apache.commons.codec.language.SoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "difference",
                "description": "(Lorg/apache/commons/codec/StringEncoder;Ljava/lang/String;Ljava/lang/String;)I",
                "class": "SoundexUtils",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testDifference(org.apache.commons.codec.language.SoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "differenceEncoded",
                "description": "(Ljava/lang/String;Ljava/lang/String;)I",
                "class": "SoundexUtils",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testDifference(org.apache.commons.codec.language.SoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "differenceEncoded",
                "description": "(Ljava/lang/String;Ljava/lang/String;)I",
                "class": "SoundexUtils",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour(org.apache.commons.codec.language.SoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.SoundexTest.testDifference(org.apache.commons.codec.language.SoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour(org.apache.commons.codec.language.SoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "getAny",
                "description": "()Ljava/lang/String;",
                "class": "Languages$SomeLanguages",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "getAny",
                "description": "()Ljava/lang/String;",
                "class": "Languages$SomeLanguages",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getAny",
                "description": "()Ljava/lang/String;",
                "class": "Languages$SomeLanguages",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isSingleton",
                "description": "()Z",
                "class": "Languages$SomeLanguages",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isSingleton",
                "description": "()Z",
                "class": "Languages$SomeLanguages",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "merge",
                "description": "(Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;)Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;",
                "class": "Languages$SomeLanguages",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "restrictTo",
                "description": "(Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;)Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;",
                "class": "Languages$SomeLanguages",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "getReplacements",
                "description": "(Ljava/lang/String;Z)[Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex$Rule",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getReplacements",
                "description": "(Ljava/lang/String;Z)[Ljava/lang/String;",
                "class": "DaitchMokotoffSoundex$Rule",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isVowel",
                "description": "(C)Z",
                "class": "DaitchMokotoffSoundex$Rule",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isVowel",
                "description": "(C)Z",
                "class": "DaitchMokotoffSoundex$Rule",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "matches",
                "description": "(Ljava/lang/String;)Z",
                "class": "DaitchMokotoffSoundex$Rule",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "matches",
                "description": "(Ljava/lang/String;)Z",
                "class": "DaitchMokotoffSoundex$Rule",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"\"",
            "method": {
                "name": "guessLanguage",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Lang",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"A\"",
            "method": {
                "name": "guessLanguage",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Lang",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "guessLanguage",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Lang",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "guessLanguages",
                "description": "(Ljava/lang/String;)Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;",
                "class": "Lang",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Klausewitz-german-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Mickiewicz-polish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Nuñez-spanish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Sjneijder-dutch-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[ácz-any-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[átz-any-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Čapek-czech-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Αγγελόπουλος-greek-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[כהן-hebrew-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Angelopoulos-greeklatin-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Carvalho-portuguese-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Ceauşescu-romanian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Giacometti-italian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Küçük-turkish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Nagy-hungarian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Renault-french-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Thompson-english-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Пушкин-cyrillic-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Klausewitz-german-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "instance",
                "description": "(Lorg/apache/commons/codec/language/bm/NameType;)Lorg/apache/commons/codec/language/bm/Lang;",
                "class": "Lang",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 11,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Klausewitz-german-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Mickiewicz-polish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Nuñez-spanish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Sjneijder-dutch-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[ácz-any-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[átz-any-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Čapek-czech-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Αγγελόπουλος-greek-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[כהן-hebrew-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Angelopoulos-greeklatin-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Carvalho-portuguese-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Ceauşescu-romanian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Giacometti-italian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Küçük-turkish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Nagy-hungarian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Renault-french-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Thompson-english-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Пушкин-cyrillic-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Klausewitz-german-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "loadFromResource",
                "description": "(Ljava/lang/String;Lorg/apache/commons/codec/language/bm/Languages;)Lorg/apache/commons/codec/language/bm/Lang;",
                "class": "Lang",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "append",
                "description": "(Ljava/lang/CharSequence;)V",
                "class": "PhoneticEngine$PhonemeBuilder",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "apply",
                "description": "(Lorg/apache/commons/codec/language/bm/Rule$PhonemeExpr;I)V",
                "class": "PhoneticEngine$PhonemeBuilder",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "empty",
                "description": "(Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;)Lorg/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder;",
                "class": "PhoneticEngine$PhonemeBuilder",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "makeString",
                "description": "()Ljava/lang/String;",
                "class": "PhoneticEngine$PhonemeBuilder",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "makeString",
                "description": "()Ljava/lang/String;",
                "class": "PhoneticEngine$PhonemeBuilder",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "makeString",
                "description": "()Ljava/lang/String;",
                "class": "PhoneticEngine$PhonemeBuilder",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "RefinedSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncodeWithInvalidObject(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "'A'",
            "method": {
                "name": "getMappingCode",
                "description": "(C)C",
                "class": "RefinedSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncode(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "'\\40'",
            "method": {
                "name": "getMappingCode",
                "description": "(C)C",
                "class": "RefinedSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncode(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "soundex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "RefinedSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncodeNull(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncode(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncode(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "soundex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "RefinedSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncodeNull(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncode(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncode(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "soundex",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "RefinedSoundex",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncodeNull(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncode(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3(org.apache.commons.codec.language.RefinedSoundexTest)",
                    "org.apache.commons.codec.language.RefinedSoundexTest.testDifference(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.RefinedSoundexTest.testEncode(org.apache.commons.codec.language.RefinedSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "close",
                "description": "()V",
                "class": "BaseNCodecOutputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "eof",
                "description": "()V",
                "class": "BaseNCodecOutputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "flush",
                "description": "()V",
                "class": "BaseNCodecOutputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "flush",
                "description": "(Z)V",
                "class": "BaseNCodecOutputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "write",
                "description": "(I)V",
                "class": "BaseNCodecOutputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "write",
                "description": "([BII)V",
                "class": "BaseNCodecOutputStream",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base64InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte(org.apache.commons.codec.binary.Base64OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "_reset",
                "description": "()V",
                "class": "PureJavaCrc32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.PureJavaCrc32Test.testCorrectness(org.apache.commons.codec.digest.PureJavaCrc32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.PureJavaCrc32Test.testCorrectness(org.apache.commons.codec.digest.PureJavaCrc32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0L",
            "method": {
                "name": "getValue",
                "description": "()J",
                "class": "PureJavaCrc32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.PureJavaCrc32Test.testCorrectness(org.apache.commons.codec.digest.PureJavaCrc32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.PureJavaCrc32Test.testCorrectness(org.apache.commons.codec.digest.PureJavaCrc32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1L",
            "method": {
                "name": "getValue",
                "description": "()J",
                "class": "PureJavaCrc32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.PureJavaCrc32Test.testCorrectness(org.apache.commons.codec.digest.PureJavaCrc32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.PureJavaCrc32Test.testCorrectness(org.apache.commons.codec.digest.PureJavaCrc32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "update",
                "description": "(I)V",
                "class": "PureJavaCrc32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.PureJavaCrc32Test.testCorrectness(org.apache.commons.codec.digest.PureJavaCrc32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.PureJavaCrc32Test.testCorrectness(org.apache.commons.codec.digest.PureJavaCrc32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "update",
                "description": "([BII)V",
                "class": "PureJavaCrc32",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.PureJavaCrc32Test.testCorrectness(org.apache.commons.codec.digest.PureJavaCrc32Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.PureJavaCrc32Test.testCorrectness(org.apache.commons.codec.digest.PureJavaCrc32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0L",
            "method": {
                "name": "getValue",
                "description": "()J",
                "class": "PureJavaCrc32C",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testDecreasing(org.apache.commons.codec.digest.PureJavaCrc32CTest)",
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testOnes(org.apache.commons.codec.digest.PureJavaCrc32CTest)",
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testZeros(org.apache.commons.codec.digest.PureJavaCrc32CTest)",
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testIncreasing(org.apache.commons.codec.digest.PureJavaCrc32CTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testDecreasing(org.apache.commons.codec.digest.PureJavaCrc32CTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1L",
            "method": {
                "name": "getValue",
                "description": "()J",
                "class": "PureJavaCrc32C",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testDecreasing(org.apache.commons.codec.digest.PureJavaCrc32CTest)",
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testOnes(org.apache.commons.codec.digest.PureJavaCrc32CTest)",
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testZeros(org.apache.commons.codec.digest.PureJavaCrc32CTest)",
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testIncreasing(org.apache.commons.codec.digest.PureJavaCrc32CTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testDecreasing(org.apache.commons.codec.digest.PureJavaCrc32CTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "reset",
                "description": "()V",
                "class": "PureJavaCrc32C",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testDecreasing(org.apache.commons.codec.digest.PureJavaCrc32CTest)",
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testOnes(org.apache.commons.codec.digest.PureJavaCrc32CTest)",
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testZeros(org.apache.commons.codec.digest.PureJavaCrc32CTest)",
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testIncreasing(org.apache.commons.codec.digest.PureJavaCrc32CTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testDecreasing(org.apache.commons.codec.digest.PureJavaCrc32CTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "void",
            "method": {
                "name": "update",
                "description": "(I)V",
                "class": "PureJavaCrc32C",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "update",
                "description": "([BII)V",
                "class": "PureJavaCrc32C",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testDecreasing(org.apache.commons.codec.digest.PureJavaCrc32CTest)",
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testOnes(org.apache.commons.codec.digest.PureJavaCrc32CTest)",
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testZeros(org.apache.commons.codec.digest.PureJavaCrc32CTest)",
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testIncreasing(org.apache.commons.codec.digest.PureJavaCrc32CTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.PureJavaCrc32CTest.testDecreasing(org.apache.commons.codec.digest.PureJavaCrc32CTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "createBranch",
                "description": "()Lorg/apache/commons/codec/language/DaitchMokotoffSoundex$Branch;",
                "class": "DaitchMokotoffSoundex$Branch",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "equals",
                "description": "(Ljava/lang/Object;)Z",
                "class": "DaitchMokotoffSoundex$Branch",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "true",
            "method": {
                "name": "equals",
                "description": "(Ljava/lang/Object;)Z",
                "class": "DaitchMokotoffSoundex$Branch",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "finish",
                "description": "()V",
                "class": "DaitchMokotoffSoundex$Branch",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "processNextReplacement",
                "description": "(Ljava/lang/String;Z)V",
                "class": "DaitchMokotoffSoundex$Branch",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)",
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "decode",
                "description": "([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V",
                "class": "Base32",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "encode",
                "description": "([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V",
                "class": "Base32",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "false",
            "method": {
                "name": "isInAlphabet",
                "description": "(B)Z",
                "class": "Base32",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 38,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isInAlphabet",
                "description": "(B)Z",
                "class": "Base32",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverseLowercase(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32BinarySamples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32HexSamplesReverse(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd(org.apache.commons.codec.binary.Base32Test)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)",
                    "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "b64from24bit",
                "description": "(BBBILjava/lang/StringBuilder;)V",
                "class": "B64",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.B64Test.testB64from24bit(org.apache.commons.codec.digest.B64Test)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings(org.apache.commons.codec.digest.Sha512CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.B64Test.testB64from24bit(org.apache.commons.codec.digest.B64Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "getRandomSalt",
                "description": "(I)Ljava/lang/String;",
                "class": "B64",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "getRandomSalt",
                "description": "(I)Ljava/lang/String;",
                "class": "B64",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getRandomSalt",
                "description": "(I)Ljava/lang/String;",
                "class": "B64",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 5,
                "ordered": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall(org.apache.commons.codec.digest.Apr1CryptTest)",
                    "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall(org.apache.commons.codec.digest.Sha256CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall(org.apache.commons.codec.digest.Sha512CryptTest)",
                    "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes(org.apache.commons.codec.digest.CryptTest)",
                    "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes(org.apache.commons.codec.digest.Apr1CryptTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall(org.apache.commons.codec.digest.Md5CryptTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "digit16",
                "description": "(B)I",
                "class": "Utils",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "digit16",
                "description": "(B)I",
                "class": "Utils",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testDecodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "'A'",
            "method": {
                "name": "hexDigit",
                "description": "(I)C",
                "class": "Utils",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "'\\40'",
            "method": {
                "name": "hexDigit",
                "description": "(I)C",
                "class": "Utils",
                "package": "org.apache.commons.codec.net"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testEncodeObjects(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testDecodeInvalidEncodedResultDecoding(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.URLCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode(org.apache.commons.codec.net.PercentCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode(org.apache.commons.codec.net.QCodecTest)",
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode(org.apache.commons.codec.net.QuotedPrintableCodecTest)",
                    "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode(org.apache.commons.codec.net.QCodecTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects(org.apache.commons.codec.net.QuotedPrintableCodecTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"\"",
            "method": {
                "name": "getAny",
                "description": "()Ljava/lang/String;",
                "class": "Languages$2",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"A\"",
            "method": {
                "name": "getAny",
                "description": "()Ljava/lang/String;",
                "class": "Languages$2",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "getAny",
                "description": "()Ljava/lang/String;",
                "class": "Languages$2",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"\"",
            "method": {
                "name": "getAny",
                "description": "()Ljava/lang/String;",
                "class": "Languages$1",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "\"A\"",
            "method": {
                "name": "getAny",
                "description": "()Ljava/lang/String;",
                "class": "Languages$1",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "NO_COVERAGE",
            "mutator": "null",
            "method": {
                "name": "getAny",
                "description": "()Ljava/lang/String;",
                "class": "Languages$1",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 0,
                "ordered": [],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/Object;)Ljava/lang/Object;",
                "class": "AbstractCaverphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testEncodeWithInvalidObject(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testEncodeWithInvalidObject(org.apache.commons.codec.language.Caverphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.Caverphone1Test.testEncodeWithInvalidObject(org.apache.commons.codec.language.Caverphone1Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isEncodeEqual",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Z",
                "class": "AbstractCaverphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals(org.apache.commons.codec.language.Caverphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals(org.apache.commons.codec.language.Caverphone1Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isEncodeEqual",
                "description": "(Ljava/lang/String;Ljava/lang/String;)Z",
                "class": "AbstractCaverphone",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals(org.apache.commons.codec.language.Caverphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals(org.apache.commons.codec.language.Caverphone1Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Caverphone2",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testEncodeNull(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testEndMb(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testLocaleIndependence(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111(org.apache.commons.codec.language.Caverphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples(org.apache.commons.codec.language.Caverphone2Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Caverphone2",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testEncodeNull(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testEndMb(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testLocaleIndependence(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111(org.apache.commons.codec.language.Caverphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples(org.apache.commons.codec.language.Caverphone2Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Caverphone2",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testEncodeNull(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testEndMb(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testLocaleIndependence(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111(org.apache.commons.codec.language.Caverphone2Test)",
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111(org.apache.commons.codec.language.Caverphone2Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples(org.apache.commons.codec.language.Caverphone2Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Caverphone1",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testEncodeNull(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testEndMb(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testLocaleIndependence(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111(org.apache.commons.codec.language.Caverphone1Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.Caverphone1Test.testEndMb(org.apache.commons.codec.language.Caverphone1Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "\"A\"",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Caverphone1",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testEncodeNull(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testEndMb(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testLocaleIndependence(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111(org.apache.commons.codec.language.Caverphone1Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.Caverphone1Test.testEndMb(org.apache.commons.codec.language.Caverphone1Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "encode",
                "description": "(Ljava/lang/String;)Ljava/lang/String;",
                "class": "Caverphone1",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testEncodeNull(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testEndMb(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testLocaleIndependence(org.apache.commons.codec.language.Caverphone1Test)",
                    "org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111(org.apache.commons.codec.language.Caverphone1Test)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.Caverphone1Test.testEndMb(org.apache.commons.codec.language.Caverphone1Test)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "void",
            "method": {
                "name": "addRight",
                "description": "(C)V",
                "class": "ColognePhonetic$CologneOutputBuffer",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "empty",
            "method": {
                "name": "copyData",
                "description": "(II)[C",
                "class": "ColognePhonetic$CologneOutputBuffer",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "copyData",
                "description": "(II)[C",
                "class": "ColognePhonetic$CologneOutputBuffer",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "killing": [
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest",
                    "org.apache.commons.codec.language.ColognePhoneticTest.org.apache.commons.codec.language.ColognePhoneticTest"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getInstance",
                "description": "(Ljava/lang/String;)Lorg/apache/commons/codec/language/bm/Languages;",
                "class": "Languages",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "getInstance",
                "description": "(Lorg/apache/commons/codec/language/bm/NameType;)Lorg/apache/commons/codec/language/bm/Languages;",
                "class": "Languages",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "regionMatches",
                "description": "(Ljava/lang/CharSequence;ZILjava/lang/CharSequence;II)Z",
                "class": "CharSequenceUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS2(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS1(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "regionMatches",
                "description": "(Ljava/lang/CharSequence;ZILjava/lang/CharSequence;II)Z",
                "class": "CharSequenceUtils",
                "package": "org.apache.commons.codec.binary"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS1(org.apache.commons.codec.binary.StringUtilsTest)",
                    "org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS2(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS1(org.apache.commons.codec.binary.StringUtilsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "compare",
                "description": "(Lorg/apache/commons/codec/language/DaitchMokotoffSoundex$Rule;Lorg/apache/commons/codec/language/DaitchMokotoffSoundex$Rule;)I",
                "class": "DaitchMokotoffSoundex$1",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "compare",
                "description": "(Lorg/apache/commons/codec/language/DaitchMokotoffSoundex$Rule;Lorg/apache/commons/codec/language/DaitchMokotoffSoundex$Rule;)I",
                "class": "DaitchMokotoffSoundex$1",
                "package": "org.apache.commons.codec.language"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding(org.apache.commons.codec.language.DaitchMokotoffSoundexTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "matches",
                "description": "(Ljava/lang/String;)Z",
                "class": "Lang$LangRule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 25,
                "ordered": [
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Klausewitz-german-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Mickiewicz-polish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Nuñez-spanish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Sjneijder-dutch-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[ácz-any-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[átz-any-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Čapek-czech-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Αγγελόπουλος-greek-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[כהן-hebrew-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Angelopoulos-greeklatin-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Carvalho-portuguese-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Ceauşescu-romanian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Giacometti-italian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Küçük-turkish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Nagy-hungarian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Renault-french-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Thompson-english-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Пушкин-cyrillic-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "matches",
                "description": "(Ljava/lang/String;)Z",
                "class": "Lang$LangRule",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 25,
                "ordered": [
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Klausewitz-german-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Mickiewicz-polish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Nuñez-spanish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Sjneijder-dutch-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[ácz-any-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[átz-any-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Čapek-czech-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Αγγελόπουλος-greek-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[כהן-hebrew-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Angelopoulos-greeklatin-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Carvalho-portuguese-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Ceauşescu-romanian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Giacometti-italian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Küçük-turkish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Nagy-hungarian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Renault-french-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Thompson-english-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Пушкин-cyrillic-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "compare",
                "description": "(Ljava/lang/Object;Ljava/lang/Object;)I",
                "class": "StringEncoderComparator",
                "package": "org.apache.commons.codec"
            },
            "tests": {
                "run": 3,
                "ordered": [
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "compare",
                "description": "(Ljava/lang/Object;Ljava/lang/Object;)I",
                "class": "StringEncoderComparator",
                "package": "org.apache.commons.codec"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex(org.apache.commons.codec.StringEncoderComparatorTest)",
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput(org.apache.commons.codec.StringEncoderComparatorTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "append",
                "description": "(Ljava/lang/CharSequence;)Lorg/apache/commons/codec/language/bm/Rule$Phoneme;",
                "class": "Rule$Phoneme",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "mergeWithLanguage",
                "description": "(Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;)Lorg/apache/commons/codec/language/bm/Rule$Phoneme;",
                "class": "Rule$Phoneme",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "0",
            "method": {
                "name": "compare",
                "description": "(Lorg/apache/commons/codec/language/bm/Rule$Phoneme;Lorg/apache/commons/codec/language/bm/Rule$Phoneme;)I",
                "class": "Rule$Phoneme$1",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero(org.apache.commons.codec.language.bm.RuleTest)",
                    "org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative(org.apache.commons.codec.language.bm.RuleTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative(org.apache.commons.codec.language.bm.RuleTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "1",
            "method": {
                "name": "compare",
                "description": "(Lorg/apache/commons/codec/language/bm/Rule$Phoneme;Lorg/apache/commons/codec/language/bm/Rule$Phoneme;)I",
                "class": "Rule$Phoneme$1",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero(org.apache.commons.codec.language.bm.RuleTest)",
                    "org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative(org.apache.commons.codec.language.bm.RuleTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero(org.apache.commons.codec.language.bm.RuleTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$7",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 9,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$7",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$6",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$6",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$9",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 4,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$9",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "empty",
            "method": {
                "name": "values",
                "description": "()[Ljava/lang/String;",
                "class": "MessageDigestAlgorithms",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 0,
                "ordered": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "values",
                "description": "()[Ljava/lang/String;",
                "class": "MessageDigestAlgorithms",
                "package": "org.apache.commons.codec.digest"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA3-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA3-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest[SHA3-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD5](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-512](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-384](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[SHA-224](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[SHA-256](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)",
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile[MD2](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm[SHA-1](org.apache.commons.codec.digest.MessageDigestAlgorithmsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$8",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 12,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$8",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$3",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 6,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$3",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$5",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 14,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$5",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": false,
            "status": "SURVIVED",
            "mutator": "false",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$4",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 13,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$4",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "toCharset",
                "description": "(Ljava/lang/String;)Ljava/nio/charset/Charset;",
                "class": "Charsets",
                "package": "org.apache.commons.codec"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.CharsetsTest.testToCharset(org.apache.commons.codec.CharsetsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.CharsetsTest.testToCharset(org.apache.commons.codec.CharsetsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "toCharset",
                "description": "(Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset;",
                "class": "Charsets",
                "package": "org.apache.commons.codec"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.CharsetsTest.testToCharset(org.apache.commons.codec.CharsetsTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.CharsetsTest.testToCharset(org.apache.commons.codec.CharsetsTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "false",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$10",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 8,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "true",
            "method": {
                "name": "isMatch",
                "description": "(Ljava/lang/CharSequence;)Z",
                "class": "Rule$10",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 2,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "invoke",
                "description": "()Lorg/apache/commons/codec/language/bm/PhoneticEngine$RulesApplication;",
                "class": "PhoneticEngine$RulesApplication",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        },
        {
            "detected": true,
            "status": "KILLED",
            "mutator": "null",
            "method": {
                "name": "from",
                "description": "(Ljava/util/Set;)Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;",
                "class": "Languages$LanguageSet",
                "package": "org.apache.commons.codec.language.bm"
            },
            "tests": {
                "run": 1,
                "ordered": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Klausewitz-german-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Mickiewicz-polish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Nuñez-spanish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Sjneijder-dutch-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[ácz-any-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[átz-any-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Čapek-czech-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Αγγελόπουλος-greek-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[כהן-hebrew-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Angelopoulos-greeklatin-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Carvalho-portuguese-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Ceauşescu-romanian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Giacometti-italian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Küçük-turkish-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Nagy-hungarian-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Renault-french-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Thompson-english-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing[Пушкин-cyrillic-{2}](org.apache.commons.codec.language.bm.LanguageGuessingTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinDlt-SEPHARDIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult-ASHKENAZI-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Renault-rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[SntJohn-Smith-sntjonsmit-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[van helsing-(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[Judenburg-iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk-GENERIC-APPROX](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode[d'ortley-(ortlaj|ortlej)-(dortlaj|dortlej)-GENERIC-EXACT](org.apache.commons.codec.language.bm.PhoneticEngineTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC(org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)",
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "killing": [
                    "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException(org.apache.commons.codec.language.bm.BeiderMorseEncoderTest)"
                ],
                "succeeding": []
            }
        }
    ],
    "time": 153643
}