/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 17:40:49 GMT 2019
 */

package org.owasp.html;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.owasp.html.Strings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Strings_ESTest extends Strings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('Z', 'A').when(charSequence0).charAt(anyInt());
      doReturn(2800, 705).when(charSequence0).length();
      boolean boolean0 = Strings.regionMatchesIgnoreCase(charSequence0, 0, charSequence0, (-1), 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('O', 'O', 'z', 'Q').when(charSequence0).charAt(anyInt());
      doReturn(746, 176).when(charSequence0).length();
      boolean boolean0 = Strings.regionMatchesIgnoreCase(charSequence0, 176, charSequence0, (-1), 176);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('a', 'a', 'a', 'a', 'a').when(charSequence0).charAt(anyInt());
      doReturn(0, 0).when(charSequence0).length();
      boolean boolean0 = Strings.regionMatchesIgnoreCase(charSequence0, (-2872), charSequence0, (-1536), 217);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charSequence0).length();
      CharSequence charSequence1 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charSequence1).length();
      boolean boolean0 = Strings.regionMatchesIgnoreCase(charSequence0, 0, charSequence1, 0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-660)).when(charSequence0).length();
      boolean boolean0 = Strings.regionMatchesIgnoreCase(charSequence0, 0, charSequence0, (-1), 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strings.regionMatchesIgnoreCase((CharSequence) null, 91, (CharSequence) null, 2398, (-207));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.owasp.html.Strings", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('F', 'f', '8', 'x').when(charSequence0).charAt(anyInt());
      doReturn(1482, 2559).when(charSequence0).length();
      boolean boolean0 = Strings.regionMatchesIgnoreCase(charSequence0, (-1349), charSequence0, (-1859), 861);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('N', 'N', 'e', 'X').when(charSequence0).charAt(anyInt());
      doReturn(155, 1781).when(charSequence0).length();
      boolean boolean0 = Strings.regionMatchesIgnoreCase(charSequence0, 1, charSequence0, (-1559), 32);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('}', 'N').when(charSequence0).charAt(anyInt());
      doReturn(5287, 326).when(charSequence0).length();
      boolean boolean0 = Strings.regionMatchesIgnoreCase(charSequence0, 122, charSequence0, (-1), 32);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('N', '$').when(charSequence0).charAt(anyInt());
      doReturn(746, 948).when(charSequence0).length();
      boolean boolean0 = Strings.regionMatchesIgnoreCase(charSequence0, 32, charSequence0, (-1), 32);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('!').when(charSequence0).charAt(anyInt());
      doReturn(5262).when(charSequence0).length();
      CharSequence charSequence1 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('E').when(charSequence1).charAt(anyInt());
      doReturn(5262).when(charSequence1).length();
      boolean boolean0 = Strings.regionMatchesIgnoreCase(charSequence0, 0, charSequence1, 1992, 1992);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn(1165).when(charSequence0).length();
      boolean boolean0 = Strings.regionMatchesIgnoreCase(charSequence0, 0, charSequence0, (-2517), 2630);
      assertFalse(boolean0);
  }
}
