/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 31 01:57:35 GMT 2019
 */

package org.owasp.html;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.owasp.html.HtmlElementTables;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class HtmlElementTables_ESTest extends HtmlElementTables_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[][][] intArray0 = new int[7][6][8];
      int[][] intArray1 = new int[7][8];
      int[] intArray2 = new int[5];
      intArray2[0] = 10;
      intArray1[0] = intArray2;
      intArray0[0] = intArray1;
      HtmlElementTables.SparseElementMultitable htmlElementTables_SparseElementMultitable0 = null;
      try {
        htmlElementTables_SparseElementMultitable0 = new HtmlElementTables.SparseElementMultitable(intArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[][][] intArray0 = new int[6][9][5];
      int[][] intArray1 = new int[6][3];
      int[] intArray2 = new int[3];
      intArray2[0] = (-481);
      intArray1[0] = intArray2;
      intArray0[0] = intArray1;
      HtmlElementTables.SparseElementMultitable htmlElementTables_SparseElementMultitable0 = null;
      try {
        htmlElementTables_SparseElementMultitable0 = new HtmlElementTables.SparseElementMultitable(intArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[6];
      intArray1[1] = 2073;
      intArray0[0] = intArray1;
      HtmlElementTables.SparseElementToElements htmlElementTables_SparseElementToElements0 = null;
      try {
        htmlElementTables_SparseElementToElements0 = new HtmlElementTables.SparseElementToElements(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [I@1abd012a
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[][] intArray0 = new int[2][4];
      HtmlElementTables.SparseElementToElements htmlElementTables_SparseElementToElements0 = null;
      try {
        htmlElementTables_SparseElementToElements0 = new HtmlElementTables.SparseElementToElements(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [I@20cbfde5
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[][] intArray0 = new int[1][1];
      int[] intArray1 = new int[7];
      intArray1[0] = (int) (byte) (-88);
      intArray0[0] = intArray1;
      HtmlElementTables.SparseElementToElements htmlElementTables_SparseElementToElements0 = null;
      try {
        htmlElementTables_SparseElementToElements0 = new HtmlElementTables.SparseElementToElements(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[][] intArray0 = new int[6][1];
      HtmlElementTables.SparseElementToElements htmlElementTables_SparseElementToElements0 = null;
      try {
        htmlElementTables_SparseElementToElements0 = new HtmlElementTables.SparseElementToElements(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      HtmlElementTables.DenseElementBinaryMatrix htmlElementTables_DenseElementBinaryMatrix0 = null;
      try {
        htmlElementTables_DenseElementBinaryMatrix0 = new HtmlElementTables.DenseElementBinaryMatrix(booleanArray0, (-2989));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      HtmlElementTables.DenseElementBinaryMatrix htmlElementTables_DenseElementBinaryMatrix0 = new HtmlElementTables.DenseElementBinaryMatrix(booleanArray0, 0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HtmlElementTables.HtmlElementNames htmlElementTables_HtmlElementNames0 = new HtmlElementTables.HtmlElementNames(linkedList0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      HtmlElementTables.DenseElementBinaryMatrix htmlElementTables_DenseElementBinaryMatrix0 = null;
      try {
        htmlElementTables_DenseElementBinaryMatrix0 = new HtmlElementTables.DenseElementBinaryMatrix(booleanArray0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      HtmlElementTables.DenseElementSet htmlElementTables_DenseElementSet0 = new HtmlElementTables.DenseElementSet(booleanArray0);
      int[][] intArray0 = new int[1][1];
      HtmlElementTables.SparseElementToElements htmlElementTables_SparseElementToElements0 = new HtmlElementTables.SparseElementToElements(intArray0);
      byte[] byteArray0 = new byte[2];
      HtmlElementTables.TextContentModel htmlElementTables_TextContentModel0 = new HtmlElementTables.TextContentModel(byteArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "thead";
      stringArray0[1] = "select";
      stringArray0[2] = "Y5vJKO,%4 ";
      stringArray0[3] = "C#";
      stringArray0[4] = "";
      stringArray0[5] = "com.google.common.collect.Iterators$12";
      HtmlElementTables.HtmlElementNames htmlElementTables_HtmlElementNames0 = new HtmlElementTables.HtmlElementNames(stringArray0);
      int[][][] intArray1 = new int[4][6][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      HtmlElementTables.SparseElementMultitable htmlElementTables_SparseElementMultitable0 = new HtmlElementTables.SparseElementMultitable(intArray1);
      HtmlElementTables htmlElementTables0 = null;
      try {
        htmlElementTables0 = new HtmlElementTables(htmlElementTables_HtmlElementNames0, (HtmlElementTables.DenseElementBinaryMatrix) null, (HtmlElementTables.DenseElementBinaryMatrix) null, (HtmlElementTables.DenseElementBinaryMatrix) null, htmlElementTables_SparseElementToElements0, htmlElementTables_SparseElementMultitable0, htmlElementTables_TextContentModel0, htmlElementTables_DenseElementSet0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
