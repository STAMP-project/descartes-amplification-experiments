/**
 * Copyright (c) 2011, Mike Samuel
 */
/**
 * All rights reserved.
 */
/**
 *
 */
/**
 * Redistribution and use in source and binary forms, with or without
 */
/**
 * modification, are permitted provided that the following conditions
 */
/**
 * are met:
 */
/**
 *
 */
/**
 * Redistributions of source code must retain the above copyright
 */
/**
 * notice, this list of conditions and the following disclaimer.
 */
/**
 * Redistributions in binary form must reproduce the above copyright
 */
/**
 * notice, this list of conditions and the following disclaimer in the
 */
/**
 * documentation and/or other materials provided with the distribution.
 */
/**
 * Neither the name of the OWASP nor the names of its contributors may
 */
/**
 * be used to endorse or promote products derived from this software
 */
/**
 * without specific prior written permission.
 */
/**
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 */
/**
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 */
/**
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 */
/**
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 */
/**
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 */
/**
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 */
/**
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 */
/**
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 */
/**
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 */
/**
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 */
/**
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 */
/**
 * POSSIBILITY OF SUCH DAMAGE.
 */
package org.owasp.html;


@java.lang.SuppressWarnings("javadoc")
public class HtmlPolicyBuilderTest extends junit.framework.TestCase {
    static final java.lang.String EXAMPLE = com.google.common.base.Joiner.on('\n').join("<h1 id='foo'>Header</h1>", "<p onclick='alert(42)'>Paragraph 1<script>evil()</script></p>", ("<p><a href=\'java\u0000script:bad()\'>Click</a> <a href=\'foo.html\'>me</a>" + " <a href='http://outside.org/'>out</a></p>"), ("<p><img src=canary.png alt=local-canary>" + "<img src='http://canaries.org/canary.png'></p>"), "<p><b style=font-size:bigger>Fancy</b> with <i><b>soupy</i> tags</b>.", "<p style='color: expression(foo()); text-align: center;", "          /* direction: ltr */; font-weight: bold'>Stylish Para 1</p>", "<p style='color: red; font-weight; expression(foo());", "          direction: rtl; font-weight: bold'>Stylish Para 2</p>", "");

    @org.junit.Test
    public static final void testTextFilter() {
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testTextFilter()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Joiner>observeState("org.owasp.html.HtmlPolicyBuilderTest|testTextFilter()|0", com.google.common.base.Joiner.class, com.google.common.base.Joiner.on('\n')).join("Header", "Paragraph 1", "Click me out", "", "Fancy with soupy tags.", "Stylish Para 1", "Stylish Para 2", "")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testTextFilter()|3", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testTextFilter()|2", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()))));
    }

    @org.junit.Test
    public static final void testCannedFormattingTagFilter() {
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testCannedFormattingTagFilter()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Joiner>observeState("org.owasp.html.HtmlPolicyBuilderTest|testCannedFormattingTagFilter()|0", com.google.common.base.Joiner.class, com.google.common.base.Joiner.on('\n')).join("Header", "Paragraph 1", "Click me out", "", "<b>Fancy</b> with <i><b>soupy</b></i><b> tags</b>.", "Stylish Para 1", "Stylish Para 2", "")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testCannedFormattingTagFilter()|4", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testCannedFormattingTagFilter()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testCannedFormattingTagFilter()|2", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowCommonInlineFormattingElements()))));
    }

    @org.junit.Test
    public static final void testCannedFormattingTagFilterNoItalics() {
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testCannedFormattingTagFilterNoItalics()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Joiner>observeState("org.owasp.html.HtmlPolicyBuilderTest|testCannedFormattingTagFilterNoItalics()|0", com.google.common.base.Joiner.class, com.google.common.base.Joiner.on('\n')).join("Header", "Paragraph 1", "Click me out", "", "<b>Fancy</b> with <b>soupy</b><b> tags</b>.", "Stylish Para 1", "Stylish Para 2", "")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testCannedFormattingTagFilterNoItalics()|5", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testCannedFormattingTagFilterNoItalics()|4", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testCannedFormattingTagFilterNoItalics()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testCannedFormattingTagFilterNoItalics()|2", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowCommonInlineFormattingElements()).disallowElements("I")))));
    }

    @org.junit.Test
    public static final void testSimpleTagFilter() {
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testSimpleTagFilter()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Joiner>observeState("org.owasp.html.HtmlPolicyBuilderTest|testSimpleTagFilter()|0", com.google.common.base.Joiner.class, com.google.common.base.Joiner.on('\n')).join("<h1>Header</h1>", "Paragraph 1", "Click me out", "", "Fancy with <i>soupy</i> tags.", "Stylish Para 1", "Stylish Para 2", "")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testSimpleTagFilter()|4", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testSimpleTagFilter()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testSimpleTagFilter()|2", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("h1", "i")))));
    }

    @org.junit.Test
    public static final void testLinksAllowed() {
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinksAllowed()|1", // We haven't allowed any protocols so only relative URLs are OK.
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Joiner>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinksAllowed()|0", com.google.common.base.Joiner.class, com.google.common.base.Joiner.on('\n')).join("Header", "Paragraph 1", "Click <a href=\"foo.html\">me</a> out", "", "Fancy with soupy tags.", "Stylish Para 1", "Stylish Para 2", "")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinksAllowed()|6", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinksAllowed()|5", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinksAllowed()|4", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinksAllowed()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinksAllowed()|2", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("a")).allowAttributes("href")).onElements("a")))));
    }

    @org.junit.Test
    public static final void testExternalLinksAllowed() {
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testExternalLinksAllowed()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Joiner>observeState("org.owasp.html.HtmlPolicyBuilderTest|testExternalLinksAllowed()|0", com.google.common.base.Joiner.class, com.google.common.base.Joiner.on('\n')).join("Header", "Paragraph 1", ("Click <a href=\"foo.html\">me</a>" + " <a href=\"http://outside.org/\">out</a>"), "", "Fancy with soupy tags.", "Stylish Para 1", "Stylish Para 2", "")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testExternalLinksAllowed()|7", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testExternalLinksAllowed()|6", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testExternalLinksAllowed()|5", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testExternalLinksAllowed()|4", org.owasp.html.HtmlPolicyBuilder.class, // Allows http.
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testExternalLinksAllowed()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testExternalLinksAllowed()|2", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("a")).allowStandardUrlProtocols()).allowAttributes("href")).onElements("a")))));
    }

    @org.junit.Test
    public static final void testLinksWithNofollow() {
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinksWithNofollow()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Joiner>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinksWithNofollow()|0", com.google.common.base.Joiner.class, com.google.common.base.Joiner.on('\n')).join("Header", "Paragraph 1", "Click <a href=\"foo.html\" rel=\"nofollow\">me</a> out", "", "Fancy with soupy tags.", "Stylish Para 1", "Stylish Para 2", "")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinksWithNofollow()|7", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinksWithNofollow()|6", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinksWithNofollow()|5", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinksWithNofollow()|4", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, // Allows http.
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinksWithNofollow()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinksWithNofollow()|2", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("a")).allowAttributes("href")).onElements("a")).requireRelNofollowOnLinks()))));
    }

    @org.junit.Test
    public static final void testImagesAllowed() {
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testImagesAllowed()|1", // HTTP img not output because only HTTPS allowed.
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Joiner>observeState("org.owasp.html.HtmlPolicyBuilderTest|testImagesAllowed()|0", com.google.common.base.Joiner.class, com.google.common.base.Joiner.on('\n')).join("Header", "Paragraph 1", "Click me out", "<img src=\"canary.png\" alt=\"local-canary\" />", "Fancy with soupy tags.", "Stylish Para 1", "Stylish Para 2", "")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testImagesAllowed()|7", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testImagesAllowed()|6", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testImagesAllowed()|5", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testImagesAllowed()|4", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testImagesAllowed()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testImagesAllowed()|2", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("img")).allowAttributes("src", "alt")).onElements("img")).allowUrlProtocols("https")))));
    }

    @org.junit.Test
    public static final void testStyleFiltering() {
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testStyleFiltering()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Joiner>observeState("org.owasp.html.HtmlPolicyBuilderTest|testStyleFiltering()|0", com.google.common.base.Joiner.class, com.google.common.base.Joiner.on('\n')).join("<h1>Header</h1>", "<p>Paragraph 1</p>", "<p>Click me out</p>", "<p></p>", "<p><b>Fancy</b> with <i><b>soupy</b></i><b> tags</b>.", ("</p><p style=\"text-align:center;font-weight:bold\">" + "Stylish Para 1</p>"), ("<p style=\"color:red;direction:rtl;font-weight:bold\">" + "Stylish Para 2</p>"), "")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testStyleFiltering()|7", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testStyleFiltering()|6", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testStyleFiltering()|5", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testStyleFiltering()|4", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testStyleFiltering()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testStyleFiltering()|2", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowCommonInlineFormattingElements()).allowCommonBlockElements()).allowStyling()).allowStandardUrlProtocols()))));
    }

    @org.junit.Test
    public static final void testElementTransforming() {
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testElementTransforming()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Joiner>observeState("org.owasp.html.HtmlPolicyBuilderTest|testElementTransforming()|0", com.google.common.base.Joiner.class, com.google.common.base.Joiner.on('\n')).join("<div class=\"header-h1\">Header</div>", "<p>Paragraph 1</p>", "<p>Click me out</p>", "<p></p>", "<p>Fancy with soupy tags.", "</p><p>Stylish Para 1</p>", "<p>Stylish Para 2</p>", "")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testElementTransforming()|11", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testElementTransforming()|10", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testElementTransforming()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testElementTransforming()|2", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("h1", "p", "div")).allowElements(new org.owasp.html.ElementPolicy() {
            public java.lang.String apply(java.lang.String elementName, java.util.List<java.lang.String> attrs) {
                eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testElementTransforming()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.owasp.html.HtmlPolicyBuilderTest|testElementTransforming()|5", java.util.List.class, attrs).add("class"));
                eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testElementTransforming()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.owasp.html.HtmlPolicyBuilderTest|testElementTransforming()|7", java.util.List.class, attrs).add(("header-" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testElementTransforming()|8", elementName)))));
                return "div";
            }
        }, "h1")))));
    }

    @org.junit.Test
    public static final void testBodyTransforming() {
        junit.framework.TestCase.assertEquals("<div>foo</div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBodyTransforming()|4", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBodyTransforming()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBodyTransforming()|2", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBodyTransforming()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements(new org.owasp.html.ElementPolicy() {
            public java.lang.String apply(java.lang.String elementName, java.util.List<java.lang.String> attrs) {
                return "div";
            }
        }, "body")).allowElements("div")), "<body>foo</body>")));
    }

    @org.junit.Test
    public static final void testAllowUrlProtocols() {
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testAllowUrlProtocols()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Joiner>observeState("org.owasp.html.HtmlPolicyBuilderTest|testAllowUrlProtocols()|0", com.google.common.base.Joiner.class, com.google.common.base.Joiner.on('\n')).join("Header", "Paragraph 1", "Click me out", ("<img src=\"canary.png\" alt=\"local-canary\" />" + "<img src=\"http://canaries.org/canary.png\" />"), "Fancy with soupy tags.", "Stylish Para 1", "Stylish Para 2", "")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testAllowUrlProtocols()|7", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testAllowUrlProtocols()|6", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testAllowUrlProtocols()|5", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testAllowUrlProtocols()|4", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testAllowUrlProtocols()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testAllowUrlProtocols()|2", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("img")).allowAttributes("src", "alt")).onElements("img")).allowUrlProtocols("http")))));
    }

    @org.junit.Test
    public static final void testPossibleFalloutFromIssue5() {
        junit.framework.TestCase.assertEquals("Bad", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPossibleFalloutFromIssue5()|5", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPossibleFalloutFromIssue5()|4", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPossibleFalloutFromIssue5()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPossibleFalloutFromIssue5()|2", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPossibleFalloutFromIssue5()|1", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPossibleFalloutFromIssue5()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("a")).allowAttributes("href")).onElements("a")).allowUrlProtocols("http")), "<a href='javascript:alert(1337)//:http'>Bad</a>")));
    }

    @org.junit.Test
    public static final void testTextInOption() {
        junit.framework.TestCase.assertEquals("<select><option>1</option><option>2</option></select>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testTextInOption()|2", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testTextInOption()|1", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testTextInOption()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("select", "option")), "<select>\n  <option>1</option>\n  <option>2</option>\n</select>")));
    }

    @org.junit.Test
    public static final void testEntities() {
        junit.framework.TestCase.assertEquals(("(Foo)\u00a0(Bar)\u2666\u2666\u2666\u2666(Baz)" + "&#x14834;&#x14834;&#x14834;(Boo)"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testEntities()|1", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testEntities()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()), ("(Foo)&nbsp;(Bar)&diams;&#9830;&#x2666;&#X2666;(Baz)" + "\ud812\udc34&#x14834;&#x014834;(Boo)"))));
    }

    @org.junit.Test
    public static final void testImageTag() {
        // OK if this isn't here too.
        junit.framework.TestCase.assertEquals(("" + (("<img src=\"http://example.com/foo.png\" />" + "<img src=\"http://example.com/bar.png\" />") + "<img />")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testImageTag()|7", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testImageTag()|6", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testImageTag()|5", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testImageTag()|4", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testImageTag()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testImageTag()|1", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testImageTag()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("img")).allowElements(new org.owasp.html.ElementPolicy() {
            public java.lang.String apply(java.lang.String elementName, java.util.List<java.lang.String> attrs) {
                return "img";
            }
        }, "image")).allowAttributes("src")).onElements("img", "image")).allowStandardUrlProtocols()), ("" + (("<image src=\"http://example.com/foo.png\" />" + "<Image src=\"http://example.com/bar.png\">") + "<IMAGE>")))));
    }

    @org.junit.Test
    public static final void testDuplicateAttributesDoNotReachElementPolicy() {
        final int[] idCount = eu.stamp_project.reneri.instrumentation.StateObserver.<int[]>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|0", int[].class, new int[1]);
        // The id that is emitted is the first that passes the attribute
        // starts-with-b filter.
        // The attribute policy sees 3 id elements, hence id-count=3.
        // The element policy sees 2 attributes, one "id" and one "href",
        // hence attr-count=2.
        junit.framework.TestCase.assertEquals("<a href=\"foo\" id=\"bar\" attr-count=\"2\" id-count=\"3\">link</a>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|29", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|28", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|27", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|26", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|25", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|18", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|17", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|1", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements(new org.owasp.html.ElementPolicy() {
            public java.lang.String apply(java.lang.String elementName, java.util.List<java.lang.String> attrs) {
                int nAttrs = (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|3", java.util.List.class, attrs).size())) / 2;
                eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|5", java.util.List.class, attrs).add("attr-count"));
                eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|7", java.util.List.class, attrs).add(("" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|8", nAttrs)))));
                eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|10", java.util.List.class, attrs).add("id-count"));
                eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|12", java.util.List.class, attrs).add(("" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<int[]>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|13", int[].class, idCount)[0])))));
                return eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|16", elementName);
            }
        }, "a")).allowAttributes("id")).matching(new org.owasp.html.AttributePolicy() {
            public java.lang.String apply(java.lang.String elementName, java.lang.String attributeName, java.lang.String value) {
                ++(eu.stamp_project.reneri.instrumentation.StateObserver.<int[]>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|20", int[].class, idCount)[0]);
                return eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|24", (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|22", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|21", value).startsWith("b")) ? eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testDuplicateAttributesDoNotReachElementPolicy()|23", value) : null));
            }
        })).onElements("a")).allowAttributes("href")).onElements("a")), "<a href=\"foo\" id=\'far\' id=\"bar\" href=baz id=boo>link</a>")));
    }

    @org.junit.Test
    public static final void testPreprocessors() {
        java.lang.String input = "<h1 title='foo'>one</h1> <h2>Two!</h2> <h3>three</h3>" + " <h4>Four</h4> <h5>5</h5> <h6>seis</h6>";
        // We upper-case all text nodes and increment all header elements.
        // Since h7 is not white-listed, the incremented version of <h6> is dropped.
        // The title attribute value is not upper-cased.
        java.lang.String expected = "<h2 title=\"foo\">ONE</h2> <h3>TWO!</h3> <h4>THREE</h4>" + " <h5>FOUR</h5> <h6>5</h6> SEIS";
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|0", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|39", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|37", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|13", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|4", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|3", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|2", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|1", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("h1", "h2", "h3", "h4", "h5", "h6")).allowAttributes("title")).globally()).withPreprocessor(new org.owasp.html.HtmlStreamEventProcessor() {
            public org.owasp.html.HtmlStreamEventReceiver wrap(org.owasp.html.HtmlStreamEventReceiver r) {
                return new org.owasp.html.HtmlStreamEventReceiverWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlStreamEventReceiver>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|6", org.owasp.html.HtmlStreamEventReceiver.class, r)) {
                    @java.lang.Override
                    public void text(java.lang.String s) {
                        eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlStreamEventReceiver>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|9", org.owasp.html.HtmlStreamEventReceiver.class, underlying).text(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|12", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|10", s).toUpperCase(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Locale>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|11", java.util.Locale.class, java.util.Locale.ROOT))));
                    }

                    @java.lang.Override
                    public java.lang.String toString() {
                        return "shouty-text";
                    }
                };
            }
        })).withPreprocessor(new org.owasp.html.HtmlStreamEventProcessor() {
            public org.owasp.html.HtmlStreamEventReceiver wrap(org.owasp.html.HtmlStreamEventReceiver r) {
                return new org.owasp.html.HtmlStreamEventReceiverWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlStreamEventReceiver>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|15", org.owasp.html.HtmlStreamEventReceiver.class, r)) {
                    @java.lang.Override
                    public void openTag(java.lang.String elementName, java.util.List<java.lang.String> attrs) {
                        eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlStreamEventReceiver>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|18", org.owasp.html.HtmlStreamEventReceiver.class, underlying).openTag(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|20", incr(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|19", elementName))), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|21", java.util.List.class, attrs));
                    }

                    @java.lang.Override
                    public void closeTag(java.lang.String elementName) {
                        eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlStreamEventReceiver>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|22", org.owasp.html.HtmlStreamEventReceiver.class, underlying).closeTag(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|24", incr(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|23", elementName))));
                    }

                    java.lang.String incr(java.lang.String en) {
                        if ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|26", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|25", en).length())) == 2) {
                            char c0 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|28", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|27", en).charAt(0));
                            char c1 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|30", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|29", en).charAt(1));
                            if (((((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|31", c0)) == 'h') || ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|32", c0)) == 'H')) && ('0' <= (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|33", c1)))) && ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|34", c1)) <= '6')) {
                                // h1 -> h2, h2 -> h3, etc.
                                return "h" + (((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|35", c1)) - '0') + 1);
                            }
                        }
                        return eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|36", en);
                    }

                    @java.lang.Override
                    public java.lang.String toString() {
                        return "incr-headers";
                    }
                };
            }
        })), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPreprocessors()|38", input))));
    }

    @org.junit.Test
    public static final void testPostprocessors() {
        java.lang.String input = "<h1 title='foo'>one</h1> <h2>TWO!</h2> <h3>three</h3>" + " <h4>Four</h4> <h5>5</h5> <h6>seis</h6>";
        // We upper-case the first letter of each text nodes and increment all
        // header elements.
        // Since post-processors run after the policy, they can insert elements like
        // <h7> which are not white-listed.
        java.lang.String expected = "<h2 title=\"foo\">One</h2> <h3>TWO!</h3> <h4>Three</h4>" + " <h5>Four</h5> <h6>5</h6> <h7>Seis</h7>";
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|0", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|53", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|51", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|27", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|4", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|3", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|2", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|1", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("h1", "h2", "h3", "h4", "h5", "h6")).allowAttributes("title")).globally()).withPostprocessor(new org.owasp.html.HtmlStreamEventProcessor() {
            public org.owasp.html.HtmlStreamEventReceiver wrap(org.owasp.html.HtmlStreamEventReceiver r) {
                return new org.owasp.html.HtmlStreamEventReceiverWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlStreamEventReceiver>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|6", org.owasp.html.HtmlStreamEventReceiver.class, r)) {
                    @java.lang.Override
                    public void text(java.lang.String s) {
                        if (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|10", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|9", s).isEmpty()))) {
                            int cp0 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|12", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|11", s).codePointAt(0));
                            eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlStreamEventReceiver>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|13", org.owasp.html.HtmlStreamEventReceiver.class, underlying).text(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|25", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|19", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|16", java.lang.StringBuilder.class, new java.lang.StringBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|15", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|14", s).length()))).appendCodePoint(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|18", java.lang.Character.toUpperCase(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|17", cp0))))).append(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|20", s), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|22", java.lang.Character.charCount(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|21", cp0))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|24", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|23", s).length()))).toString()));
                        }
                    }

                    @java.lang.Override
                    public java.lang.String toString() {
                        return "shouty-text";
                    }
                };
            }
        })).withPostprocessor(new org.owasp.html.HtmlStreamEventProcessor() {
            public org.owasp.html.HtmlStreamEventReceiver wrap(org.owasp.html.HtmlStreamEventReceiver r) {
                return new org.owasp.html.HtmlStreamEventReceiverWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlStreamEventReceiver>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|29", org.owasp.html.HtmlStreamEventReceiver.class, r)) {
                    @java.lang.Override
                    public void openTag(java.lang.String elementName, java.util.List<java.lang.String> attrs) {
                        eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlStreamEventReceiver>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|32", org.owasp.html.HtmlStreamEventReceiver.class, underlying).openTag(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|34", incr(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|33", elementName))), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|35", java.util.List.class, attrs));
                    }

                    @java.lang.Override
                    public void closeTag(java.lang.String elementName) {
                        eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlStreamEventReceiver>observeState("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|36", org.owasp.html.HtmlStreamEventReceiver.class, underlying).closeTag(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|38", incr(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|37", elementName))));
                    }

                    java.lang.String incr(java.lang.String en) {
                        if ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|40", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|39", en).length())) == 2) {
                            char c0 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|42", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|41", en).charAt(0));
                            char c1 = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|44", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|43", en).charAt(1));
                            if (((((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|45", c0)) == 'h') || ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|46", c0)) == 'H')) && ('0' <= (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|47", c1)))) && ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|48", c1)) <= '6')) {
                                // h1 -> h2, h2 -> h3, etc.
                                return "h" + (((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|49", c1)) - '0') + 1);
                            }
                        }
                        return eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|50", en);
                    }

                    @java.lang.Override
                    public java.lang.String toString() {
                        return "incr-headers";
                    }
                };
            }
        })), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testPostprocessors()|52", input))));
    }

    @org.junit.Test
    public static final void testBackgroundImageWithUrl() {
        org.owasp.html.PolicyFactory policy = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithUrl()|6", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithUrl()|5", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithUrl()|4", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithUrl()|2", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithUrl()|1", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithUrl()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowStandardUrlProtocols()).allowStyling()).allowUrlsInStyles(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.AttributePolicy>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithUrl()|3", org.owasp.html.AttributePolicy.class, org.owasp.html.AttributePolicy.IDENTITY_ATTRIBUTE_POLICY))).allowElements("div")).toFactory());
        java.lang.String unsafeHtml = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithUrl()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithUrl()|7", org.owasp.html.PolicyFactory.class, policy).sanitize(("<html><head><title>test</title></head><body>" + (((("<div style='" + "color: red; background-image: ") + "url(http://example.com/foo.png)") + "'>div content") + "</div></body></html>"))));
        java.lang.String safeHtml = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithUrl()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithUrl()|9", org.owasp.html.PolicyFactory.class, policy).sanitize(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithUrl()|10", unsafeHtml)));
        java.lang.String expected = "<div style=\"" + (("color:red;background-image:" + "url(&#39;http://example.com/foo.png&#39;)") + "\">div content</div>");
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithUrl()|12", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithUrl()|13", safeHtml));
    }

    @org.junit.Test
    public static final void testBackgroundImageWithImageFunction() {
        org.owasp.html.PolicyFactory policy = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithImageFunction()|6", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithImageFunction()|5", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithImageFunction()|4", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithImageFunction()|2", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithImageFunction()|1", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithImageFunction()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowStandardUrlProtocols()).allowStyling()).allowUrlsInStyles(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.AttributePolicy>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithImageFunction()|3", org.owasp.html.AttributePolicy.class, org.owasp.html.AttributePolicy.IDENTITY_ATTRIBUTE_POLICY))).allowElements("div")).toFactory());
        java.lang.String unsafeHtml = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithImageFunction()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithImageFunction()|7", org.owasp.html.PolicyFactory.class, policy).sanitize(("<html><head><title>test</title></head><body>" + (((("<div style='" + "color: red; background-image: ") + "image(\"blue sky.png\", blue)\'>") + "div content") + "</div></body></html>"))));
        java.lang.String safeHtml = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithImageFunction()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithImageFunction()|9", org.owasp.html.PolicyFactory.class, policy).sanitize(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithImageFunction()|10", unsafeHtml)));
        java.lang.String expected = "<div style=\"" + (("color:red;background-image:" + "image( url(&#39;blue%20sky.png&#39;) , blue )") + "\">div content</div>");
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithImageFunction()|12", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundImageWithImageFunction()|13", safeHtml));
    }

    @org.junit.Test
    public static final void testBackgroundWithUrls() {
        org.owasp.html.HtmlPolicyBuilder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|2", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|1", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowStandardUrlProtocols()).allowStyling()).allowElements("div"));
        org.owasp.html.PolicyFactory noUrlsPolicy = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|5", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|4", org.owasp.html.HtmlPolicyBuilder.class, builder).toFactory());
        org.owasp.html.PolicyFactory urlsPolicy = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|9", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|8", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|6", org.owasp.html.HtmlPolicyBuilder.class, builder).allowUrlsInStyles(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.AttributePolicy>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|7", org.owasp.html.AttributePolicy.class, org.owasp.html.AttributePolicy.IDENTITY_ATTRIBUTE_POLICY))).toFactory());
        java.lang.String unsafeHtml = "<div style=\"background:&quot;//evil.org/foo.png&quot;\"></div>";
        java.lang.String safeWithUrls = "<div style=\"background:url(&#39;//evil.org/foo.png&#39;)\"></div>";
        java.lang.String safeWithoutUrls = "<div></div>";
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|10", safeWithoutUrls), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|11", org.owasp.html.PolicyFactory.class, noUrlsPolicy).sanitize(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|12", unsafeHtml))));
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|14", safeWithUrls), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|15", org.owasp.html.PolicyFactory.class, urlsPolicy).sanitize(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundWithUrls()|16", unsafeHtml))));
    }

    @org.junit.Test
    public static final void testBackgroundsThatViolateGlobalUrlPolicy() {
        org.owasp.html.PolicyFactory policy = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundsThatViolateGlobalUrlPolicy()|6", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundsThatViolateGlobalUrlPolicy()|5", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundsThatViolateGlobalUrlPolicy()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundsThatViolateGlobalUrlPolicy()|2", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundsThatViolateGlobalUrlPolicy()|1", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundsThatViolateGlobalUrlPolicy()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowStandardUrlProtocols()).allowStyling()).allowElements("div")).allowUrlsInStyles(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.AttributePolicy>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundsThatViolateGlobalUrlPolicy()|4", org.owasp.html.AttributePolicy.class, org.owasp.html.AttributePolicy.IDENTITY_ATTRIBUTE_POLICY))).toFactory());
        java.lang.String unsafeHtml = "<div style=\"background:\'javascript:alert(1337)\'\"></div>";
        java.lang.String safeHtml = "<div></div>";
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundsThatViolateGlobalUrlPolicy()|7", safeHtml), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundsThatViolateGlobalUrlPolicy()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundsThatViolateGlobalUrlPolicy()|8", org.owasp.html.PolicyFactory.class, policy).sanitize(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testBackgroundsThatViolateGlobalUrlPolicy()|9", unsafeHtml))));
    }

    @org.junit.Test
    public static final void testSpanTagFilter() {
        org.owasp.html.PolicyFactory policy = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testSpanTagFilter()|3", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testSpanTagFilter()|2", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testSpanTagFilter()|1", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testSpanTagFilter()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("span")).allowWithoutAttributes("span")).toFactory());
        java.lang.String unsafeHtml = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testSpanTagFilter()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testSpanTagFilter()|4", org.owasp.html.PolicyFactory.class, policy).sanitize("<span>test1</span>"));
        java.lang.String safeHtml = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testSpanTagFilter()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testSpanTagFilter()|6", org.owasp.html.PolicyFactory.class, policy).sanitize(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testSpanTagFilter()|7", unsafeHtml)));
        java.lang.String expected = "<span>test1</span>";
        junit.framework.TestCase.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testSpanTagFilter()|9", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testSpanTagFilter()|10", safeHtml));
    }

    @org.junit.Test
    public static final void testLinkRels() {
        org.owasp.html.HtmlPolicyBuilder b = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|8", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|7", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|6", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|5", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|4", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|2", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|1", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("a")).allowAttributes("href")).onElements("a")).allowAttributes("rel")).onElements("a")).allowAttributes("target")).onElements("a")).allowStandardUrlProtocols());
        org.owasp.html.PolicyFactory defaultLinkPolicy = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|10", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|9", org.owasp.html.HtmlPolicyBuilder.class, b).toFactory());
        org.owasp.html.PolicyFactory externalLinkPolicy = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|13", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|12", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|11", org.owasp.html.HtmlPolicyBuilder.class, b).requireRelsOnLinks("external")).toFactory());
        org.owasp.html.PolicyFactory noNoFollowPolicy = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|22", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|21", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|20", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|19", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|18", org.owasp.html.HtmlPolicyBuilder.class, // .allowAttributes("rel").onElements("a")
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|17", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|16", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|15", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|14", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("a")).allowAttributes("href")).onElements("a")).allowStandardUrlProtocols()).allowAttributes("target")).onElements("a")).skipRelsOnLinks("noreferrer")).toFactory());
        org.owasp.html.PolicyFactory and0 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|25", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|23", org.owasp.html.PolicyFactory.class, externalLinkPolicy).and(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|24", org.owasp.html.PolicyFactory.class, noNoFollowPolicy)));
        org.owasp.html.PolicyFactory and1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|28", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|26", org.owasp.html.PolicyFactory.class, noNoFollowPolicy).and(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|27", org.owasp.html.PolicyFactory.class, externalLinkPolicy)));
        java.lang.String link = "<a target=T href=http://example.com/>eg</a>";
        junit.framework.TestCase.assertEquals(("<a target=\"T\" href=\"http://example.com/\"" + " rel=\"noopener noreferrer\">eg</a>"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|29", org.owasp.html.PolicyFactory.class, defaultLinkPolicy).sanitize(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|30", link))));
        junit.framework.TestCase.assertEquals(("<a target=\"T\" href=\"http://example.com/\"" + " rel=\"external noopener noreferrer\">eg</a>"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|34", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|32", org.owasp.html.PolicyFactory.class, externalLinkPolicy).sanitize(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|33", link))));
        junit.framework.TestCase.assertEquals(("<a target=\"T\" href=\"http://example.com/\"" + " rel=\"noopener\">eg</a>"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|37", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|35", org.owasp.html.PolicyFactory.class, noNoFollowPolicy).sanitize(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|36", link))));
        junit.framework.TestCase.assertEquals(("<a target=\"T\" href=\"http://example.com/\"" + " rel=\"external noopener\">eg</a>"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|40", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|38", org.owasp.html.PolicyFactory.class, and0).sanitize(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|39", link))));
        junit.framework.TestCase.assertEquals(("<a target=\"T\" href=\"http://example.com/\"" + " rel=\"external noopener\">eg</a>"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|43", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|41", org.owasp.html.PolicyFactory.class, and1).sanitize(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinkRels()|42", link))));
    }

    @org.junit.Test
    public static final void testLinkRelsWhenRelPresent() {
        org.owasp.html.PolicyFactory pf = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|10", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|9", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|8", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|7", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|6", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|5", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|4", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|2", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|1", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("a")).allowAttributes("href")).onElements("a")).allowAttributes("rel")).onElements("a")).allowAttributes("target")).onElements("a")).allowStandardUrlProtocols()).requireRelNofollowOnLinks()).toFactory());
        junit.framework.TestCase.assertEquals(("" + ("<a rel=\"external nofollow noopener noreferrer\"" + " target=\"_blank\" href=\"http://example.com/\">eg</a>")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|11", org.owasp.html.PolicyFactory.class, pf).sanitize("<a rel=external target=_blank href=http://example.com/>eg</a>")));
        junit.framework.TestCase.assertEquals(("" + ("<a rel=\"external nofollow noopener noreferrer\"" + " target=\"windowname\" href=\"//example.com/\">eg</a>")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testLinkRelsWhenRelPresent()|13", org.owasp.html.PolicyFactory.class, pf).sanitize("<A REL=external TARGET=windowname HREF=//example.com/ >eg</A>")));
    }

    @org.junit.Test
    public static final void testFailFastOnSpaceSeparatedStrings() {
        boolean failed;
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testFailFastOnSpaceSeparatedStrings()|1", org.owasp.html.HtmlPolicyBuilder.class, // Should be ("nofollow", "noreferrer")
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testFailFastOnSpaceSeparatedStrings()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).requireRelsOnLinks("nofollow noreferrer"));
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testFailFastOnSpaceSeparatedStrings()|2", (failed = false));
        } catch (java.lang.IllegalArgumentException ex) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testFailFastOnSpaceSeparatedStrings()|3", (failed = true));
        }
        junit.framework.TestCase.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testFailFastOnSpaceSeparatedStrings()|4", failed));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testFailFastOnSpaceSeparatedStrings()|6", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testFailFastOnSpaceSeparatedStrings()|5", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).skipRelsOnLinks("nofollow noreferrer"));
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testFailFastOnSpaceSeparatedStrings()|7", (failed = false));
        } catch (java.lang.IllegalArgumentException ex) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testFailFastOnSpaceSeparatedStrings()|8", (failed = true));
        }
        junit.framework.TestCase.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testFailFastOnSpaceSeparatedStrings()|9", failed));
    }

    @org.junit.Test
    public static final void testScopingExitInNoContent() {
        org.owasp.html.PolicyFactory pf = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testScopingExitInNoContent()|2", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testScopingExitInNoContent()|1", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testScopingExitInNoContent()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("table", "tr", "td", "noscript")).toFactory());
        junit.framework.TestCase.assertEquals("<table><tr><td>foo<noscript></noscript></td><td>bar</td></tr></table>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testScopingExitInNoContent()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testScopingExitInNoContent()|3", org.owasp.html.PolicyFactory.class, pf).sanitize("<table><tr><td>foo<noscript></table></noscript><td>bar")));
    }

    @org.junit.Test
    public static final void testIssue80() {
        org.owasp.html.PolicyFactory pf = eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testIssue80()|2", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testIssue80()|1", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testIssue80()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("table", "tr", "td", "tbody")).toFactory());
        junit.framework.TestCase.assertEquals(("<table><tbody>" + (("<tr><td>td1</td><td>td2</td></tr>" + "<tr><td>new line</td></tr>") + "</tbody></table>")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testIssue80()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|testIssue80()|3", org.owasp.html.PolicyFactory.class, pf).sanitize(("<table><tbody>" + ("<tr><td>td1</td><td>td2</tr>" + "<td>new line</tbody></table>")))));
    }

    @org.junit.Test
    public static final void testDirLi() {
        junit.framework.TestCase.assertEquals("<dir compact=\"compact\"><li>something</li></dir>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|testDirLi()|4", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDirLi()|3", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder.AttributeBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDirLi()|2", org.owasp.html.HtmlPolicyBuilder.AttributeBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDirLi()|1", org.owasp.html.HtmlPolicyBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|testDirLi()|0", org.owasp.html.HtmlPolicyBuilder.class, new org.owasp.html.HtmlPolicyBuilder()).allowElements("dir", "li", "ul")).allowAttributes("compact")).onElements("dir")), "<dir compact=\"compact\"><li>something</li></dir>")));
    }

    private static java.lang.String apply(org.owasp.html.HtmlPolicyBuilder b) {
        return eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|apply(org.owasp.html.HtmlPolicyBuilder)|1", org.owasp.html.HtmlPolicyBuilderTest.apply(eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|apply(org.owasp.html.HtmlPolicyBuilder)|0", org.owasp.html.HtmlPolicyBuilder.class, b), org.owasp.html.HtmlPolicyBuilderTest.EXAMPLE));
    }

    private static java.lang.String apply(org.owasp.html.HtmlPolicyBuilder b, java.lang.String src) {
        return eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|apply(org.owasp.html.HtmlPolicyBuilder,java.lang.String)|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.PolicyFactory>observeState("org.owasp.html.HtmlPolicyBuilderTest|apply(org.owasp.html.HtmlPolicyBuilder,java.lang.String)|1", org.owasp.html.PolicyFactory.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.owasp.html.HtmlPolicyBuilder>observeState("org.owasp.html.HtmlPolicyBuilderTest|apply(org.owasp.html.HtmlPolicyBuilder,java.lang.String)|0", org.owasp.html.HtmlPolicyBuilder.class, b).toFactory()).sanitize(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|apply(org.owasp.html.HtmlPolicyBuilder,java.lang.String)|2", src), null, new org.owasp.html.Handler<java.lang.String>() {
            public void handle(java.lang.String x) {
                junit.framework.TestCase.fail(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.owasp.html.HtmlPolicyBuilderTest|apply(org.owasp.html.HtmlPolicyBuilder,java.lang.String)|4", x));
            }
        }));
    }
}

