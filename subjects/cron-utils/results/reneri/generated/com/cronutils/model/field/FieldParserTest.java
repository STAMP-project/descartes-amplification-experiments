package com.cronutils.model.field;


/* Copyright 2015 jmrozanec Licensed under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
or agreed to in writing, software distributed under the License is
distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
 */
public class FieldParserTest {
    private com.cronutils.parser.FieldParser parser;

    @org.junit.Before
    public void setUp() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.FieldParser>observeState("com.cronutils.model.field.FieldParserTest|setUp()|3", com.cronutils.parser.FieldParser.class, (parser = new com.cronutils.parser.FieldParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.model.field.FieldParserTest|setUp()|2", com.cronutils.model.field.constraint.FieldConstraints.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraintsBuilder>observeState("com.cronutils.model.field.FieldParserTest|setUp()|1", com.cronutils.model.field.constraint.FieldConstraintsBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraintsBuilder>observeState("com.cronutils.model.field.FieldParserTest|setUp()|0", com.cronutils.model.field.constraint.FieldConstraintsBuilder.class, com.cronutils.model.field.constraint.FieldConstraintsBuilder.instance()).addHashSupport()).createConstraintsInstance()))));
    }

    @org.junit.Test
    public void testParseAlways() throws java.lang.Exception {
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.field.FieldParserTest|testParseAlways()|1", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.FieldParser>observeState("com.cronutils.model.field.FieldParserTest|testParseAlways()|0", com.cronutils.parser.FieldParser.class, parser).parse("*"))) instanceof com.cronutils.model.field.expression.Always));
    }

    @org.junit.Test
    public void testParseAlwaysEveryX() throws java.lang.Exception {
        int every = 5;
        com.cronutils.model.field.expression.Every expression = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Every>observeState("com.cronutils.model.field.FieldParserTest|testParseAlwaysEveryX()|2", com.cronutils.model.field.expression.Every.class, ((com.cronutils.model.field.expression.Every) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.FieldParser>observeState("com.cronutils.model.field.FieldParserTest|testParseAlwaysEveryX()|0", com.cronutils.parser.FieldParser.class, parser).parse(("*/" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseAlwaysEveryX()|1", every)))))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseAlwaysEveryX()|3", every), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseAlwaysEveryX()|6", ((int) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.field.FieldParserTest|testParseAlwaysEveryX()|5", com.cronutils.model.field.value.IntegerFieldValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Every>observeState("com.cronutils.model.field.FieldParserTest|testParseAlwaysEveryX()|4", com.cronutils.model.field.expression.Every.class, expression).getPeriod()).getValue()))));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.field.FieldParserTest|testParseAlwaysEveryX()|8", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Every>observeState("com.cronutils.model.field.FieldParserTest|testParseAlwaysEveryX()|7", com.cronutils.model.field.expression.Every.class, expression).getExpression())) instanceof com.cronutils.model.field.expression.Always));
    }

    @org.junit.Test
    public void testParseOn() throws java.lang.Exception {
        int on = 5;
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseOn()|0", on), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseOn()|5", ((int) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.field.FieldParserTest|testParseOn()|4", com.cronutils.model.field.value.IntegerFieldValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.field.FieldParserTest|testParseOn()|3", com.cronutils.model.field.expression.On.class, ((com.cronutils.model.field.expression.On) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.FieldParser>observeState("com.cronutils.model.field.FieldParserTest|testParseOn()|1", com.cronutils.parser.FieldParser.class, parser).parse(("" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseOn()|2", on))))))).getTime()).getValue()))));
    }

    // #194
    @org.junit.Test
    public void testParseOnWithHash01() {
        int on = 5;
        int hashValue = 3;
        com.cronutils.model.field.expression.On onExpression = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|4", com.cronutils.model.field.expression.On.class, ((com.cronutils.model.field.expression.On) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.FieldParser>observeState("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|0", com.cronutils.parser.FieldParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|3", java.lang.String.format("%s#%s", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|1", on), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|2", hashValue)))))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|5", on), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|8", ((int) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|7", com.cronutils.model.field.value.IntegerFieldValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|6", com.cronutils.model.field.expression.On.class, onExpression).getTime()).getValue()))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|9", hashValue), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|13", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|11", com.cronutils.model.field.value.IntegerFieldValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|10", com.cronutils.model.field.expression.On.class, onExpression).getNth()).getValue()).intValue()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialChar>observeState("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|14", com.cronutils.model.field.value.SpecialChar.class, com.cronutils.model.field.value.SpecialChar.HASH), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialChar>observeState("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|17", com.cronutils.model.field.value.SpecialChar.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialCharFieldValue>observeState("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|16", com.cronutils.model.field.value.SpecialCharFieldValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.field.FieldParserTest|testParseOnWithHash01()|15", com.cronutils.model.field.expression.On.class, onExpression).getSpecialChar()).getValue()));
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testRejectHashIfFieldDoesNotClaimToSupportIt() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.field.FieldParserTest|testRejectHashIfFieldDoesNotClaimToSupportIt()|3", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.FieldParser>observeState("com.cronutils.model.field.FieldParserTest|testRejectHashIfFieldDoesNotClaimToSupportIt()|2", com.cronutils.parser.FieldParser.class, new com.cronutils.parser.FieldParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.model.field.FieldParserTest|testRejectHashIfFieldDoesNotClaimToSupportIt()|1", com.cronutils.model.field.constraint.FieldConstraints.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraintsBuilder>observeState("com.cronutils.model.field.FieldParserTest|testRejectHashIfFieldDoesNotClaimToSupportIt()|0", com.cronutils.model.field.constraint.FieldConstraintsBuilder.class, com.cronutils.model.field.constraint.FieldConstraintsBuilder.instance()).createConstraintsInstance()))).parse("5#3"));
        } catch (java.lang.IllegalArgumentException a1552674205412) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.field.FieldParserTest|testRejectHashIfFieldDoesNotClaimToSupportIt()|!", a1552674205412);
            throw a1552674205412;
        }
    }

    @org.junit.Test
    public void testParseAnd() throws java.lang.Exception {
        int on1 = 3;
        int on2 = 4;
        com.cronutils.model.field.expression.And and = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.And>observeState("com.cronutils.model.field.FieldParserTest|testParseAnd()|4", com.cronutils.model.field.expression.And.class, ((com.cronutils.model.field.expression.And) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.FieldParser>observeState("com.cronutils.model.field.FieldParserTest|testParseAnd()|0", com.cronutils.parser.FieldParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseAnd()|3", java.lang.String.format("%s,%s", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseAnd()|1", on1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseAnd()|2", on2)))))));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseAnd()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.field.FieldParserTest|testParseAnd()|6", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.And>observeState("com.cronutils.model.field.FieldParserTest|testParseAnd()|5", com.cronutils.model.field.expression.And.class, and).getExpressions()).size()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseAnd()|8", on1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseAnd()|13", ((int) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.field.FieldParserTest|testParseAnd()|12", com.cronutils.model.field.value.IntegerFieldValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.field.FieldParserTest|testParseAnd()|11", com.cronutils.model.field.expression.On.class, ((com.cronutils.model.field.expression.On) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.field.FieldParserTest|testParseAnd()|10", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.And>observeState("com.cronutils.model.field.FieldParserTest|testParseAnd()|9", com.cronutils.model.field.expression.And.class, and).getExpressions()).get(0)))).getTime()).getValue()))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseAnd()|14", on2), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseAnd()|19", ((int) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.field.FieldParserTest|testParseAnd()|18", com.cronutils.model.field.value.IntegerFieldValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.field.FieldParserTest|testParseAnd()|17", com.cronutils.model.field.expression.On.class, ((com.cronutils.model.field.expression.On) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.field.FieldParserTest|testParseAnd()|16", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.And>observeState("com.cronutils.model.field.FieldParserTest|testParseAnd()|15", com.cronutils.model.field.expression.And.class, and).getExpressions()).get(1)))).getTime()).getValue()))));
    }

    @org.junit.Test
    public void testParseBetween() throws java.lang.Exception {
        int from = 3;
        int to = 4;
        com.cronutils.model.field.expression.Between between = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Between>observeState("com.cronutils.model.field.FieldParserTest|testParseBetween()|4", com.cronutils.model.field.expression.Between.class, ((com.cronutils.model.field.expression.Between) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.FieldParser>observeState("com.cronutils.model.field.FieldParserTest|testParseBetween()|0", com.cronutils.parser.FieldParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetween()|3", java.lang.String.format("%s-%s", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetween()|1", from), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetween()|2", to)))))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetween()|5", from), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetween()|8", ((int) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.field.FieldParserTest|testParseBetween()|7", com.cronutils.model.field.value.IntegerFieldValue.class, ((com.cronutils.model.field.value.IntegerFieldValue) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Between>observeState("com.cronutils.model.field.FieldParserTest|testParseBetween()|6", com.cronutils.model.field.expression.Between.class, between).getFrom()))).getValue()))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetween()|9", to), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetween()|12", ((int) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.field.FieldParserTest|testParseBetween()|11", com.cronutils.model.field.value.IntegerFieldValue.class, ((com.cronutils.model.field.value.IntegerFieldValue) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Between>observeState("com.cronutils.model.field.FieldParserTest|testParseBetween()|10", com.cronutils.model.field.expression.Between.class, between).getTo()))).getValue()))));
    }

    @org.junit.Test
    public void testParseBetweenEveryX() throws java.lang.Exception {
        int from = 10;
        int to = 40;
        int every = 5;
        com.cronutils.model.field.expression.Every expression = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Every>observeState("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|5", com.cronutils.model.field.expression.Every.class, ((com.cronutils.model.field.expression.Every) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.FieldParser>observeState("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|0", com.cronutils.parser.FieldParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|4", java.lang.String.format("%s-%s/%s", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|1", from), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|2", to), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|3", every)))))));
        com.cronutils.model.field.expression.Between between = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Between>observeState("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|7", com.cronutils.model.field.expression.Between.class, ((com.cronutils.model.field.expression.Between) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Every>observeState("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|6", com.cronutils.model.field.expression.Every.class, expression).getExpression())));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|8", from), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|11", ((int) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|10", com.cronutils.model.field.value.IntegerFieldValue.class, ((com.cronutils.model.field.value.IntegerFieldValue) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Between>observeState("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|9", com.cronutils.model.field.expression.Between.class, between).getFrom()))).getValue()))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|12", to), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|15", ((int) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|14", com.cronutils.model.field.value.IntegerFieldValue.class, ((com.cronutils.model.field.value.IntegerFieldValue) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Between>observeState("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|13", com.cronutils.model.field.expression.Between.class, between).getTo()))).getValue()))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|16", every), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|19", ((int) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|18", com.cronutils.model.field.value.IntegerFieldValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Every>observeState("com.cronutils.model.field.FieldParserTest|testParseBetweenEveryX()|17", com.cronutils.model.field.expression.Every.class, expression).getPeriod()).getValue()))));
    }

    @org.junit.Test(expected = java.lang.NullPointerException.class)
    public void testCostructorNullConstraints() throws java.lang.Exception {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.FieldParser>observeState("com.cronutils.model.field.FieldParserTest|testCostructorNullConstraints()|0", com.cronutils.parser.FieldParser.class, new com.cronutils.parser.FieldParser(null));
        } catch (java.lang.NullPointerException a1552674205402) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.field.FieldParserTest|testCostructorNullConstraints()|!", a1552674205402);
            throw a1552674205402;
        }
    }
}

