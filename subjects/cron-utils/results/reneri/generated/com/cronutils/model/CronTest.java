package com.cronutils.model;


/* Copyright 2015 jmrozanec
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
public class CronTest {
    private com.cronutils.model.Cron cron;

    private com.cronutils.model.field.CronFieldName testName;

    private java.util.List<com.cronutils.model.field.CronField> fields;

    @org.mockito.Mock
    private com.cronutils.model.field.CronField mockField;

    @org.junit.Before
    public void setUp() {
        org.mockito.MockitoAnnotations.initMocks(this);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.CronTest|setUp()|0", com.cronutils.model.field.CronFieldName.class, (testName = com.cronutils.model.field.CronFieldName.SECOND));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.CronFieldName>>observeState("com.cronutils.model.CronTest|setUp()|5", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.CronFieldName>>observeState("com.cronutils.model.CronTest|setUp()|3", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.CronTest|setUp()|2", com.cronutils.model.field.CronFieldName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.CronTest|setUp()|1", com.cronutils.model.field.CronField.class, mockField).getField()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.CronTest|setUp()|4", com.cronutils.model.field.CronFieldName.class, testName)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.cronutils.model.field.CronField>>observeState("com.cronutils.model.CronTest|setUp()|6", java.util.List.class, (fields = com.google.common.collect.Lists.newArrayList()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.CronTest|setUp()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.cronutils.model.field.CronField>>observeState("com.cronutils.model.CronTest|setUp()|7", java.util.List.class, fields).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.CronTest|setUp()|8", com.cronutils.model.field.CronField.class, mockField)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|setUp()|12", com.cronutils.model.Cron.class, (cron = new com.cronutils.model.Cron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.CronTest|setUp()|10", com.cronutils.model.definition.CronDefinition.class, org.mockito.Mockito.mock(com.cronutils.model.definition.CronDefinition.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.cronutils.model.field.CronField>>observeState("com.cronutils.model.CronTest|setUp()|11", java.util.List.class, fields))));
    }

    @org.junit.Test(expected = java.lang.NullPointerException.class)
    public void testConstructorNullFieldsParameter() throws java.lang.Exception {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testConstructorNullFieldsParameter()|1", com.cronutils.model.Cron.class, new com.cronutils.model.Cron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.CronTest|testConstructorNullFieldsParameter()|0", com.cronutils.model.definition.CronDefinition.class, org.mockito.Mockito.mock(com.cronutils.model.definition.CronDefinition.class)), null));
        } catch (java.lang.NullPointerException a1552674205766) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.CronTest|testConstructorNullFieldsParameter()|!", a1552674205766);
            throw a1552674205766;
        }
    }

    @org.junit.Test(expected = java.lang.NullPointerException.class)
    public void testConstructorNullDefinitionParameter() throws java.lang.Exception {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testConstructorNullDefinitionParameter()|1", com.cronutils.model.Cron.class, new com.cronutils.model.Cron(null, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.cronutils.model.field.CronField>>observeState("com.cronutils.model.CronTest|testConstructorNullDefinitionParameter()|0", java.util.List.class, fields)));
        } catch (java.lang.NullPointerException a1552674205766) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.CronTest|testConstructorNullDefinitionParameter()|!", a1552674205766);
            throw a1552674205766;
        }
    }

    @org.junit.Test
    public void testRetrieveNonNullParameter() throws java.lang.Exception {
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.CronTest|testRetrieveNonNullParameter()|0", com.cronutils.model.field.CronField.class, mockField), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.CronTest|testRetrieveNonNullParameter()|3", com.cronutils.model.field.CronField.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testRetrieveNonNullParameter()|1", com.cronutils.model.Cron.class, cron).retrieve(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.CronTest|testRetrieveNonNullParameter()|2", com.cronutils.model.field.CronFieldName.class, testName))));
    }

    @org.junit.Test(expected = java.lang.NullPointerException.class)
    public void testRetrieveNullParameter() throws java.lang.Exception {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.CronTest|testRetrieveNullParameter()|1", com.cronutils.model.field.CronField.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testRetrieveNullParameter()|0", com.cronutils.model.Cron.class, cron).retrieve(null));
        } catch (java.lang.NullPointerException a1552674205770) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.CronTest|testRetrieveNullParameter()|!", a1552674205770);
            throw a1552674205770;
        }
    }

    @org.junit.Test
    public void testRetrieveFieldsAsMap() throws java.lang.Exception {
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<com.cronutils.model.field.CronFieldName, com.cronutils.model.field.CronField>>observeState("com.cronutils.model.CronTest|testRetrieveFieldsAsMap()|1", java.util.Map.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testRetrieveFieldsAsMap()|0", com.cronutils.model.Cron.class, cron).retrieveFieldsAsMap()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.CronTest|testRetrieveFieldsAsMap()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<com.cronutils.model.field.CronFieldName, com.cronutils.model.field.CronField>>observeState("com.cronutils.model.CronTest|testRetrieveFieldsAsMap()|3", java.util.Map.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testRetrieveFieldsAsMap()|2", com.cronutils.model.Cron.class, cron).retrieveFieldsAsMap()).size()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.CronTest|testRetrieveFieldsAsMap()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<com.cronutils.model.field.CronFieldName, com.cronutils.model.field.CronField>>observeState("com.cronutils.model.CronTest|testRetrieveFieldsAsMap()|6", java.util.Map.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testRetrieveFieldsAsMap()|5", com.cronutils.model.Cron.class, cron).retrieveFieldsAsMap()).containsKey(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.CronTest|testRetrieveFieldsAsMap()|7", com.cronutils.model.field.CronFieldName.class, testName))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.CronTest|testRetrieveFieldsAsMap()|9", com.cronutils.model.field.CronField.class, mockField), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.CronTest|testRetrieveFieldsAsMap()|13", com.cronutils.model.field.CronField.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<com.cronutils.model.field.CronFieldName, com.cronutils.model.field.CronField>>observeState("com.cronutils.model.CronTest|testRetrieveFieldsAsMap()|11", java.util.Map.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testRetrieveFieldsAsMap()|10", com.cronutils.model.Cron.class, cron).retrieveFieldsAsMap()).get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.CronTest|testRetrieveFieldsAsMap()|12", com.cronutils.model.field.CronFieldName.class, testName))));
    }

    @org.junit.Test
    public void testAsString() throws java.lang.Exception {
        java.lang.String expressionString = "somestring";
        com.cronutils.model.field.expression.FieldExpression mockFieldExpression = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.CronTest|testAsString()|0", com.cronutils.model.field.expression.FieldExpression.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.FieldExpression.class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.CronTest|testAsString()|5", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.CronTest|testAsString()|3", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.CronTest|testAsString()|2", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.CronTest|testAsString()|1", com.cronutils.model.field.CronField.class, mockField).getExpression()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.CronTest|testAsString()|4", com.cronutils.model.field.expression.FieldExpression.class, mockFieldExpression)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<java.lang.String>>observeState("com.cronutils.model.CronTest|testAsString()|10", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<java.lang.String>>observeState("com.cronutils.model.CronTest|testAsString()|8", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.CronTest|testAsString()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.CronTest|testAsString()|6", com.cronutils.model.field.expression.FieldExpression.class, mockFieldExpression).asString()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.CronTest|testAsString()|9", expressionString)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.CronTest|testAsString()|11", expressionString), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.CronTest|testAsString()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testAsString()|12", com.cronutils.model.Cron.class, cron).asString()));
    }

    @org.junit.Test
    public void testEquivalent() {
        com.cronutils.model.definition.CronDefinition unixcd = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.CronTest|testEquivalent()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.CronTest|testEquivalent()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.model.definition.CronDefinition quartzcd = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.CronTest|testEquivalent()|3", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.CronTest|testEquivalent()|2", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)));
        com.cronutils.parser.CronParser unix = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testEquivalent()|5", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.CronTest|testEquivalent()|4", com.cronutils.model.definition.CronDefinition.class, unixcd)));
        com.cronutils.parser.CronParser quartz = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testEquivalent()|7", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.CronTest|testEquivalent()|6", com.cronutils.model.definition.CronDefinition.class, quartzcd)));
        com.cronutils.model.Cron cron1 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testEquivalent()|9", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testEquivalent()|8", com.cronutils.parser.CronParser.class, unix).parse("* * * * MON"));
        com.cronutils.model.Cron cron2 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testEquivalent()|11", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testEquivalent()|10", com.cronutils.parser.CronParser.class, unix).parse("*/1 * * * 1"));
        com.cronutils.model.Cron cron3 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testEquivalent()|13", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testEquivalent()|12", com.cronutils.parser.CronParser.class, unix).parse("0 * * * *"));
        com.cronutils.model.Cron cron4 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testEquivalent()|15", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testEquivalent()|14", com.cronutils.parser.CronParser.class, quartz).parse("0 * * ? * MON *"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.CronTest|testEquivalent()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testEquivalent()|16", com.cronutils.model.Cron.class, cron1).equivalent(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.CronMapper>observeState("com.cronutils.model.CronTest|testEquivalent()|18", com.cronutils.mapper.CronMapper.class, com.cronutils.mapper.CronMapper.sameCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.CronTest|testEquivalent()|17", com.cronutils.model.definition.CronDefinition.class, unixcd))), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testEquivalent()|19", com.cronutils.model.Cron.class, cron2))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.CronTest|testEquivalent()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testEquivalent()|21", com.cronutils.model.Cron.class, cron1).equivalent(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.CronMapper>observeState("com.cronutils.model.CronTest|testEquivalent()|23", com.cronutils.mapper.CronMapper.class, com.cronutils.mapper.CronMapper.sameCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.CronTest|testEquivalent()|22", com.cronutils.model.definition.CronDefinition.class, unixcd))), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testEquivalent()|24", com.cronutils.model.Cron.class, cron3))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.CronTest|testEquivalent()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testEquivalent()|26", com.cronutils.model.Cron.class, cron1).equivalent(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.CronMapper>observeState("com.cronutils.model.CronTest|testEquivalent()|27", com.cronutils.mapper.CronMapper.class, com.cronutils.mapper.CronMapper.fromQuartzToCron4j()), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testEquivalent()|28", com.cronutils.model.Cron.class, cron4))));
    }

    @org.junit.Test
    public void testSerialization() throws java.io.IOException, java.lang.ClassNotFoundException {
        com.cronutils.model.definition.CronDefinition cron4jcd = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.CronTest|testSerialization()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.CronTest|testSerialization()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.CRON4J)));
        com.cronutils.model.definition.CronDefinition unixcd = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.CronTest|testSerialization()|3", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.CronTest|testSerialization()|2", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.model.definition.CronDefinition quartzcd = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.CronTest|testSerialization()|5", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.CronTest|testSerialization()|4", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)));
        com.cronutils.parser.CronParser unix = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testSerialization()|7", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.CronTest|testSerialization()|6", com.cronutils.model.definition.CronDefinition.class, unixcd)));
        com.cronutils.parser.CronParser quartz = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testSerialization()|9", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.CronTest|testSerialization()|8", com.cronutils.model.definition.CronDefinition.class, quartzcd)));
        com.cronutils.parser.CronParser cron4j = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testSerialization()|11", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.CronTest|testSerialization()|10", com.cronutils.model.definition.CronDefinition.class, cron4jcd)));
        com.cronutils.model.Cron[] toTest = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron[]>observeState("com.cronutils.model.CronTest|testSerialization()|34", com.cronutils.model.Cron[].class, new com.cronutils.model.Cron[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|13", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testSerialization()|12", com.cronutils.parser.CronParser.class, unix).parse("* * * * MON")), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|15", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testSerialization()|14", com.cronutils.parser.CronParser.class, unix).parse("*/1 * * * 1")), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|17", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testSerialization()|16", com.cronutils.parser.CronParser.class, unix).parse("0 * * * *")), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|19", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testSerialization()|18", com.cronutils.parser.CronParser.class, unix).parse("*/2 * * * *")), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|21", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testSerialization()|20", com.cronutils.parser.CronParser.class, quartz).parse("0 * * ? * MON *")), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|23", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testSerialization()|22", com.cronutils.parser.CronParser.class, cron4j).parse("* 1 1,2 * 4")), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|25", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testSerialization()|24", com.cronutils.parser.CronParser.class, cron4j).parse("* 1 1-2 * 4")), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|27", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testSerialization()|26", com.cronutils.parser.CronParser.class, cron4j).parse("0 18 * * 1")), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|29", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testSerialization()|28", com.cronutils.parser.CronParser.class, cron4j).parse("0/15 * * * *")), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|31", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testSerialization()|30", com.cronutils.parser.CronParser.class, cron4j).parse("0 0/2 * * *")), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|33", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.CronTest|testSerialization()|32", com.cronutils.parser.CronParser.class, cron4j).parse("0 6 * * MON-FRI")) });
        for (com.cronutils.model.Cron expected : eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron[]>observeState("com.cronutils.model.CronTest|testSerialization()|35", com.cronutils.model.Cron[].class, toTest)) {
            java.io.ByteArrayOutputStream byteOut = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayOutputStream>observeState("com.cronutils.model.CronTest|testSerialization()|36", java.io.ByteArrayOutputStream.class, new java.io.ByteArrayOutputStream());
            try (java.io.ObjectOutputStream objOut = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ObjectOutputStream>observeState("com.cronutils.model.CronTest|testSerialization()|38", java.io.ObjectOutputStream.class, new java.io.ObjectOutputStream(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayOutputStream>observeState("com.cronutils.model.CronTest|testSerialization()|37", java.io.ByteArrayOutputStream.class, byteOut)))) {
                eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ObjectOutputStream>observeState("com.cronutils.model.CronTest|testSerialization()|39", java.io.ObjectOutputStream.class, objOut).writeObject(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|40", com.cronutils.model.Cron.class, expected));
            }
            try (java.io.ObjectInputStream objIn = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ObjectInputStream>observeState("com.cronutils.model.CronTest|testSerialization()|44", java.io.ObjectInputStream.class, new java.io.ObjectInputStream(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayInputStream>observeState("com.cronutils.model.CronTest|testSerialization()|43", java.io.ByteArrayInputStream.class, new java.io.ByteArrayInputStream(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("com.cronutils.model.CronTest|testSerialization()|42", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayOutputStream>observeState("com.cronutils.model.CronTest|testSerialization()|41", java.io.ByteArrayOutputStream.class, byteOut).toByteArray())))))) {
                com.cronutils.model.Cron actual = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|46", com.cronutils.model.Cron.class, ((com.cronutils.model.Cron) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ObjectInputStream>observeState("com.cronutils.model.CronTest|testSerialization()|45", java.io.ObjectInputStream.class, objIn).readObject())));
                org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.CronTest|testSerialization()|48", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|47", com.cronutils.model.Cron.class, expected).asString()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.CronTest|testSerialization()|50", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.CronTest|testSerialization()|49", com.cronutils.model.Cron.class, actual).asString()));
            }
        }
    }
}

