package com.cronutils.model.time;


/* Copyright 2015 jmrozanec
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
public class ExecutionTimeQuartzIntegrationTest {
    private com.cronutils.parser.CronParser parser;

    private static final java.lang.String EVERY_SECOND = "* * * * * ? *";

    @org.junit.Before
    public void setUp() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|setUp()|2", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|setUp()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|setUp()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ))))));
    }

    @org.junit.Test
    public void testForCron() throws java.lang.Exception {
        org.junit.Assert.assertEquals(com.cronutils.model.time.ExecutionTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testForCron()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testForCron()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testForCron()|0", com.cronutils.parser.CronParser.class, parser).parse(com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest.EVERY_SECOND)))).getClass());
    }

    @org.junit.Test
    public void testNextExecutionEverySecond() throws java.lang.Exception {
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionEverySecond()|1", org.threeten.bp.ZonedDateTime.class, truncateToSeconds(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionEverySecond()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now())));
        org.threeten.bp.ZonedDateTime expected = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionEverySecond()|4", org.threeten.bp.ZonedDateTime.class, truncateToSeconds(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionEverySecond()|3", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionEverySecond()|2", org.threeten.bp.ZonedDateTime.class, now).plusSeconds(1))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionEverySecond()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionEverySecond()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionEverySecond()|5", com.cronutils.parser.CronParser.class, parser).parse(com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest.EVERY_SECOND))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionEverySecond()|8", org.threeten.bp.ZonedDateTime.class, expected), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionEverySecond()|12", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionEverySecond()|11", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionEverySecond()|9", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionEverySecond()|10", org.threeten.bp.ZonedDateTime.class, now))).get()));
    }

    @org.junit.Test
    public void testTimeToNextExecution() throws java.lang.Exception {
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|1", org.threeten.bp.ZonedDateTime.class, truncateToSeconds(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now())));
        org.threeten.bp.ZonedDateTime expected = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|4", org.threeten.bp.ZonedDateTime.class, truncateToSeconds(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|3", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|2", org.threeten.bp.ZonedDateTime.class, now).plusSeconds(1))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|5", com.cronutils.parser.CronParser.class, parser).parse(com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest.EVERY_SECOND))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|10", org.threeten.bp.Duration.class, org.threeten.bp.Duration.between(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|8", org.threeten.bp.ZonedDateTime.class, now), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|9", org.threeten.bp.ZonedDateTime.class, expected))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|14", org.threeten.bp.Duration.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.Duration>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|13", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|11", com.cronutils.model.time.ExecutionTime.class, executionTime).timeToNextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeToNextExecution()|12", org.threeten.bp.ZonedDateTime.class, now))).get()));
    }

    @org.junit.Test
    public void testLastExecution() throws java.lang.Exception {
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecution()|1", org.threeten.bp.ZonedDateTime.class, truncateToSeconds(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecution()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now())));
        org.threeten.bp.ZonedDateTime expected = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecution()|4", org.threeten.bp.ZonedDateTime.class, truncateToSeconds(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecution()|3", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecution()|2", org.threeten.bp.ZonedDateTime.class, now).minusSeconds(1))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecution()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecution()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecution()|5", com.cronutils.parser.CronParser.class, parser).parse(com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest.EVERY_SECOND))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecution()|8", org.threeten.bp.ZonedDateTime.class, expected), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecution()|12", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecution()|11", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecution()|9", com.cronutils.model.time.ExecutionTime.class, executionTime).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecution()|10", org.threeten.bp.ZonedDateTime.class, now))).get()));
    }

    @org.junit.Test
    public void testTimeFromLastExecution() throws java.lang.Exception {
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|1", org.threeten.bp.ZonedDateTime.class, truncateToSeconds(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now())));
        org.threeten.bp.ZonedDateTime expected = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|4", org.threeten.bp.ZonedDateTime.class, truncateToSeconds(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|3", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|2", org.threeten.bp.ZonedDateTime.class, now).minusSeconds(1))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|5", com.cronutils.parser.CronParser.class, parser).parse(com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest.EVERY_SECOND))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|10", org.threeten.bp.Duration.class, org.threeten.bp.Duration.between(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|8", org.threeten.bp.ZonedDateTime.class, expected), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|9", org.threeten.bp.ZonedDateTime.class, now))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|14", org.threeten.bp.Duration.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.Duration>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|13", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|11", com.cronutils.model.time.ExecutionTime.class, executionTime).timeToNextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeFromLastExecution()|12", org.threeten.bp.ZonedDateTime.class, now))).get()));
    }

    /**
     * Test for issue #9
     * https://github.com/jmrozanec/cron-utils/issues/9
     * Reported case: If you write a cron expression that contains a month or day of week, nextExection() ignores it.
     * Expected: should not ignore month or day of week field
     */
    @org.junit.Test
    public void testDoesNotIgnoreMonthOrDayOfWeek() {
        // seconds, minutes, hours, dayOfMonth, month, dayOfWeek
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|0", com.cronutils.parser.CronParser.class, parser).parse("0 11 11 11 11 ?"))));
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|4", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2015, 4, 15, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|3", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC)));
        org.threeten.bp.ZonedDateTime whenToExecuteNext = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|8", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|7", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|5", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|6", org.threeten.bp.ZonedDateTime.class, now))).get());
        org.junit.Assert.assertEquals(2015, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|9", org.threeten.bp.ZonedDateTime.class, whenToExecuteNext).getYear()));
        org.junit.Assert.assertEquals(11, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|11", org.threeten.bp.ZonedDateTime.class, whenToExecuteNext).getMonthValue()));
        org.junit.Assert.assertEquals(11, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|13", org.threeten.bp.ZonedDateTime.class, whenToExecuteNext).getDayOfMonth()));
        org.junit.Assert.assertEquals(11, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|15", org.threeten.bp.ZonedDateTime.class, whenToExecuteNext).getHour()));
        org.junit.Assert.assertEquals(11, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|17", org.threeten.bp.ZonedDateTime.class, whenToExecuteNext).getMinute()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDoesNotIgnoreMonthOrDayOfWeek()|19", org.threeten.bp.ZonedDateTime.class, whenToExecuteNext).getSecond()));
    }

    /**
     * Test for issue #18
     *
     * @throws Exception
     * 		
     */
    @org.junit.Test
    public void testHourlyIntervalTimeFromLastExecution() throws java.lang.Exception {
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now());
        org.threeten.bp.ZonedDateTime previousHour = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|2", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|1", org.threeten.bp.ZonedDateTime.class, now).minusHours(1));
        java.lang.String quartzCronExpression = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|5", java.lang.String.format("0 0 %s * * ?", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|3", org.threeten.bp.ZonedDateTime.class, previousHour).getHour())));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|9", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|8", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|6", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|7", quartzCronExpression)))));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|13", org.threeten.bp.Duration.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.Duration>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|12", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|10", com.cronutils.model.time.ExecutionTime.class, executionTime).timeFromLastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testHourlyIntervalTimeFromLastExecution()|11", org.threeten.bp.ZonedDateTime.class, now))).get()).toMinutes())) <= 120));
    }

    /**
     * Test for issue #19
     * https://github.com/jmrozanec/cron-utils/issues/19
     * Reported case: When nextExecution shifts to the 24th hour (e.g. 23:59:59 + 00:00:01), JodaTime will throw an exception
     * Expected: should shift one day
     */
    @org.junit.Test
    public void testShiftTo24thHour() {
        java.lang.String expression = "0/1 * * 1/1 * ? *";// every second every day

        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|0", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|1", expression)))));
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|4", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2016, 8, 5)), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|5", org.threeten.bp.LocalTime.class, org.threeten.bp.LocalTime.of(23, 59, 59, 0)), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|6", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC)));
        org.threeten.bp.ZonedDateTime expected = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|9", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|8", org.threeten.bp.ZonedDateTime.class, now).plusSeconds(1));
        org.threeten.bp.ZonedDateTime nextExecution = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|13", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|12", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|10", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|11", org.threeten.bp.ZonedDateTime.class, now))).get());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|14", org.threeten.bp.ZonedDateTime.class, expected), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo24thHour()|15", org.threeten.bp.ZonedDateTime.class, nextExecution));
    }

    /**
     * Test for issue #19
     * https://github.com/jmrozanec/cron-utils/issues/19
     * Reported case: When nextExecution shifts to 32nd day (e.g. 2015-01-31 23:59:59 + 00:00:01), JodaTime will throw an exception
     * Expected: should shift one month
     */
    @org.junit.Test
    public void testShiftTo32ndDay() {
        java.lang.String expression = "0/1 * * 1/1 * ? *";// every second every day

        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo32ndDay()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo32ndDay()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo32ndDay()|0", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo32ndDay()|1", expression)))));
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo32ndDay()|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2015, 1, 31, 23, 59, 59, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo32ndDay()|4", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC)));
        org.threeten.bp.ZonedDateTime expected = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo32ndDay()|7", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo32ndDay()|6", org.threeten.bp.ZonedDateTime.class, now).plusSeconds(1));
        org.threeten.bp.ZonedDateTime nextExecution = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo32ndDay()|11", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo32ndDay()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo32ndDay()|8", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo32ndDay()|9", org.threeten.bp.ZonedDateTime.class, now))).get());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo32ndDay()|12", org.threeten.bp.ZonedDateTime.class, expected), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testShiftTo32ndDay()|13", org.threeten.bp.ZonedDateTime.class, nextExecution));
    }

    /**
     * Issue #24: next execution not properly calculated
     */
    @org.junit.Test
    public void testTimeShiftingProperlyDone() throws java.lang.Exception {
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeShiftingProperlyDone()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeShiftingProperlyDone()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeShiftingProperlyDone()|0", com.cronutils.parser.CronParser.class, parser).parse("0 0/10 22 ? * *"))));
        org.threeten.bp.ZonedDateTime nextExecution = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeShiftingProperlyDone()|8", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeShiftingProperlyDone()|7", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeShiftingProperlyDone()|3", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeShiftingProperlyDone()|6", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeShiftingProperlyDone()|5", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeShiftingProperlyDone()|4", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now()).withHour(15)).withMinute(27)))).get());
        org.junit.Assert.assertEquals(22, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeShiftingProperlyDone()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeShiftingProperlyDone()|9", org.threeten.bp.ZonedDateTime.class, nextExecution).getHour()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeShiftingProperlyDone()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testTimeShiftingProperlyDone()|11", org.threeten.bp.ZonedDateTime.class, nextExecution).getMinute()));
    }

    /**
     * Issue #27: execution time properly calculated
     */
    @org.junit.Test
    public void testMonthRangeExecutionTime() {
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMonthRangeExecutionTime()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMonthRangeExecutionTime()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMonthRangeExecutionTime()|0", com.cronutils.parser.CronParser.class, parser).parse("0 0 0 * JUL-AUG ? *")))));
    }

    /**
     * Issue #30: execution time properly calculated
     */
    @org.junit.Test
    public void testSaturdayExecutionTime() {
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testSaturdayExecutionTime()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now());
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testSaturdayExecutionTime()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testSaturdayExecutionTime()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testSaturdayExecutionTime()|1", com.cronutils.parser.CronParser.class, parser).parse("0 0 3 ? * 6"))));
        org.threeten.bp.ZonedDateTime last = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testSaturdayExecutionTime()|7", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testSaturdayExecutionTime()|6", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testSaturdayExecutionTime()|4", com.cronutils.model.time.ExecutionTime.class, executionTime).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testSaturdayExecutionTime()|5", org.threeten.bp.ZonedDateTime.class, now))).get());
        org.threeten.bp.ZonedDateTime next = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testSaturdayExecutionTime()|11", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testSaturdayExecutionTime()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testSaturdayExecutionTime()|8", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testSaturdayExecutionTime()|9", org.threeten.bp.ZonedDateTime.class, now))).get());
        org.junit.Assert.assertNotEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testSaturdayExecutionTime()|12", org.threeten.bp.ZonedDateTime.class, last), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testSaturdayExecutionTime()|13", org.threeten.bp.ZonedDateTime.class, next));
    }

    /**
     * Issue: execution time properly calculated
     */
    @org.junit.Test
    public void testWeekdayExecutionTime() {
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testWeekdayExecutionTime()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now());
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testWeekdayExecutionTime()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testWeekdayExecutionTime()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testWeekdayExecutionTime()|1", com.cronutils.parser.CronParser.class, parser).parse("0 0 3 ? * *"))));
        org.threeten.bp.ZonedDateTime last = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testWeekdayExecutionTime()|7", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testWeekdayExecutionTime()|6", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testWeekdayExecutionTime()|4", com.cronutils.model.time.ExecutionTime.class, executionTime).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testWeekdayExecutionTime()|5", org.threeten.bp.ZonedDateTime.class, now))).get());
        org.threeten.bp.ZonedDateTime next = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testWeekdayExecutionTime()|11", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testWeekdayExecutionTime()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testWeekdayExecutionTime()|8", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testWeekdayExecutionTime()|9", org.threeten.bp.ZonedDateTime.class, now))).get());
        org.junit.Assert.assertNotEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testWeekdayExecutionTime()|12", org.threeten.bp.ZonedDateTime.class, last), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testWeekdayExecutionTime()|13", org.threeten.bp.ZonedDateTime.class, next));
    }

    /**
     * Issue #64: Incorrect next execution time for ranges
     */
    @org.junit.Test
    public void testExecutionTimeForRanges() {
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testExecutionTimeForRanges()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testExecutionTimeForRanges()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testExecutionTimeForRanges()|0", com.cronutils.parser.CronParser.class, parser).parse("* 10-20 * * * ? 2099"))));
        org.threeten.bp.ZonedDateTime scanTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testExecutionTimeForRanges()|3", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-02-29T11:00:00.000-06:00"));
        org.threeten.bp.ZonedDateTime nextTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testExecutionTimeForRanges()|7", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testExecutionTimeForRanges()|6", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testExecutionTimeForRanges()|4", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testExecutionTimeForRanges()|5", org.threeten.bp.ZonedDateTime.class, scanTime))).get());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testExecutionTimeForRanges()|8", org.threeten.bp.ZonedDateTime.class, nextTime));
        org.junit.Assert.assertEquals(10, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testExecutionTimeForRanges()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testExecutionTimeForRanges()|9", org.threeten.bp.ZonedDateTime.class, nextTime).getMinute()));
    }

    /**
     * Issue #65: Incorrect last execution time for fixed month
     */
    @org.junit.Test
    public void testLastExecutionTimeForFixedMonth() {
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecutionTimeForFixedMonth()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecutionTimeForFixedMonth()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecutionTimeForFixedMonth()|0", com.cronutils.parser.CronParser.class, parser).parse("0 30 12 1 9 ? 2010"))));
        org.threeten.bp.ZonedDateTime scanTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecutionTimeForFixedMonth()|3", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-01-08T11:00:00.000-06:00"));
        org.threeten.bp.ZonedDateTime lastTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecutionTimeForFixedMonth()|7", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecutionTimeForFixedMonth()|6", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecutionTimeForFixedMonth()|4", com.cronutils.model.time.ExecutionTime.class, executionTime).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecutionTimeForFixedMonth()|5", org.threeten.bp.ZonedDateTime.class, scanTime))).get());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecutionTimeForFixedMonth()|8", org.threeten.bp.ZonedDateTime.class, lastTime));
        org.junit.Assert.assertEquals(9, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecutionTimeForFixedMonth()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testLastExecutionTimeForFixedMonth()|9", org.threeten.bp.ZonedDateTime.class, lastTime).getMonthValue()));
    }

    /**
     * Issue #66: Incorrect Day Of Week processing for Quartz when Month or Year isn't '*'.
     */
    @org.junit.Test
    public void testNextExecutionRightDoWForFixedMonth() {
        // cron format: s,m,H,DoM,M,DoW,Y
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedMonth()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedMonth()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedMonth()|0", com.cronutils.parser.CronParser.class, parser).parse("0 * * ? 5 1 *"))));
        org.threeten.bp.ZonedDateTime scanTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedMonth()|3", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-03-06T20:17:28.000-03:00"));
        org.threeten.bp.ZonedDateTime nextTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedMonth()|7", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedMonth()|6", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedMonth()|4", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedMonth()|5", org.threeten.bp.ZonedDateTime.class, scanTime))).get());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedMonth()|8", org.threeten.bp.ZonedDateTime.class, nextTime));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedMonth()|9", org.threeten.bp.DayOfWeek.class, org.threeten.bp.DayOfWeek.SUNDAY), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedMonth()|11", org.threeten.bp.DayOfWeek.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedMonth()|10", org.threeten.bp.ZonedDateTime.class, nextTime).getDayOfWeek()));
    }

    /**
     * Issue #66: Incorrect Day Of Week processing for Quartz when Month or Year isn't '*'.
     */
    @org.junit.Test
    public void testNextExecutionRightDoWForFixedYear() {
        // cron format: s,m,H,DoM,M,DoW,Y
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedYear()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedYear()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedYear()|0", com.cronutils.parser.CronParser.class, parser).parse("0 * * ? * 1 2099"))));
        org.threeten.bp.ZonedDateTime scanTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedYear()|3", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-03-06T20:17:28.000-03:00"));
        org.threeten.bp.ZonedDateTime nextTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedYear()|7", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedYear()|6", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedYear()|4", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedYear()|5", org.threeten.bp.ZonedDateTime.class, scanTime))).get());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedYear()|8", org.threeten.bp.ZonedDateTime.class, nextTime));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedYear()|9", org.threeten.bp.DayOfWeek.class, org.threeten.bp.DayOfWeek.SUNDAY), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedYear()|11", org.threeten.bp.DayOfWeek.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionRightDoWForFixedYear()|10", org.threeten.bp.ZonedDateTime.class, nextTime).getDayOfWeek()));
    }

    /**
     * Issue #70: Illegal question mark value on cron pattern assumed valid.
     */
    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testIllegalQuestionMarkValue() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testIllegalQuestionMarkValue()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testIllegalQuestionMarkValue()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testIllegalQuestionMarkValue()|0", com.cronutils.parser.CronParser.class, parser).parse("0 0 12 1W ? *")))// s,m,H,DoM,M,DoW
            );
        } catch (java.lang.IllegalArgumentException a1552674205687) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testIllegalQuestionMarkValue()|!", a1552674205687);
            throw a1552674205687;
        }
    }

    /**
     * Issue #72: Stacktrace printed.
     * TODO: Although test is passing, there is some stacktrace printed indicating there may be something wrong.
     * TODO: We should analyze it and fix the eventual issue.
     */
    // TODO
    @org.junit.Test
    public void testNextExecutionProducingInvalidPrintln() {
        java.lang.String cronText = "0 0/15 * * * ?";
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidPrintln()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidPrintln()|0", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidPrintln()|1", cronText)));
        final com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidPrintln()|4", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidPrintln()|3", com.cronutils.model.Cron.class, cron)));
    }

    /**
     * Issue #73: NextExecution not working as expected
     */
    @org.junit.Test
    public void testNextExecutionProducingInvalidValues() {
        java.lang.String cronText = "0 0 18 ? * MON";
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|0", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|1", cronText)));
        final com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|4", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|3", com.cronutils.model.Cron.class, cron)));
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-03-18T19:02:51.424+09:00"));
        org.threeten.bp.ZonedDateTime next = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|9", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|8", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|6", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|7", org.threeten.bp.ZonedDateTime.class, now))).get());
        org.threeten.bp.ZonedDateTime nextNext = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|13", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|12", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|10", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|11", org.threeten.bp.ZonedDateTime.class, next))).get());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|14", org.threeten.bp.DayOfWeek.class, org.threeten.bp.DayOfWeek.MONDAY), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|16", org.threeten.bp.DayOfWeek.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|15", org.threeten.bp.ZonedDateTime.class, next).getDayOfWeek()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|17", org.threeten.bp.DayOfWeek.class, org.threeten.bp.DayOfWeek.MONDAY), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|19", org.threeten.bp.DayOfWeek.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|18", org.threeten.bp.ZonedDateTime.class, nextNext).getDayOfWeek()));
        org.junit.Assert.assertEquals(18, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|20", org.threeten.bp.ZonedDateTime.class, next).getHour()));
        org.junit.Assert.assertEquals(18, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionProducingInvalidValues()|22", org.threeten.bp.ZonedDateTime.class, nextNext).getHour()));
    }

    /**
     * Test for issue #83
     * https://github.com/jmrozanec/cron-utils/issues/83
     * Reported case: Candidate values are false when combining range and multiple patterns
     * Expected: Candidate values should be correctly identified
     *
     * @throws Exception
     * 		
     */
    @org.junit.Test
    public void testMultipleMinuteIntervalTimeFromLastExecution() {
        java.lang.String expression = "* 8-10,23-25,38-40,53-55 * * * ? *";// every second for intervals of minutes

        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|0", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|1", expression)))));
        org.junit.Assert.assertEquals(301, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|10", org.threeten.bp.Duration.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.Duration>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|9", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|4", com.cronutils.model.time.ExecutionTime.class, executionTime).timeFromLastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|8", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|5", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.now()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|6", org.threeten.bp.LocalTime.class, org.threeten.bp.LocalTime.of(3, 1, 0, 0)), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|7", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))))).get()).getSeconds()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|18", org.threeten.bp.Duration.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.Duration>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|17", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|12", com.cronutils.model.time.ExecutionTime.class, executionTime).timeFromLastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|16", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|13", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.now()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|14", org.threeten.bp.LocalTime.class, org.threeten.bp.LocalTime.of(13, 8, 4, 0)), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|15", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))))).get()).getSeconds()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|26", org.threeten.bp.Duration.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.Duration>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|25", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|20", com.cronutils.model.time.ExecutionTime.class, executionTime).timeFromLastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|24", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|21", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.now()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|22", org.threeten.bp.LocalTime.class, org.threeten.bp.LocalTime.of(13, 11, 0, 0)), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|23", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))))).get()).getSeconds()));
        org.junit.Assert.assertEquals(63, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|34", org.threeten.bp.Duration.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.Duration>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|33", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|28", com.cronutils.model.time.ExecutionTime.class, executionTime).timeFromLastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|32", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|29", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.now()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|30", org.threeten.bp.LocalTime.class, org.threeten.bp.LocalTime.of(13, 12, 2, 0)), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalTimeFromLastExecution()|31", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))))).get()).getSeconds()));
    }

    /**
     * Test for issue #83
     * https://github.com/jmrozanec/cron-utils/issues/83
     * Reported case: Candidate values are false when combining range and multiple patterns
     * Expected: Candidate values should be correctly identified
     *
     * @throws Exception
     * 		
     */
    @org.junit.Test
    public void testMultipleMinuteIntervalMatch() {
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|0", com.cronutils.parser.CronParser.class, parser).parse("* * 21-23,0-4 * * ?")))).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|4", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2014, 9, 20, 20, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|3", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))))), false);
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|8", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|7", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|6", com.cronutils.parser.CronParser.class, parser).parse("* * 21-23,0-4 * * ?")))).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|10", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2014, 9, 20, 21, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|9", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))))), true);
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|14", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|13", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|12", com.cronutils.parser.CronParser.class, parser).parse("* * 21-23,0-4 * * ?")))).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|16", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2014, 9, 20, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|15", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))))), true);
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|20", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|19", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|18", com.cronutils.parser.CronParser.class, parser).parse("* * 21-23,0-4 * * ?")))).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|22", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2014, 9, 20, 4, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|21", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))))), true);
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|26", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|25", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|24", com.cronutils.parser.CronParser.class, parser).parse("* * 21-23,0-4 * * ?")))).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|28", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2014, 9, 20, 5, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMultipleMinuteIntervalMatch()|27", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))))), false);
    }

    @org.junit.Test
    public void testDayLightSavingsSwitch() {
        // every 2 minutes
        java.lang.String expression = "* 0/2 * * * ?";
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|0", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|1", expression)));
        // SIMULATE SCHEDULE JUST PRIOR TO DST
        org.threeten.bp.format.DateTimeFormatter formatter = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.format.DateTimeFormatter>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|5", org.threeten.bp.format.DateTimeFormatter.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.format.DateTimeFormatter>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|3", org.threeten.bp.format.DateTimeFormatter.class, org.threeten.bp.format.DateTimeFormatter.ofPattern("yyyy MM dd HH:mm:ss")).withZone(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|4", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("America/Denver"))));
        org.threeten.bp.ZonedDateTime prevRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016 03 13 01:59:59", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.format.DateTimeFormatter>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|6", org.threeten.bp.format.DateTimeFormatter.class, formatter)));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|9", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|8", com.cronutils.model.Cron.class, cron)));
        org.threeten.bp.ZonedDateTime nextRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|13", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|12", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|10", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|11", org.threeten.bp.ZonedDateTime.class, prevRun))).get());
        // Assert we got 3:00am
        org.junit.Assert.assertEquals("Incorrect Hour", 3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|14", org.threeten.bp.ZonedDateTime.class, nextRun).getHour()));
        org.junit.Assert.assertEquals("Incorrect Minute", 0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|16", org.threeten.bp.ZonedDateTime.class, nextRun).getMinute()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|19", org.threeten.bp.ZonedDateTime.class, // SIMULATE SCHEDULE POST DST - simulate a schedule after DST 3:01 with the same cron, expect 3:02
        (nextRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|18", org.threeten.bp.ZonedDateTime.class, nextRun).plusMinutes(1)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|23", org.threeten.bp.ZonedDateTime.class, (nextRun = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|22", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|20", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|21", org.threeten.bp.ZonedDateTime.class, nextRun))).get()));
        org.junit.Assert.assertEquals("Incorrect Hour", 3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|24", org.threeten.bp.ZonedDateTime.class, nextRun).getHour()));
        org.junit.Assert.assertEquals("Incorrect Minute", 2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|26", org.threeten.bp.ZonedDateTime.class, nextRun).getMinute()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|28", org.threeten.bp.ZonedDateTime.class, // SIMULATE SCHEDULE NEXT DAY DST - verify after midnight on DST switch things still work as expected
        (prevRun = org.threeten.bp.ZonedDateTime.parse("2016-03-14T00:00:59Z")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|32", org.threeten.bp.ZonedDateTime.class, (nextRun = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|31", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|29", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|30", org.threeten.bp.ZonedDateTime.class, prevRun))).get()));
        org.junit.Assert.assertEquals("incorrect hour", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|34", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|33", org.threeten.bp.ZonedDateTime.class, nextRun).getHour()), 0);
        org.junit.Assert.assertEquals("incorrect minute", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayLightSavingsSwitch()|35", org.threeten.bp.ZonedDateTime.class, nextRun).getMinute()), 2);
    }

    @org.junit.Test
    public void bigNumbersOnDayOfMonthField() {
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|bigNumbersOnDayOfMonthField()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|bigNumbersOnDayOfMonthField()|0", com.cronutils.parser.CronParser.class, parser).parse("0 0 0 31 * ?"));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|bigNumbersOnDayOfMonthField()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|bigNumbersOnDayOfMonthField()|2", com.cronutils.model.Cron.class, cron)));
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|bigNumbersOnDayOfMonthField()|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 11, 1, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|bigNumbersOnDayOfMonthField()|4", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC"))));
        // nextRun expected to be  2016-12-31 00:00:00 000
        // quartz-2.2.3 return the right date
        org.threeten.bp.ZonedDateTime nextRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|bigNumbersOnDayOfMonthField()|9", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|bigNumbersOnDayOfMonthField()|8", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|bigNumbersOnDayOfMonthField()|6", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|bigNumbersOnDayOfMonthField()|7", org.threeten.bp.ZonedDateTime.class, now))).get());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|bigNumbersOnDayOfMonthField()|11", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 12, 31, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|bigNumbersOnDayOfMonthField()|10", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC")))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|bigNumbersOnDayOfMonthField()|12", org.threeten.bp.ZonedDateTime.class, nextRun));
    }

    @org.junit.Test
    public void noSpecificDayOfMonthEvaluatedOnLastDay() {
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonthEvaluatedOnLastDay()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonthEvaluatedOnLastDay()|0", com.cronutils.parser.CronParser.class, parser).parse("0 * * ? * *"));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonthEvaluatedOnLastDay()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonthEvaluatedOnLastDay()|2", com.cronutils.model.Cron.class, cron)));
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonthEvaluatedOnLastDay()|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 8, 31, 10, 10, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonthEvaluatedOnLastDay()|4", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC"))));
        org.threeten.bp.ZonedDateTime nextRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonthEvaluatedOnLastDay()|9", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonthEvaluatedOnLastDay()|8", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonthEvaluatedOnLastDay()|6", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonthEvaluatedOnLastDay()|7", org.threeten.bp.ZonedDateTime.class, now))).get());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonthEvaluatedOnLastDay()|11", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 8, 31, 10, 11, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonthEvaluatedOnLastDay()|10", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC")))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonthEvaluatedOnLastDay()|12", org.threeten.bp.ZonedDateTime.class, nextRun));
    }

    /**
     * Issue #75: W flag not behaving as expected: did not return first workday of month, but an exception
     */
    @org.junit.Test
    public void testCronWithFirstWorkDayOfWeek() {
        java.lang.String cronText = "0 0 12 1W * ? *";
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testCronWithFirstWorkDayOfWeek()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testCronWithFirstWorkDayOfWeek()|0", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testCronWithFirstWorkDayOfWeek()|1", cronText)));
        org.threeten.bp.ZonedDateTime dt = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testCronWithFirstWorkDayOfWeek()|3", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-03-29T00:00:59Z"));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testCronWithFirstWorkDayOfWeek()|5", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testCronWithFirstWorkDayOfWeek()|4", com.cronutils.model.Cron.class, cron)));
        org.threeten.bp.ZonedDateTime nextRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testCronWithFirstWorkDayOfWeek()|9", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testCronWithFirstWorkDayOfWeek()|8", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testCronWithFirstWorkDayOfWeek()|6", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testCronWithFirstWorkDayOfWeek()|7", org.threeten.bp.ZonedDateTime.class, dt))).get());
        org.junit.Assert.assertEquals("incorrect Day", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testCronWithFirstWorkDayOfWeek()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testCronWithFirstWorkDayOfWeek()|10", org.threeten.bp.ZonedDateTime.class, nextRun).getDayOfMonth()), 1);// should be April 1st (Friday)

    }

    /**
     * Issue #81: MON-SUN flags are not mapped correctly to 1-7 number representations
     * Fixed by adding shifting function when changing monday position.
     */
    @org.junit.Test
    public void testDayOfWeekMapping() {
        org.threeten.bp.ZonedDateTime fridayMorning = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayOfWeekMapping()|1", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 4, 22, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayOfWeekMapping()|0", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC)));
        com.cronutils.model.time.ExecutionTime numberExec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayOfWeekMapping()|4", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayOfWeekMapping()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayOfWeekMapping()|2", com.cronutils.parser.CronParser.class, parser).parse("0 0 12 ? * 2,3,4,5,6 *"))));
        com.cronutils.model.time.ExecutionTime nameExec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayOfWeekMapping()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayOfWeekMapping()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayOfWeekMapping()|5", com.cronutils.parser.CronParser.class, parser).parse("0 0 12 ? * MON,TUE,WED,THU,FRI *"))));
        org.junit.Assert.assertEquals("same generated dates", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayOfWeekMapping()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayOfWeekMapping()|8", com.cronutils.model.time.ExecutionTime.class, numberExec).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayOfWeekMapping()|9", org.threeten.bp.ZonedDateTime.class, fridayMorning))), eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayOfWeekMapping()|13", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayOfWeekMapping()|11", com.cronutils.model.time.ExecutionTime.class, nameExec).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testDayOfWeekMapping()|12", org.threeten.bp.ZonedDateTime.class, fridayMorning))));
    }

    /**
     * Issue #91: Calculating the minimum interval for a cron expression.
     */
    @org.junit.Test
    public void testMinimumInterval() {
        org.threeten.bp.Duration s1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|0", org.threeten.bp.Duration.class, org.threeten.bp.Duration.ofSeconds(1));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|1", org.threeten.bp.Duration.class, getMinimumInterval("* * * * * ?")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|2", org.threeten.bp.Duration.class, s1));
        org.junit.Assert.assertEquals("Should ignore whitespace", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|3", org.threeten.bp.Duration.class, getMinimumInterval("*   *    *  *       * ?")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|4", org.threeten.bp.Duration.class, s1));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|5", org.threeten.bp.Duration.class, getMinimumInterval("0/1 * * * * ?")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|6", org.threeten.bp.Duration.class, s1));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|7", org.threeten.bp.Duration.class, getMinimumInterval("*/1 * * * * ?")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|8", org.threeten.bp.Duration.class, s1));
        org.threeten.bp.Duration s60 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|9", org.threeten.bp.Duration.class, org.threeten.bp.Duration.ofSeconds(60));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|10", org.threeten.bp.Duration.class, getMinimumInterval("0 * * * * ?")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|11", org.threeten.bp.Duration.class, s60));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|12", org.threeten.bp.Duration.class, getMinimumInterval("0 */1 * * * ?")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|13", org.threeten.bp.Duration.class, s60));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|14", org.threeten.bp.Duration.class, getMinimumInterval("0 */5 * * * ?")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|15", org.threeten.bp.Duration.class, org.threeten.bp.Duration.ofSeconds(300)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|16", org.threeten.bp.Duration.class, getMinimumInterval("0 0 * * * ?")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|17", org.threeten.bp.Duration.class, org.threeten.bp.Duration.ofSeconds(3600)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|18", org.threeten.bp.Duration.class, getMinimumInterval("0 0 */3 * * ?")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|19", org.threeten.bp.Duration.class, org.threeten.bp.Duration.ofSeconds(10800)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|20", org.threeten.bp.Duration.class, getMinimumInterval("0 0 0 * * ?")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testMinimumInterval()|21", org.threeten.bp.Duration.class, org.threeten.bp.Duration.ofSeconds(86400)));
    }

    /**
     * Issue #110: DateTimeException thrown from ExecutionTime.nextExecution
     */
    @org.junit.Test
    public void noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters() {
        org.threeten.bp.ZonedDateTime wednesdayNov9 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|1", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 11, 9, 1, 1, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|0", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC"))));
        org.threeten.bp.ZonedDateTime startOfThursdayNov10 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|5", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|3", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|2", org.threeten.bp.ZonedDateTime.class, wednesdayNov9).plusDays(1)).truncatedTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.temporal.ChronoUnit>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|4", org.threeten.bp.temporal.ChronoUnit.class, org.threeten.bp.temporal.ChronoUnit.DAYS)));
        org.threeten.bp.ZonedDateTime thursdayOct27 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 10, 27, 23, 55, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|6", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC"))));
        java.lang.String[] cronExpressionsExcludingWednesdayAndIncludingThursday = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|8", java.lang.String[].class, new java.lang.String[]{ // Non-range type day-of-week filters function as expected...
        "0 0/1 * ? * 5", "0 0/1 * ? * 2,5", "0 0/1 * ? * THU", "0 0/1 * ? * THU,SAT", /* Range-based day-of-week filters are consitently broken. Exception thrown:
         DateTimeException: Invalid value for DayOfMonth (valid values 1 - 28/31): 0
         */
        "0 0/1 * ? * 5-6", "0 0/1 * ? * THU-FRI" });
        for (java.lang.String cronExpression : eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|9", java.lang.String[].class, cronExpressionsExcludingWednesdayAndIncludingThursday)) {
            assertExpectedNextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|10", cronExpression), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|11", org.threeten.bp.ZonedDateTime.class, wednesdayNov9), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|12", org.threeten.bp.ZonedDateTime.class, startOfThursdayNov10));
            assertExpectedNextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|13", cronExpression), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|14", org.threeten.bp.ZonedDateTime.class, thursdayOct27), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|16", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|15", org.threeten.bp.ZonedDateTime.class, thursdayOct27).plusMinutes(1)));
        }
        org.threeten.bp.ZonedDateTime endOfThursdayNov3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|18", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 11, 3, 23, 59, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|17", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC"))));
        org.threeten.bp.ZonedDateTime endOfFridayNov4 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|20", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|19", org.threeten.bp.ZonedDateTime.class, endOfThursdayNov3).plusDays(1));
        org.threeten.bp.ZonedDateTime endOfSaturdayNov5 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|22", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|21", org.threeten.bp.ZonedDateTime.class, endOfThursdayNov3).plusDays(2));
        org.threeten.bp.ZonedDateTime endOfMondayNov7 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|24", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|23", org.threeten.bp.ZonedDateTime.class, endOfThursdayNov3).plusDays(4));
        assertExpectedNextExecution("0 0/1 * ? * 5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|25", org.threeten.bp.ZonedDateTime.class, endOfThursdayNov3), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|26", org.threeten.bp.ZonedDateTime.class, startOfThursdayNov10));
        assertExpectedNextExecution("0 0/1 * ? * 2,5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|27", org.threeten.bp.ZonedDateTime.class, endOfMondayNov7), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|28", org.threeten.bp.ZonedDateTime.class, startOfThursdayNov10));
        assertExpectedNextExecution("0 0/1 * ? * THU", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|29", org.threeten.bp.ZonedDateTime.class, endOfThursdayNov3), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|30", org.threeten.bp.ZonedDateTime.class, startOfThursdayNov10));
        assertExpectedNextExecution("0 0/1 * ? * THU,SAT", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|31", org.threeten.bp.ZonedDateTime.class, endOfSaturdayNov5), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|32", org.threeten.bp.ZonedDateTime.class, startOfThursdayNov10));
        assertExpectedNextExecution("0 0/1 * ? * 5-6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|33", org.threeten.bp.ZonedDateTime.class, endOfFridayNov4), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|34", org.threeten.bp.ZonedDateTime.class, startOfThursdayNov10));// 110

        assertExpectedNextExecution("0 0/1 * ? * THU-FRI", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|35", org.threeten.bp.ZonedDateTime.class, endOfFridayNov4), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noDateTimeExceptionIsThrownGeneratingNextExecutionWithDayOfWeekFilters()|36", org.threeten.bp.ZonedDateTime.class, startOfThursdayNov10));// 110

    }

    /**
     * Issue #114: Describe day of week is incorrect
     */
    @org.junit.Test
    public void descriptionForExpressionTellsWrongDoW() {
        // CronDescriptor descriptor = CronDescriptor.instance();
        // Cron quartzCron = parser.parse("0 0 8 ? * SUN *");
        // TODO enable: assertEquals("at 08:00 at Sunday day", descriptor.describe(quartzCron));
    }

    /**
     * Issue #117: Last Day of month Skipped on Quartz Expression: 0 * * ? * *
     */
    @org.junit.Test
    public void noSpecificDayOfMonth() {
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonth()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonth()|0", com.cronutils.parser.CronParser.class, parser).parse("0 * * ? * *"));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonth()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonth()|2", com.cronutils.model.Cron.class, cron)));
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonth()|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 8, 30, 23, 59, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonth()|4", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC"))));
        org.threeten.bp.ZonedDateTime nextRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonth()|9", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonth()|8", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonth()|6", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonth()|7", org.threeten.bp.ZonedDateTime.class, now))).get());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonth()|11", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 8, 31, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonth()|10", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC")))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|noSpecificDayOfMonth()|12", org.threeten.bp.ZonedDateTime.class, nextRun));
    }

    /**
     * Issue #123:
     * https://github.com/jmrozanec/cron-utils/issues/123
     * Reported case: next execution time is set improperly
     * Potential duplicate: https://github.com/jmrozanec/cron-utils/issues/124
     */
    @org.junit.Test
    public void testNextExecutionTimeProperlySet() {
        com.cronutils.parser.CronParser quartzCronParser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)))));
        java.lang.String quartzCronExpression2 = "0 5/15 * * * ? *";
        com.cronutils.model.Cron parsedQuartzCronExpression = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|3", com.cronutils.parser.CronParser.class, quartzCronParser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|4", quartzCronExpression2)));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|6", com.cronutils.model.Cron.class, parsedQuartzCronExpression)));
        org.threeten.bp.ZonedDateTime zonedDateTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|10", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|8", org.threeten.bp.LocalDateTime.class, org.threeten.bp.LocalDateTime.of(2016, 7, 30, 15, 0, 0, 527)).atZone(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|9", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC)));
        org.threeten.bp.ZonedDateTime nextExecution = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|14", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|13", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|11", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|12", org.threeten.bp.ZonedDateTime.class, zonedDateTime))).get());
        org.threeten.bp.ZonedDateTime lastExecution = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|18", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|17", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|15", com.cronutils.model.time.ExecutionTime.class, executionTime).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|16", org.threeten.bp.ZonedDateTime.class, zonedDateTime))).get());
        org.junit.Assert.assertEquals("2016-07-30T14:50Z", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|19", org.threeten.bp.ZonedDateTime.class, lastExecution).toString()));
        org.junit.Assert.assertEquals("2016-07-30T15:05Z", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet()|21", org.threeten.bp.ZonedDateTime.class, nextExecution).toString()));
    }

    /**
     * Issue #124:
     * https://github.com/jmrozanec/cron-utils/issues/124
     * Reported case: next execution time is set improperly
     * Potential duplicate: https://github.com/jmrozanec/cron-utils/issues/123
     */
    @org.junit.Test
    public void testNextExecutionTimeProperlySet2() {
        com.cronutils.parser.CronParser quartzCronParser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)))));
        java.lang.String quartzCronExpression2 = "0 3/27 10-14 * * ? *";
        com.cronutils.model.Cron parsedQuartzCronExpression = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|3", com.cronutils.parser.CronParser.class, quartzCronParser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|4", quartzCronExpression2)));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|6", com.cronutils.model.Cron.class, parsedQuartzCronExpression)));
        org.threeten.bp.ZonedDateTime zonedDateTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|10", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|8", org.threeten.bp.LocalDateTime.class, org.threeten.bp.LocalDateTime.of(2016, 1, 1, 10, 0, 0, 0)).atZone(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|9", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC)));
        org.threeten.bp.ZonedDateTime nextExecution = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|14", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|13", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|11", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|12", org.threeten.bp.ZonedDateTime.class, zonedDateTime))).get());
        org.junit.Assert.assertEquals("2016-01-01T10:03Z", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testNextExecutionTimeProperlySet2()|15", org.threeten.bp.ZonedDateTime.class, nextExecution).toString()));
    }

    /**
     * Issue #133:
     * https://github.com/jmrozanec/cron-utils/issues/133
     * Reported case: QUARTZ cron definition: 31 not supported on the day-of-month field
     */
    @org.junit.Test
    public void validate31IsSupportedForDoM() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validate31IsSupportedForDoM()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validate31IsSupportedForDoM()|0", com.cronutils.parser.CronParser.class, parser).parse("0 0 0 31 * ?"));
    }

    /**
     * Issue #136: Bug exposed at PR #136
     * https://github.com/jmrozanec/cron-utils/pull/136
     * Reported case: when executing isMatch for a given range of dates,
     * if date is invalid, we get an exception, not a boolean as response.
     */
    @org.junit.Test
    public void validateIsMatchForRangeOfDates() {
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|0", com.cronutils.parser.CronParser.class, parser).parse("* * * 05 05 ? 2004"));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|2", com.cronutils.model.Cron.class, cron)));
        org.threeten.bp.ZonedDateTime start = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2004, 5, 5, 23, 55, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|4", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC"))));
        org.threeten.bp.ZonedDateTime end = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2004, 5, 6, 1, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|6", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC"))));
        while ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|8", org.threeten.bp.ZonedDateTime.class, start).compareTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|9", org.threeten.bp.ZonedDateTime.class, end)))) < 0) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|11", com.cronutils.model.time.ExecutionTime.class, executionTime).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|12", org.threeten.bp.ZonedDateTime.class, start)));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|15", org.threeten.bp.ZonedDateTime.class, (start = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|validateIsMatchForRangeOfDates()|14", org.threeten.bp.ZonedDateTime.class, start).plusMinutes(1)));
        } 
    }

    /**
     * Issue #140: https://github.com/jmrozanec/cron-utils/pull/140
     * IllegalArgumentException: Values must not be empty
     */
    @org.junit.Test
    public void nextExecutionNotFail() {
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|nextExecutionNotFail()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|nextExecutionNotFail()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|nextExecutionNotFail()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|nextExecutionNotFail()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        com.cronutils.model.Cron parsed = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|nextExecutionNotFail()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|nextExecutionNotFail()|4", com.cronutils.parser.CronParser.class, parser).parse("0 0 10 ? * SAT-SUN"));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|nextExecutionNotFail()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|nextExecutionNotFail()|6", com.cronutils.model.Cron.class, parsed)));
        com.google.common.base.Optional<org.threeten.bp.ZonedDateTime> next = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|nextExecutionNotFail()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|nextExecutionNotFail()|8", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|nextExecutionNotFail()|9", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now())));
    }

    /**
     * Issue #142: https://github.com/jmrozanec/cron-utils/pull/142
     * Special Character L for day of week behaves differently in Quartz
     */
    @org.junit.Test
    public void lastDayOfTheWeek() throws java.lang.Exception {
        // L (“last”) - If used in the day-of-week field by itself, it simply means “7” or “SAT”.
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ))))).parse("0 0 0 ? * L *"));
        org.threeten.bp.ZoneId utc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|4", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC"));
        org.threeten.bp.ZonedDateTime date = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|7", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|5", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.parse("2016-12-22")).atStartOfDay(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|6", org.threeten.bp.ZoneId.class, utc)));// Thursday

        org.threeten.bp.ZonedDateTime expected = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|9", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|8", org.threeten.bp.ZonedDateTime.class, date).plusDays(2));// Saturday

        org.threeten.bp.ZonedDateTime cronUtilsNextTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|14", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|13", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|11", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|10", com.cronutils.model.Cron.class, cron))).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|12", org.threeten.bp.ZonedDateTime.class, date))).get());// 2016-12-30T00:00:00Z

        org.quartz.CronExpression cronExpression = eu.stamp_project.reneri.instrumentation.StateObserver.<org.quartz.CronExpression>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|17", org.quartz.CronExpression.class, new org.quartz.CronExpression(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|15", com.cronutils.model.Cron.class, cron).asString())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.quartz.CronExpression>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|18", org.quartz.CronExpression.class, cronExpression).setTimeZone(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.TimeZone>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|20", java.util.TimeZone.class, org.threeten.bp.DateTimeUtils.toTimeZone(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|19", org.threeten.bp.ZoneId.class, utc))));
        java.util.Date quartzNextTime = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Date>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|25", java.util.Date.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.quartz.CronExpression>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|21", org.quartz.CronExpression.class, cronExpression).getNextValidTimeAfter(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Date>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|24", java.util.Date.class, org.threeten.bp.DateTimeUtils.toDate(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Instant>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|23", org.threeten.bp.Instant.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|22", org.threeten.bp.ZonedDateTime.class, date).toInstant())))));// 2016-12-24T00:00:00Z

        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Instant>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|27", org.threeten.bp.Instant.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|26", org.threeten.bp.ZonedDateTime.class, expected).toInstant()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Instant>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|29", org.threeten.bp.Instant.class, org.threeten.bp.DateTimeUtils.toInstant(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Date>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|28", java.util.Date.class, quartzNextTime))));// test the reference implementation

        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Instant>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|31", org.threeten.bp.Instant.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|30", org.threeten.bp.ZonedDateTime.class, expected).toInstant()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Instant>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|33", org.threeten.bp.Instant.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastDayOfTheWeek()|32", org.threeten.bp.ZonedDateTime.class, cronUtilsNextTime).toInstant()));// and compare with cronUtils

    }

    /**
     * Issue #143: https://github.com/jmrozanec/cron-utils/pull/143
     * ExecutionTime.lastExecution() throws Exception when cron defines at 31 Dec
     */
    @org.junit.Test
    public void lastExecutionDec31NotFail() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastExecutionDec31NotFail()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastExecutionDec31NotFail()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastExecutionDec31NotFail()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)))));
        com.cronutils.model.time.ExecutionTime et = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastExecutionDec31NotFail()|5", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastExecutionDec31NotFail()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastExecutionDec31NotFail()|3", com.cronutils.parser.CronParser.class, parser).parse("0 0 12 31 12 ? *"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintStream>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastExecutionDec31NotFail()|6", java.io.PrintStream.class, java.lang.System.out).println(eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastExecutionDec31NotFail()|9", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastExecutionDec31NotFail()|7", com.cronutils.model.time.ExecutionTime.class, et).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|lastExecutionDec31NotFail()|8", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now()))));
    }

    /**
     * Issue #144
     * https://github.com/jmrozanec/cron-utils/issues/144
     * Reported case: periodic incremental hours does not start and end
     * at beginning and end of given period
     */
    @org.junit.Test
    public void testPeriodicIncrementalHoursIgnorePeriodBounds() {
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|0", com.cronutils.parser.CronParser.class, parser).parse("0 0 16-19/2 * * ?"));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|2", com.cronutils.model.Cron.class, cron)));
        org.threeten.bp.ZonedDateTime start = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 12, 27, 8, 15, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|4", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC"))));
        org.threeten.bp.ZonedDateTime[] expectedDateTimes = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime[]>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|16", org.threeten.bp.ZonedDateTime[].class, new org.threeten.bp.ZonedDateTime[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 12, 27, 16, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|6", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC")))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|9", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 12, 27, 18, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|8", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC")))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|11", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 12, 28, 16, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|10", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC")))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|13", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 12, 28, 18, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|12", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC")))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|15", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 12, 29, 16, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|14", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("UTC")))) });
        for (org.threeten.bp.ZonedDateTime expectedDateTime : eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime[]>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|17", org.threeten.bp.ZonedDateTime[].class, expectedDateTimes)) {
            org.threeten.bp.ZonedDateTime next = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|21", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|20", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|18", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|19", org.threeten.bp.ZonedDateTime.class, start))).get());
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|22", org.threeten.bp.ZonedDateTime.class, (start = next));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|23", org.threeten.bp.ZonedDateTime.class, expectedDateTime), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|24", org.threeten.bp.ZonedDateTime.class, next));
        }
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|26", org.threeten.bp.ZonedDateTime.class, (start = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|25", org.threeten.bp.ZonedDateTime.class, start).plusSeconds(1)));
        for (int i = (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime[]>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|27", org.threeten.bp.ZonedDateTime[].class, expectedDateTimes).length)) - 1; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|29", i)) >= 0; i--) {
            org.threeten.bp.ZonedDateTime last = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|33", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|32", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|30", com.cronutils.model.time.ExecutionTime.class, executionTime).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|31", org.threeten.bp.ZonedDateTime.class, start))).get());
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|34", org.threeten.bp.ZonedDateTime.class, (start = last));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|37", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime[]>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|35", org.threeten.bp.ZonedDateTime[].class, expectedDateTimes)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|36", i)]), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|testPeriodicIncrementalHoursIgnorePeriodBounds()|38", org.threeten.bp.ZonedDateTime.class, last));
        }
    }

    /**
     * Issue #153
     * https://github.com/jmrozanec/cron-utils/issues/153
     * Reported case: executionTime.nextExecution fails to find when current month does not have desired day
     */
    @org.junit.Test
    public void mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|5", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|3", com.cronutils.parser.CronParser.class, parser).parse("0 0 8 31 * ?"))));// 8:00 on every 31th of Month

        org.threeten.bp.ZonedDateTime start = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 4, 10, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|6", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.systemDefault())));
        org.threeten.bp.ZonedDateTime next = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|11", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|8", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|9", org.threeten.bp.ZonedDateTime.class, start))).get());
        org.threeten.bp.ZonedDateTime expected = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|13", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 5, 31, 8, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|12", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.systemDefault())));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|14", org.threeten.bp.ZonedDateTime.class, expected), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToNextMonthIfCurrentMonthDoesNotHaveDesiredDay()|15", org.threeten.bp.ZonedDateTime.class, next));
    }

    /**
     * Issue #153
     * https://github.com/jmrozanec/cron-utils/issues/153
     * Reported case: executionTime.nextExecution fails to find when current month does not have desired day
     */
    @org.junit.Test
    public void mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|5", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|3", com.cronutils.parser.CronParser.class, parser).parse("0 0 8 31 * ?"))));// 8:00 on every 31th of Month

        org.threeten.bp.ZonedDateTime start = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 1, 10, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|6", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.systemDefault())));
        org.threeten.bp.ZonedDateTime next = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|11", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|8", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|9", org.threeten.bp.ZonedDateTime.class, start))).get());
        org.threeten.bp.ZonedDateTime expected = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|13", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 1, 31, 8, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|12", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.systemDefault())));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|14", org.threeten.bp.ZonedDateTime.class, expected), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustJumpToEndOfMonthIfCurrentMonthHasDesiredDay()|15", org.threeten.bp.ZonedDateTime.class, next));
    }

    // @Test //#192
    public void mustMatchLowerBoundDateMatchingCronExpressionRequirements() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)))));
        org.threeten.bp.ZonedDateTime start = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|4", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 1, 1, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|3", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.systemDefault())));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|5", com.cronutils.parser.CronParser.class, parser).parse("0 0 0 1 * ?"))));// every 1st of Month 1970-2099

        com.cronutils.model.time.ExecutionTime constraintExecutionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|10", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|9", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|8", com.cronutils.parser.CronParser.class, parser).parse("0 0 0 1 * ? 2017"))));// every 1st of Month for 2017

        org.junit.Assert.assertEquals("year constraint shouldn't have an impact on next execution", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|14", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|11", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|13", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|12", org.threeten.bp.ZonedDateTime.class, start).minusSeconds(1)))), eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|18", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|15", com.cronutils.model.time.ExecutionTime.class, constraintExecutionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|17", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|16", org.threeten.bp.ZonedDateTime.class, start).minusSeconds(1)))));
        org.junit.Assert.assertEquals("year constraint shouldn't have an impact on match result", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|19", com.cronutils.model.time.ExecutionTime.class, executionTime).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|20", org.threeten.bp.ZonedDateTime.class, start))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|22", com.cronutils.model.time.ExecutionTime.class, constraintExecutionTime).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|mustMatchLowerBoundDateMatchingCronExpressionRequirements()|23", org.threeten.bp.ZonedDateTime.class, start))));
    }

    private org.threeten.bp.Duration getMinimumInterval(java.lang.String quartzPattern) {
        com.cronutils.model.time.ExecutionTime et = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|getMinimumInterval(java.lang.String)|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|getMinimumInterval(java.lang.String)|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|getMinimumInterval(java.lang.String)|0", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|getMinimumInterval(java.lang.String)|1", quartzPattern)))));
        org.threeten.bp.ZonedDateTime coolDay = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|getMinimumInterval(java.lang.String)|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 1, 1, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|getMinimumInterval(java.lang.String)|4", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC)));
        // Find next execution time #1
        org.threeten.bp.ZonedDateTime t1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|getMinimumInterval(java.lang.String)|9", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|getMinimumInterval(java.lang.String)|8", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|getMinimumInterval(java.lang.String)|6", com.cronutils.model.time.ExecutionTime.class, et).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|getMinimumInterval(java.lang.String)|7", org.threeten.bp.ZonedDateTime.class, coolDay))).get());
        // Find next execution time #2 right after #1, the interval between them is minimum
        return eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|getMinimumInterval(java.lang.String)|13", org.threeten.bp.Duration.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.Duration>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|getMinimumInterval(java.lang.String)|12", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|getMinimumInterval(java.lang.String)|10", com.cronutils.model.time.ExecutionTime.class, et).timeToNextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|getMinimumInterval(java.lang.String)|11", org.threeten.bp.ZonedDateTime.class, t1))).get());
    }

    private org.threeten.bp.ZonedDateTime truncateToSeconds(org.threeten.bp.ZonedDateTime dateTime) {
        return eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|truncateToSeconds(org.threeten.bp.ZonedDateTime)|2", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|truncateToSeconds(org.threeten.bp.ZonedDateTime)|0", org.threeten.bp.ZonedDateTime.class, dateTime).truncatedTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.temporal.ChronoUnit>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|truncateToSeconds(org.threeten.bp.ZonedDateTime)|1", org.threeten.bp.temporal.ChronoUnit.class, org.threeten.bp.temporal.ChronoUnit.SECONDS)));
    }

    private void assertExpectedNextExecution(java.lang.String cronExpression, org.threeten.bp.ZonedDateTime lastRun, org.threeten.bp.ZonedDateTime expectedNextRun) {
        java.lang.String testCaseDescription = (("cron expression '" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|0", cronExpression))) + "' with zdt ") + (eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|1", org.threeten.bp.ZonedDateTime.class, lastRun));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintStream>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|2", java.io.PrintStream.class, java.lang.System.out).println(("TESTING: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|3", testCaseDescription))));
        com.cronutils.model.definition.CronDefinition cronDef = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|5", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|4", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|7", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|6", com.cronutils.model.definition.CronDefinition.class, cronDef)));
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|10", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|8", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|9", cronExpression)));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|12", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|11", com.cronutils.model.Cron.class, cron)));
        try {
            org.threeten.bp.ZonedDateTime nextRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|16", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|15", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|13", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|14", org.threeten.bp.ZonedDateTime.class, lastRun))).get());
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|17", testCaseDescription), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|18", org.threeten.bp.ZonedDateTime.class, expectedNextRun), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|19", org.threeten.bp.ZonedDateTime.class, nextRun));
        } catch (org.threeten.bp.DateTimeException e) {
            org.junit.Assert.fail(((("Issue #110: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|20", testCaseDescription))) + " led to ") + (eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DateTimeException>observeState("com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest|assertExpectedNextExecution(java.lang.String,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)|21", org.threeten.bp.DateTimeException.class, e))));
        }
    }
}

