package com.cronutils.model.time.generator;


/* Copyright 2015 jmrozanec
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
public class AndFieldValueGeneratorTest {
    private com.cronutils.model.time.generator.AndFieldValueGenerator fieldValueGenerator;

    private com.cronutils.model.field.constraint.FieldConstraints constraints;

    private int value0 = 0;

    private int value1 = 1;

    private int value2 = 2;

    private int notConsideredValue = 7;

    @org.junit.Before
    public void setUp() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|1", com.cronutils.model.field.constraint.FieldConstraints.class, (constraints = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraintsBuilder>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|0", com.cronutils.model.field.constraint.FieldConstraintsBuilder.class, com.cronutils.model.field.constraint.FieldConstraintsBuilder.instance()).createConstraintsInstance()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|18", com.cronutils.model.time.generator.AndFieldValueGenerator.class, (fieldValueGenerator = new com.cronutils.model.time.generator.AndFieldValueGenerator(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|17", com.cronutils.model.field.CronField.class, new com.cronutils.model.field.CronField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|2", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.MONTH), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.And>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|15", com.cronutils.model.field.expression.And.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.And>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|11", com.cronutils.model.field.expression.And.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.And>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|7", com.cronutils.model.field.expression.And.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.And>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|3", com.cronutils.model.field.expression.And.class, new com.cronutils.model.field.expression.And()).and(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|6", com.cronutils.model.field.expression.On.class, new com.cronutils.model.field.expression.On(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|5", com.cronutils.model.field.value.IntegerFieldValue.class, new com.cronutils.model.field.value.IntegerFieldValue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|4", value0))))))).and(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|10", com.cronutils.model.field.expression.On.class, new com.cronutils.model.field.expression.On(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|9", com.cronutils.model.field.value.IntegerFieldValue.class, new com.cronutils.model.field.value.IntegerFieldValue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|8", value1))))))).and(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|14", com.cronutils.model.field.expression.On.class, new com.cronutils.model.field.expression.On(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|13", com.cronutils.model.field.value.IntegerFieldValue.class, new com.cronutils.model.field.value.IntegerFieldValue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|12", value2))))))), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|setUp()|16", com.cronutils.model.field.constraint.FieldConstraints.class, constraints))))));
    }

    @org.junit.Test(expected = com.cronutils.model.time.generator.NoSuchValueException.class)
    public void testGenerateNextValue() throws java.lang.Exception {
        try {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|0", value0), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|1", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).generateNextValue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|2", value0)) - 1))));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|4", value1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|5", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).generateNextValue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|6", value1)) - 1))));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|8", value2), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|9", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).generateNextValue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|10", value2)) - 1))));
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|12", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).generateNextValue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|13", value2)));
        } catch (com.cronutils.model.time.generator.NoSuchValueException a1552674205424) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateNextValue()|!", a1552674205424);
            throw a1552674205424;
        }
    }

    @org.junit.Test(expected = com.cronutils.model.time.generator.NoSuchValueException.class)
    public void testGeneratePreviousValue() throws java.lang.Exception {
        try {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|0", value2), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|1", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).generatePreviousValue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|2", value2)) + 1))));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|4", value1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|5", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).generatePreviousValue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|6", value1)) + 1))));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|8", value0), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|9", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).generatePreviousValue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|10", value0)) + 1))));
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|12", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).generatePreviousValue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|13", value0)));
        } catch (com.cronutils.model.time.generator.NoSuchValueException a1552674205426) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGeneratePreviousValue()|!", a1552674205426);
            throw a1552674205426;
        }
    }

    @org.junit.Test
    public void testGenerateCandidatesNotIncludingIntervalExtremes() throws java.lang.Exception {
        java.util.List<java.lang.Integer> candidates = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremes()|3", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremes()|0", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).generateCandidatesNotIncludingIntervalExtremes(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremes()|1", value0), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremes()|2", value2)));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremes()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremes()|4", java.util.List.class, candidates).size()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremes()|6", value1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremes()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremes()|7", java.util.List.class, candidates).get(0)), 0);
    }

    @org.junit.Test
    public void testIsMatch() throws java.lang.Exception {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testIsMatch()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testIsMatch()|0", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testIsMatch()|1", value0))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testIsMatch()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testIsMatch()|3", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testIsMatch()|4", value1))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testIsMatch()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testIsMatch()|6", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testIsMatch()|7", value2))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testIsMatch()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testIsMatch()|9", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testIsMatch()|10", notConsideredValue))));
    }

    @org.junit.Test
    public void testMatchesFieldExpressionClass() throws java.lang.Exception {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testMatchesFieldExpressionClass()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testMatchesFieldExpressionClass()|0", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).matchesFieldExpressionClass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.And>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testMatchesFieldExpressionClass()|1", com.cronutils.model.field.expression.And.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.And.class)))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testMatchesFieldExpressionClass()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testMatchesFieldExpressionClass()|3", com.cronutils.model.time.generator.AndFieldValueGenerator.class, fieldValueGenerator).matchesFieldExpressionClass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testMatchesFieldExpressionClass()|4", com.cronutils.model.field.expression.FieldExpression.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.FieldExpression.class)))));
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testConstructorNotMatchesAnd() throws java.lang.Exception {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.AndFieldValueGenerator>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testConstructorNotMatchesAnd()|4", com.cronutils.model.time.generator.AndFieldValueGenerator.class, new com.cronutils.model.time.generator.AndFieldValueGenerator(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testConstructorNotMatchesAnd()|3", com.cronutils.model.field.CronField.class, new com.cronutils.model.field.CronField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testConstructorNotMatchesAnd()|0", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.HOUR), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testConstructorNotMatchesAnd()|1", com.cronutils.model.field.expression.FieldExpression.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.FieldExpression.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testConstructorNotMatchesAnd()|2", com.cronutils.model.field.constraint.FieldConstraints.class, constraints)))));
        } catch (java.lang.IllegalArgumentException a1552674205422) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.time.generator.AndFieldValueGeneratorTest|testConstructorNotMatchesAnd()|!", a1552674205422);
            throw a1552674205422;
        }
    }
}

