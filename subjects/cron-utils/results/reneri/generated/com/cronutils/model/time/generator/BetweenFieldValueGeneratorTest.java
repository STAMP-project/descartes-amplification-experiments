package com.cronutils.model.time.generator;


/* Copyright 2015 jmrozanec
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
public class BetweenFieldValueGeneratorTest {
    private com.cronutils.model.time.generator.BetweenFieldValueGenerator fieldValueGenerator;

    private com.cronutils.model.field.constraint.FieldConstraints constraints;

    private int from = 0;

    private int to = 2;

    private int outOfRange = 7;

    @org.junit.Before
    public void setUp() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|setUp()|1", com.cronutils.model.field.constraint.FieldConstraints.class, (constraints = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraintsBuilder>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|setUp()|0", com.cronutils.model.field.constraint.FieldConstraintsBuilder.class, com.cronutils.model.field.constraint.FieldConstraintsBuilder.instance()).createConstraintsInstance()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.BetweenFieldValueGenerator>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|setUp()|10", com.cronutils.model.time.generator.BetweenFieldValueGenerator.class, (fieldValueGenerator = new com.cronutils.model.time.generator.BetweenFieldValueGenerator(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|setUp()|9", com.cronutils.model.field.CronField.class, new com.cronutils.model.field.CronField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|setUp()|2", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.HOUR), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Between>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|setUp()|7", com.cronutils.model.field.expression.Between.class, new com.cronutils.model.field.expression.Between(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|setUp()|4", com.cronutils.model.field.value.IntegerFieldValue.class, new com.cronutils.model.field.value.IntegerFieldValue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|setUp()|3", from))), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|setUp()|6", com.cronutils.model.field.value.IntegerFieldValue.class, new com.cronutils.model.field.value.IntegerFieldValue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|setUp()|5", to))))), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|setUp()|8", com.cronutils.model.field.constraint.FieldConstraints.class, constraints))))));
    }

    @org.junit.Test(expected = com.cronutils.model.time.generator.NoSuchValueException.class)
    public void testGenerateNextValue() throws java.lang.Exception {
        try {
            for (int j = (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateNextValue()|0", from)) - 1; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateNextValue()|1", j)) < ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateNextValue()|2", to)) + 1); j++) {
                org.junit.Assert.assertEquals(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateNextValue()|3", j)) + 1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateNextValue()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.BetweenFieldValueGenerator>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateNextValue()|4", com.cronutils.model.time.generator.BetweenFieldValueGenerator.class, fieldValueGenerator).generateNextValue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateNextValue()|5", j))));
            }
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateNextValue()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.BetweenFieldValueGenerator>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateNextValue()|7", com.cronutils.model.time.generator.BetweenFieldValueGenerator.class, fieldValueGenerator).generateNextValue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateNextValue()|8", to)));
        } catch (com.cronutils.model.time.generator.NoSuchValueException a1552674205435) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateNextValue()|!", a1552674205435);
            throw a1552674205435;
        }
    }

    @org.junit.Test(expected = com.cronutils.model.time.generator.NoSuchValueException.class)
    public void testGeneratePreviousValue() throws java.lang.Exception {
        try {
            for (int j = (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGeneratePreviousValue()|0", to)) + 1; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGeneratePreviousValue()|1", j)) > ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGeneratePreviousValue()|2", from)) - 1); j--) {
                org.junit.Assert.assertEquals(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGeneratePreviousValue()|3", j)) - 1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGeneratePreviousValue()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.BetweenFieldValueGenerator>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGeneratePreviousValue()|4", com.cronutils.model.time.generator.BetweenFieldValueGenerator.class, fieldValueGenerator).generatePreviousValue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGeneratePreviousValue()|5", j))));
            }
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGeneratePreviousValue()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.BetweenFieldValueGenerator>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGeneratePreviousValue()|7", com.cronutils.model.time.generator.BetweenFieldValueGenerator.class, fieldValueGenerator).generatePreviousValue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGeneratePreviousValue()|8", from)));
        } catch (com.cronutils.model.time.generator.NoSuchValueException a1552674205436) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGeneratePreviousValue()|!", a1552674205436);
            throw a1552674205436;
        }
    }

    @org.junit.Test
    public void testGenerateCandidatesNotIncludingIntervalExtremesFullInterval() throws java.lang.Exception {
        java.util.List<java.lang.Integer> candidates = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()|3", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.BetweenFieldValueGenerator>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()|0", com.cronutils.model.time.generator.BetweenFieldValueGenerator.class, fieldValueGenerator).generateCandidatesNotIncludingIntervalExtremes(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()|1", from), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()|2", to)));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()|4", java.util.List.class, candidates).size()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()|6", java.util.List.class, candidates).get(0)), 0);
    }

    @org.junit.Test
    public void testGenerateCandidatesNotIncludingIntervalRangesNotIntersectInterval() throws java.lang.Exception {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalRangesNotIntersectInterval()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalRangesNotIntersectInterval()|3", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.BetweenFieldValueGenerator>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalRangesNotIntersectInterval()|0", com.cronutils.model.time.generator.BetweenFieldValueGenerator.class, fieldValueGenerator).generateCandidatesNotIncludingIntervalExtremes(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalRangesNotIntersectInterval()|1", to)) + 1), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testGenerateCandidatesNotIncludingIntervalRangesNotIntersectInterval()|2", to)) + 10))).isEmpty()));
    }

    @org.junit.Test
    public void testIsMatch() throws java.lang.Exception {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testIsMatch()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.BetweenFieldValueGenerator>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testIsMatch()|0", com.cronutils.model.time.generator.BetweenFieldValueGenerator.class, fieldValueGenerator).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testIsMatch()|1", from))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testIsMatch()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.BetweenFieldValueGenerator>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testIsMatch()|3", com.cronutils.model.time.generator.BetweenFieldValueGenerator.class, fieldValueGenerator).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testIsMatch()|4", to))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testIsMatch()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.BetweenFieldValueGenerator>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testIsMatch()|6", com.cronutils.model.time.generator.BetweenFieldValueGenerator.class, fieldValueGenerator).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testIsMatch()|7", outOfRange))));
    }

    @org.junit.Test
    public void testMatchesFieldExpressionClass() throws java.lang.Exception {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testMatchesFieldExpressionClass()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.BetweenFieldValueGenerator>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testMatchesFieldExpressionClass()|0", com.cronutils.model.time.generator.BetweenFieldValueGenerator.class, fieldValueGenerator).matchesFieldExpressionClass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Between>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testMatchesFieldExpressionClass()|1", com.cronutils.model.field.expression.Between.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.Between.class)))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testMatchesFieldExpressionClass()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.BetweenFieldValueGenerator>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testMatchesFieldExpressionClass()|3", com.cronutils.model.time.generator.BetweenFieldValueGenerator.class, fieldValueGenerator).matchesFieldExpressionClass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testMatchesFieldExpressionClass()|4", com.cronutils.model.field.expression.FieldExpression.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.FieldExpression.class)))));
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testConstructorNotMatchesBetween() throws java.lang.Exception {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.BetweenFieldValueGenerator>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testConstructorNotMatchesBetween()|4", com.cronutils.model.time.generator.BetweenFieldValueGenerator.class, new com.cronutils.model.time.generator.BetweenFieldValueGenerator(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testConstructorNotMatchesBetween()|3", com.cronutils.model.field.CronField.class, new com.cronutils.model.field.CronField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testConstructorNotMatchesBetween()|0", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.HOUR), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testConstructorNotMatchesBetween()|1", com.cronutils.model.field.expression.FieldExpression.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.FieldExpression.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testConstructorNotMatchesBetween()|2", com.cronutils.model.field.constraint.FieldConstraints.class, constraints)))));
        } catch (java.lang.IllegalArgumentException a1552674205433) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.time.generator.BetweenFieldValueGeneratorTest|testConstructorNotMatchesBetween()|!", a1552674205433);
            throw a1552674205433;
        }
    }
}

