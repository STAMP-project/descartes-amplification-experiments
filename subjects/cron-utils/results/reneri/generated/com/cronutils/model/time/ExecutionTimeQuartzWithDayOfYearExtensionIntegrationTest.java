package com.cronutils.model.time;


/* Copyright 2015 jmrozanec
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
public class ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest {
    private static final java.lang.String BI_WEEKLY_STARTING_WITH_FIRST_DAY_OF_YEAR = "0 0 0 ? * ? * 1/14";

    private static final java.lang.String FIRST_QUATER_BI_WEEKLY_STARTING_WITH_FIRST_DAY_OF_YEAR = "0 0 0 ? 1-3 ? * 1/14";

    private static final java.lang.String WITHOUT_DAY_OF_YEAR = "0 0 0 1 * ? *";// i.e. DoY field omitted


    private static final java.lang.String WITHOUT_SPECIFIC_DAY_OF_YEAR = "0 0 0 1 * ? * ?";// i.e. DoY field set to question mark


    private com.cronutils.parser.CronParser parser;

    private com.cronutils.parser.CronParser quartzParser;

    @org.junit.Before
    public void setUp() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|setUp()|1", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|setUp()|0", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.TestCronDefinitionsFactory.withDayOfYearDefinitionWhereYearAndDoYOptionals()))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|setUp()|4", com.cronutils.parser.CronParser.class, (quartzParser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|setUp()|3", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|setUp()|2", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ))))));
    }

    @org.junit.Test
    public void testForCron() {
        org.junit.Assert.assertEquals(com.cronutils.model.time.ExecutionTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testForCron()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testForCron()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testForCron()|0", com.cronutils.parser.CronParser.class, parser).parse(com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.BI_WEEKLY_STARTING_WITH_FIRST_DAY_OF_YEAR)))).getClass());
        org.junit.Assert.assertEquals(com.cronutils.model.time.ExecutionTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testForCron()|5", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testForCron()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testForCron()|3", com.cronutils.parser.CronParser.class, parser).parse(com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.FIRST_QUATER_BI_WEEKLY_STARTING_WITH_FIRST_DAY_OF_YEAR)))).getClass());
        org.junit.Assert.assertEquals(com.cronutils.model.time.ExecutionTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testForCron()|8", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testForCron()|7", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testForCron()|6", com.cronutils.parser.CronParser.class, parser).parse(com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.WITHOUT_DAY_OF_YEAR)))).getClass());
        org.junit.Assert.assertEquals(com.cronutils.model.time.ExecutionTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testForCron()|11", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testForCron()|10", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testForCron()|9", com.cronutils.parser.CronParser.class, parser).parse(com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.WITHOUT_SPECIFIC_DAY_OF_YEAR)))).getClass());
    }

    @org.junit.Test
    public void testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear() {
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|1", org.threeten.bp.ZonedDateTime.class, com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.truncateToDays(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now())));
        int dayOfYear = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|2", org.threeten.bp.ZonedDateTime.class, now).getDayOfYear());
        int dayOfMostRecentPeriod = (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|4", dayOfYear)) % 14;
        org.threeten.bp.ZonedDateTime expected = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|7", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|5", org.threeten.bp.ZonedDateTime.class, now).plusDays((15 - (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|6", dayOfMostRecentPeriod)))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|10", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|9", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|8", com.cronutils.parser.CronParser.class, parser).parse(com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.BI_WEEKLY_STARTING_WITH_FIRST_DAY_OF_YEAR))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|11", org.threeten.bp.ZonedDateTime.class, expected), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|15", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|14", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|12", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testNextExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|13", org.threeten.bp.ZonedDateTime.class, now))).get()));
    }

    @org.junit.Test
    public void testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear() {
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|1", org.threeten.bp.ZonedDateTime.class, com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.truncateToDays(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now())));
        int dayOfYear = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|2", org.threeten.bp.ZonedDateTime.class, now).getDayOfYear());
        int dayOfMostRecentPeriod = (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|4", dayOfYear)) % 14;
        org.threeten.bp.ZonedDateTime expected = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|11", org.threeten.bp.ZonedDateTime.class, ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|5", dayOfMostRecentPeriod)) == 1 ? eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|7", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|6", org.threeten.bp.ZonedDateTime.class, now).minusDays(14)) : eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|10", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|8", org.threeten.bp.ZonedDateTime.class, now).minusDays(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|9", dayOfMostRecentPeriod)) - 1)))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|14", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|13", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|12", com.cronutils.parser.CronParser.class, parser).parse(com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.BI_WEEKLY_STARTING_WITH_FIRST_DAY_OF_YEAR))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|15", org.threeten.bp.ZonedDateTime.class, expected), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|19", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|18", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|16", com.cronutils.model.time.ExecutionTime.class, executionTime).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testLastExecutionEveryTwoWeeksStartingWithFirstDayOfYear()|17", org.threeten.bp.ZonedDateTime.class, now))).get()));
    }

    @org.junit.Test
    public void testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear() {
        org.threeten.bp.ZonedDateTime[] expectedExecutionTimes = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime[]>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|24", org.threeten.bp.ZonedDateTime[].class, new org.threeten.bp.ZonedDateTime[]{ eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|1", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 1, 1, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|0", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|3", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 1, 15, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|2", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 1, 29, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|4", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 2, 12, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|6", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|9", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 2, 26, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|8", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|11", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 3, 12, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|10", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|13", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 3, 26, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|12", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|15", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 4, 9, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|14", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|17", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 4, 23, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|16", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|19", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 5, 7, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|18", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|21", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 5, 21, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|20", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|23", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 6, 4, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|22", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))) });
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|27", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|26", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|25", com.cronutils.parser.CronParser.class, parser).parse(com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.BI_WEEKLY_STARTING_WITH_FIRST_DAY_OF_YEAR))));
        for (org.threeten.bp.ZonedDateTime expectedExecutionTime : eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime[]>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|28", org.threeten.bp.ZonedDateTime[].class, expectedExecutionTimes))
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|29", org.threeten.bp.ZonedDateTime.class, expectedExecutionTime), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|34", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|33", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|30", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|32", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|31", org.threeten.bp.ZonedDateTime.class, expectedExecutionTime).minusDays(1)))).get()));

        for (int i = 1; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|35", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|37", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime[]>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|36", org.threeten.bp.ZonedDateTime[].class, expectedExecutionTimes).length)); i++)
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|40", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime[]>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|38", org.threeten.bp.ZonedDateTime[].class, expectedExecutionTimes)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|39", i)]), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|46", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|45", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|41", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|44", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime[]>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|42", org.threeten.bp.ZonedDateTime[].class, expectedExecutionTimes)[((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|43", i)) - 1)]))).get()));

        for (int i = 1; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|47", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|49", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime[]>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|48", org.threeten.bp.ZonedDateTime[].class, expectedExecutionTimes).length)); i++)
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|52", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime[]>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|50", org.threeten.bp.ZonedDateTime[].class, expectedExecutionTimes)[((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|51", i)) - 1)]), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|58", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|57", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|53", com.cronutils.model.time.ExecutionTime.class, executionTime).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|56", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime[]>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|54", org.threeten.bp.ZonedDateTime[].class, expectedExecutionTimes)[eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesEveryTwoWeeksStartingWithFirstDayOfYear()|55", i)]))).get()));

    }

    // issue #188
    @org.junit.Test
    public void testQuartzCompatibilityIfDoYisOmitted() {
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|0", com.cronutils.parser.CronParser.class, parser).parse(com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.WITHOUT_DAY_OF_YEAR))));
        com.cronutils.model.time.ExecutionTime quartzExecutionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|5", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|3", com.cronutils.parser.CronParser.class, quartzParser).parse(com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.WITHOUT_DAY_OF_YEAR))));
        org.threeten.bp.ZonedDateTime start = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|8", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 1, 1, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|6", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))).minusSeconds(1));
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|9", i)) < 12; i++) {
            org.threeten.bp.ZonedDateTime expectedDateTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|13", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|12", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|10", com.cronutils.model.time.ExecutionTime.class, quartzExecutionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|11", org.threeten.bp.ZonedDateTime.class, start))).get());
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|17", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|16", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|14", com.cronutils.model.time.ExecutionTime.class, quartzExecutionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|15", org.threeten.bp.ZonedDateTime.class, start))).get()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|21", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|20", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|18", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|19", org.threeten.bp.ZonedDateTime.class, start))).get()));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|23", org.threeten.bp.ZonedDateTime.class, (start = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisOmitted()|22", org.threeten.bp.ZonedDateTime.class, expectedDateTime).plusSeconds(1)));
        }
    }

    // issue #188
    @org.junit.Test
    public void testQuartzCompatibilityIfDoYisQuestionMark() {
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|0", com.cronutils.parser.CronParser.class, parser).parse(com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.WITHOUT_SPECIFIC_DAY_OF_YEAR))));
        com.cronutils.model.time.ExecutionTime quartzExecutionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|5", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|3", com.cronutils.parser.CronParser.class, quartzParser).parse(com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest.WITHOUT_DAY_OF_YEAR))));
        org.threeten.bp.ZonedDateTime start = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|8", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 1, 1, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|6", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC))).minusSeconds(1));
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|9", i)) < 12; i++) {
            org.threeten.bp.ZonedDateTime expectedDateTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|13", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|12", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|10", com.cronutils.model.time.ExecutionTime.class, quartzExecutionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|11", org.threeten.bp.ZonedDateTime.class, start))).get());
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|17", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|16", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|14", com.cronutils.model.time.ExecutionTime.class, quartzExecutionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|15", org.threeten.bp.ZonedDateTime.class, start))).get()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|21", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|20", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|18", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|19", org.threeten.bp.ZonedDateTime.class, start))).get()));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|23", org.threeten.bp.ZonedDateTime.class, (start = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testQuartzCompatibilityIfDoYisQuestionMark()|22", org.threeten.bp.ZonedDateTime.class, expectedDateTime).plusSeconds(1)));
        }
    }

    // issue #190
    @org.junit.Test
    public void testExecutionTimesWithIncrementsGreaterThanDaysOfMonth() {
        final int increment = 56;
        final java.lang.String incrementGreaterDaysOfMonthStartingWithFirstDayOfYear = "0 0 0 ? * ? * 1/" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|1", java.lang.String.valueOf(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|0", increment))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|5", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|2", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|3", incrementGreaterDaysOfMonthStartingWithFirstDayOfYear)))));
        org.threeten.bp.ZonedDateTime start = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 1, 1, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|6", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.UTC)));
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|8", i)) < 6; i++) {
            org.threeten.bp.ZonedDateTime expected = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|9", org.threeten.bp.ZonedDateTime.class, start);
            org.threeten.bp.ZonedDateTime actual = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|14", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|13", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|10", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|12", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|11", org.threeten.bp.ZonedDateTime.class, start).minusSeconds(1)))).get());
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|15", org.threeten.bp.ZonedDateTime.class, expected), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|16", org.threeten.bp.ZonedDateTime.class, actual));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|19", org.threeten.bp.ZonedDateTime.class, (start = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|17", org.threeten.bp.ZonedDateTime.class, expected).plusDays(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|testExecutionTimesWithIncrementsGreaterThanDaysOfMonth()|18", increment))));
        }
    }

    private static org.threeten.bp.ZonedDateTime truncateToDays(org.threeten.bp.ZonedDateTime dateTime) {
        return eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|truncateToDays(org.threeten.bp.ZonedDateTime)|2", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|truncateToDays(org.threeten.bp.ZonedDateTime)|0", org.threeten.bp.ZonedDateTime.class, dateTime).truncatedTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.temporal.ChronoUnit>observeState("com.cronutils.model.time.ExecutionTimeQuartzWithDayOfYearExtensionIntegrationTest|truncateToDays(org.threeten.bp.ZonedDateTime)|1", org.threeten.bp.temporal.ChronoUnit.class, org.threeten.bp.temporal.ChronoUnit.DAYS)));
    }
}

