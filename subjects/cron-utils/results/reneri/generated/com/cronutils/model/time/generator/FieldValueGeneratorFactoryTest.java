package com.cronutils.model.time.generator;


/* Copyright 2015 jmrozanec
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
public class FieldValueGeneratorFactoryTest {
    private com.cronutils.model.field.CronField mockCronField;

    @org.junit.Before
    public void setUp() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|setUp()|0", com.cronutils.model.field.CronField.class, (mockCronField = org.mockito.Mockito.mock(com.cronutils.model.field.CronField.class)));
    }

    @org.junit.Test
    public void testForCronFieldAlways() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldAlways()|4", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldAlways()|2", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldAlways()|1", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldAlways()|0", com.cronutils.model.field.CronField.class, mockCronField).getExpression()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Always>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldAlways()|3", com.cronutils.model.field.expression.Always.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.Always.class))));
        org.junit.Assert.assertEquals(com.cronutils.model.time.generator.AlwaysFieldValueGenerator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldAlways()|6", com.cronutils.model.time.generator.FieldValueGenerator.class, com.cronutils.model.time.generator.FieldValueGeneratorFactory.forCronField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldAlways()|5", com.cronutils.model.field.CronField.class, mockCronField))).getClass());
    }

    @org.junit.Test
    public void testForCronFieldAnd() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldAnd()|4", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldAnd()|2", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldAnd()|1", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldAnd()|0", com.cronutils.model.field.CronField.class, mockCronField).getExpression()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.And>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldAnd()|3", com.cronutils.model.field.expression.And.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.And.class))));
        org.junit.Assert.assertEquals(com.cronutils.model.time.generator.AndFieldValueGenerator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldAnd()|6", com.cronutils.model.time.generator.FieldValueGenerator.class, com.cronutils.model.time.generator.FieldValueGeneratorFactory.forCronField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldAnd()|5", com.cronutils.model.field.CronField.class, mockCronField))).getClass());
    }

    @org.junit.Test
    public void testForCronFieldBetween() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldBetween()|4", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldBetween()|2", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldBetween()|1", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldBetween()|0", com.cronutils.model.field.CronField.class, mockCronField).getExpression()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Between>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldBetween()|3", com.cronutils.model.field.expression.Between.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.Between.class))));
        org.junit.Assert.assertEquals(com.cronutils.model.time.generator.BetweenFieldValueGenerator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldBetween()|6", com.cronutils.model.time.generator.FieldValueGenerator.class, com.cronutils.model.time.generator.FieldValueGeneratorFactory.forCronField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldBetween()|5", com.cronutils.model.field.CronField.class, mockCronField))).getClass());
    }

    @org.junit.Test
    public void testForCronFieldOnSpecialCharNone() throws java.lang.Exception {
        com.cronutils.model.field.expression.On mockOn = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNone()|0", com.cronutils.model.field.expression.On.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.On.class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.value.SpecialCharFieldValue>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNone()|6", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.value.SpecialCharFieldValue>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNone()|3", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialCharFieldValue>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNone()|2", com.cronutils.model.field.value.SpecialCharFieldValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNone()|1", com.cronutils.model.field.expression.On.class, mockOn).getSpecialChar()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialCharFieldValue>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNone()|5", com.cronutils.model.field.value.SpecialCharFieldValue.class, new com.cronutils.model.field.value.SpecialCharFieldValue(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialChar>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNone()|4", com.cronutils.model.field.value.SpecialChar.class, com.cronutils.model.field.value.SpecialChar.NONE)))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNone()|11", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNone()|9", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNone()|8", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNone()|7", com.cronutils.model.field.CronField.class, mockCronField).getExpression()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNone()|10", com.cronutils.model.field.expression.On.class, mockOn)));
        org.junit.Assert.assertEquals(com.cronutils.model.time.generator.OnFieldValueGenerator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNone()|13", com.cronutils.model.time.generator.FieldValueGenerator.class, com.cronutils.model.time.generator.FieldValueGeneratorFactory.forCronField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNone()|12", com.cronutils.model.field.CronField.class, mockCronField))).getClass());
    }

    @org.junit.Test
    public void testForCronFieldOnSpecialCharNotNone() throws java.lang.Exception {
        com.cronutils.model.field.expression.On mockOn = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|0", com.cronutils.model.field.expression.On.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.On.class));
        for (com.cronutils.model.field.value.SpecialChar s : eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialChar[]>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|1", com.cronutils.model.field.value.SpecialChar[].class, com.cronutils.model.field.value.SpecialChar.values())) {
            if (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialChar>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|2", com.cronutils.model.field.value.SpecialChar.class, s).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialChar>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|3", com.cronutils.model.field.value.SpecialChar.class, com.cronutils.model.field.value.SpecialChar.NONE))))) {
                boolean gotException = false;
                eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.value.SpecialCharFieldValue>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|10", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.value.SpecialCharFieldValue>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|7", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialCharFieldValue>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|6", com.cronutils.model.field.value.SpecialCharFieldValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|5", com.cronutils.model.field.expression.On.class, mockOn).getSpecialChar()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialCharFieldValue>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|9", com.cronutils.model.field.value.SpecialCharFieldValue.class, new com.cronutils.model.field.value.SpecialCharFieldValue(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialChar>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|8", com.cronutils.model.field.value.SpecialChar.class, s)))));
                eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|15", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|13", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|12", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|11", com.cronutils.model.field.CronField.class, mockCronField).getExpression()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|14", com.cronutils.model.field.expression.On.class, mockOn)));
                try {
                    eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|17", com.cronutils.model.time.generator.FieldValueGenerator.class, com.cronutils.model.time.generator.FieldValueGeneratorFactory.forCronField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|16", com.cronutils.model.field.CronField.class, mockCronField)));
                } catch (java.lang.RuntimeException e) {
                    eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|18", (gotException = true));
                }
                org.junit.Assert.assertTrue("Should get exception when asking for OnValueGenerator with special char", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronFieldOnSpecialCharNotNone()|19", gotException));
            }
        }
    }

    @org.junit.Test
    public void testForCronField() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronField()|4", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronField()|2", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronField()|1", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronField()|0", com.cronutils.model.field.CronField.class, mockCronField).getExpression()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronField()|3", com.cronutils.model.field.expression.FieldExpression.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.FieldExpression.class))));
        org.junit.Assert.assertEquals(com.cronutils.model.time.generator.NullFieldValueGenerator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronField()|6", com.cronutils.model.time.generator.FieldValueGenerator.class, com.cronutils.model.time.generator.FieldValueGeneratorFactory.forCronField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testForCronField()|5", com.cronutils.model.field.CronField.class, mockCronField))).getClass());
    }

    @org.junit.Test
    public void testCreateDayOfMonthValueGeneratorInstanceForL() throws java.lang.Exception {
        org.junit.Assert.assertEquals(com.cronutils.model.time.generator.OnDayOfMonthValueGenerator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceForL()|1", com.cronutils.model.time.generator.FieldValueGenerator.class, createDayOfMonthValueGeneratorInstance(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialChar>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceForL()|0", com.cronutils.model.field.value.SpecialChar.class, com.cronutils.model.field.value.SpecialChar.L))).getClass());
    }

    @org.junit.Test
    public void testCreateDayOfMonthValueGeneratorInstanceForW() throws java.lang.Exception {
        org.junit.Assert.assertEquals(com.cronutils.model.time.generator.OnDayOfMonthValueGenerator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceForW()|1", com.cronutils.model.time.generator.FieldValueGenerator.class, createDayOfMonthValueGeneratorInstance(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialChar>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceForW()|0", com.cronutils.model.field.value.SpecialChar.class, com.cronutils.model.field.value.SpecialChar.W))).getClass());
    }

    @org.junit.Test
    public void testCreateDayOfMonthValueGeneratorInstanceForLW() throws java.lang.Exception {
        org.junit.Assert.assertEquals(com.cronutils.model.time.generator.OnDayOfMonthValueGenerator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceForLW()|1", com.cronutils.model.time.generator.FieldValueGenerator.class, createDayOfMonthValueGeneratorInstance(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialChar>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceForLW()|0", com.cronutils.model.field.value.SpecialChar.class, com.cronutils.model.field.value.SpecialChar.LW))).getClass());
    }

    @org.junit.Test
    public void testCreateDayOfMonthValueGeneratorInstanceForHash() throws java.lang.Exception {
        org.junit.Assert.assertEquals(com.cronutils.model.time.generator.OnDayOfMonthValueGenerator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceForHash()|1", com.cronutils.model.time.generator.FieldValueGenerator.class, createDayOfMonthValueGeneratorInstance(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialChar>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceForHash()|0", com.cronutils.model.field.value.SpecialChar.class, com.cronutils.model.field.value.SpecialChar.HASH))).getClass());
    }

    @org.junit.Test
    public void testCreateDayOfMonthValueGeneratorInstanceForNONE() throws java.lang.Exception {
        org.junit.Assert.assertEquals(com.cronutils.model.time.generator.OnFieldValueGenerator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceForNONE()|1", com.cronutils.model.time.generator.FieldValueGenerator.class, createDayOfMonthValueGeneratorInstance(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialChar>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceForNONE()|0", com.cronutils.model.field.value.SpecialChar.class, com.cronutils.model.field.value.SpecialChar.NONE))).getClass());
    }

    private com.cronutils.model.time.generator.FieldValueGenerator createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar specialChar) {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.CronFieldName>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|4", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.CronFieldName>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|2", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|1", com.cronutils.model.field.CronFieldName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|0", com.cronutils.model.field.CronField.class, mockCronField).getField()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|3", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.DAY_OF_MONTH)));
        com.cronutils.model.field.expression.On mockOn = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|5", com.cronutils.model.field.expression.On.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.On.class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.value.SpecialCharFieldValue>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|11", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.value.SpecialCharFieldValue>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|8", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialCharFieldValue>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|7", com.cronutils.model.field.value.SpecialCharFieldValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|6", com.cronutils.model.field.expression.On.class, mockOn).getSpecialChar()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialCharFieldValue>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|10", com.cronutils.model.field.value.SpecialCharFieldValue.class, new com.cronutils.model.field.value.SpecialCharFieldValue(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialChar>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|9", com.cronutils.model.field.value.SpecialChar.class, specialChar)))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|16", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|14", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|13", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|12", com.cronutils.model.field.CronField.class, mockCronField).getExpression()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|15", com.cronutils.model.field.expression.On.class, mockOn)));
        return eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|18", com.cronutils.model.time.generator.FieldValueGenerator.class, com.cronutils.model.time.generator.FieldValueGeneratorFactory.createDayOfMonthValueGeneratorInstance(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.value.SpecialChar)|17", com.cronutils.model.field.CronField.class, mockCronField), 2015, 1));
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName() throws java.lang.Exception {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.CronFieldName>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|4", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.CronFieldName>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|2", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|1", com.cronutils.model.field.CronFieldName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|0", com.cronutils.model.field.CronField.class, mockCronField).getField()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|3", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.YEAR)));
            com.cronutils.model.field.expression.On mockOn = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|5", com.cronutils.model.field.expression.On.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.On.class));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.value.SpecialCharFieldValue>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|11", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.value.SpecialCharFieldValue>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|8", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialCharFieldValue>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|7", com.cronutils.model.field.value.SpecialCharFieldValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|6", com.cronutils.model.field.expression.On.class, mockOn).getSpecialChar()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialCharFieldValue>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|10", com.cronutils.model.field.value.SpecialCharFieldValue.class, new com.cronutils.model.field.value.SpecialCharFieldValue(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.SpecialChar>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|9", com.cronutils.model.field.value.SpecialChar.class, com.cronutils.model.field.value.SpecialChar.L))))// any value except NONE
            );
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|16", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|14", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|13", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|12", com.cronutils.model.field.CronField.class, mockCronField).getExpression()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|15", com.cronutils.model.field.expression.On.class, mockOn)));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|18", com.cronutils.model.time.generator.FieldValueGenerator.class, com.cronutils.model.time.generator.FieldValueGeneratorFactory.createDayOfMonthValueGeneratorInstance(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|17", com.cronutils.model.field.CronField.class, mockCronField), 2015, 1));
        } catch (java.lang.IllegalArgumentException a1552674205501) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()|!", a1552674205501);
            throw a1552674205501;
        }
    }

    @org.junit.Test
    public void testCreateDayOfWeekValueGeneratorInstance() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.CronFieldName>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance()|4", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.CronFieldName>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance()|2", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance()|1", com.cronutils.model.field.CronFieldName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance()|0", com.cronutils.model.field.CronField.class, mockCronField).getField()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance()|3", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.DAY_OF_WEEK)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance()|9", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance()|7", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance()|6", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance()|5", com.cronutils.model.field.CronField.class, mockCronField).getExpression()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance()|8", com.cronutils.model.field.expression.On.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.On.class))));
        org.junit.Assert.assertEquals(com.cronutils.model.time.generator.OnDayOfWeekValueGenerator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance()|12", com.cronutils.model.time.generator.FieldValueGenerator.class, com.cronutils.model.time.generator.FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance()|10", com.cronutils.model.field.CronField.class, mockCronField), 2015, 1, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.WeekDay>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance()|11", com.cronutils.mapper.WeekDay.class, new com.cronutils.mapper.WeekDay(1, false)))).getClass());
    }

    @org.junit.Test
    public void testCreateDayOfWeekValueGeneratorInstance_Between() throws java.lang.Exception {
        com.cronutils.model.field.expression.Between between = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Between>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|2", com.cronutils.model.field.expression.Between.class, new com.cronutils.model.field.expression.Between(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|0", com.cronutils.model.field.value.IntegerFieldValue.class, new com.cronutils.model.field.value.IntegerFieldValue(1)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.value.IntegerFieldValue>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|1", com.cronutils.model.field.value.IntegerFieldValue.class, new com.cronutils.model.field.value.IntegerFieldValue(7))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.CronFieldName>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|7", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.CronFieldName>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|5", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|4", com.cronutils.model.field.CronFieldName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|3", com.cronutils.model.field.CronField.class, mockCronField).getField()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|6", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.DAY_OF_WEEK)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|12", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|10", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|9", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|8", com.cronutils.model.field.CronField.class, mockCronField).getExpression()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.Between>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|11", com.cronutils.model.field.expression.Between.class, between)));
        org.junit.Assert.assertEquals(com.cronutils.model.time.generator.BetweenDayOfWeekValueGenerator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|15", com.cronutils.model.time.generator.FieldValueGenerator.class, com.cronutils.model.time.generator.FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|13", com.cronutils.model.field.CronField.class, mockCronField), 2015, 1, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.WeekDay>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_Between()|14", com.cronutils.mapper.WeekDay.class, new com.cronutils.mapper.WeekDay(1, false)))).getClass());
    }

    @org.junit.Test
    public void testCreateDayOfWeekValueGeneratorInstance_And() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.CronFieldName>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_And()|4", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.CronFieldName>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_And()|2", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_And()|1", com.cronutils.model.field.CronFieldName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_And()|0", com.cronutils.model.field.CronField.class, mockCronField).getField()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_And()|3", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.DAY_OF_WEEK)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_And()|9", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_And()|7", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_And()|6", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_And()|5", com.cronutils.model.field.CronField.class, mockCronField).getExpression()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.And>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_And()|8", com.cronutils.model.field.expression.And.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.And.class))));
        org.junit.Assert.assertEquals(com.cronutils.model.time.generator.AndDayOfWeekValueGenerator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_And()|12", com.cronutils.model.time.generator.FieldValueGenerator.class, com.cronutils.model.time.generator.FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_And()|10", com.cronutils.model.field.CronField.class, mockCronField), 2015, 1, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.WeekDay>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstance_And()|11", com.cronutils.mapper.WeekDay.class, new com.cronutils.mapper.WeekDay(1, false)))).getClass());
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName() throws java.lang.Exception {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.CronFieldName>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()|4", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.CronFieldName>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()|2", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()|1", com.cronutils.model.field.CronFieldName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()|0", com.cronutils.model.field.CronField.class, mockCronField).getField()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()|3", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.YEAR)));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()|9", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.expression.FieldExpression>>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()|7", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.FieldExpression>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()|6", com.cronutils.model.field.expression.FieldExpression.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()|5", com.cronutils.model.field.CronField.class, mockCronField).getExpression()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.expression.On>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()|8", com.cronutils.model.field.expression.On.class, org.mockito.Mockito.mock(com.cronutils.model.field.expression.On.class))));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.generator.FieldValueGenerator>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()|12", com.cronutils.model.time.generator.FieldValueGenerator.class, com.cronutils.model.time.generator.FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronField>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()|10", com.cronutils.model.field.CronField.class, mockCronField), 2015, 1, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.WeekDay>observeState("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()|11", com.cronutils.mapper.WeekDay.class, new com.cronutils.mapper.WeekDay(1, false))));
        } catch (java.lang.IllegalArgumentException a1552674205505) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.time.generator.FieldValueGeneratorFactoryTest|testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()|!", a1552674205505);
            throw a1552674205505;
        }
    }
}

