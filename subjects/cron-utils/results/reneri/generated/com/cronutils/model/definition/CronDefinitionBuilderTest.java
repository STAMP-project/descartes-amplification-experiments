package com.cronutils.model.definition;


/* Copyright 2015 jmrozanec
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
public class CronDefinitionBuilderTest {
    private com.cronutils.model.definition.CronDefinitionBuilder builder;

    @org.junit.Before
    public void setUp() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|setUp()|0", com.cronutils.model.definition.CronDefinitionBuilder.class, (builder = com.cronutils.model.definition.CronDefinitionBuilder.defineCron()));
    }

    @org.junit.Test
    public void testDefineCron() throws java.lang.Exception {
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testDefineCron()|0", com.cronutils.model.definition.CronDefinitionBuilder.class, com.cronutils.model.definition.CronDefinitionBuilder.defineCron()));
        org.junit.Assert.assertEquals(com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testDefineCron()|1", com.cronutils.model.definition.CronDefinitionBuilder.class, com.cronutils.model.definition.CronDefinitionBuilder.defineCron()).getClass());
    }

    @org.junit.Test
    public void testWithSeconds() throws java.lang.Exception {
        java.util.Set<com.cronutils.model.field.definition.FieldDefinition> fieldDefinitions = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithSeconds()|4", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithSeconds()|3", com.cronutils.model.definition.CronDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithSeconds()|2", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithSeconds()|1", com.cronutils.model.field.definition.FieldDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithSeconds()|0", com.cronutils.model.definition.CronDefinitionBuilder.class, builder).withSeconds()).and()).instance()).getFieldDefinitions());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithSeconds()|5", java.util.Set.class, fieldDefinitions));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithSeconds()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithSeconds()|6", java.util.Set.class, fieldDefinitions).size()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithSeconds()|8", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.SECOND), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithSeconds()|12", com.cronutils.model.field.CronFieldName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithSeconds()|11", com.cronutils.model.field.definition.FieldDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Iterator<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithSeconds()|10", java.util.Iterator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithSeconds()|9", java.util.Set.class, fieldDefinitions).iterator()).next()).getFieldName()));
    }

    @org.junit.Test
    public void testWithMinutes() throws java.lang.Exception {
        java.util.Set<com.cronutils.model.field.definition.FieldDefinition> fieldDefinitions = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMinutes()|4", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMinutes()|3", com.cronutils.model.definition.CronDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMinutes()|2", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMinutes()|1", com.cronutils.model.field.definition.FieldDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMinutes()|0", com.cronutils.model.definition.CronDefinitionBuilder.class, builder).withMinutes()).and()).instance()).getFieldDefinitions());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMinutes()|5", java.util.Set.class, fieldDefinitions));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMinutes()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMinutes()|6", java.util.Set.class, fieldDefinitions).size()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMinutes()|8", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.MINUTE), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMinutes()|12", com.cronutils.model.field.CronFieldName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMinutes()|11", com.cronutils.model.field.definition.FieldDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Iterator<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMinutes()|10", java.util.Iterator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMinutes()|9", java.util.Set.class, fieldDefinitions).iterator()).next()).getFieldName()));
    }

    @org.junit.Test
    public void testWithHours() throws java.lang.Exception {
        java.util.Set<com.cronutils.model.field.definition.FieldDefinition> fieldDefinitions = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithHours()|4", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithHours()|3", com.cronutils.model.definition.CronDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithHours()|2", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithHours()|1", com.cronutils.model.field.definition.FieldDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithHours()|0", com.cronutils.model.definition.CronDefinitionBuilder.class, builder).withHours()).and()).instance()).getFieldDefinitions());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithHours()|5", java.util.Set.class, fieldDefinitions));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithHours()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithHours()|6", java.util.Set.class, fieldDefinitions).size()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithHours()|8", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.HOUR), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithHours()|12", com.cronutils.model.field.CronFieldName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithHours()|11", com.cronutils.model.field.definition.FieldDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Iterator<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithHours()|10", java.util.Iterator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithHours()|9", java.util.Set.class, fieldDefinitions).iterator()).next()).getFieldName()));
    }

    @org.junit.Test
    public void testWithDayOfMonth() throws java.lang.Exception {
        java.util.Set<com.cronutils.model.field.definition.FieldDefinition> fieldDefinitions = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfMonth()|4", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfMonth()|3", com.cronutils.model.definition.CronDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfMonth()|2", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldSpecialCharsDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfMonth()|1", com.cronutils.model.field.definition.FieldSpecialCharsDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfMonth()|0", com.cronutils.model.definition.CronDefinitionBuilder.class, builder).withDayOfMonth()).and()).instance()).getFieldDefinitions());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfMonth()|5", java.util.Set.class, fieldDefinitions));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfMonth()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfMonth()|6", java.util.Set.class, fieldDefinitions).size()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfMonth()|8", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.DAY_OF_MONTH), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfMonth()|12", com.cronutils.model.field.CronFieldName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfMonth()|11", com.cronutils.model.field.definition.FieldDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Iterator<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfMonth()|10", java.util.Iterator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfMonth()|9", java.util.Set.class, fieldDefinitions).iterator()).next()).getFieldName()));
    }

    @org.junit.Test
    public void testWithMonth() throws java.lang.Exception {
        java.util.Set<com.cronutils.model.field.definition.FieldDefinition> fieldDefinitions = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMonth()|4", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMonth()|3", com.cronutils.model.definition.CronDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMonth()|2", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMonth()|1", com.cronutils.model.field.definition.FieldDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMonth()|0", com.cronutils.model.definition.CronDefinitionBuilder.class, builder).withMonth()).and()).instance()).getFieldDefinitions());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMonth()|5", java.util.Set.class, fieldDefinitions));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMonth()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMonth()|6", java.util.Set.class, fieldDefinitions).size()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMonth()|8", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.MONTH), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMonth()|12", com.cronutils.model.field.CronFieldName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMonth()|11", com.cronutils.model.field.definition.FieldDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Iterator<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMonth()|10", java.util.Iterator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithMonth()|9", java.util.Set.class, fieldDefinitions).iterator()).next()).getFieldName()));
    }

    @org.junit.Test
    public void testWithDayOfWeek() throws java.lang.Exception {
        java.util.Set<com.cronutils.model.field.definition.FieldDefinition> fieldDefinitions = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfWeek()|4", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfWeek()|3", com.cronutils.model.definition.CronDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfWeek()|2", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfWeek()|1", com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfWeek()|0", com.cronutils.model.definition.CronDefinitionBuilder.class, builder).withDayOfWeek()).and()).instance()).getFieldDefinitions());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfWeek()|5", java.util.Set.class, fieldDefinitions));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfWeek()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfWeek()|6", java.util.Set.class, fieldDefinitions).size()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfWeek()|8", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.DAY_OF_WEEK), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfWeek()|12", com.cronutils.model.field.CronFieldName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfWeek()|11", com.cronutils.model.field.definition.FieldDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Iterator<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfWeek()|10", java.util.Iterator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithDayOfWeek()|9", java.util.Set.class, fieldDefinitions).iterator()).next()).getFieldName()));
    }

    @org.junit.Test
    public void testWithYear() throws java.lang.Exception {
        java.util.Set<com.cronutils.model.field.definition.FieldDefinition> fieldDefinitions = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithYear()|4", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithYear()|3", com.cronutils.model.definition.CronDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithYear()|2", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithYear()|1", com.cronutils.model.field.definition.FieldDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithYear()|0", com.cronutils.model.definition.CronDefinitionBuilder.class, builder).withYear()).and()).instance()).getFieldDefinitions());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithYear()|5", java.util.Set.class, fieldDefinitions));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithYear()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithYear()|6", java.util.Set.class, fieldDefinitions).size()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithYear()|8", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.YEAR), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithYear()|12", com.cronutils.model.field.CronFieldName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithYear()|11", com.cronutils.model.field.definition.FieldDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Iterator<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithYear()|10", java.util.Iterator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testWithYear()|9", java.util.Set.class, fieldDefinitions).iterator()).next()).getFieldName()));
    }

    @org.junit.Test
    public void testLastFieldOptionalFalseByDefault() throws java.lang.Exception {
        com.cronutils.model.definition.CronDefinition definition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testLastFieldOptionalFalseByDefault()|3", com.cronutils.model.definition.CronDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testLastFieldOptionalFalseByDefault()|2", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testLastFieldOptionalFalseByDefault()|1", com.cronutils.model.field.definition.FieldDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testLastFieldOptionalFalseByDefault()|0", com.cronutils.model.definition.CronDefinitionBuilder.class, builder).withHours()).and()).instance());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testLastFieldOptionalFalseByDefault()|4", com.cronutils.model.definition.CronDefinition.class, definition));
    }

    @org.junit.Test
    public void testRegister() throws java.lang.Exception {
        com.cronutils.model.field.definition.FieldDefinition testFieldDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|5", com.cronutils.model.field.definition.FieldDefinition.class, new com.cronutils.model.field.definition.FieldDefinition(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|0", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.SECOND), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|4", com.cronutils.model.field.constraint.FieldConstraints.class, new com.cronutils.model.field.constraint.FieldConstraints(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<java.lang.String, java.lang.Integer>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|1", java.util.HashMap.class, com.google.common.collect.Maps.<java.lang.String, java.lang.Integer>newHashMap()), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<java.lang.Integer, java.lang.Integer>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|2", java.util.HashMap.class, com.google.common.collect.Maps.<java.lang.Integer, java.lang.Integer>newHashMap()), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashSet<com.cronutils.model.field.value.SpecialChar>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|3", java.util.HashSet.class, com.google.common.collect.Sets.<com.cronutils.model.field.value.SpecialChar>newHashSet()), 0, 1))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|6", com.cronutils.model.definition.CronDefinitionBuilder.class, builder).register(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|7", com.cronutils.model.field.definition.FieldDefinition.class, testFieldDefinition));
        java.util.Set<com.cronutils.model.field.definition.FieldDefinition> definitions = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|10", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|9", com.cronutils.model.definition.CronDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|8", com.cronutils.model.definition.CronDefinitionBuilder.class, builder).instance()).getFieldDefinitions());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|11", java.util.Set.class, definitions));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|12", java.util.Set.class, definitions).size()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|14", com.cronutils.model.field.definition.FieldDefinition.class, testFieldDefinition), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|17", com.cronutils.model.field.definition.FieldDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Iterator<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|16", java.util.Iterator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testRegister()|15", java.util.Set.class, definitions).iterator()).next()));
    }

    @org.junit.Test
    public void testInstanceDefinitionForUnix() throws java.lang.Exception {
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testInstanceDefinitionForUnix()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testInstanceDefinitionForUnix()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX))));
    }

    @org.junit.Test
    public void testInstanceDefinitionForQuartz() throws java.lang.Exception {
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testInstanceDefinitionForQuartz()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testInstanceDefinitionForQuartz()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ))));
    }

    @org.junit.Test
    public void testInstanceDefinitionForCron4j() throws java.lang.Exception {
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testInstanceDefinitionForCron4j()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testInstanceDefinitionForCron4j()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.CRON4J))));
    }

    @org.junit.Test(expected = java.lang.RuntimeException.class)
    public void testInstanceDefinitionForUnknownValue() throws java.lang.Exception {
        try {
            org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testInstanceDefinitionForUnknownValue()|0", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(null)));
        } catch (java.lang.RuntimeException a1552674205202) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.definition.CronDefinitionBuilderTest|testInstanceDefinitionForUnknownValue()|!", a1552674205202);
            throw a1552674205202;
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testCronDefinitionShouldNotAcceptQuestionmark() throws java.lang.Exception {
        try {
            com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptQuestionmark()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptQuestionmark()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
            com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptQuestionmark()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptQuestionmark()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
            com.cronutils.model.Cron quartzCron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptQuestionmark()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptQuestionmark()|4", com.cronutils.parser.CronParser.class, parser).parse("* * * * ?"));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptQuestionmark()|7", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptQuestionmark()|6", com.cronutils.model.Cron.class, quartzCron).validate());
        } catch (java.lang.IllegalArgumentException a1552674205200) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptQuestionmark()|!", a1552674205200);
            throw a1552674205200;
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testCronDefinitionShouldNotAcceptMultipleOptionalFields() throws java.lang.Exception {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|17", com.cronutils.model.definition.CronDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|16", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|15", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|14", com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|13", com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|12", com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|11", com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|10", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|9", com.cronutils.model.field.definition.FieldDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|8", com.cronutils.model.field.definition.FieldDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|7", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|6", com.cronutils.model.field.definition.FieldDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldSpecialCharsDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|5", com.cronutils.model.field.definition.FieldSpecialCharsDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|4", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|3", com.cronutils.model.field.definition.FieldDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|2", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|1", com.cronutils.model.field.definition.FieldDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|0", com.cronutils.model.definition.CronDefinitionBuilder.class, com.cronutils.model.definition.CronDefinitionBuilder.defineCron()).withMinutes()).and()).withHours()).and()).withDayOfMonth()).optional()).and()).withMonth()).optional()).and()).withDayOfWeek()).withValidRange(0, 7)).withMondayDoWValue(1)).withIntMapping(7, 0)).and()).enforceStrictRanges()).instance());
        } catch (java.lang.IllegalArgumentException a1552674205199) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.definition.CronDefinitionBuilderTest|testCronDefinitionShouldNotAcceptMultipleOptionalFields()|!", a1552674205199);
            throw a1552674205199;
        }
    }
}

