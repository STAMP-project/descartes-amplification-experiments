package com.cronutils.model.time;


/* Copyright 2015 jmrozanec
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
public class ExecutionTimeCron4jIntegrationTest {
    private com.cronutils.parser.CronParser cron4jCronParser;

    private static final java.lang.String EVERY_MONDAY_AT_18 = "0 18 * * 1";

    private static final java.lang.String EVERY_15_MINUTES = "0/15 * * * *";

    private static final java.lang.String EVERY_2_HOURS = "0 0/2 * * *";

    private static final java.lang.String EVERY_WEEKDAY_AT_6 = "0 6 * * MON-FRI";

    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.class);

    @org.junit.Before
    public void setUp() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|setUp()|2", com.cronutils.parser.CronParser.class, (cron4jCronParser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|setUp()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|setUp()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.CRON4J))))));
    }

    @org.junit.Test
    public void testForCron() throws java.lang.Exception {
        org.junit.Assert.assertEquals(com.cronutils.model.time.ExecutionTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testForCron()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testForCron()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testForCron()|0", com.cronutils.parser.CronParser.class, cron4jCronParser).parse(com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.EVERY_MONDAY_AT_18)))).getClass());
    }

    /**
     * Issue #37: nextExecution not calculating correct time
     */
    @org.junit.Test
    public void testEveryWeekdayAt6() throws java.lang.Exception {
        org.threeten.bp.ZonedDateTime lastRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now());
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|1", com.cronutils.parser.CronParser.class, cron4jCronParser).parse(com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.EVERY_WEEKDAY_AT_6))));
        // iterate through the next 8 days so we roll over for a week
        // and make sure the next run time is always in the future from the prior run time
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|4", i)) < 8; i++) {
            org.threeten.bp.ZonedDateTime nextRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|8", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|7", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|5", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|6", org.threeten.bp.ZonedDateTime.class, lastRun))).get());
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.slf4j.Logger>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|9", org.slf4j.Logger.class, com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.log).info("LastRun = [{}]", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|10", org.threeten.bp.ZonedDateTime.class, lastRun));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.slf4j.Logger>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|11", org.slf4j.Logger.class, com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.log).info("NextRun = [{}]", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|12", org.threeten.bp.ZonedDateTime.class, nextRun));
            org.junit.Assert.assertNotEquals(6, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|14", org.threeten.bp.DayOfWeek.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|13", org.threeten.bp.ZonedDateTime.class, nextRun).getDayOfWeek()));
            org.junit.Assert.assertNotEquals(7, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|16", org.threeten.bp.DayOfWeek.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|15", org.threeten.bp.ZonedDateTime.class, nextRun).getDayOfWeek()));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|17", org.threeten.bp.ZonedDateTime.class, lastRun).isBefore(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|18", org.threeten.bp.ZonedDateTime.class, nextRun))));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|21", org.threeten.bp.ZonedDateTime.class, (lastRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEveryWeekdayAt6()|20", org.threeten.bp.ZonedDateTime.class, lastRun).plusDays(1)));
        }
    }

    /**
     * Issue #37: nextExecution not calculating correct time
     */
    @org.junit.Test
    public void testEvery2Hours() throws java.lang.Exception {
        org.threeten.bp.ZonedDateTime lastRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now());
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|1", com.cronutils.parser.CronParser.class, cron4jCronParser).parse(com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.EVERY_2_HOURS))));
        // iterate through the next 36 hours so we roll over the to the next day
        // and make sure the next run time is always in the future from the prior run time
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|4", i)) < 36; i++) {
            org.threeten.bp.ZonedDateTime nextRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|8", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|7", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|5", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|6", org.threeten.bp.ZonedDateTime.class, lastRun))).get());
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.slf4j.Logger>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|9", org.slf4j.Logger.class, com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.log).info("LastRun = [{}]", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|10", org.threeten.bp.ZonedDateTime.class, lastRun));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.slf4j.Logger>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|11", org.slf4j.Logger.class, com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.log).info("NextRun = [{}]", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|12", org.threeten.bp.ZonedDateTime.class, nextRun));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|15", java.lang.String.format("Hour is %s", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|13", org.threeten.bp.ZonedDateTime.class, nextRun).getHour()))), (((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|16", org.threeten.bp.ZonedDateTime.class, nextRun).getHour())) % 2) == 0));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|21", java.lang.String.format("Last run is before next one: %s", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|18", org.threeten.bp.ZonedDateTime.class, lastRun).isBefore(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|19", org.threeten.bp.ZonedDateTime.class, nextRun))))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|22", org.threeten.bp.ZonedDateTime.class, lastRun).isBefore(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|23", org.threeten.bp.ZonedDateTime.class, nextRun))));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|26", org.threeten.bp.ZonedDateTime.class, (lastRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery2Hours()|25", org.threeten.bp.ZonedDateTime.class, lastRun).plusHours(1)));
        }
    }

    @org.junit.Test
    public void testQuick() throws java.lang.Exception {
        org.threeten.bp.ZonedDateTime lastRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|1", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 3, 12, 0, 55, 50, 630, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|0", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("America/Los_Angeles"))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|4", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|2", com.cronutils.parser.CronParser.class, cron4jCronParser).parse(com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.EVERY_2_HOURS))));
        // iterate through the next 36 hours so we roll over the to the next day
        // and make sure the next run time is always in the future from the prior run time
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|5", i)) < 1; i++) {
            org.threeten.bp.ZonedDateTime nextRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|9", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|8", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|6", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|7", org.threeten.bp.ZonedDateTime.class, lastRun))).get());
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.slf4j.Logger>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|10", org.slf4j.Logger.class, com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.log).info("LastRun = [{}]", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|11", org.threeten.bp.ZonedDateTime.class, lastRun));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.slf4j.Logger>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|12", org.slf4j.Logger.class, com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.log).info("NextRun = [{}]", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|13", org.threeten.bp.ZonedDateTime.class, nextRun));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|16", java.lang.String.format("Hour is %s", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|14", org.threeten.bp.ZonedDateTime.class, nextRun).getHour()))), (((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|17", org.threeten.bp.ZonedDateTime.class, nextRun).getHour())) % 2) == 0));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|22", java.lang.String.format("Last run is before next one: %s", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|19", org.threeten.bp.ZonedDateTime.class, lastRun).isBefore(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|20", org.threeten.bp.ZonedDateTime.class, nextRun))))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|23", org.threeten.bp.ZonedDateTime.class, lastRun).isBefore(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|24", org.threeten.bp.ZonedDateTime.class, nextRun))));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|27", org.threeten.bp.ZonedDateTime.class, (lastRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testQuick()|26", org.threeten.bp.ZonedDateTime.class, lastRun).plusHours(1)));
        }
    }

    /**
     * Issue #37:  nextExecution not calculating correct time
     */
    @org.junit.Test
    public void testEvery15Minutes() throws java.lang.Exception {
        org.threeten.bp.ZonedDateTime lastRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now());
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|1", com.cronutils.parser.CronParser.class, cron4jCronParser).parse(com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.EVERY_15_MINUTES))));
        // iterate through the next 75 minutes so we roll over the top of the hour
        // and make sure the next run time is always in the future from the prior run time
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|4", i)) < 75; i++) {
            org.threeten.bp.ZonedDateTime nextRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|8", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|7", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|5", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|6", org.threeten.bp.ZonedDateTime.class, lastRun))).get());
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.slf4j.Logger>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|9", org.slf4j.Logger.class, com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.log).debug("LastRun = [{}]", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|10", org.threeten.bp.ZonedDateTime.class, lastRun));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.slf4j.Logger>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|11", org.slf4j.Logger.class, com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.log).debug("NextRun = [{}]", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|12", org.threeten.bp.ZonedDateTime.class, nextRun));
            org.junit.Assert.assertTrue((((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|13", org.threeten.bp.ZonedDateTime.class, nextRun).getMinute())) % 15) == 0));
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|15", org.threeten.bp.ZonedDateTime.class, lastRun).isBefore(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|16", org.threeten.bp.ZonedDateTime.class, nextRun))));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|19", org.threeten.bp.ZonedDateTime.class, (lastRun = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testEvery15Minutes()|18", org.threeten.bp.ZonedDateTime.class, lastRun).plusMinutes(1)));
        }
    }

    /**
     * Issue #26: bug 1: if day of week specified, always from day of month is not considered.
     */
    @org.junit.Test
    public void testDayOfWeekOverridesAlwaysAtDayOfMonth() throws java.lang.Exception {
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfWeekOverridesAlwaysAtDayOfMonth()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now());
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfWeekOverridesAlwaysAtDayOfMonth()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfWeekOverridesAlwaysAtDayOfMonth()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfWeekOverridesAlwaysAtDayOfMonth()|1", com.cronutils.parser.CronParser.class, cron4jCronParser).parse(com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.EVERY_MONDAY_AT_18))));
        org.threeten.bp.ZonedDateTime next = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfWeekOverridesAlwaysAtDayOfMonth()|7", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfWeekOverridesAlwaysAtDayOfMonth()|6", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfWeekOverridesAlwaysAtDayOfMonth()|4", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfWeekOverridesAlwaysAtDayOfMonth()|5", org.threeten.bp.ZonedDateTime.class, now))).get());
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfWeekOverridesAlwaysAtDayOfMonth()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfWeekOverridesAlwaysAtDayOfMonth()|9", org.threeten.bp.DayOfWeek.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfWeekOverridesAlwaysAtDayOfMonth()|8", org.threeten.bp.ZonedDateTime.class, next).getDayOfWeek()).getValue()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfWeekOverridesAlwaysAtDayOfMonth()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfWeekOverridesAlwaysAtDayOfMonth()|11", org.threeten.bp.ZonedDateTime.class, now).isBefore(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfWeekOverridesAlwaysAtDayOfMonth()|12", org.threeten.bp.ZonedDateTime.class, next))));
    }

    /**
     * Issue #26: bug 1: if day of week specified, always from day of month is not considered.
     */
    @org.junit.Test
    public void testDayOfMonthOverridesAlwaysAtDayOfWeek() throws java.lang.Exception {
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfMonthOverridesAlwaysAtDayOfWeek()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now());
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfMonthOverridesAlwaysAtDayOfWeek()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfMonthOverridesAlwaysAtDayOfWeek()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfMonthOverridesAlwaysAtDayOfWeek()|1", com.cronutils.parser.CronParser.class, cron4jCronParser).parse("0 18 1 * *"))));
        org.threeten.bp.ZonedDateTime next = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfMonthOverridesAlwaysAtDayOfWeek()|7", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfMonthOverridesAlwaysAtDayOfWeek()|6", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfMonthOverridesAlwaysAtDayOfWeek()|4", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfMonthOverridesAlwaysAtDayOfWeek()|5", org.threeten.bp.ZonedDateTime.class, now))).get());
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfMonthOverridesAlwaysAtDayOfWeek()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfMonthOverridesAlwaysAtDayOfWeek()|8", org.threeten.bp.ZonedDateTime.class, next).getDayOfMonth()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfMonthOverridesAlwaysAtDayOfWeek()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfMonthOverridesAlwaysAtDayOfWeek()|10", org.threeten.bp.ZonedDateTime.class, now).isBefore(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testDayOfMonthOverridesAlwaysAtDayOfWeek()|11", org.threeten.bp.ZonedDateTime.class, next))));
    }

    /**
     * Issue #26: bug 2: nextNext should be greater than next, not the same value.
     */
    @org.junit.Test
    public void testNextExecutionOverNextExecution() throws java.lang.Exception {
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|0", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now());
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|3", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|1", com.cronutils.parser.CronParser.class, cron4jCronParser).parse(com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.EVERY_MONDAY_AT_18))));
        org.threeten.bp.ZonedDateTime next = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|7", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|6", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|4", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|5", org.threeten.bp.ZonedDateTime.class, now))).get());
        org.threeten.bp.ZonedDateTime nextNext = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|11", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|8", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|9", org.threeten.bp.ZonedDateTime.class, next))).get());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|12", org.threeten.bp.ZonedDateTime.class, now).isBefore(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|13", org.threeten.bp.ZonedDateTime.class, next))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|15", org.threeten.bp.ZonedDateTime.class, next).isBefore(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testNextExecutionOverNextExecution()|16", org.threeten.bp.ZonedDateTime.class, nextNext))));
    }

    /**
     * Issue #203: cron4j definition should generate next execution times matching both the day of month and day of week
     * when both are restricted
     */
    @org.junit.Test
    public void testFixedDayOfMonthAndDayOfWeek() throws java.lang.Exception {
        // Run only on January 1st if it is a Tuesday, at 9:00AM
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|2", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|0", com.cronutils.parser.CronParser.class, cron4jCronParser).parse("0 9 1 1 tue"))));
        // The next four Tuesday January 1 after January 1, 2017 are in 2019, 2030, 2036, and 2041
        int[] expectedYears = eu.stamp_project.reneri.instrumentation.StateObserver.<int[]>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|3", int[].class, new int[]{ 2019, 2030, 2036, 2041 });
        org.threeten.bp.ZonedDateTime next = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2017, 1, 1, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|4", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.systemDefault())));
        for (int expectedYear : eu.stamp_project.reneri.instrumentation.StateObserver.<int[]>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|6", int[].class, expectedYears)) {
            assert eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|9", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|7", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|8", org.threeten.bp.ZonedDateTime.class, next))).isPresent());
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|14", org.threeten.bp.ZonedDateTime.class, (next = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|13", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|11", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|12", org.threeten.bp.ZonedDateTime.class, next))).get()));
            org.threeten.bp.ZonedDateTime expectedDate = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|17", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|15", expectedYear), 1, 1, 9, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|16", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.systemDefault())));
            java.lang.String expectedMessage = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|20", java.lang.String.format("Expected next execution time: %s, Actual next execution time: %s", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|18", org.threeten.bp.ZonedDateTime.class, expectedDate), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|19", org.threeten.bp.ZonedDateTime.class, next)));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|21", expectedMessage), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|22", org.threeten.bp.DayOfWeek.class, org.threeten.bp.DayOfWeek.TUESDAY), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|24", org.threeten.bp.DayOfWeek.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|23", org.threeten.bp.ZonedDateTime.class, next).getDayOfWeek()));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|25", expectedMessage), 1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|26", org.threeten.bp.ZonedDateTime.class, next).getDayOfMonth()));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|28", expectedMessage), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|29", expectedYear), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|30", org.threeten.bp.ZonedDateTime.class, next).getYear()));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|32", expectedMessage), 9, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|34", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|33", org.threeten.bp.ZonedDateTime.class, next).getHour()));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|35", expectedMessage), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|36", org.threeten.bp.ZonedDateTime.class, expectedDate), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testFixedDayOfMonthAndDayOfWeek()|37", org.threeten.bp.ZonedDateTime.class, next));
        }
    }

    /**
     * Issue #203: cron4j definition should generate next execution times matching both the day of month and day of week
     * when both are restricted
     */
    @org.junit.Test
    public void testRandomDayOfMonthAndDayOfWeek() throws java.lang.Exception {
        // pick a random day of week and day of month
        // DayOfWeek uses 1 (Mon) to 7 (Sun) while cron4j allows 0 (Sun) to 6 (Sat)
        java.util.Random random = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Random>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|0", java.util.Random.class, new java.util.Random());
        org.threeten.bp.DayOfWeek dayOfWeek = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|3", org.threeten.bp.DayOfWeek.class, org.threeten.bp.DayOfWeek.of(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Random>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|1", java.util.Random.class, random).nextInt(7))) + 1)));
        int dayOfWeekValue = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|4", org.threeten.bp.DayOfWeek.class, dayOfWeek).getValue());
        if ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|6", dayOfWeekValue)) == 7) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|7", (dayOfWeekValue = 0));
        }
        int month = (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Random>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|8", java.util.Random.class, random).nextInt(12))) + 1;
        // using max length so it is possible to use February 29 (leap-year)
        int dayOfMonth = (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Random>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|10", java.util.Random.class, random).nextInt(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|12", org.threeten.bp.Month.class, org.threeten.bp.Month.of(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|11", month))).maxLength())))) + 1;
        java.lang.String expression = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|18", java.lang.String.format("0 0 %d %d %d", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|15", dayOfMonth), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|16", month), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|17", dayOfWeekValue)));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|22", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|21", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|19", com.cronutils.parser.CronParser.class, cron4jCronParser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|20", expression)))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.slf4j.Logger>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|23", org.slf4j.Logger.class, com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.log).debug("cron4j expression: {}", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|24", expression));
        org.threeten.bp.ZonedDateTime next = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|25", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.slf4j.Logger>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|26", org.slf4j.Logger.class, com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.log).debug("Start date: {}", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|27", org.threeten.bp.ZonedDateTime.class, next));
        for (int i = 1; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|28", i)) <= 20; i++) {
            com.google.common.base.Optional<org.threeten.bp.ZonedDateTime> nextExecution = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|31", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|29", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|30", org.threeten.bp.ZonedDateTime.class, next)));
            assert eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|32", com.google.common.base.Optional.class, nextExecution).isPresent());
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|35", org.threeten.bp.ZonedDateTime.class, (next = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|34", com.google.common.base.Optional.class, nextExecution).get()));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.slf4j.Logger>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|36", org.slf4j.Logger.class, com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest.log).debug("Execution #{} date: {}", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|37", i), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|38", org.threeten.bp.ZonedDateTime.class, next));
            org.junit.Assert.assertEquals("Incorrect day of the week", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|39", org.threeten.bp.DayOfWeek.class, dayOfWeek), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.DayOfWeek>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|41", org.threeten.bp.DayOfWeek.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|40", org.threeten.bp.ZonedDateTime.class, next).getDayOfWeek()));
            org.junit.Assert.assertEquals("Incorrect day of the month", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|42", dayOfMonth), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|44", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|43", org.threeten.bp.ZonedDateTime.class, next).getDayOfMonth()));
            org.junit.Assert.assertEquals("Incorrect month", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|45", month), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|47", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.ExecutionTimeCron4jIntegrationTest|testRandomDayOfMonthAndDayOfWeek()|46", org.threeten.bp.ZonedDateTime.class, next).getMonthValue()));
        }
    }
}

