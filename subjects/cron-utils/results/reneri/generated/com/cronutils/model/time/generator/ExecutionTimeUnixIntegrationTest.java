package com.cronutils.model.time.generator;


public class ExecutionTimeUnixIntegrationTest {
    @org.junit.Test
    public void testIsMatchForUnix01() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix01()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix01()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix01()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)))));
        java.lang.String crontab = "* * * * *";// m,h,dom,M,dow

        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix01()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix01()|3", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix01()|4", crontab)));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix01()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix01()|6", com.cronutils.model.Cron.class, cron)));
        org.threeten.bp.ZonedDateTime scanTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix01()|8", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-02-29T11:00:00.000-06:00"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix01()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix01()|9", com.cronutils.model.time.ExecutionTime.class, executionTime).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix01()|10", org.threeten.bp.ZonedDateTime.class, scanTime))));
    }

    @org.junit.Test
    public void testIsMatchForUnix02() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix02()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix02()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix02()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)))));
        java.lang.String crontab = "0 * * * 1-5";// m,h,dom,M,dow

        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix02()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix02()|3", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix02()|4", crontab)));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix02()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix02()|6", com.cronutils.model.Cron.class, cron)));
        org.threeten.bp.ZonedDateTime scanTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix02()|8", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-03-04T11:00:00.000-06:00"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix02()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix02()|9", com.cronutils.model.time.ExecutionTime.class, executionTime).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testIsMatchForUnix02()|10", org.threeten.bp.ZonedDateTime.class, scanTime))));
    }

    /**
     * Issue #37: for pattern "every 10 minutes", nextExecution returns a date from past.
     */
    @org.junit.Test
    public void testEveryTenMinutesNextExecution() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTenMinutesNextExecution()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTenMinutesNextExecution()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTenMinutesNextExecution()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTenMinutesNextExecution()|5", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTenMinutesNextExecution()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTenMinutesNextExecution()|3", com.cronutils.parser.CronParser.class, parser).parse("*/10 * * * *"))));
        org.threeten.bp.ZonedDateTime time = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTenMinutesNextExecution()|6", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-09-05T13:43:00.000-07:00"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTenMinutesNextExecution()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-09-05T13:50:00.000-07:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTenMinutesNextExecution()|11", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTenMinutesNextExecution()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTenMinutesNextExecution()|8", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTenMinutesNextExecution()|9", org.threeten.bp.ZonedDateTime.class, time))).get()));
    }

    /**
     * Issue #38: every 2 min schedule doesn't roll over to next hour
     */
    @org.junit.Test
    public void testEveryTwoMinRollsOverHour() {
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition))).parse("*/2 * * * *"));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|6", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|5", com.cronutils.model.Cron.class, cron)));
        org.threeten.bp.ZonedDateTime time = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-09-05T13:56:00.000-07:00"));
        org.threeten.bp.ZonedDateTime next = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|11", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|8", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|9", org.threeten.bp.ZonedDateTime.class, time))).get());
        org.threeten.bp.ZonedDateTime shouldBeInNextHour = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|15", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|14", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|12", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|13", org.threeten.bp.ZonedDateTime.class, next))).get());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|17", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|16", org.threeten.bp.ZonedDateTime.class, next).plusMinutes(2)), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTwoMinRollsOverHour()|18", org.threeten.bp.ZonedDateTime.class, shouldBeInNextHour));
    }

    /**
     * Issue #41: for everything other than a dayOfWeek value == 1, nextExecution and lastExecution do not return correct results
     */
    @org.junit.Test
    public void testEveryTuesdayAtThirdHourOfDayNextExecution() {
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayNextExecution()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayNextExecution()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayNextExecution()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayNextExecution()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        com.cronutils.model.Cron myCron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayNextExecution()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayNextExecution()|4", com.cronutils.parser.CronParser.class, parser).parse("0 3 * * 3"));
        org.threeten.bp.ZonedDateTime time = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayNextExecution()|6", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-09-17T00:00:00.000-07:00"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayNextExecution()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-09-23T03:00:00.000-07:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayNextExecution()|12", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayNextExecution()|11", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayNextExecution()|9", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayNextExecution()|8", com.cronutils.model.Cron.class, myCron))).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayNextExecution()|10", org.threeten.bp.ZonedDateTime.class, time))).get()));
    }

    /**
     * Issue #41: for everything other than a dayOfWeek value == 1, nextExecution and lastExecution do not return correct results
     */
    @org.junit.Test
    public void testEveryTuesdayAtThirdHourOfDayLastExecution() {
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayLastExecution()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayLastExecution()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayLastExecution()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayLastExecution()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        com.cronutils.model.Cron myCron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayLastExecution()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayLastExecution()|4", com.cronutils.parser.CronParser.class, parser).parse("0 3 * * 3"));
        org.threeten.bp.ZonedDateTime time = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayLastExecution()|6", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-09-17T00:00:00.000-07:00"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayLastExecution()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-09-16T03:00:00.000-07:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayLastExecution()|12", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayLastExecution()|11", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayLastExecution()|9", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayLastExecution()|8", com.cronutils.model.Cron.class, myCron))).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testEveryTuesdayAtThirdHourOfDayLastExecution()|10", org.threeten.bp.ZonedDateTime.class, time))).get()));
    }

    /**
     * Issue #45: last execution does not match expected date. Result is not in same timezone as reference date.
     */
    @org.junit.Test
    public void testMondayWeekdayLastExecution() {
        java.lang.String crontab = "* * * * 1";
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|4", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|5", crontab)));
        org.threeten.bp.ZonedDateTime date = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-10-13T17:26:54.468-07:00"));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|9", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|8", com.cronutils.model.Cron.class, cron)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|10", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-10-12T23:59:00.000-07:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|14", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|13", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|11", com.cronutils.model.time.ExecutionTime.class, executionTime).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayLastExecution()|12", org.threeten.bp.ZonedDateTime.class, date))).get()));
    }

    /**
     * Issue #45: next execution does not match expected date. Result is not in same timezone as reference date.
     */
    @org.junit.Test
    public void testMondayWeekdayNextExecution() {
        java.lang.String crontab = "* * * * 1";
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|4", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|5", crontab)));
        org.threeten.bp.ZonedDateTime date = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-10-13T17:26:54.468-07:00"));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|9", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|8", com.cronutils.model.Cron.class, cron)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|10", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-10-19T00:00:00.000-07:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|14", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|13", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|11", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testMondayWeekdayNextExecution()|12", org.threeten.bp.ZonedDateTime.class, date))).get()));
    }

    /**
     * Issue #50: last execution does not match expected date when cron specifies day of week and last execution is in previous month.
     */
    @org.junit.Test
    public void testLastExecutionDaysOfWeekOverMonthBoundary() {
        java.lang.String crontab = "0 11 * * 1";
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|4", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|5", crontab)));
        org.threeten.bp.ZonedDateTime date = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-11-02T00:10:00Z"));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|9", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|8", com.cronutils.model.Cron.class, cron)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|10", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-10-26T11:00:00Z")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|14", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|13", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|11", com.cronutils.model.time.ExecutionTime.class, executionTime).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaysOfWeekOverMonthBoundary()|12", org.threeten.bp.ZonedDateTime.class, date))).get()));
    }

    /**
     * Issue #52: "And" doesn't work for day of the week
     * 1,2 should be Monday and Tuesday, but instead it is treated as 1st/2nd of month.
     */
    @org.junit.Test
    public void testWeekdayAndLastExecution() {
        java.lang.String crontab = "* * * * 1,2";
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|4", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|5", crontab)));
        org.threeten.bp.ZonedDateTime date = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-11-10T17:01:00Z"));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|9", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|8", com.cronutils.model.Cron.class, cron)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|10", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-11-10T17:00:00Z")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|14", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|13", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|11", com.cronutils.model.time.ExecutionTime.class, executionTime).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndLastExecution()|12", org.threeten.bp.ZonedDateTime.class, date))).get()));
    }

    /**
     * Isue #52: Additional test to ensure after fix that "And" and "Between" can both be used
     * 1,2-3 should be Monday, Tuesday and Wednesday.
     */
    @org.junit.Test
    public void testWeekdayAndWithMixOfOnAndBetweenLastExecution() {
        java.lang.String crontab = "* * * * 1,2-3";
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|4", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|5", crontab)));
        org.threeten.bp.ZonedDateTime date = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-11-10T17:01:00Z"));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|9", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|8", com.cronutils.model.Cron.class, cron)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|10", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-11-10T17:00:00Z")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|14", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|13", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|11", com.cronutils.model.time.ExecutionTime.class, executionTime).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWeekdayAndWithMixOfOnAndBetweenLastExecution()|12", org.threeten.bp.ZonedDateTime.class, date))).get()));
    }

    /**
     * Issue #59: Incorrect next execution time for "month" and "day of week"
     * Considers Month in range 0-11 instead of 1-12
     */
    @org.junit.Test
    public void testCorrectMonthScaleForNextExecution1() {
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        java.lang.String crontab = "* * */3 */4 */5";// m,h,dom,M,dow

        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|4", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|5", crontab)));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|8", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|7", com.cronutils.model.Cron.class, cron)));
        org.threeten.bp.ZonedDateTime scanTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|9", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-12-10T16:32:56.586-08:00"));
        org.threeten.bp.ZonedDateTime nextExecutionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|13", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|12", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|10", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|11", org.threeten.bp.ZonedDateTime.class, scanTime))).get());
        // DoW: 0-6 -> 0, 5 (sunday, friday)
        // DoM: 1-31 -> 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31
        // M: 1-12 -> 1, 5, 9
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|14", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-01-01T00:00:00.000-08:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution1()|15", org.threeten.bp.ZonedDateTime.class, nextExecutionTime));
    }

    /**
     * Issue #59: Incorrect next execution time for "day of month" in "time" situation
     * dom "* / 4" should mean 1, 5, 9, 13, 17th... of month instead of 4, 8, 12, 16th...
     */
    @org.junit.Test
    public void testCorrectMonthScaleForNextExecution2() {
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        java.lang.String crontab = "* * */4 * *";// m,h,dom,M,dow

        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|4", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|5", crontab)));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|8", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|7", com.cronutils.model.Cron.class, cron)));
        org.threeten.bp.ZonedDateTime scanTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|9", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-12-10T16:32:56.586-08:00"));
        org.threeten.bp.ZonedDateTime nextExecutionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|13", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|12", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|10", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|11", org.threeten.bp.ZonedDateTime.class, scanTime))).get());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|14", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2015-12-13T00:00:00.000-08:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectMonthScaleForNextExecution2()|15", org.threeten.bp.ZonedDateTime.class, nextExecutionTime));
    }

    /**
     * Issue #59: Incorrect next execution time for "month" and "day of week"
     * Considers bad DoW
     */
    @org.junit.Test
    public void testCorrectNextExecutionDoW() {
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        java.lang.String crontab = "* * * * */4";// m,h,dom,M,dow

        // DoW: 0-6 -> 0, 4 (sunday, thursday)
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|4", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|5", crontab)));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|8", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|7", com.cronutils.model.Cron.class, cron)));
        org.threeten.bp.ZonedDateTime scanTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|9", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-01-28T16:32:56.586-08:00"));
        org.threeten.bp.ZonedDateTime nextExecutionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|13", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|12", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|10", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|11", org.threeten.bp.ZonedDateTime.class, scanTime))).get());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|14", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-02-04T00:00:00.000-08:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoW()|15", org.threeten.bp.ZonedDateTime.class, nextExecutionTime));
    }

    /**
     * Issue #69: Getting next execution fails on leap-year when using day-of-week
     */
    @org.junit.Test
    public void testCorrectNextExecutionDoWForLeapYear() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoWForLeapYear()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoWForLeapYear()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoWForLeapYear()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)))));
        java.lang.String crontab = "0 * * * 1-5";// m,h,dom,M,dow

        // DoW: 0-6 -> 1, 2, 3, 4, 5 -> in this year:
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoWForLeapYear()|6", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoWForLeapYear()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoWForLeapYear()|3", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoWForLeapYear()|4", crontab)))));
        org.threeten.bp.ZonedDateTime scanTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoWForLeapYear()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-02-29T11:00:00.000-06:00"));
        org.threeten.bp.ZonedDateTime nextExecutionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoWForLeapYear()|11", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoWForLeapYear()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoWForLeapYear()|8", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoWForLeapYear()|9", org.threeten.bp.ZonedDateTime.class, scanTime))).get());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoWForLeapYear()|12", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-02-29T12:00:00.000-06:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testCorrectNextExecutionDoWForLeapYear()|13", org.threeten.bp.ZonedDateTime.class, nextExecutionTime));
    }

    /**
     * Issue #61: nextExecution over daylight savings is wrong
     */
    @org.junit.Test
    public void testNextExecutionDaylightSaving() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|5", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|3", com.cronutils.parser.CronParser.class, parser).parse("0 17 * * *"))));// daily at 17:00

        // Daylight savings for New York 2016 is Mar 13 at 2am
        org.threeten.bp.ZonedDateTime last = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 3, 12, 17, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|6", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("America/New_York"))));
        org.threeten.bp.ZonedDateTime next = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|11", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|8", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|9", org.threeten.bp.ZonedDateTime.class, last))).get());
        long millis = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|14", org.threeten.bp.Duration.class, org.threeten.bp.Duration.between(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|12", org.threeten.bp.ZonedDateTime.class, last), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|13", org.threeten.bp.ZonedDateTime.class, next))).toMillis());
        org.junit.Assert.assertEquals(23, ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|16", millis)) / 3600000));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|18", org.threeten.bp.ZoneId.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|17", org.threeten.bp.ZonedDateTime.class, last).getZone()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|20", org.threeten.bp.ZoneId.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionDaylightSaving()|19", org.threeten.bp.ZonedDateTime.class, next).getZone()));
    }

    /**
     * Issue #61: lastExecution over daylight savings is wrong
     */
    @org.junit.Test
    public void testLastExecutionDaylightSaving() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|5", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|3", com.cronutils.parser.CronParser.class, parser).parse("0 17 * * *"))));// daily at 17:00

        // Daylight savings for New York 2016 is Mar 13 at 2am
        org.threeten.bp.ZonedDateTime now = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 3, 12, 17, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|6", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("America/Phoenix"))));
        org.threeten.bp.ZonedDateTime last = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|11", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|8", com.cronutils.model.time.ExecutionTime.class, executionTime).lastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|9", org.threeten.bp.ZonedDateTime.class, now))).get());
        long millis = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|14", org.threeten.bp.Duration.class, org.threeten.bp.Duration.between(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|12", org.threeten.bp.ZonedDateTime.class, last), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|13", org.threeten.bp.ZonedDateTime.class, now))).toMillis());
        org.junit.Assert.assertEquals(24, ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|16", millis)) / 3600000));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|18", org.threeten.bp.ZoneId.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|17", org.threeten.bp.ZonedDateTime.class, now).getZone()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|20", org.threeten.bp.ZoneId.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testLastExecutionDaylightSaving()|19", org.threeten.bp.ZonedDateTime.class, last).getZone()));
    }

    /**
     * Issue #79: Next execution skipping valid date
     */
    @org.junit.Test
    public void testNextExecution2014() {
        java.lang.String crontab = "0 8 * * 1";// m,h,dom,m,dow ; every monday at 8AM

        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|4", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|5", crontab)));
        org.threeten.bp.ZonedDateTime date = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2014-11-30T00:00:00Z"));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|9", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|8", com.cronutils.model.Cron.class, cron)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|10", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2014-12-01T08:00:00Z")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|14", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|13", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|11", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2014()|12", org.threeten.bp.ZonedDateTime.class, date))).get()));
    }

    /**
     * Issue #92: Next execution skipping valid date
     */
    @org.junit.Test
    public void testNextExecution2016() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2016()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2016()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2016()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2016()|5", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2016()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2016()|3", com.cronutils.parser.CronParser.class, parser).parse("1 0 * * tue"))));
        org.threeten.bp.ZonedDateTime date = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2016()|6", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-05-24T01:02:50Z"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2016()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-05-31T00:01:00Z")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2016()|11", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2016()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2016()|8", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecution2016()|9", org.threeten.bp.ZonedDateTime.class, date))).get()));
    }

    /**
     * Issue #112: Calling nextExecution exactly on the first instant of the fallback hour (after the DST ends) makes it go back to DST.
     * https://github.com/jmrozanec/cron-utils/issues/112
     */
    @org.junit.Test
    public void testWrongNextExecutionOnDSTEnd() throws java.lang.Exception {
        org.threeten.bp.ZoneId zone = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|0", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("America/Sao_Paulo"));
        // 2016-02-20T23:00-03:00[America/Sao_Paulo], first minute of fallback hour
        org.threeten.bp.ZonedDateTime date = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|3", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.ofInstant(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Instant>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|1", org.threeten.bp.Instant.class, org.threeten.bp.Instant.ofEpochMilli(1456020000000L)), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|2", org.threeten.bp.ZoneId.class, zone)));
        org.threeten.bp.ZonedDateTime expected = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|6", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.ofInstant(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Instant>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|4", org.threeten.bp.Instant.class, org.threeten.bp.Instant.ofEpochMilli((1456020000000L + 60000))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|5", org.threeten.bp.ZoneId.class, zone)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|9", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|8", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|7", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|12", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|11", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|10", com.cronutils.parser.CronParser.class, parser).parse("* * * * *"))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|13", org.threeten.bp.ZonedDateTime.class, expected), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|17", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|16", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|14", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testWrongNextExecutionOnDSTEnd()|15", org.threeten.bp.ZonedDateTime.class, date))).get()));
    }

    /**
     * Issue #112: Calling nextExecution on a date-time during the overlap hour of DST causes an incorrect offset
     * to be returned
     */
    @org.junit.Test
    public void testDSTOverlap() throws java.lang.Exception {
        org.threeten.bp.ZoneId zoneId = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|0", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("America/New_York"));
        // For the America/New_York time zone, DST ends (UTC-4:00 to UTC-5:00 / EDT -> EST) at 2:00 AM
        // on the these days for the years 2015-2026:
        java.util.Set<org.threeten.bp.LocalDate> dstDates = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashSet<org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|1", java.util.HashSet.class, new java.util.HashSet<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|2", java.util.Set.class, dstDates).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|4", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2015, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|3", org.threeten.bp.Month.class, org.threeten.bp.Month.NOVEMBER), 1))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|6", java.util.Set.class, dstDates).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|8", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2016, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|7", org.threeten.bp.Month.class, org.threeten.bp.Month.NOVEMBER), 6))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|10", java.util.Set.class, dstDates).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|12", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2017, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|11", org.threeten.bp.Month.class, org.threeten.bp.Month.NOVEMBER), 5))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|14", java.util.Set.class, dstDates).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|16", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2018, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|15", org.threeten.bp.Month.class, org.threeten.bp.Month.NOVEMBER), 4))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|18", java.util.Set.class, dstDates).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|20", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2019, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|19", org.threeten.bp.Month.class, org.threeten.bp.Month.NOVEMBER), 3))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|22", java.util.Set.class, dstDates).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|24", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2020, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|23", org.threeten.bp.Month.class, org.threeten.bp.Month.NOVEMBER), 1))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|26", java.util.Set.class, dstDates).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|28", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2021, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|27", org.threeten.bp.Month.class, org.threeten.bp.Month.NOVEMBER), 7))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|30", java.util.Set.class, dstDates).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|32", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2022, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|31", org.threeten.bp.Month.class, org.threeten.bp.Month.NOVEMBER), 6))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|37", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|34", java.util.Set.class, dstDates).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|36", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2023, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|35", org.threeten.bp.Month.class, org.threeten.bp.Month.NOVEMBER), 5))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|41", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|38", java.util.Set.class, dstDates).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|40", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2024, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|39", org.threeten.bp.Month.class, org.threeten.bp.Month.NOVEMBER), 3))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|45", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|42", java.util.Set.class, dstDates).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|44", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2025, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|43", org.threeten.bp.Month.class, org.threeten.bp.Month.NOVEMBER), 2))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|49", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|46", java.util.Set.class, dstDates).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|48", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2026, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|47", org.threeten.bp.Month.class, org.threeten.bp.Month.NOVEMBER), 1))));
        // Starting at 12 AM Nov. 1, 2015
        org.threeten.bp.ZonedDateTime date = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|51", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2015, 11, 1, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|50", org.threeten.bp.ZoneId.class, zoneId)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|54", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|53", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|52", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)))));
        // Scheduling pattern for 1:30 AM for the first 7 days of every November
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|57", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|56", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|55", com.cronutils.parser.CronParser.class, parser).parse("30 1 1-7 11 *"))));
        final org.threeten.bp.ZoneOffset EDT = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|58", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.ofHours((-4)));
        final org.threeten.bp.ZoneOffset EST = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|59", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.ofHours((-5)));
        for (int year = 2015; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|60", year)) <= 2026; year++) {
            boolean pastDSTEnd = false;
            int dayOfMonth = 1;
            while ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|61", dayOfMonth)) < 8) {
                org.threeten.bp.LocalDateTime expectedLocalDateTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|65", org.threeten.bp.LocalDateTime.class, org.threeten.bp.LocalDateTime.of(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|62", year), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|63", org.threeten.bp.Month.class, org.threeten.bp.Month.NOVEMBER), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|64", dayOfMonth), 1, 30));
                com.google.common.base.Optional<org.threeten.bp.ZonedDateTime> nextExecution = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|68", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|66", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|67", org.threeten.bp.ZonedDateTime.class, date)));
                assert eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|70", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|69", com.google.common.base.Optional.class, nextExecution).isPresent());
                eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|72", org.threeten.bp.ZonedDateTime.class, (date = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|71", com.google.common.base.Optional.class, nextExecution).get()));
                org.threeten.bp.ZoneOffset expectedOffset = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|76", org.threeten.bp.ZoneOffset.class, (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|73", pastDSTEnd) ? eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|74", org.threeten.bp.ZoneOffset.class, EST) : eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|75", org.threeten.bp.ZoneOffset.class, EDT)));
                if (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|82", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|77", java.util.Set.class, dstDates).contains(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|81", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|78", year), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|79", org.threeten.bp.Month.class, org.threeten.bp.Month.NOVEMBER), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|80", dayOfMonth)))))) {
                    if (!(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|83", pastDSTEnd))) {
                        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|84", // next iteration should be past the DST transition
                        (pastDSTEnd = true));
                    }else {
                        dayOfMonth++;
                    }
                }else {
                    dayOfMonth++;
                }
                org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|88", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.ofInstant(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|85", org.threeten.bp.LocalDateTime.class, expectedLocalDateTime), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|86", org.threeten.bp.ZoneOffset.class, expectedOffset), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|87", org.threeten.bp.ZoneId.class, zoneId))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTOverlap()|89", org.threeten.bp.ZonedDateTime.class, date));
            } 
        }
    }

    /**
     * Test that a cron expression that only runs at a certain time that falls inside the DST start gap
     * does not run on the DST start day. Ex. 2:15 AM is an invalid local time for the America/New_York
     * time zone on the DST start days.
     */
    @org.junit.Test
    public void testDSTGap() throws java.lang.Exception {
        org.threeten.bp.ZoneId zoneId = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|0", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("America/New_York"));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|2", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|1", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)))));
        // Run at 2:15 AM each day for March 7 to 14
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|6", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|4", com.cronutils.parser.CronParser.class, parser).parse("15 2 7-14 3 *"))));
        // Starting at 12 AM March. 7, 2015
        org.threeten.bp.ZonedDateTime date = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|8", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2015, 3, 7, 0, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|7", org.threeten.bp.ZoneId.class, zoneId)));
        // For America/New_York timezone, DST starts at 2 AM local time and moves forward 1 hour
        // DST dates for 2015-2026
        java.util.Map<java.lang.Integer, org.threeten.bp.LocalDate> dstDates = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<java.lang.Integer, org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|9", java.util.HashMap.class, new java.util.HashMap<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|13", org.threeten.bp.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.Integer, org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|10", java.util.Map.class, dstDates).put(2015, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|12", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2015, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|11", org.threeten.bp.Month.class, org.threeten.bp.Month.MARCH), 8))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|17", org.threeten.bp.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.Integer, org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|14", java.util.Map.class, dstDates).put(2016, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|16", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2016, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|15", org.threeten.bp.Month.class, org.threeten.bp.Month.MARCH), 13))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|21", org.threeten.bp.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.Integer, org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|18", java.util.Map.class, dstDates).put(2017, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|20", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2017, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|19", org.threeten.bp.Month.class, org.threeten.bp.Month.MARCH), 12))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|25", org.threeten.bp.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.Integer, org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|22", java.util.Map.class, dstDates).put(2018, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|24", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2018, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|23", org.threeten.bp.Month.class, org.threeten.bp.Month.MARCH), 11))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|29", org.threeten.bp.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.Integer, org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|26", java.util.Map.class, dstDates).put(2019, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|28", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2019, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|27", org.threeten.bp.Month.class, org.threeten.bp.Month.MARCH), 10))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|33", org.threeten.bp.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.Integer, org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|30", java.util.Map.class, dstDates).put(2020, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|32", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2020, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|31", org.threeten.bp.Month.class, org.threeten.bp.Month.MARCH), 8))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|37", org.threeten.bp.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.Integer, org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|34", java.util.Map.class, dstDates).put(2021, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|36", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2021, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|35", org.threeten.bp.Month.class, org.threeten.bp.Month.MARCH), 14))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|41", org.threeten.bp.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.Integer, org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|38", java.util.Map.class, dstDates).put(2022, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|40", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2022, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|39", org.threeten.bp.Month.class, org.threeten.bp.Month.MARCH), 13))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|45", org.threeten.bp.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.Integer, org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|42", java.util.Map.class, dstDates).put(2023, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|44", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2023, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|43", org.threeten.bp.Month.class, org.threeten.bp.Month.MARCH), 12))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|49", org.threeten.bp.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.Integer, org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|46", java.util.Map.class, dstDates).put(2024, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|48", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2024, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|47", org.threeten.bp.Month.class, org.threeten.bp.Month.MARCH), 10))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|53", org.threeten.bp.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.Integer, org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|50", java.util.Map.class, dstDates).put(2025, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|52", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2025, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|51", org.threeten.bp.Month.class, org.threeten.bp.Month.MARCH), 9))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|57", org.threeten.bp.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.Integer, org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|54", java.util.Map.class, dstDates).put(2026, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|56", org.threeten.bp.LocalDate.class, org.threeten.bp.LocalDate.of(2026, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|55", org.threeten.bp.Month.class, org.threeten.bp.Month.MARCH), 8))));
        final org.threeten.bp.ZoneOffset EDT = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|58", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.ofHours((-4)));
        final org.threeten.bp.ZoneOffset EST = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|59", org.threeten.bp.ZoneOffset.class, org.threeten.bp.ZoneOffset.ofHours((-5)));
        for (int year = 2015; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|60", year)) <= 2026; year++) {
            org.threeten.bp.LocalDate dstDateForYear = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|63", org.threeten.bp.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.Integer, org.threeten.bp.LocalDate>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|61", java.util.Map.class, dstDates).get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|62", year)));
            boolean isPastDSTStart = false;
            int dayOfMonth = 7;
            while ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|64", dayOfMonth)) < 15) {
                org.threeten.bp.LocalDateTime localDateTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|68", org.threeten.bp.LocalDateTime.class, org.threeten.bp.LocalDateTime.of(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|65", year), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Month>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|66", org.threeten.bp.Month.class, org.threeten.bp.Month.MARCH), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|67", dayOfMonth), 2, 15));
                // skip the DST start days... 2:15 AM does not exist in the local time
                if (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|72", eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|70", org.threeten.bp.LocalDate.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|69", org.threeten.bp.LocalDateTime.class, localDateTime).toLocalDate()).isEqual(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDate>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|71", org.threeten.bp.LocalDate.class, dstDateForYear)))) {
                    dayOfMonth++;
                    eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|73", (isPastDSTStart = true));
                    continue;
                }
                org.threeten.bp.ZoneOffset expectedOffset = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|77", org.threeten.bp.ZoneOffset.class, (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|74", isPastDSTStart) ? eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|75", org.threeten.bp.ZoneOffset.class, EDT) : eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|76", org.threeten.bp.ZoneOffset.class, EST)));
                org.threeten.bp.ZonedDateTime expectedDateTime = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|81", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.ofLocal(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.LocalDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|78", org.threeten.bp.LocalDateTime.class, localDateTime), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|79", org.threeten.bp.ZoneId.class, zoneId), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneOffset>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|80", org.threeten.bp.ZoneOffset.class, expectedOffset)));
                com.google.common.base.Optional<org.threeten.bp.ZonedDateTime> nextExecution = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|84", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|82", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|83", org.threeten.bp.ZonedDateTime.class, date)));
                assert eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|86", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|85", com.google.common.base.Optional.class, nextExecution).isPresent());
                eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|88", org.threeten.bp.ZonedDateTime.class, (date = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|87", com.google.common.base.Optional.class, nextExecution).get()));
                org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|89", org.threeten.bp.ZonedDateTime.class, expectedDateTime), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testDSTGap()|90", org.threeten.bp.ZonedDateTime.class, date));
                dayOfMonth++;
            } 
        }
    }

    /**
     * Issue #125: Prints stack trace for NoSuchValueException for expressions with comma-separated values
     * https://github.com/jmrozanec/cron-utils/issues/125
     */
    @org.junit.Test
    public void testNextExecutionProducesStackTraces() throws java.lang.Exception {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionProducesStackTraces()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionProducesStackTraces()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionProducesStackTraces()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)))));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionProducesStackTraces()|5", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionProducesStackTraces()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionProducesStackTraces()|3", com.cronutils.parser.CronParser.class, parser).parse("45 1,13 * * *"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionProducesStackTraces()|8", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionProducesStackTraces()|6", com.cronutils.model.time.ExecutionTime.class, executionTime).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|testNextExecutionProducesStackTraces()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2016-05-24T01:02:50Z"))));
    }

    /**
     * Issue #130: Wrong last execution time if schedule hit is less than one second ago
     * https://github.com/jmrozanec/cron-utils/issues/130
     */
    @org.junit.Test
    public void exact_hit_returns_full_interval_duration() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|exact_hit_returns_full_interval_duration()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|exact_hit_returns_full_interval_duration()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|exact_hit_returns_full_interval_duration()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)))));
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|exact_hit_returns_full_interval_duration()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|exact_hit_returns_full_interval_duration()|3", com.cronutils.parser.CronParser.class, parser).parse("0 12 * * *"));
        final org.threeten.bp.ZonedDateTime time = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|exact_hit_returns_full_interval_duration()|6", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 12, 2, 12, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|exact_hit_returns_full_interval_duration()|5", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("Europe/Vienna"))));
        final org.threeten.bp.Duration timeFromLastExecution = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|exact_hit_returns_full_interval_duration()|11", org.threeten.bp.Duration.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.Duration>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|exact_hit_returns_full_interval_duration()|10", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|exact_hit_returns_full_interval_duration()|8", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|exact_hit_returns_full_interval_duration()|7", com.cronutils.model.Cron.class, cron))).timeFromLastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|exact_hit_returns_full_interval_duration()|9", org.threeten.bp.ZonedDateTime.class, time))).get());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|exact_hit_returns_full_interval_duration()|12", org.threeten.bp.Duration.class, timeFromLastExecution), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|exact_hit_returns_full_interval_duration()|13", org.threeten.bp.Duration.class, org.threeten.bp.Duration.ofHours(24)));
    }

    /**
     * Issue #130: Wrong last execution time if schedule hit is less than one second ago
     * https://github.com/jmrozanec/cron-utils/issues/130
     */
    @org.junit.Test
    public void fuzzy_hit_returns_very_small_interval_duration() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)))));
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|3", com.cronutils.parser.CronParser.class, parser).parse("0 12 * * *"));
        org.threeten.bp.ZonedDateTime time = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|6", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(2016, 12, 2, 12, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|5", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.of("Europe/Vienna"))));
        org.threeten.bp.Duration diff = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|7", org.threeten.bp.Duration.class, org.threeten.bp.Duration.ofMillis(300));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|10", org.threeten.bp.ZonedDateTime.class, (time = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|8", org.threeten.bp.ZonedDateTime.class, time).plus(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|9", org.threeten.bp.Duration.class, diff))));
        final org.threeten.bp.Duration timeFromLastExecution = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|15", org.threeten.bp.Duration.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.Duration>>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|14", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|12", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|11", com.cronutils.model.Cron.class, cron))).timeFromLastExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|13", org.threeten.bp.ZonedDateTime.class, time))).get());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|16", org.threeten.bp.Duration.class, timeFromLastExecution), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|19", org.threeten.bp.Duration.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|17", org.threeten.bp.Duration.class, org.threeten.bp.Duration.ofDays(1)).plus(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.Duration>observeState("com.cronutils.model.time.generator.ExecutionTimeUnixIntegrationTest|fuzzy_hit_returns_very_small_interval_duration()|18", org.threeten.bp.Duration.class, diff))));
    }
}

