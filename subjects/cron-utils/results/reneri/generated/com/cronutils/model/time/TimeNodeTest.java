package com.cronutils.model.time;


/* Copyright 2015 jmrozanec
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
public class TimeNodeTest {
    private static final int LIST_START_VALUE = 2;

    private static final int LIST_MEDIUM_VALUE = 4;

    private static final int LIST_END_VALUE = 6;

    private static final int LOW_INTERMEDIATE_VALUE = 1;

    private static final int HIGH_INTERMEDIATE_VALUE = 5;

    private java.util.List<java.lang.Integer> values;

    private com.cronutils.model.time.TimeNode timeNode;

    @org.junit.Before
    public void setUp() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|setUp()|0", java.util.List.class, (values = com.google.common.collect.Lists.newArrayList()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|setUp()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|setUp()|1", java.util.List.class, values).add(com.cronutils.model.time.TimeNodeTest.LIST_START_VALUE));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|setUp()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|setUp()|3", java.util.List.class, values).add(com.cronutils.model.time.TimeNodeTest.LIST_MEDIUM_VALUE));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|setUp()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|setUp()|5", java.util.List.class, values).add(com.cronutils.model.time.TimeNodeTest.LIST_END_VALUE));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|setUp()|8", com.cronutils.model.time.TimeNode.class, (this.timeNode = new com.cronutils.model.time.TimeNode(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|setUp()|7", java.util.List.class, values))));
    }

    @org.junit.Test
    public void testGetNextValue() throws java.lang.Exception {
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_START_VALUE, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetNextValue()|1", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetNextValue()|0", com.cronutils.model.time.TimeNode.class, timeNode).getNextValue(com.cronutils.model.time.TimeNodeTest.LIST_START_VALUE, 0)));
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_MEDIUM_VALUE, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetNextValue()|3", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetNextValue()|2", com.cronutils.model.time.TimeNode.class, timeNode).getNextValue(com.cronutils.model.time.TimeNodeTest.LIST_MEDIUM_VALUE, 0)));
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_END_VALUE, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetNextValue()|5", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetNextValue()|4", com.cronutils.model.time.TimeNode.class, timeNode).getNextValue(com.cronutils.model.time.TimeNodeTest.LIST_END_VALUE, 0)));
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_MEDIUM_VALUE, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetNextValue()|7", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetNextValue()|6", com.cronutils.model.time.TimeNode.class, timeNode).getNextValue(com.cronutils.model.time.TimeNodeTest.LIST_START_VALUE, 1)));
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_END_VALUE, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetNextValue()|9", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetNextValue()|8", com.cronutils.model.time.TimeNode.class, timeNode).getNextValue(com.cronutils.model.time.TimeNodeTest.LIST_MEDIUM_VALUE, 1)));
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_START_VALUE, 1, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetNextValue()|11", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetNextValue()|10", com.cronutils.model.time.TimeNode.class, timeNode).getNextValue(com.cronutils.model.time.TimeNodeTest.LIST_END_VALUE, 1)));
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_START_VALUE, 1, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetNextValue()|13", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetNextValue()|12", com.cronutils.model.time.TimeNode.class, timeNode).getNextValue(com.cronutils.model.time.TimeNodeTest.LIST_MEDIUM_VALUE, 2)));
    }

    @org.junit.Test
    public void testGetValues() throws java.lang.Exception {
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|testGetValues()|0", java.util.List.class, values), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|testGetValues()|2", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetValues()|1", com.cronutils.model.time.TimeNode.class, timeNode).getValues()));
    }

    @org.junit.Test
    public void testGetPreviousValue() throws java.lang.Exception {
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_START_VALUE, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|1", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|0", com.cronutils.model.time.TimeNode.class, timeNode).getPreviousValue(com.cronutils.model.time.TimeNodeTest.LIST_START_VALUE, 0)));
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_MEDIUM_VALUE, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|3", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|2", com.cronutils.model.time.TimeNode.class, timeNode).getPreviousValue(com.cronutils.model.time.TimeNodeTest.LIST_MEDIUM_VALUE, 0)));
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_END_VALUE, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|5", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|4", com.cronutils.model.time.TimeNode.class, timeNode).getPreviousValue(com.cronutils.model.time.TimeNodeTest.LIST_END_VALUE, 0)));
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_END_VALUE, 1, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|7", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|6", com.cronutils.model.time.TimeNode.class, timeNode).getPreviousValue(com.cronutils.model.time.TimeNodeTest.LIST_START_VALUE, 1)));
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_START_VALUE, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|9", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|8", com.cronutils.model.time.TimeNode.class, timeNode).getPreviousValue(com.cronutils.model.time.TimeNodeTest.LIST_MEDIUM_VALUE, 1)));
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_MEDIUM_VALUE, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|11", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|10", com.cronutils.model.time.TimeNode.class, timeNode).getPreviousValue(com.cronutils.model.time.TimeNodeTest.LIST_END_VALUE, 1)));
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_END_VALUE, 1, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|13", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|12", com.cronutils.model.time.TimeNode.class, timeNode).getPreviousValue(com.cronutils.model.time.TimeNodeTest.LIST_MEDIUM_VALUE, 2)));
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_MEDIUM_VALUE, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|15", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|14", com.cronutils.model.time.TimeNode.class, timeNode).getPreviousValue(com.cronutils.model.time.TimeNodeTest.HIGH_INTERMEDIATE_VALUE, 1)));
        assertResult(com.cronutils.model.time.TimeNodeTest.LIST_END_VALUE, 1, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|17", com.cronutils.model.time.NearestValue.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetPreviousValue()|16", com.cronutils.model.time.TimeNode.class, timeNode).getPreviousValue(com.cronutils.model.time.TimeNodeTest.LOW_INTERMEDIATE_VALUE, 0)));
    }

    @org.junit.Test
    public void testGetValueFromListWhereIndexLessThanZero() {
        int index = -1;
        int expectedShifts = 1;
        java.util.concurrent.atomic.AtomicInteger shift = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.atomic.AtomicInteger>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|0", java.util.concurrent.atomic.AtomicInteger.class, new java.util.concurrent.atomic.AtomicInteger(0));
        java.util.List<java.lang.Integer> list = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|1", java.util.ArrayList.class, com.google.common.collect.Lists.newArrayList(1, 2, 3, 4));
        int value = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|2", com.cronutils.model.time.TimeNode.class, timeNode).getValueFromList(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|3", java.util.List.class, list), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|4", index), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.atomic.AtomicInteger>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|5", java.util.concurrent.atomic.AtomicInteger.class, shift)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|10", java.lang.String.format("Shift was: %s; expected: %s", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.atomic.AtomicInteger>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|7", java.util.concurrent.atomic.AtomicInteger.class, shift).get()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|9", expectedShifts))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|11", expectedShifts), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.atomic.AtomicInteger>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|12", java.util.concurrent.atomic.AtomicInteger.class, shift).get()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|18", ((int) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|14", java.util.List.class, list).get(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|15", java.util.List.class, list).size())) + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|17", index))))))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexLessThanZero()|19", value));
    }

    @org.junit.Test
    public void testGetValueFromListWhereIndexMoreThanZero() {
        int index = 1;
        int expectedShifts = 0;
        java.util.concurrent.atomic.AtomicInteger shift = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.atomic.AtomicInteger>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|0", java.util.concurrent.atomic.AtomicInteger.class, new java.util.concurrent.atomic.AtomicInteger(0));
        java.util.List<java.lang.Integer> list = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|1", java.util.ArrayList.class, com.google.common.collect.Lists.newArrayList(1, 2, 3, 4));
        int value = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|2", com.cronutils.model.time.TimeNode.class, timeNode).getValueFromList(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|3", java.util.List.class, list), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|4", index), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.atomic.AtomicInteger>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|5", java.util.concurrent.atomic.AtomicInteger.class, shift)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|10", java.lang.String.format("Shift was: %s; expected: %s", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.atomic.AtomicInteger>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|7", java.util.concurrent.atomic.AtomicInteger.class, shift).get()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|9", expectedShifts))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|11", expectedShifts), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.atomic.AtomicInteger>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|12", java.util.concurrent.atomic.AtomicInteger.class, shift).get()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|16", ((int) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|14", java.util.List.class, list).get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|15", index))))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWhereIndexMoreThanZero()|17", value));
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testGetValueFromListWithEmptyList() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWithEmptyList()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.TimeNode>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWithEmptyList()|0", com.cronutils.model.time.TimeNode.class, timeNode).getValueFromList(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<java.lang.Integer>>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWithEmptyList()|1", java.util.ArrayList.class, com.google.common.collect.Lists.<java.lang.Integer>newArrayList()), 0, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.atomic.AtomicInteger>observeState("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWithEmptyList()|2", java.util.concurrent.atomic.AtomicInteger.class, new java.util.concurrent.atomic.AtomicInteger(0))));
        } catch (java.lang.IllegalArgumentException a1552674205763) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.model.time.TimeNodeTest|testGetValueFromListWithEmptyList()|!", a1552674205763);
            throw a1552674205763;
        }
    }

    private void assertResult(int value, int shift, com.cronutils.model.time.NearestValue nearestValue) {
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|assertResult(int,int,com.cronutils.model.time.NearestValue)|3", java.lang.String.format("Values do not match! Expected: %s Found: %s", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|assertResult(int,int,com.cronutils.model.time.NearestValue)|0", value), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|assertResult(int,int,com.cronutils.model.time.NearestValue)|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|assertResult(int,int,com.cronutils.model.time.NearestValue)|1", com.cronutils.model.time.NearestValue.class, nearestValue).getValue()))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|assertResult(int,int,com.cronutils.model.time.NearestValue)|4", value), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|assertResult(int,int,com.cronutils.model.time.NearestValue)|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|assertResult(int,int,com.cronutils.model.time.NearestValue)|5", com.cronutils.model.time.NearestValue.class, nearestValue).getValue()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|assertResult(int,int,com.cronutils.model.time.NearestValue)|10", java.lang.String.format("Shifts do not match! Expected: %s Found: %s", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|assertResult(int,int,com.cronutils.model.time.NearestValue)|7", shift), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|assertResult(int,int,com.cronutils.model.time.NearestValue)|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|assertResult(int,int,com.cronutils.model.time.NearestValue)|8", com.cronutils.model.time.NearestValue.class, nearestValue).getShifts()))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|assertResult(int,int,com.cronutils.model.time.NearestValue)|11", shift), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.model.time.TimeNodeTest|assertResult(int,int,com.cronutils.model.time.NearestValue)|13", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.NearestValue>observeState("com.cronutils.model.time.TimeNodeTest|assertResult(int,int,com.cronutils.model.time.NearestValue)|12", com.cronutils.model.time.NearestValue.class, nearestValue).getShifts()));
    }
}

