package com.cronutils;


/**
 * Created by johnpatrick.manalo on 6/19/17.
 */
public class Issue200Test {
    @org.junit.Test
    public void testMustMatchCronEvenIfNanoSecondsVaries() {
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue200Test|testMustMatchCronEvenIfNanoSecondsVaries()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.Issue200Test|testMustMatchCronEvenIfNanoSecondsVaries()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue200Test|testMustMatchCronEvenIfNanoSecondsVaries()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue200Test|testMustMatchCronEvenIfNanoSecondsVaries()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        com.cronutils.model.Cron quartzCron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue200Test|testMustMatchCronEvenIfNanoSecondsVaries()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue200Test|testMustMatchCronEvenIfNanoSecondsVaries()|4", com.cronutils.parser.CronParser.class, parser).parse("00 00 10 * * ?"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue200Test|testMustMatchCronEvenIfNanoSecondsVaries()|7", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue200Test|testMustMatchCronEvenIfNanoSecondsVaries()|6", com.cronutils.model.Cron.class, quartzCron).validate());
        // NOTE: Off by 3 nano seconds
        org.threeten.bp.ZonedDateTime zdt = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue200Test|testMustMatchCronEvenIfNanoSecondsVaries()|9", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(1999, 7, 18, 10, 0, 0, 3, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.Issue200Test|testMustMatchCronEvenIfNanoSecondsVaries()|8", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.systemDefault())));
        // Must be true
        org.junit.Assert.assertTrue("Nano seconds must not affect matching of Cron Expressions", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.Issue200Test|testMustMatchCronEvenIfNanoSecondsVaries()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.Issue200Test|testMustMatchCronEvenIfNanoSecondsVaries()|11", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue200Test|testMustMatchCronEvenIfNanoSecondsVaries()|10", com.cronutils.model.Cron.class, quartzCron))).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue200Test|testMustMatchCronEvenIfNanoSecondsVaries()|12", org.threeten.bp.ZonedDateTime.class, zdt))));
    }

    // Nano second-perfect (passes, no surprises here)
    @org.junit.Test
    public void testMatchExact() {
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue200Test|testMatchExact()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.Issue200Test|testMatchExact()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue200Test|testMatchExact()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue200Test|testMatchExact()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        com.cronutils.model.Cron quartzCron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue200Test|testMatchExact()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue200Test|testMatchExact()|4", com.cronutils.parser.CronParser.class, parser).parse("00 00 10 * * ?"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue200Test|testMatchExact()|7", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue200Test|testMatchExact()|6", com.cronutils.model.Cron.class, quartzCron).validate());
        org.threeten.bp.ZonedDateTime zdt = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue200Test|testMatchExact()|9", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.of(1999, 7, 18, 10, 0, 0, 0, eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZoneId>observeState("com.cronutils.Issue200Test|testMatchExact()|8", org.threeten.bp.ZoneId.class, org.threeten.bp.ZoneId.systemDefault())));
        org.junit.Assert.assertTrue("Nano seconds must not affect matching of Cron Expressions", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.Issue200Test|testMatchExact()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.Issue200Test|testMatchExact()|11", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue200Test|testMatchExact()|10", com.cronutils.model.Cron.class, quartzCron))).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue200Test|testMatchExact()|12", org.threeten.bp.ZonedDateTime.class, zdt))));
    }
}

