package com.cronutils.parser;


/* Copyright 2015 jmrozanec
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
public class CronParserTest {
    @org.junit.Rule
    public org.junit.rules.ExpectedException expectedException = org.junit.rules.ExpectedException.none();

    @org.mockito.Mock
    private com.cronutils.model.definition.CronDefinition definition;

    private com.cronutils.parser.CronParser parser;

    @org.junit.Before
    public void setUp() throws java.lang.Exception {
        org.mockito.MockitoAnnotations.initMocks(this);
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testParseEmptyExpression() throws java.lang.Exception {
        try {
            java.util.Set<com.cronutils.model.field.definition.FieldDefinition> set = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashSet<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testParseEmptyExpression()|0", java.util.HashSet.class, com.google.common.collect.Sets.newHashSet());
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>>observeState("com.cronutils.parser.CronParserTest|testParseEmptyExpression()|5", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>>observeState("com.cronutils.parser.CronParserTest|testParseEmptyExpression()|3", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testParseEmptyExpression()|2", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testParseEmptyExpression()|1", com.cronutils.model.definition.CronDefinition.class, definition).getFieldDefinitions()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testParseEmptyExpression()|4", java.util.Set.class, set)));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testParseEmptyExpression()|7", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testParseEmptyExpression()|6", com.cronutils.model.definition.CronDefinition.class, definition))));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.parser.CronParserTest|testParseEmptyExpression()|9", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testParseEmptyExpression()|8", com.cronutils.parser.CronParser.class, parser).parse(""));
        } catch (java.lang.IllegalArgumentException a1552674205803) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.parser.CronParserTest|testParseEmptyExpression()|!", a1552674205803);
            throw a1552674205803;
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testParseNoMatchingExpression() throws java.lang.Exception {
        try {
            java.util.Set<com.cronutils.model.field.definition.FieldDefinition> set = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashSet<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|0", java.util.HashSet.class, com.google.common.collect.Sets.newHashSet());
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|1", java.util.Set.class, set).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|5", com.cronutils.model.field.definition.FieldDefinition.class, new com.cronutils.model.field.definition.FieldDefinition(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|2", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.SECOND), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|4", com.cronutils.model.field.constraint.FieldConstraints.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraintsBuilder>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|3", com.cronutils.model.field.constraint.FieldConstraintsBuilder.class, com.cronutils.model.field.constraint.FieldConstraintsBuilder.instance()).createConstraintsInstance())))));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|11", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|9", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|8", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|7", com.cronutils.model.definition.CronDefinition.class, definition).getFieldDefinitions()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|10", java.util.Set.class, set)));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|13", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|12", com.cronutils.model.definition.CronDefinition.class, definition))));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|15", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|14", com.cronutils.parser.CronParser.class, parser).parse("* *"));
        } catch (java.lang.IllegalArgumentException a1552674205807) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.parser.CronParserTest|testParseNoMatchingExpression()|!", a1552674205807);
            throw a1552674205807;
        }
    }

    @org.junit.Test
    public void testParseIncompleteEvery() throws java.lang.Exception {
        java.util.Set<com.cronutils.model.field.definition.FieldDefinition> set = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashSet<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|0", java.util.HashSet.class, com.google.common.collect.Sets.newHashSet());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|1", java.util.Set.class, set).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|5", com.cronutils.model.field.definition.FieldDefinition.class, new com.cronutils.model.field.definition.FieldDefinition(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|2", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.SECOND), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|4", com.cronutils.model.field.constraint.FieldConstraints.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraintsBuilder>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|3", com.cronutils.model.field.constraint.FieldConstraintsBuilder.class, com.cronutils.model.field.constraint.FieldConstraintsBuilder.instance()).createConstraintsInstance())))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|11", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|9", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|8", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|7", com.cronutils.model.definition.CronDefinition.class, definition).getFieldDefinitions()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|10", java.util.Set.class, set)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|13", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|12", com.cronutils.model.definition.CronDefinition.class, definition))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.junit.rules.ExpectedException>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|14", org.junit.rules.ExpectedException.class, expectedException).expect(java.lang.IllegalArgumentException.class);
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.junit.rules.ExpectedException>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|15", org.junit.rules.ExpectedException.class, expectedException).expectMessage("Missing steps for expression: */");
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|17", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testParseIncompleteEvery()|16", com.cronutils.parser.CronParser.class, parser).parse("*/")));
    }

    /**
     * Corresponds to issue#11
     * https://github.com/jmrozanec/cron-utils/issues/11
     * Reported case:
     * when parsing: "* *[triple space here]* * ?"
     * we receive: NumberFormatException with message For input string: ""
     * Expected: ignore multiple spaces, and parse the expression.
     */
    @org.junit.Test
    public void testMultipleSpacesDoNotHurtParsingExpression() throws java.lang.Exception {
        com.cronutils.model.field.definition.FieldDefinition minute = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|3", com.cronutils.model.field.definition.FieldDefinition.class, new com.cronutils.model.field.definition.FieldDefinition(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|0", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.MINUTE), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|2", com.cronutils.model.field.constraint.FieldConstraints.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraintsBuilder>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|1", com.cronutils.model.field.constraint.FieldConstraintsBuilder.class, com.cronutils.model.field.constraint.FieldConstraintsBuilder.instance()).createConstraintsInstance())));
        com.cronutils.model.field.definition.FieldDefinition hour = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|7", com.cronutils.model.field.definition.FieldDefinition.class, new com.cronutils.model.field.definition.FieldDefinition(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|4", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.HOUR), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|6", com.cronutils.model.field.constraint.FieldConstraints.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraintsBuilder>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|5", com.cronutils.model.field.constraint.FieldConstraintsBuilder.class, com.cronutils.model.field.constraint.FieldConstraintsBuilder.instance()).createConstraintsInstance())));
        com.cronutils.model.field.definition.FieldDefinition dom = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|11", com.cronutils.model.field.definition.FieldDefinition.class, new com.cronutils.model.field.definition.FieldDefinition(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|8", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.DAY_OF_MONTH), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|10", com.cronutils.model.field.constraint.FieldConstraints.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraintsBuilder>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|9", com.cronutils.model.field.constraint.FieldConstraintsBuilder.class, com.cronutils.model.field.constraint.FieldConstraintsBuilder.instance()).createConstraintsInstance())));
        com.cronutils.model.field.definition.FieldDefinition month = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|15", com.cronutils.model.field.definition.FieldDefinition.class, new com.cronutils.model.field.definition.FieldDefinition(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|12", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.MONTH), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|14", com.cronutils.model.field.constraint.FieldConstraints.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraintsBuilder>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|13", com.cronutils.model.field.constraint.FieldConstraintsBuilder.class, com.cronutils.model.field.constraint.FieldConstraintsBuilder.instance()).createConstraintsInstance())));
        com.cronutils.model.field.definition.FieldDefinition dow = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|19", com.cronutils.model.field.definition.FieldDefinition.class, new com.cronutils.model.field.definition.FieldDefinition(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|16", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.DAY_OF_WEEK), eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraints>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|18", com.cronutils.model.field.constraint.FieldConstraints.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.constraint.FieldConstraintsBuilder>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|17", com.cronutils.model.field.constraint.FieldConstraintsBuilder.class, com.cronutils.model.field.constraint.FieldConstraintsBuilder.instance()).createConstraintsInstance())));
        java.util.Set<com.cronutils.model.field.definition.FieldDefinition> set = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashSet<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|20", java.util.HashSet.class, com.google.common.collect.Sets.newHashSet());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|21", java.util.Set.class, set).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|22", com.cronutils.model.field.definition.FieldDefinition.class, minute)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|24", java.util.Set.class, set).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|25", com.cronutils.model.field.definition.FieldDefinition.class, hour)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|27", java.util.Set.class, set).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|28", com.cronutils.model.field.definition.FieldDefinition.class, dom)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|32", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|30", java.util.Set.class, set).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|31", com.cronutils.model.field.definition.FieldDefinition.class, month)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|33", java.util.Set.class, set).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|34", com.cronutils.model.field.definition.FieldDefinition.class, dow)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|40", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|38", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|37", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|36", com.cronutils.model.definition.CronDefinition.class, definition).getFieldDefinitions()))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|39", java.util.Set.class, set)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|46", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|44", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|43", com.cronutils.model.field.definition.FieldDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|41", com.cronutils.model.definition.CronDefinition.class, definition).getFieldDefinition(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|42", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.MINUTE))))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|45", com.cronutils.model.field.definition.FieldDefinition.class, minute)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|52", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|50", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|49", com.cronutils.model.field.definition.FieldDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|47", com.cronutils.model.definition.CronDefinition.class, definition).getFieldDefinition(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|48", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.HOUR))))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|51", com.cronutils.model.field.definition.FieldDefinition.class, hour)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|58", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|56", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|55", com.cronutils.model.field.definition.FieldDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|53", com.cronutils.model.definition.CronDefinition.class, definition).getFieldDefinition(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|54", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.DAY_OF_MONTH))))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|57", com.cronutils.model.field.definition.FieldDefinition.class, dom)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|64", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|62", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|61", com.cronutils.model.field.definition.FieldDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|59", com.cronutils.model.definition.CronDefinition.class, definition).getFieldDefinition(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|60", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.MONTH))))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|63", com.cronutils.model.field.definition.FieldDefinition.class, month)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|70", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<com.cronutils.model.field.definition.FieldDefinition>>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|68", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|67", com.cronutils.model.field.definition.FieldDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|65", com.cronutils.model.definition.CronDefinition.class, definition).getFieldDefinition(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.CronFieldName>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|66", com.cronutils.model.field.CronFieldName.class, com.cronutils.model.field.CronFieldName.DAY_OF_WEEK))))).thenReturn(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|69", com.cronutils.model.field.definition.FieldDefinition.class, dow)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|72", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|71", com.cronutils.model.definition.CronDefinition.class, definition))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|74", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testMultipleSpacesDoNotHurtParsingExpression()|73", com.cronutils.parser.CronParser.class, parser).parse("* *   * * *"));
    }

    /**
     * Corresponds to issue#148
     * https://github.com/jmrozanec/cron-utils/issues/148
     */
    @org.junit.Test
    public void testParseEveryXyears() {
        com.cronutils.model.definition.CronDefinition quartzDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testParseEveryXyears()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.parser.CronParserTest|testParseEveryXyears()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testParseEveryXyears()|3", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testParseEveryXyears()|2", com.cronutils.model.definition.CronDefinition.class, quartzDefinition))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.parser.CronParserTest|testParseEveryXyears()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testParseEveryXyears()|4", com.cronutils.parser.CronParser.class, parser).parse("0/59 0/59 0/23 1/30 1/11 ? 2017/3"));
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testRejectionOfZeroPeriod() {
        try {
            com.cronutils.model.definition.CronDefinition quartzDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testRejectionOfZeroPeriod()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.parser.CronParserTest|testRejectionOfZeroPeriod()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testRejectionOfZeroPeriod()|3", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testRejectionOfZeroPeriod()|2", com.cronutils.model.definition.CronDefinition.class, quartzDefinition))));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.parser.CronParserTest|testRejectionOfZeroPeriod()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testRejectionOfZeroPeriod()|4", com.cronutils.parser.CronParser.class, parser).parse("0/0 0 0 1 1 ? 2017/3"));
        } catch (java.lang.IllegalArgumentException a1552674205808) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.parser.CronParserTest|testRejectionOfZeroPeriod()|!", a1552674205808);
            throw a1552674205808;
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testRejectionOfPeriodUpperLimitExceedance() {
        try {
            com.cronutils.model.definition.CronDefinition quartzDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testRejectionOfPeriodUpperLimitExceedance()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.parser.CronParserTest|testRejectionOfPeriodUpperLimitExceedance()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testRejectionOfPeriodUpperLimitExceedance()|3", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testRejectionOfPeriodUpperLimitExceedance()|2", com.cronutils.model.definition.CronDefinition.class, quartzDefinition))));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.parser.CronParserTest|testRejectionOfPeriodUpperLimitExceedance()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testRejectionOfPeriodUpperLimitExceedance()|4", com.cronutils.parser.CronParser.class, parser).parse("0/60 0 0 1 1 ? 2017/3"));
        } catch (java.lang.IllegalArgumentException a1552674205808) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.cronutils.parser.CronParserTest|testRejectionOfPeriodUpperLimitExceedance()|!", a1552674205808);
            throw a1552674205808;
        }
    }

    @org.junit.Test
    public void testParseExtendedQuartzCron() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testParseExtendedQuartzCron()|1", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testParseExtendedQuartzCron()|0", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.TestCronDefinitionsFactory.withDayOfYearDefinitionWhereYearAndDoYOptionals()))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.parser.CronParserTest|testParseExtendedQuartzCron()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testParseExtendedQuartzCron()|2", com.cronutils.parser.CronParser.class, parser).parse("0 0 0 ? * ? 2017 1/14"));
    }

    /**
     * Corresponds to issue#185
     * https://github.com/jmrozanec/cron-utils/issues/185
     */
    @org.junit.Test
    public void testNoRejectionTwoOptionalFields() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testNoRejectionTwoOptionalFields()|1", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testNoRejectionTwoOptionalFields()|0", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.TestCronDefinitionsFactory.withDayOfYearDefinitionWhereYearAndDoYOptionals()))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.parser.CronParserTest|testNoRejectionTwoOptionalFields()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testNoRejectionTwoOptionalFields()|2", com.cronutils.parser.CronParser.class, parser).parse("0 0 0 ? * ? 2017 1/14"));
    }

    // issue #180
    @org.junit.Test
    public void testThatEveryMinuteIsPreserved() {
        com.cronutils.model.definition.CronDefinition quartzDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testThatEveryMinuteIsPreserved()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.parser.CronParserTest|testThatEveryMinuteIsPreserved()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testThatEveryMinuteIsPreserved()|3", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testThatEveryMinuteIsPreserved()|2", com.cronutils.model.definition.CronDefinition.class, quartzDefinition))));
        com.cronutils.model.Cron expression = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.parser.CronParserTest|testThatEveryMinuteIsPreserved()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testThatEveryMinuteIsPreserved()|4", com.cronutils.parser.CronParser.class, parser).parse("0 0/1 * 1/1 * ? *"));
        org.junit.Assert.assertEquals("0 0/1 * 1/1 * ? *", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.parser.CronParserTest|testThatEveryMinuteIsPreserved()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.parser.CronParserTest|testThatEveryMinuteIsPreserved()|6", com.cronutils.model.Cron.class, expression).asString()));
    }

    @org.junit.Test
    public void testParseExtendedQuartzCronWithAsterixDoY() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testParseExtendedQuartzCronWithAsterixDoY()|1", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testParseExtendedQuartzCronWithAsterixDoY()|0", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.TestCronDefinitionsFactory.withDayOfYearDefinitionWhereYearAndDoYOptionals()))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.parser.CronParserTest|testParseExtendedQuartzCronWithAsterixDoY()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testParseExtendedQuartzCronWithAsterixDoY()|2", com.cronutils.parser.CronParser.class, parser).parse("0 0 0 ? * ? 2017 *")// i.e. same as "0 0 0 * * ? 2017" or "0 0 0 ? * * 2017"
        );
    }

    @org.junit.Test
    public void testParseExtendedQuartzCronWithQuestionMarkDoY() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testParseExtendedQuartzCronWithQuestionMarkDoY()|1", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.parser.CronParserTest|testParseExtendedQuartzCronWithQuestionMarkDoY()|0", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.TestCronDefinitionsFactory.withDayOfYearDefinitionWhereYearAndDoYOptionals()))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.parser.CronParserTest|testParseExtendedQuartzCronWithQuestionMarkDoY()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.parser.CronParserTest|testParseExtendedQuartzCronWithQuestionMarkDoY()|2", com.cronutils.parser.CronParser.class, parser).parse("0 0 0 1 * ? 2017 ?")// i.e. same as "0 0 0 1 * ? 2017" with question mark being omitted
        );
    }
}

