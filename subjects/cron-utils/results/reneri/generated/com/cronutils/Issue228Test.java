package com.cronutils;


public class Issue228Test {
    /**
     * This is the UNIX cron definition with a single modification to match both Day Of Week and Day Of Month
     */
    private com.cronutils.model.definition.CronDefinition cronDefinition = // the regular UNIX cron definition permits matching either DoW or DoM
    com.cronutils.model.definition.CronDefinitionBuilder.defineCron().withMinutes().and().withHours().and().withDayOfMonth().and().withMonth().and().withDayOfWeek().withValidRange(0, 7).withMondayDoWValue(1).withIntMapping(7, 0).and().enforceStrictRanges().matchDayOfWeekAndDayOfMonth().instance();

    @org.junit.Test
    public void testFirstMondayOfTheMonthNextExecution() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue228Test|testFirstMondayOfTheMonthNextExecution()|1", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue228Test|testFirstMondayOfTheMonthNextExecution()|0", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        // This is 9am on a day between the 1st and 7th which is a Monday (in this case it should be Oct 2
        com.cronutils.model.Cron myCron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue228Test|testFirstMondayOfTheMonthNextExecution()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue228Test|testFirstMondayOfTheMonthNextExecution()|2", com.cronutils.parser.CronParser.class, parser).parse("0 9 1-7 * 1"));
        org.threeten.bp.ZonedDateTime time = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testFirstMondayOfTheMonthNextExecution()|4", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2017-09-29T14:46:01.166-07:00"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testFirstMondayOfTheMonthNextExecution()|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2017-10-02T09:00-07:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testFirstMondayOfTheMonthNextExecution()|10", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.Issue228Test|testFirstMondayOfTheMonthNextExecution()|9", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.Issue228Test|testFirstMondayOfTheMonthNextExecution()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue228Test|testFirstMondayOfTheMonthNextExecution()|6", com.cronutils.model.Cron.class, myCron))).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testFirstMondayOfTheMonthNextExecution()|8", org.threeten.bp.ZonedDateTime.class, time))).get()));
    }

    @org.junit.Test
    public void testEveryWeekdayFirstWeekOfMonthNextExecution() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue228Test|testEveryWeekdayFirstWeekOfMonthNextExecution()|1", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue228Test|testEveryWeekdayFirstWeekOfMonthNextExecution()|0", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        // This is 9am on Mon-Fri day between the 1st and 7th (in this case it should be Oct 2)
        com.cronutils.model.Cron myCron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue228Test|testEveryWeekdayFirstWeekOfMonthNextExecution()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue228Test|testEveryWeekdayFirstWeekOfMonthNextExecution()|2", com.cronutils.parser.CronParser.class, parser).parse("0 9 1-7 * 1-5"));
        org.threeten.bp.ZonedDateTime time = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekdayFirstWeekOfMonthNextExecution()|4", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2017-09-29T14:46:01.166-07:00"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekdayFirstWeekOfMonthNextExecution()|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2017-10-02T09:00-07:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekdayFirstWeekOfMonthNextExecution()|10", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.Issue228Test|testEveryWeekdayFirstWeekOfMonthNextExecution()|9", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.Issue228Test|testEveryWeekdayFirstWeekOfMonthNextExecution()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue228Test|testEveryWeekdayFirstWeekOfMonthNextExecution()|6", com.cronutils.model.Cron.class, myCron))).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekdayFirstWeekOfMonthNextExecution()|8", org.threeten.bp.ZonedDateTime.class, time))).get()));
    }

    @org.junit.Test
    public void testEveryWeekendFirstWeekOfMonthNextExecution() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue228Test|testEveryWeekendFirstWeekOfMonthNextExecution()|1", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue228Test|testEveryWeekendFirstWeekOfMonthNextExecution()|0", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        // This is 9am on Sat and Sun day between the 1st and 7th (in this case it should be Oct 1)
        com.cronutils.model.Cron myCron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue228Test|testEveryWeekendFirstWeekOfMonthNextExecution()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue228Test|testEveryWeekendFirstWeekOfMonthNextExecution()|2", com.cronutils.parser.CronParser.class, parser).parse("0 9 1-7 * 6-7"));
        org.threeten.bp.ZonedDateTime time = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekendFirstWeekOfMonthNextExecution()|4", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2017-09-29T14:46:01.166-07:00"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekendFirstWeekOfMonthNextExecution()|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2017-10-01T09:00-07:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekendFirstWeekOfMonthNextExecution()|10", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.Issue228Test|testEveryWeekendFirstWeekOfMonthNextExecution()|9", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.Issue228Test|testEveryWeekendFirstWeekOfMonthNextExecution()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue228Test|testEveryWeekendFirstWeekOfMonthNextExecution()|6", com.cronutils.model.Cron.class, myCron))).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekendFirstWeekOfMonthNextExecution()|8", org.threeten.bp.ZonedDateTime.class, time))).get()));
    }

    @org.junit.Test
    public void testEveryWeekdaySecondWeekOfMonthNextExecution() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue228Test|testEveryWeekdaySecondWeekOfMonthNextExecution()|1", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue228Test|testEveryWeekdaySecondWeekOfMonthNextExecution()|0", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        // This is 9am on Mon-Fri day between the 8th and 14th (in this case it should be Oct 9 Mon)
        com.cronutils.model.Cron myCron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue228Test|testEveryWeekdaySecondWeekOfMonthNextExecution()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue228Test|testEveryWeekdaySecondWeekOfMonthNextExecution()|2", com.cronutils.parser.CronParser.class, parser).parse("0 9 8-14 * 1-5"));
        org.threeten.bp.ZonedDateTime time = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekdaySecondWeekOfMonthNextExecution()|4", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2017-09-29T14:46:01.166-07:00"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekdaySecondWeekOfMonthNextExecution()|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2017-10-09T09:00-07:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekdaySecondWeekOfMonthNextExecution()|10", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.Issue228Test|testEveryWeekdaySecondWeekOfMonthNextExecution()|9", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.Issue228Test|testEveryWeekdaySecondWeekOfMonthNextExecution()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue228Test|testEveryWeekdaySecondWeekOfMonthNextExecution()|6", com.cronutils.model.Cron.class, myCron))).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekdaySecondWeekOfMonthNextExecution()|8", org.threeten.bp.ZonedDateTime.class, time))).get()));
    }

    @org.junit.Test
    public void testEveryWeekendForthWeekOfMonthNextExecution() {
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue228Test|testEveryWeekendForthWeekOfMonthNextExecution()|1", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue228Test|testEveryWeekendForthWeekOfMonthNextExecution()|0", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        // This is 9am on Sat and Sun day between the 22nd and 28th (in this case it should be Oct 22)
        com.cronutils.model.Cron myCron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue228Test|testEveryWeekendForthWeekOfMonthNextExecution()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue228Test|testEveryWeekendForthWeekOfMonthNextExecution()|2", com.cronutils.parser.CronParser.class, parser).parse("0 9 22-28 * 6-7"));
        org.threeten.bp.ZonedDateTime time = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekendForthWeekOfMonthNextExecution()|4", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2017-09-29T14:46:01.166-07:00"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekendForthWeekOfMonthNextExecution()|5", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2017-10-22T09:00-07:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekendForthWeekOfMonthNextExecution()|10", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.Issue228Test|testEveryWeekendForthWeekOfMonthNextExecution()|9", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.Issue228Test|testEveryWeekendForthWeekOfMonthNextExecution()|7", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue228Test|testEveryWeekendForthWeekOfMonthNextExecution()|6", com.cronutils.model.Cron.class, myCron))).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue228Test|testEveryWeekendForthWeekOfMonthNextExecution()|8", org.threeten.bp.ZonedDateTime.class, time))).get()));
    }
}

