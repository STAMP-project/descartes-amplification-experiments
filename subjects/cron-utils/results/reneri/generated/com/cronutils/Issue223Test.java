package com.cronutils;


public class Issue223Test {
    /**
     * Issue #223: for dayOfWeek value == 3 && division of day, nextExecution do not return correct results
     */
    @org.junit.Test
    public void testEveryWednesdayOfEveryDayNextExecution() {
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|3", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        com.cronutils.model.Cron myCron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|4", com.cronutils.parser.CronParser.class, parser).parse("* * * * 3"));
        org.threeten.bp.ZonedDateTime time = eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|6", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2017-09-05T11:31:55.407-05:00"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|7", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2017-09-06T00:00-05:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|12", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|11", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|9", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|8", com.cronutils.model.Cron.class, myCron))).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|10", org.threeten.bp.ZonedDateTime.class, time))).get()));
        com.cronutils.model.Cron myCron2 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|14", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|13", com.cronutils.parser.CronParser.class, parser).parse("* * */1 * 3"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|15", org.threeten.bp.ZonedDateTime.class, (time = org.threeten.bp.ZonedDateTime.parse("2017-09-05T11:31:55.407-05:00")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|16", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.parse("2017-09-06T00:00-05:00")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|21", org.threeten.bp.ZonedDateTime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.base.Optional<org.threeten.bp.ZonedDateTime>>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|20", com.google.common.base.Optional.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|18", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|17", com.cronutils.model.Cron.class, myCron2))).nextExecution(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue223Test|testEveryWednesdayOfEveryDayNextExecution()|19", org.threeten.bp.ZonedDateTime.class, time))).get()));
    }
}

