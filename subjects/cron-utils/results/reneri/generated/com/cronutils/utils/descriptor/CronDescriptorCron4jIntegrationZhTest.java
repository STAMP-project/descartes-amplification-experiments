package com.cronutils.utils.descriptor;


/**
 * https://github.com/jmrozanec/cron-utils/issues/230
 * add by Wangxin
 * add chinese local test
 */
public class CronDescriptorCron4jIntegrationZhTest {
    private com.cronutils.descriptor.CronDescriptor descriptor;

    private com.cronutils.parser.CronParser parser;

    @org.junit.Before
    public void setUp() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.descriptor.CronDescriptor>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|setUp()|1", com.cronutils.descriptor.CronDescriptor.class, (descriptor = com.cronutils.descriptor.CronDescriptor.instance(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Locale>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|setUp()|0", java.util.Locale.class, java.util.Locale.CHINESE))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|setUp()|4", com.cronutils.parser.CronParser.class, (parser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|setUp()|3", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|setUp()|2", com.cronutils.model.CronType.class, com.cronutils.model.CronType.CRON4J))))));
    }

    @org.junit.Test
    public void testEveryMinuteBetween1100And1110() {
        org.junit.Assert.assertEquals("每 分钟 在 11:00 和 11:10", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinuteBetween1100And1110()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.descriptor.CronDescriptor>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinuteBetween1100And1110()|0", com.cronutils.descriptor.CronDescriptor.class, descriptor).describe(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinuteBetween1100And1110()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinuteBetween1100And1110()|1", com.cronutils.parser.CronParser.class, parser).parse("0-10 11 * * *")))));
    }

    @org.junit.Test
    public void testEveryMinute() {
        org.junit.Assert.assertEquals("每 分钟", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinute()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.descriptor.CronDescriptor>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinute()|0", com.cronutils.descriptor.CronDescriptor.class, descriptor).describe(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinute()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinute()|1", com.cronutils.parser.CronParser.class, parser).parse("* * * * *")))));
        org.junit.Assert.assertEquals("每 分钟", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinute()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.descriptor.CronDescriptor>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinute()|4", com.cronutils.descriptor.CronDescriptor.class, descriptor).describe(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinute()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinute()|5", com.cronutils.parser.CronParser.class, parser).parse("*/1 * * * *")))));
        org.junit.Assert.assertEquals("每 分钟", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinute()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.descriptor.CronDescriptor>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinute()|8", com.cronutils.descriptor.CronDescriptor.class, descriptor).describe(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinute()|10", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryMinute()|9", com.cronutils.parser.CronParser.class, parser).parse("0/1 * * * *")))));
    }

    @org.junit.Test
    public void testEveryFiveMinutes() {
        org.junit.Assert.assertEquals("每 5 分钟", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryFiveMinutes()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.descriptor.CronDescriptor>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryFiveMinutes()|0", com.cronutils.descriptor.CronDescriptor.class, descriptor).describe(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryFiveMinutes()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryFiveMinutes()|1", com.cronutils.parser.CronParser.class, parser).parse("*/5 * * * *")))));
        org.junit.Assert.assertEquals("每 5 分钟", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryFiveMinutes()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.descriptor.CronDescriptor>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryFiveMinutes()|4", com.cronutils.descriptor.CronDescriptor.class, descriptor).describe(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryFiveMinutes()|6", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testEveryFiveMinutes()|5", com.cronutils.parser.CronParser.class, parser).parse("0/5 * * * *")))));
    }

    @org.junit.Test
    public void testAtElevenThirty() {
        org.junit.Assert.assertEquals("在 11:30", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testAtElevenThirty()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.descriptor.CronDescriptor>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testAtElevenThirty()|0", com.cronutils.descriptor.CronDescriptor.class, descriptor).describe(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testAtElevenThirty()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.utils.descriptor.CronDescriptorCron4jIntegrationZhTest|testAtElevenThirty()|1", com.cronutils.parser.CronParser.class, parser).parse("30 11 * * *")))));
    }
}

