package com.cronutils.mapper;


/* Copyright 2015 jmrozanec
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
public class CronMapperIntegrationTest {
    @org.junit.Test
    public void testSpecificTimeCron4jToQuartz() {
        org.junit.Assert.assertEquals("0 30 8 10 6 ? *", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testSpecificTimeCron4jToQuartz()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testSpecificTimeCron4jToQuartz()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.CronMapper>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testSpecificTimeCron4jToQuartz()|0", com.cronutils.mapper.CronMapper.class, com.cronutils.mapper.CronMapper.fromCron4jToQuartz()).map(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testSpecificTimeCron4jToQuartz()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testSpecificTimeCron4jToQuartz()|1", com.cronutils.parser.CronParser.class, cron4jParser()).parse("30 8 10 6 *")))).asString()));
    }

    @org.junit.Test
    public void testMoreThanOneInstanceCron4jToQuartz() {
        org.junit.Assert.assertEquals("0 0 11,16 * * ? *", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testMoreThanOneInstanceCron4jToQuartz()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testMoreThanOneInstanceCron4jToQuartz()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.CronMapper>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testMoreThanOneInstanceCron4jToQuartz()|0", com.cronutils.mapper.CronMapper.class, com.cronutils.mapper.CronMapper.fromCron4jToQuartz()).map(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testMoreThanOneInstanceCron4jToQuartz()|2", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testMoreThanOneInstanceCron4jToQuartz()|1", com.cronutils.parser.CronParser.class, cron4jParser()).parse("0 11,16 * * *")))).asString()));
    }

    @org.junit.Test
    public void testRangeOfTimeCron4jToQuartz() {
        java.lang.String expression = "0 9-18 * * 1-3";
        java.lang.String expected = "0 0 9-18 ? * 2-4 *";
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testRangeOfTimeCron4jToQuartz()|0", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testRangeOfTimeCron4jToQuartz()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testRangeOfTimeCron4jToQuartz()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.CronMapper>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testRangeOfTimeCron4jToQuartz()|1", com.cronutils.mapper.CronMapper.class, com.cronutils.mapper.CronMapper.fromCron4jToQuartz()).map(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testRangeOfTimeCron4jToQuartz()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testRangeOfTimeCron4jToQuartz()|2", com.cronutils.parser.CronParser.class, cron4jParser()).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testRangeOfTimeCron4jToQuartz()|3", expression))))).asString()));
    }

    @org.junit.Test
    public void testSpecificTimeQuartzToCron4j() {
        java.lang.String expression = "5 30 8 10 6 ? 1984";
        org.junit.Assert.assertEquals("30 8 10 6 *", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testSpecificTimeQuartzToCron4j()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testSpecificTimeQuartzToCron4j()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.CronMapper>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testSpecificTimeQuartzToCron4j()|0", com.cronutils.mapper.CronMapper.class, com.cronutils.mapper.CronMapper.fromQuartzToCron4j()).map(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testSpecificTimeQuartzToCron4j()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testSpecificTimeQuartzToCron4j()|1", com.cronutils.parser.CronParser.class, quartzParser()).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testSpecificTimeQuartzToCron4j()|2", expression))))).asString()));
    }

    @org.junit.Test
    public void testMoreThanOneInstanceQuartzToCron4j() {
        java.lang.String expression = "5 0 11,16 * * ? 1984";
        org.junit.Assert.assertEquals("0 11,16 * * *", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testMoreThanOneInstanceQuartzToCron4j()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testMoreThanOneInstanceQuartzToCron4j()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.CronMapper>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testMoreThanOneInstanceQuartzToCron4j()|0", com.cronutils.mapper.CronMapper.class, com.cronutils.mapper.CronMapper.fromQuartzToCron4j()).map(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testMoreThanOneInstanceQuartzToCron4j()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testMoreThanOneInstanceQuartzToCron4j()|1", com.cronutils.parser.CronParser.class, quartzParser()).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testMoreThanOneInstanceQuartzToCron4j()|2", expression))))).asString()));
    }

    @org.junit.Test
    public void testRangeOfTimeQuartzToCron4j() {
        java.lang.String expected = "0 9-18 * * 0-2";
        java.lang.String expression = "5 0 9-18 ? * 1-3 1984";
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testRangeOfTimeQuartzToCron4j()|0", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testRangeOfTimeQuartzToCron4j()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testRangeOfTimeQuartzToCron4j()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.CronMapper>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testRangeOfTimeQuartzToCron4j()|1", com.cronutils.mapper.CronMapper.class, com.cronutils.mapper.CronMapper.fromQuartzToCron4j()).map(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testRangeOfTimeQuartzToCron4j()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testRangeOfTimeQuartzToCron4j()|2", com.cronutils.parser.CronParser.class, quartzParser()).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testRangeOfTimeQuartzToCron4j()|3", expression))))).asString()));
    }

    @org.junit.Test
    public void testDaysOfWeekUnixToQuartz() {
        java.lang.String input = "* * * * 3,5-6";
        java.lang.String expected = "0 * * ? * 4,6-7 *";
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testDaysOfWeekUnixToQuartz()|0", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testDaysOfWeekUnixToQuartz()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testDaysOfWeekUnixToQuartz()|5", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.CronMapper>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testDaysOfWeekUnixToQuartz()|1", com.cronutils.mapper.CronMapper.class, com.cronutils.mapper.CronMapper.fromUnixToQuartz()).map(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testDaysOfWeekUnixToQuartz()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testDaysOfWeekUnixToQuartz()|2", com.cronutils.parser.CronParser.class, unixParser()).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testDaysOfWeekUnixToQuartz()|3", input))))).asString()));
    }

    /**
     * Issue #36, #56: Unix to Quartz not accurately mapping every minute pattern
     * or patterns that involve every day of month and every day of week
     */
    @org.junit.Test
    public void testEveryMinuteUnixToQuartz() {
        java.lang.String input = "* * * * *";
        java.lang.String expected1 = "0 * * * * ? *";
        java.lang.String expected2 = "0 * * ? * * *";
        java.lang.String mapping = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.CronMapper>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|0", com.cronutils.mapper.CronMapper.class, com.cronutils.mapper.CronMapper.fromUnixToQuartz()).map(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|1", com.cronutils.parser.CronParser.class, unixParser()).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|2", input))))).asString());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|9", java.lang.String.format("Expected [%s] or [%s] but got [%s]", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|6", expected1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|7", expected2), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|8", mapping))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashSet<java.lang.String>>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|12", java.util.HashSet.class, com.google.common.collect.Sets.newHashSet(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|10", expected1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|11", expected2))).contains(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testEveryMinuteUnixToQuartz()|13", mapping))));
    }

    /**
     * Issue #36, #56: Unix to Quartz not accurately mapping every minute pattern
     * or patterns that involve every day of month and every day of week
     */
    @org.junit.Test
    public void testUnixToQuartzQuestionMarkRequired() {
        java.lang.String input = "0 0 * * 1";
        java.lang.String expected = "0 0 0 ? * 2 *";
        java.lang.String mapping = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testUnixToQuartzQuestionMarkRequired()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testUnixToQuartzQuestionMarkRequired()|4", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.mapper.CronMapper>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testUnixToQuartzQuestionMarkRequired()|0", com.cronutils.mapper.CronMapper.class, com.cronutils.mapper.CronMapper.fromUnixToQuartz()).map(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testUnixToQuartzQuestionMarkRequired()|3", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.mapper.CronMapperIntegrationTest|testUnixToQuartzQuestionMarkRequired()|1", com.cronutils.parser.CronParser.class, unixParser()).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testUnixToQuartzQuestionMarkRequired()|2", input))))).asString());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testUnixToQuartzQuestionMarkRequired()|8", java.lang.String.format("Expected [%s] but got [%s]", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testUnixToQuartzQuestionMarkRequired()|6", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testUnixToQuartzQuestionMarkRequired()|7", mapping))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testUnixToQuartzQuestionMarkRequired()|9", expected), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.mapper.CronMapperIntegrationTest|testUnixToQuartzQuestionMarkRequired()|10", mapping));
    }

    private com.cronutils.parser.CronParser cron4jParser() {
        return eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.mapper.CronMapperIntegrationTest|cron4jParser()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.mapper.CronMapperIntegrationTest|cron4jParser()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.mapper.CronMapperIntegrationTest|cron4jParser()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.CRON4J)))));
    }

    private com.cronutils.parser.CronParser quartzParser() {
        return eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.mapper.CronMapperIntegrationTest|quartzParser()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.mapper.CronMapperIntegrationTest|quartzParser()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.mapper.CronMapperIntegrationTest|quartzParser()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.QUARTZ)))));
    }

    private com.cronutils.parser.CronParser unixParser() {
        return eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.mapper.CronMapperIntegrationTest|unixParser()|2", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.mapper.CronMapperIntegrationTest|unixParser()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.mapper.CronMapperIntegrationTest|unixParser()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)))));
    }
}

