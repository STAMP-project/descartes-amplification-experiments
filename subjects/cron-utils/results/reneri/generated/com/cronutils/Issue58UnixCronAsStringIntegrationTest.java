package com.cronutils;


public class Issue58UnixCronAsStringIntegrationTest {
    private com.cronutils.parser.CronParser cronParser;

    @org.junit.Before
    public void setup() {
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|setup()|1", com.cronutils.model.definition.CronDefinition.class, com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.CronType>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|setup()|0", com.cronutils.model.CronType.class, com.cronutils.model.CronType.UNIX)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|setup()|3", com.cronutils.parser.CronParser.class, (cronParser = new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|setup()|2", com.cronutils.model.definition.CronDefinition.class, cronDefinition))));
    }

    @org.junit.Test
    public void everyEvenHourShouldBeParsedCorrectly() {
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenHourShouldBeParsedCorrectly()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenHourShouldBeParsedCorrectly()|0", com.cronutils.parser.CronParser.class, cronParser).parse("0 0/1 * * *"));
        org.junit.Assert.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenHourShouldBeParsedCorrectly()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenHourShouldBeParsedCorrectly()|2", com.cronutils.model.Cron.class, cron).asString()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.core.AnyOf<java.lang.String>>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenHourShouldBeParsedCorrectly()|7", org.hamcrest.core.AnyOf.class, org.hamcrest.core.AnyOf.anyOf(eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenHourShouldBeParsedCorrectly()|4", org.hamcrest.Matcher.class, org.hamcrest.core.Is.is("0 0/1 * * *")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenHourShouldBeParsedCorrectly()|5", org.hamcrest.Matcher.class, org.hamcrest.core.Is.is("0 /1 * * *")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenHourShouldBeParsedCorrectly()|6", org.hamcrest.Matcher.class, org.hamcrest.core.Is.is("0 0 * * *")))));
    }

    @org.junit.Test
    public void everyOddHourShouldBeParsedCorrectly() {
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyOddHourShouldBeParsedCorrectly()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyOddHourShouldBeParsedCorrectly()|0", com.cronutils.parser.CronParser.class, cronParser).parse("0 1/2 * * *"));
        org.junit.Assert.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyOddHourShouldBeParsedCorrectly()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyOddHourShouldBeParsedCorrectly()|2", com.cronutils.model.Cron.class, cron).asString()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyOddHourShouldBeParsedCorrectly()|4", org.hamcrest.Matcher.class, org.hamcrest.core.Is.is("0 1/2 * * *")));
    }

    @org.junit.Test
    public void everyEvenMinuteShouldBeParsedCorrectly() {
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenMinuteShouldBeParsedCorrectly()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenMinuteShouldBeParsedCorrectly()|0", com.cronutils.parser.CronParser.class, cronParser).parse("0/1 * * * *"));
        org.junit.Assert.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenMinuteShouldBeParsedCorrectly()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenMinuteShouldBeParsedCorrectly()|2", com.cronutils.model.Cron.class, cron).asString()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.core.AnyOf<java.lang.String>>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenMinuteShouldBeParsedCorrectly()|7", org.hamcrest.core.AnyOf.class, org.hamcrest.core.AnyOf.anyOf(eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenMinuteShouldBeParsedCorrectly()|4", org.hamcrest.Matcher.class, org.hamcrest.core.Is.is("0/1 * * * *")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenMinuteShouldBeParsedCorrectly()|5", org.hamcrest.Matcher.class, org.hamcrest.core.Is.is("/1 * * * *")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyEvenMinuteShouldBeParsedCorrectly()|6", org.hamcrest.Matcher.class, org.hamcrest.core.Is.is("0 * * * *")))));
    }

    @org.junit.Test
    public void everyOddMinuteShouldBeParsedCorrectly() {
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyOddMinuteShouldBeParsedCorrectly()|1", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyOddMinuteShouldBeParsedCorrectly()|0", com.cronutils.parser.CronParser.class, cronParser).parse("1/2 * * * *"));
        org.junit.Assert.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyOddMinuteShouldBeParsedCorrectly()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyOddMinuteShouldBeParsedCorrectly()|2", com.cronutils.model.Cron.class, cron).asString()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.hamcrest.Matcher<java.lang.String>>observeState("com.cronutils.Issue58UnixCronAsStringIntegrationTest|everyOddMinuteShouldBeParsedCorrectly()|4", org.hamcrest.Matcher.class, org.hamcrest.core.Is.is("1/2 * * * *")));
    }
}

