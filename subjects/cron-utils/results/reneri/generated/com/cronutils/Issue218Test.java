package com.cronutils;


/**
 *
 *
 * @author minidmnv
 */
public class Issue218Test {
    /**
     * Issue #218 - isMatch() method should return true/false rather then throwing exception
     */
    private final java.lang.String CRON_EXPRESSION = "0-59 7-16 MON-FRI";

    @org.junit.Test
    public void testCronDefinitionExecutionTimeGenerator() {
        com.cronutils.model.definition.CronDefinition cronDefinition = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|8", com.cronutils.model.definition.CronDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|7", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinitionBuilder>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|6", com.cronutils.model.field.definition.FieldDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|5", com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|4", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinitionBuilder>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|3", com.cronutils.model.field.definition.FieldDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|2", com.cronutils.model.definition.CronDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.field.definition.FieldDefinitionBuilder>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|1", com.cronutils.model.field.definition.FieldDefinitionBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinitionBuilder>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|0", com.cronutils.model.definition.CronDefinitionBuilder.class, com.cronutils.model.definition.CronDefinitionBuilder.defineCron()).withMinutes()).and()).withHours()).and()).withDayOfWeek()).optional()).and()).instance());
        com.cronutils.parser.CronParser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|10", com.cronutils.parser.CronParser.class, new com.cronutils.parser.CronParser(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.definition.CronDefinition>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|9", com.cronutils.model.definition.CronDefinition.class, cronDefinition)));
        com.cronutils.model.Cron cron = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|13", com.cronutils.model.Cron.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.parser.CronParser>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|11", com.cronutils.parser.CronParser.class, parser).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|12", CRON_EXPRESSION)));
        com.cronutils.model.time.ExecutionTime executionTime = eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|15", com.cronutils.model.time.ExecutionTime.class, com.cronutils.model.time.ExecutionTime.forCron(eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.Cron>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|14", com.cronutils.model.Cron.class, cron)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<com.cronutils.model.time.ExecutionTime>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|16", com.cronutils.model.time.ExecutionTime.class, executionTime).isMatch(eu.stamp_project.reneri.instrumentation.StateObserver.<org.threeten.bp.ZonedDateTime>observeState("com.cronutils.Issue218Test|testCronDefinitionExecutionTimeGenerator()|17", org.threeten.bp.ZonedDateTime.class, org.threeten.bp.ZonedDateTime.now())));
    }
}

