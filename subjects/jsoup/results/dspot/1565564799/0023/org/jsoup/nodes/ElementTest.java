package org.jsoup.nodes;


import java.util.Collection;
import org.jsoup.Jsoup;
import org.jsoup.select.Elements;
import org.junit.Assert;
import org.junit.Test;


public class ElementTest {
    private String reference = "<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>";

    @Test(timeout = 10000)
    public void testIs() throws Exception {
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs__7 = p.is("p");
        Assert.assertTrue(o_testIs__7);
        boolean o_testIs__8 = p.is("div");
        Assert.assertFalse(o_testIs__8);
        boolean o_testIs__9 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs__9);
        boolean o_testIs__10 = p.is("p:first-child");
        Assert.assertTrue(o_testIs__10);
        boolean o_testIs__11 = p.is("p:last-child");
        Assert.assertFalse(o_testIs__11);
        boolean o_testIs__12 = p.is("*");
        Assert.assertTrue(o_testIs__12);
        boolean o_testIs__13 = p.is("div p");
        Assert.assertTrue(o_testIs__13);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs__17 = q.is("p");
        Assert.assertTrue(o_testIs__17);
        boolean o_testIs__18 = q.is("p ~ p");
        Assert.assertTrue(o_testIs__18);
        boolean o_testIs__19 = q.is("p + p");
        Assert.assertTrue(o_testIs__19);
        boolean o_testIs__20 = q.is("p:last-child");
        Assert.assertTrue(o_testIs__20);
        boolean o_testIs__21 = q.is("p a");
        Assert.assertFalse(o_testIs__21);
        boolean o_testIs__22 = q.is("a");
        Assert.assertFalse(o_testIs__22);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs__7);
        Assert.assertFalse(o_testIs__8);
        Assert.assertTrue(o_testIs__9);
        Assert.assertTrue(o_testIs__10);
        Assert.assertFalse(o_testIs__11);
        Assert.assertTrue(o_testIs__12);
        Assert.assertTrue(o_testIs__13);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs__17);
        Assert.assertTrue(o_testIs__18);
        Assert.assertTrue(o_testIs__19);
        Assert.assertTrue(o_testIs__20);
        Assert.assertFalse(o_testIs__21);
    }

    @Test(timeout = 10000)
    public void testIs_mg234() throws Exception {
        String __DSPOT_regex_95 = "cyHGP}8hoa-J!Pzx|999";
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg234__8 = p.is("p");
        Assert.assertTrue(o_testIs_mg234__8);
        boolean o_testIs_mg234__9 = p.is("div");
        Assert.assertFalse(o_testIs_mg234__9);
        boolean o_testIs_mg234__10 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg234__10);
        boolean o_testIs_mg234__11 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg234__11);
        boolean o_testIs_mg234__12 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg234__12);
        boolean o_testIs_mg234__13 = p.is("*");
        Assert.assertTrue(o_testIs_mg234__13);
        boolean o_testIs_mg234__14 = p.is("div p");
        Assert.assertTrue(o_testIs_mg234__14);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg234__18 = q.is("p");
        Assert.assertTrue(o_testIs_mg234__18);
        boolean o_testIs_mg234__19 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg234__19);
        boolean o_testIs_mg234__20 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg234__20);
        boolean o_testIs_mg234__21 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg234__21);
        boolean o_testIs_mg234__22 = q.is("p a");
        Assert.assertFalse(o_testIs_mg234__22);
        boolean o_testIs_mg234__23 = q.is("a");
        Assert.assertFalse(o_testIs_mg234__23);
        Elements o_testIs_mg234__24 = q.getElementsMatchingOwnText(__DSPOT_regex_95);
        Assert.assertTrue(o_testIs_mg234__24.isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg234__8);
        Assert.assertFalse(o_testIs_mg234__9);
        Assert.assertTrue(o_testIs_mg234__10);
        Assert.assertTrue(o_testIs_mg234__11);
        Assert.assertFalse(o_testIs_mg234__12);
        Assert.assertTrue(o_testIs_mg234__13);
        Assert.assertTrue(o_testIs_mg234__14);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg234__18);
        Assert.assertTrue(o_testIs_mg234__19);
        Assert.assertTrue(o_testIs_mg234__20);
        Assert.assertTrue(o_testIs_mg234__21);
        Assert.assertFalse(o_testIs_mg234__22);
        Assert.assertFalse(o_testIs_mg234__23);
    }

    @Test(timeout = 10000)
    public void testIs_mg157() throws Exception {
        String __DSPOT_regex_41 = "E@of6;bU#J;!9+7]6k!L";
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg157__8 = p.is("p");
        Assert.assertTrue(o_testIs_mg157__8);
        boolean o_testIs_mg157__9 = p.is("div");
        Assert.assertFalse(o_testIs_mg157__9);
        boolean o_testIs_mg157__10 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg157__10);
        boolean o_testIs_mg157__11 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg157__11);
        boolean o_testIs_mg157__12 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg157__12);
        boolean o_testIs_mg157__13 = p.is("*");
        Assert.assertTrue(o_testIs_mg157__13);
        boolean o_testIs_mg157__14 = p.is("div p");
        Assert.assertTrue(o_testIs_mg157__14);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg157__18 = q.is("p");
        Assert.assertTrue(o_testIs_mg157__18);
        boolean o_testIs_mg157__19 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg157__19);
        boolean o_testIs_mg157__20 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg157__20);
        boolean o_testIs_mg157__21 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg157__21);
        boolean o_testIs_mg157__22 = q.is("p a");
        Assert.assertFalse(o_testIs_mg157__22);
        boolean o_testIs_mg157__23 = q.is("a");
        Assert.assertFalse(o_testIs_mg157__23);
        Elements o_testIs_mg157__24 = p.getElementsMatchingText(__DSPOT_regex_41);
        Assert.assertTrue(o_testIs_mg157__24.isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg157__8);
        Assert.assertFalse(o_testIs_mg157__9);
        Assert.assertTrue(o_testIs_mg157__10);
        Assert.assertTrue(o_testIs_mg157__11);
        Assert.assertFalse(o_testIs_mg157__12);
        Assert.assertTrue(o_testIs_mg157__13);
        Assert.assertTrue(o_testIs_mg157__14);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg157__18);
        Assert.assertTrue(o_testIs_mg157__19);
        Assert.assertTrue(o_testIs_mg157__20);
        Assert.assertTrue(o_testIs_mg157__21);
        Assert.assertFalse(o_testIs_mg157__22);
        Assert.assertFalse(o_testIs_mg157__23);
    }

    @Test(timeout = 10000)
    public void testIs_mg233() throws Exception {
        String __DSPOT_searchText_94 = "oAgu-u1_)f(dMmVFwF=E";
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg233__8 = p.is("p");
        Assert.assertTrue(o_testIs_mg233__8);
        boolean o_testIs_mg233__9 = p.is("div");
        Assert.assertFalse(o_testIs_mg233__9);
        boolean o_testIs_mg233__10 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg233__10);
        boolean o_testIs_mg233__11 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg233__11);
        boolean o_testIs_mg233__12 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg233__12);
        boolean o_testIs_mg233__13 = p.is("*");
        Assert.assertTrue(o_testIs_mg233__13);
        boolean o_testIs_mg233__14 = p.is("div p");
        Assert.assertTrue(o_testIs_mg233__14);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg233__18 = q.is("p");
        Assert.assertTrue(o_testIs_mg233__18);
        boolean o_testIs_mg233__19 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg233__19);
        boolean o_testIs_mg233__20 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg233__20);
        boolean o_testIs_mg233__21 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg233__21);
        boolean o_testIs_mg233__22 = q.is("p a");
        Assert.assertFalse(o_testIs_mg233__22);
        boolean o_testIs_mg233__23 = q.is("a");
        Assert.assertFalse(o_testIs_mg233__23);
        Elements o_testIs_mg233__24 = q.getElementsContainingText(__DSPOT_searchText_94);
        Assert.assertTrue(o_testIs_mg233__24.isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg233__8);
        Assert.assertFalse(o_testIs_mg233__9);
        Assert.assertTrue(o_testIs_mg233__10);
        Assert.assertTrue(o_testIs_mg233__11);
        Assert.assertFalse(o_testIs_mg233__12);
        Assert.assertTrue(o_testIs_mg233__13);
        Assert.assertTrue(o_testIs_mg233__14);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg233__18);
        Assert.assertTrue(o_testIs_mg233__19);
        Assert.assertTrue(o_testIs_mg233__20);
        Assert.assertTrue(o_testIs_mg233__21);
        Assert.assertFalse(o_testIs_mg233__22);
        Assert.assertFalse(o_testIs_mg233__23);
    }

    @Test(timeout = 10000)
    public void testIs_mg156_failAssert0() throws Exception {
        try {
            String __DSPOT_regex_40 = "+ _ 2&pb?56TtKz.F5M(";
            String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            Document doc = Jsoup.parse(html);
            Element p = doc.select("p").first();
            p.is("p");
            p.is("div");
            p.is("p:has(a)");
            p.is("p:first-child");
            p.is("p:last-child");
            p.is("*");
            p.is("div p");
            Element q = doc.select("p").last();
            q.is("p");
            q.is("p ~ p");
            q.is("p + p");
            q.is("p:last-child");
            q.is("p a");
            q.is("a");
            p.getElementsMatchingOwnText(__DSPOT_regex_40);
            org.junit.Assert.fail("testIs_mg156 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Pattern syntax error: + _ 2&pb?56TtKz.F5M(", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIs_mg104() throws Exception {
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg104__7 = p.is("p");
        Assert.assertTrue(o_testIs_mg104__7);
        boolean o_testIs_mg104__8 = p.is("div");
        Assert.assertFalse(o_testIs_mg104__8);
        boolean o_testIs_mg104__9 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg104__9);
        boolean o_testIs_mg104__10 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg104__10);
        boolean o_testIs_mg104__11 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg104__11);
        boolean o_testIs_mg104__12 = p.is("*");
        Assert.assertTrue(o_testIs_mg104__12);
        boolean o_testIs_mg104__13 = p.is("div p");
        Assert.assertTrue(o_testIs_mg104__13);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg104__17 = q.is("p");
        Assert.assertTrue(o_testIs_mg104__17);
        boolean o_testIs_mg104__18 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg104__18);
        boolean o_testIs_mg104__19 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg104__19);
        boolean o_testIs_mg104__20 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg104__20);
        boolean o_testIs_mg104__21 = q.is("p a");
        Assert.assertFalse(o_testIs_mg104__21);
        boolean o_testIs_mg104__22 = q.is("a");
        Assert.assertFalse(o_testIs_mg104__22);
        Document o_testIs_mg104__23 = doc.normalise();
        Assert.assertTrue(((Document) (o_testIs_mg104__23)).hasText());
        Assert.assertFalse(((Collection) (((Document) (o_testIs_mg104__23)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (o_testIs_mg104__23)).isBlock());
        Assert.assertFalse(((Document) (o_testIs_mg104__23)).hasParent());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg104__7);
        Assert.assertFalse(o_testIs_mg104__8);
        Assert.assertTrue(o_testIs_mg104__9);
        Assert.assertTrue(o_testIs_mg104__10);
        Assert.assertFalse(o_testIs_mg104__11);
        Assert.assertTrue(o_testIs_mg104__12);
        Assert.assertTrue(o_testIs_mg104__13);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg104__17);
        Assert.assertTrue(o_testIs_mg104__18);
        Assert.assertTrue(o_testIs_mg104__19);
        Assert.assertTrue(o_testIs_mg104__20);
        Assert.assertFalse(o_testIs_mg104__21);
        Assert.assertFalse(o_testIs_mg104__22);
    }

    @Test(timeout = 10000)
    public void testIs_mg224() throws Exception {
        String __DSPOT_regex_83 = "7%vGBT#3Y8uSO_U./J9r";
        String __DSPOT_key_82 = "Gs7)F5:K|}Y.+DPW(yw#";
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg224__9 = p.is("p");
        Assert.assertTrue(o_testIs_mg224__9);
        boolean o_testIs_mg224__10 = p.is("div");
        Assert.assertFalse(o_testIs_mg224__10);
        boolean o_testIs_mg224__11 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg224__11);
        boolean o_testIs_mg224__12 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg224__12);
        boolean o_testIs_mg224__13 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg224__13);
        boolean o_testIs_mg224__14 = p.is("*");
        Assert.assertTrue(o_testIs_mg224__14);
        boolean o_testIs_mg224__15 = p.is("div p");
        Assert.assertTrue(o_testIs_mg224__15);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg224__19 = q.is("p");
        Assert.assertTrue(o_testIs_mg224__19);
        boolean o_testIs_mg224__20 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg224__20);
        boolean o_testIs_mg224__21 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg224__21);
        boolean o_testIs_mg224__22 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg224__22);
        boolean o_testIs_mg224__23 = q.is("p a");
        Assert.assertFalse(o_testIs_mg224__23);
        boolean o_testIs_mg224__24 = q.is("a");
        Assert.assertFalse(o_testIs_mg224__24);
        Elements o_testIs_mg224__25 = q.getElementsByAttributeValueMatching(__DSPOT_key_82, __DSPOT_regex_83);
        Assert.assertTrue(o_testIs_mg224__25.isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg224__9);
        Assert.assertFalse(o_testIs_mg224__10);
        Assert.assertTrue(o_testIs_mg224__11);
        Assert.assertTrue(o_testIs_mg224__12);
        Assert.assertFalse(o_testIs_mg224__13);
        Assert.assertTrue(o_testIs_mg224__14);
        Assert.assertTrue(o_testIs_mg224__15);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg224__19);
        Assert.assertTrue(o_testIs_mg224__20);
        Assert.assertTrue(o_testIs_mg224__21);
        Assert.assertTrue(o_testIs_mg224__22);
        Assert.assertFalse(o_testIs_mg224__23);
        Assert.assertFalse(o_testIs_mg224__24);
    }

    @Test(timeout = 10000)
    public void testIs_mg147() throws Exception {
        String __DSPOT_value_30 = "/&h4]]s%=])JWOM_4gds";
        String __DSPOT_key_29 = "r6EO;&FZRy/=u eShD9P";
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg147__9 = p.is("p");
        Assert.assertTrue(o_testIs_mg147__9);
        boolean o_testIs_mg147__10 = p.is("div");
        Assert.assertFalse(o_testIs_mg147__10);
        boolean o_testIs_mg147__11 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg147__11);
        boolean o_testIs_mg147__12 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg147__12);
        boolean o_testIs_mg147__13 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg147__13);
        boolean o_testIs_mg147__14 = p.is("*");
        Assert.assertTrue(o_testIs_mg147__14);
        boolean o_testIs_mg147__15 = p.is("div p");
        Assert.assertTrue(o_testIs_mg147__15);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg147__19 = q.is("p");
        Assert.assertTrue(o_testIs_mg147__19);
        boolean o_testIs_mg147__20 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg147__20);
        boolean o_testIs_mg147__21 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg147__21);
        boolean o_testIs_mg147__22 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg147__22);
        boolean o_testIs_mg147__23 = q.is("p a");
        Assert.assertFalse(o_testIs_mg147__23);
        boolean o_testIs_mg147__24 = q.is("a");
        Assert.assertFalse(o_testIs_mg147__24);
        Elements o_testIs_mg147__25 = p.getElementsByAttributeValueNot(__DSPOT_key_29, __DSPOT_value_30);
        Assert.assertFalse(o_testIs_mg147__25.isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg147__9);
        Assert.assertFalse(o_testIs_mg147__10);
        Assert.assertTrue(o_testIs_mg147__11);
        Assert.assertTrue(o_testIs_mg147__12);
        Assert.assertFalse(o_testIs_mg147__13);
        Assert.assertTrue(o_testIs_mg147__14);
        Assert.assertTrue(o_testIs_mg147__15);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg147__19);
        Assert.assertTrue(o_testIs_mg147__20);
        Assert.assertTrue(o_testIs_mg147__21);
        Assert.assertTrue(o_testIs_mg147__22);
        Assert.assertFalse(o_testIs_mg147__23);
        Assert.assertFalse(o_testIs_mg147__24);
    }
}

