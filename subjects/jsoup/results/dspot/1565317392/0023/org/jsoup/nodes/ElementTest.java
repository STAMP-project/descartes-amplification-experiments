package org.jsoup.nodes;


import java.util.Collection;
import org.jsoup.Jsoup;
import org.jsoup.parser.Parser;
import org.jsoup.select.Elements;
import org.junit.Assert;
import org.junit.Test;


public class ElementTest {
    private String reference = "<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>";

    @Test(timeout = 10000)
    public void testIs() throws Exception {
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs__7 = p.is("p");
        Assert.assertTrue(o_testIs__7);
        boolean o_testIs__8 = p.is("div");
        Assert.assertFalse(o_testIs__8);
        boolean o_testIs__9 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs__9);
        boolean o_testIs__10 = p.is("p:first-child");
        Assert.assertTrue(o_testIs__10);
        boolean o_testIs__11 = p.is("p:last-child");
        Assert.assertFalse(o_testIs__11);
        boolean o_testIs__12 = p.is("*");
        Assert.assertTrue(o_testIs__12);
        boolean o_testIs__13 = p.is("div p");
        Assert.assertTrue(o_testIs__13);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs__17 = q.is("p");
        Assert.assertTrue(o_testIs__17);
        boolean o_testIs__18 = q.is("p ~ p");
        Assert.assertTrue(o_testIs__18);
        boolean o_testIs__19 = q.is("p + p");
        Assert.assertTrue(o_testIs__19);
        boolean o_testIs__20 = q.is("p:last-child");
        Assert.assertTrue(o_testIs__20);
        boolean o_testIs__21 = q.is("p a");
        Assert.assertFalse(o_testIs__21);
        boolean o_testIs__22 = q.is("a");
        Assert.assertFalse(o_testIs__22);
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs__7);
        Assert.assertFalse(o_testIs__8);
        Assert.assertTrue(o_testIs__9);
        Assert.assertTrue(o_testIs__10);
        Assert.assertFalse(o_testIs__11);
        Assert.assertTrue(o_testIs__12);
        Assert.assertTrue(o_testIs__13);
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs__17);
        Assert.assertTrue(o_testIs__18);
        Assert.assertTrue(o_testIs__19);
        Assert.assertTrue(o_testIs__20);
        Assert.assertFalse(o_testIs__21);
    }

    @Test(timeout = 10000)
    public void testIs_mg223() throws Exception {
        String __DSPOT_valueSuffix_81 = "uz7Gc/mJSB|*g1w/H}*7";
        String __DSPOT_key_80 = "Ji&w1WL[gZTO{/AJ+_NX";
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg223__9 = p.is("p");
        Assert.assertTrue(o_testIs_mg223__9);
        boolean o_testIs_mg223__10 = p.is("div");
        Assert.assertFalse(o_testIs_mg223__10);
        boolean o_testIs_mg223__11 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg223__11);
        boolean o_testIs_mg223__12 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg223__12);
        boolean o_testIs_mg223__13 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg223__13);
        boolean o_testIs_mg223__14 = p.is("*");
        Assert.assertTrue(o_testIs_mg223__14);
        boolean o_testIs_mg223__15 = p.is("div p");
        Assert.assertTrue(o_testIs_mg223__15);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg223__19 = q.is("p");
        Assert.assertTrue(o_testIs_mg223__19);
        boolean o_testIs_mg223__20 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg223__20);
        boolean o_testIs_mg223__21 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg223__21);
        boolean o_testIs_mg223__22 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg223__22);
        boolean o_testIs_mg223__23 = q.is("p a");
        Assert.assertFalse(o_testIs_mg223__23);
        boolean o_testIs_mg223__24 = q.is("a");
        Assert.assertFalse(o_testIs_mg223__24);
        Elements o_testIs_mg223__25 = q.getElementsByAttributeValueEnding(__DSPOT_key_80, __DSPOT_valueSuffix_81);
        Assert.assertTrue(o_testIs_mg223__25.isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg223__9);
        Assert.assertFalse(o_testIs_mg223__10);
        Assert.assertTrue(o_testIs_mg223__11);
        Assert.assertTrue(o_testIs_mg223__12);
        Assert.assertFalse(o_testIs_mg223__13);
        Assert.assertTrue(o_testIs_mg223__14);
        Assert.assertTrue(o_testIs_mg223__15);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg223__19);
        Assert.assertTrue(o_testIs_mg223__20);
        Assert.assertTrue(o_testIs_mg223__21);
        Assert.assertTrue(o_testIs_mg223__22);
        Assert.assertFalse(o_testIs_mg223__23);
        Assert.assertFalse(o_testIs_mg223__24);
    }

    @Test(timeout = 10000)
    public void testIs_mg234() throws Exception {
        String __DSPOT_regex_95 = "cyHGP}8hoa-J!Pzx|999";
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg234__8 = p.is("p");
        Assert.assertTrue(o_testIs_mg234__8);
        boolean o_testIs_mg234__9 = p.is("div");
        Assert.assertFalse(o_testIs_mg234__9);
        boolean o_testIs_mg234__10 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg234__10);
        boolean o_testIs_mg234__11 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg234__11);
        boolean o_testIs_mg234__12 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg234__12);
        boolean o_testIs_mg234__13 = p.is("*");
        Assert.assertTrue(o_testIs_mg234__13);
        boolean o_testIs_mg234__14 = p.is("div p");
        Assert.assertTrue(o_testIs_mg234__14);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg234__18 = q.is("p");
        Assert.assertTrue(o_testIs_mg234__18);
        boolean o_testIs_mg234__19 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg234__19);
        boolean o_testIs_mg234__20 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg234__20);
        boolean o_testIs_mg234__21 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg234__21);
        boolean o_testIs_mg234__22 = q.is("p a");
        Assert.assertFalse(o_testIs_mg234__22);
        boolean o_testIs_mg234__23 = q.is("a");
        Assert.assertFalse(o_testIs_mg234__23);
        Elements o_testIs_mg234__24 = q.getElementsMatchingOwnText(__DSPOT_regex_95);
        Assert.assertTrue(o_testIs_mg234__24.isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg234__8);
        Assert.assertFalse(o_testIs_mg234__9);
        Assert.assertTrue(o_testIs_mg234__10);
        Assert.assertTrue(o_testIs_mg234__11);
        Assert.assertFalse(o_testIs_mg234__12);
        Assert.assertTrue(o_testIs_mg234__13);
        Assert.assertTrue(o_testIs_mg234__14);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg234__18);
        Assert.assertTrue(o_testIs_mg234__19);
        Assert.assertTrue(o_testIs_mg234__20);
        Assert.assertTrue(o_testIs_mg234__21);
        Assert.assertFalse(o_testIs_mg234__22);
        Assert.assertFalse(o_testIs_mg234__23);
    }

    @Test(timeout = 10000)
    public void testIs_mg222() throws Exception {
        String __DSPOT_match_79 = "!j:/P:z`|.O[{SF[5qeW";
        String __DSPOT_key_78 = "C@I#`g*s,=^$;H)9+6W)";
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg222__9 = p.is("p");
        Assert.assertTrue(o_testIs_mg222__9);
        boolean o_testIs_mg222__10 = p.is("div");
        Assert.assertFalse(o_testIs_mg222__10);
        boolean o_testIs_mg222__11 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg222__11);
        boolean o_testIs_mg222__12 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg222__12);
        boolean o_testIs_mg222__13 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg222__13);
        boolean o_testIs_mg222__14 = p.is("*");
        Assert.assertTrue(o_testIs_mg222__14);
        boolean o_testIs_mg222__15 = p.is("div p");
        Assert.assertTrue(o_testIs_mg222__15);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg222__19 = q.is("p");
        Assert.assertTrue(o_testIs_mg222__19);
        boolean o_testIs_mg222__20 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg222__20);
        boolean o_testIs_mg222__21 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg222__21);
        boolean o_testIs_mg222__22 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg222__22);
        boolean o_testIs_mg222__23 = q.is("p a");
        Assert.assertFalse(o_testIs_mg222__23);
        boolean o_testIs_mg222__24 = q.is("a");
        Assert.assertFalse(o_testIs_mg222__24);
        Elements o_testIs_mg222__25 = q.getElementsByAttributeValueContaining(__DSPOT_key_78, __DSPOT_match_79);
        Assert.assertTrue(o_testIs_mg222__25.isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg222__9);
        Assert.assertFalse(o_testIs_mg222__10);
        Assert.assertTrue(o_testIs_mg222__11);
        Assert.assertTrue(o_testIs_mg222__12);
        Assert.assertFalse(o_testIs_mg222__13);
        Assert.assertTrue(o_testIs_mg222__14);
        Assert.assertTrue(o_testIs_mg222__15);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg222__19);
        Assert.assertTrue(o_testIs_mg222__20);
        Assert.assertTrue(o_testIs_mg222__21);
        Assert.assertTrue(o_testIs_mg222__22);
        Assert.assertFalse(o_testIs_mg222__23);
        Assert.assertFalse(o_testIs_mg222__24);
    }

    @Test(timeout = 10000)
    public void testIs_mg146_failAssert0() throws Exception {
        try {
            String __DSPOT_regex_28 = "Z#S&Gu4*{9Gi}cRQHCH3";
            String __DSPOT_key_27 = "y}W`_*s>).BmtV)2[gaN";
            String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            Document doc = Jsoup.parse(html);
            Element p = doc.select("p").first();
            p.is("p");
            p.is("div");
            p.is("p:has(a)");
            p.is("p:first-child");
            p.is("p:last-child");
            p.is("*");
            p.is("div p");
            Element q = doc.select("p").last();
            q.is("p");
            q.is("p ~ p");
            q.is("p + p");
            q.is("p:last-child");
            q.is("p a");
            q.is("a");
            p.getElementsByAttributeValueMatching(__DSPOT_key_27, __DSPOT_regex_28);
            org.junit.Assert.fail("testIs_mg146 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Pattern syntax error: Z#S&Gu4*{9Gi}cRQHCH3", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIs_mg155() throws Exception {
        String __DSPOT_searchText_39 = "|oPq,r5>K`HNw]f4QDhB";
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg155__8 = p.is("p");
        Assert.assertTrue(o_testIs_mg155__8);
        boolean o_testIs_mg155__9 = p.is("div");
        Assert.assertFalse(o_testIs_mg155__9);
        boolean o_testIs_mg155__10 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg155__10);
        boolean o_testIs_mg155__11 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg155__11);
        boolean o_testIs_mg155__12 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg155__12);
        boolean o_testIs_mg155__13 = p.is("*");
        Assert.assertTrue(o_testIs_mg155__13);
        boolean o_testIs_mg155__14 = p.is("div p");
        Assert.assertTrue(o_testIs_mg155__14);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg155__18 = q.is("p");
        Assert.assertTrue(o_testIs_mg155__18);
        boolean o_testIs_mg155__19 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg155__19);
        boolean o_testIs_mg155__20 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg155__20);
        boolean o_testIs_mg155__21 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg155__21);
        boolean o_testIs_mg155__22 = q.is("p a");
        Assert.assertFalse(o_testIs_mg155__22);
        boolean o_testIs_mg155__23 = q.is("a");
        Assert.assertFalse(o_testIs_mg155__23);
        Elements o_testIs_mg155__24 = p.getElementsContainingText(__DSPOT_searchText_39);
        Assert.assertTrue(o_testIs_mg155__24.isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg155__8);
        Assert.assertFalse(o_testIs_mg155__9);
        Assert.assertTrue(o_testIs_mg155__10);
        Assert.assertTrue(o_testIs_mg155__11);
        Assert.assertFalse(o_testIs_mg155__12);
        Assert.assertTrue(o_testIs_mg155__13);
        Assert.assertTrue(o_testIs_mg155__14);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg155__18);
        Assert.assertTrue(o_testIs_mg155__19);
        Assert.assertTrue(o_testIs_mg155__20);
        Assert.assertTrue(o_testIs_mg155__21);
        Assert.assertFalse(o_testIs_mg155__22);
        Assert.assertFalse(o_testIs_mg155__23);
    }

    @Test(timeout = 10000)
    public void testIs_mg154() throws Exception {
        String __DSPOT_searchText_38 = "-9M/^zOCxu?!rIXp5pNO";
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg154__8 = p.is("p");
        Assert.assertTrue(o_testIs_mg154__8);
        boolean o_testIs_mg154__9 = p.is("div");
        Assert.assertFalse(o_testIs_mg154__9);
        boolean o_testIs_mg154__10 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg154__10);
        boolean o_testIs_mg154__11 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg154__11);
        boolean o_testIs_mg154__12 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg154__12);
        boolean o_testIs_mg154__13 = p.is("*");
        Assert.assertTrue(o_testIs_mg154__13);
        boolean o_testIs_mg154__14 = p.is("div p");
        Assert.assertTrue(o_testIs_mg154__14);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg154__18 = q.is("p");
        Assert.assertTrue(o_testIs_mg154__18);
        boolean o_testIs_mg154__19 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg154__19);
        boolean o_testIs_mg154__20 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg154__20);
        boolean o_testIs_mg154__21 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg154__21);
        boolean o_testIs_mg154__22 = q.is("p a");
        Assert.assertFalse(o_testIs_mg154__22);
        boolean o_testIs_mg154__23 = q.is("a");
        Assert.assertFalse(o_testIs_mg154__23);
        Elements o_testIs_mg154__24 = p.getElementsContainingOwnText(__DSPOT_searchText_38);
        Assert.assertTrue(o_testIs_mg154__24.isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg154__8);
        Assert.assertFalse(o_testIs_mg154__9);
        Assert.assertTrue(o_testIs_mg154__10);
        Assert.assertTrue(o_testIs_mg154__11);
        Assert.assertFalse(o_testIs_mg154__12);
        Assert.assertTrue(o_testIs_mg154__13);
        Assert.assertTrue(o_testIs_mg154__14);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg154__18);
        Assert.assertTrue(o_testIs_mg154__19);
        Assert.assertTrue(o_testIs_mg154__20);
        Assert.assertTrue(o_testIs_mg154__21);
        Assert.assertFalse(o_testIs_mg154__22);
        Assert.assertFalse(o_testIs_mg154__23);
    }

    @Test(timeout = 10000)
    public void testIs_mg108() throws Exception {
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg108__7 = p.is("p");
        Assert.assertTrue(o_testIs_mg108__7);
        boolean o_testIs_mg108__8 = p.is("div");
        Assert.assertFalse(o_testIs_mg108__8);
        boolean o_testIs_mg108__9 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg108__9);
        boolean o_testIs_mg108__10 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg108__10);
        boolean o_testIs_mg108__11 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg108__11);
        boolean o_testIs_mg108__12 = p.is("*");
        Assert.assertTrue(o_testIs_mg108__12);
        boolean o_testIs_mg108__13 = p.is("div p");
        Assert.assertTrue(o_testIs_mg108__13);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg108__17 = q.is("p");
        Assert.assertTrue(o_testIs_mg108__17);
        boolean o_testIs_mg108__18 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg108__18);
        boolean o_testIs_mg108__19 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg108__19);
        boolean o_testIs_mg108__20 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg108__20);
        boolean o_testIs_mg108__21 = q.is("p a");
        Assert.assertFalse(o_testIs_mg108__21);
        boolean o_testIs_mg108__22 = q.is("a");
        Assert.assertFalse(o_testIs_mg108__22);
        Parser o_testIs_mg108__23 = doc.parser();
        Assert.assertFalse(((Parser) (o_testIs_mg108__23)).isTrackErrors());
        Assert.assertTrue(((Collection) (((Parser) (o_testIs_mg108__23)).getErrors())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg108__7);
        Assert.assertFalse(o_testIs_mg108__8);
        Assert.assertTrue(o_testIs_mg108__9);
        Assert.assertTrue(o_testIs_mg108__10);
        Assert.assertFalse(o_testIs_mg108__11);
        Assert.assertTrue(o_testIs_mg108__12);
        Assert.assertTrue(o_testIs_mg108__13);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg108__17);
        Assert.assertTrue(o_testIs_mg108__18);
        Assert.assertTrue(o_testIs_mg108__19);
        Assert.assertTrue(o_testIs_mg108__20);
        Assert.assertFalse(o_testIs_mg108__21);
        Assert.assertFalse(o_testIs_mg108__22);
    }

    @Test(timeout = 10000)
    public void testIs_mg228() throws Exception {
        int __DSPOT_index_89 = -2007281300;
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg228__8 = p.is("p");
        Assert.assertTrue(o_testIs_mg228__8);
        boolean o_testIs_mg228__9 = p.is("div");
        Assert.assertFalse(o_testIs_mg228__9);
        boolean o_testIs_mg228__10 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg228__10);
        boolean o_testIs_mg228__11 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg228__11);
        boolean o_testIs_mg228__12 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg228__12);
        boolean o_testIs_mg228__13 = p.is("*");
        Assert.assertTrue(o_testIs_mg228__13);
        boolean o_testIs_mg228__14 = p.is("div p");
        Assert.assertTrue(o_testIs_mg228__14);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg228__18 = q.is("p");
        Assert.assertTrue(o_testIs_mg228__18);
        boolean o_testIs_mg228__19 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg228__19);
        boolean o_testIs_mg228__20 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg228__20);
        boolean o_testIs_mg228__21 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg228__21);
        boolean o_testIs_mg228__22 = q.is("p a");
        Assert.assertFalse(o_testIs_mg228__22);
        boolean o_testIs_mg228__23 = q.is("a");
        Assert.assertFalse(o_testIs_mg228__23);
        Elements o_testIs_mg228__24 = q.getElementsByIndexEquals(__DSPOT_index_89);
        Assert.assertTrue(o_testIs_mg228__24.isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg228__8);
        Assert.assertFalse(o_testIs_mg228__9);
        Assert.assertTrue(o_testIs_mg228__10);
        Assert.assertTrue(o_testIs_mg228__11);
        Assert.assertFalse(o_testIs_mg228__12);
        Assert.assertTrue(o_testIs_mg228__13);
        Assert.assertTrue(o_testIs_mg228__14);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg228__18);
        Assert.assertTrue(o_testIs_mg228__19);
        Assert.assertTrue(o_testIs_mg228__20);
        Assert.assertTrue(o_testIs_mg228__21);
        Assert.assertFalse(o_testIs_mg228__22);
        Assert.assertFalse(o_testIs_mg228__23);
    }

    @Test(timeout = 10000)
    public void testIs_mg148() throws Exception {
        String __DSPOT_valuePrefix_32 = "(y_V1a;?h(*fl<xJgehg";
        String __DSPOT_key_31 = "L9rC)A6fdF&0xT!&b-W-";
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg148__9 = p.is("p");
        Assert.assertTrue(o_testIs_mg148__9);
        boolean o_testIs_mg148__10 = p.is("div");
        Assert.assertFalse(o_testIs_mg148__10);
        boolean o_testIs_mg148__11 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg148__11);
        boolean o_testIs_mg148__12 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg148__12);
        boolean o_testIs_mg148__13 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg148__13);
        boolean o_testIs_mg148__14 = p.is("*");
        Assert.assertTrue(o_testIs_mg148__14);
        boolean o_testIs_mg148__15 = p.is("div p");
        Assert.assertTrue(o_testIs_mg148__15);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg148__19 = q.is("p");
        Assert.assertTrue(o_testIs_mg148__19);
        boolean o_testIs_mg148__20 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg148__20);
        boolean o_testIs_mg148__21 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg148__21);
        boolean o_testIs_mg148__22 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg148__22);
        boolean o_testIs_mg148__23 = q.is("p a");
        Assert.assertFalse(o_testIs_mg148__23);
        boolean o_testIs_mg148__24 = q.is("a");
        Assert.assertFalse(o_testIs_mg148__24);
        Elements o_testIs_mg148__25 = p.getElementsByAttributeValueStarting(__DSPOT_key_31, __DSPOT_valuePrefix_32);
        Assert.assertTrue(o_testIs_mg148__25.isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg148__9);
        Assert.assertFalse(o_testIs_mg148__10);
        Assert.assertTrue(o_testIs_mg148__11);
        Assert.assertTrue(o_testIs_mg148__12);
        Assert.assertFalse(o_testIs_mg148__13);
        Assert.assertTrue(o_testIs_mg148__14);
        Assert.assertTrue(o_testIs_mg148__15);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg148__19);
        Assert.assertTrue(o_testIs_mg148__20);
        Assert.assertTrue(o_testIs_mg148__21);
        Assert.assertTrue(o_testIs_mg148__22);
        Assert.assertFalse(o_testIs_mg148__23);
        Assert.assertFalse(o_testIs_mg148__24);
    }
}

