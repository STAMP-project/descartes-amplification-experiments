package org.jsoup.nodes;


import java.util.Collection;
import org.jsoup.Jsoup;
import org.junit.Assert;
import org.junit.Test;


public class ElementTest {
    private String reference = "<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>";

    @Test(timeout = 10000)
    public void testIs() throws Exception {
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs__7 = p.is("p");
        Assert.assertTrue(o_testIs__7);
        boolean o_testIs__8 = p.is("div");
        Assert.assertFalse(o_testIs__8);
        boolean o_testIs__9 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs__9);
        boolean o_testIs__10 = p.is("p:first-child");
        Assert.assertTrue(o_testIs__10);
        boolean o_testIs__11 = p.is("p:last-child");
        Assert.assertFalse(o_testIs__11);
        boolean o_testIs__12 = p.is("*");
        Assert.assertTrue(o_testIs__12);
        boolean o_testIs__13 = p.is("div p");
        Assert.assertTrue(o_testIs__13);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs__17 = q.is("p");
        Assert.assertTrue(o_testIs__17);
        boolean o_testIs__18 = q.is("p ~ p");
        Assert.assertTrue(o_testIs__18);
        boolean o_testIs__19 = q.is("p + p");
        Assert.assertTrue(o_testIs__19);
        boolean o_testIs__20 = q.is("p:last-child");
        Assert.assertTrue(o_testIs__20);
        boolean o_testIs__21 = q.is("p a");
        Assert.assertFalse(o_testIs__21);
        boolean o_testIs__22 = q.is("a");
        Assert.assertFalse(o_testIs__22);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs__7);
        Assert.assertFalse(o_testIs__8);
        Assert.assertTrue(o_testIs__9);
        Assert.assertTrue(o_testIs__10);
        Assert.assertFalse(o_testIs__11);
        Assert.assertTrue(o_testIs__12);
        Assert.assertTrue(o_testIs__13);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs__17);
        Assert.assertTrue(o_testIs__18);
        Assert.assertTrue(o_testIs__19);
        Assert.assertTrue(o_testIs__20);
        Assert.assertFalse(o_testIs__21);
    }

    @Test(timeout = 10000)
    public void testIs_literalMutationString75() throws Exception {
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_literalMutationString75__7 = p.is("p");
        Assert.assertTrue(o_testIs_literalMutationString75__7);
        boolean o_testIs_literalMutationString75__8 = p.is("div");
        Assert.assertFalse(o_testIs_literalMutationString75__8);
        boolean o_testIs_literalMutationString75__9 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_literalMutationString75__9);
        boolean o_testIs_literalMutationString75__10 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_literalMutationString75__10);
        boolean o_testIs_literalMutationString75__11 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_literalMutationString75__11);
        boolean o_testIs_literalMutationString75__12 = p.is("*");
        Assert.assertTrue(o_testIs_literalMutationString75__12);
        boolean o_testIs_literalMutationString75__13 = p.is("div p");
        Assert.assertTrue(o_testIs_literalMutationString75__13);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_literalMutationString75__17 = q.is("p");
        Assert.assertTrue(o_testIs_literalMutationString75__17);
        boolean o_testIs_literalMutationString75__18 = q.is("p0~ p");
        Assert.assertFalse(o_testIs_literalMutationString75__18);
        boolean o_testIs_literalMutationString75__19 = q.is("p + p");
        Assert.assertTrue(o_testIs_literalMutationString75__19);
        boolean o_testIs_literalMutationString75__20 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_literalMutationString75__20);
        boolean o_testIs_literalMutationString75__21 = q.is("p a");
        Assert.assertFalse(o_testIs_literalMutationString75__21);
        boolean o_testIs_literalMutationString75__22 = q.is("a");
        Assert.assertFalse(o_testIs_literalMutationString75__22);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_literalMutationString75__7);
        Assert.assertFalse(o_testIs_literalMutationString75__8);
        Assert.assertTrue(o_testIs_literalMutationString75__9);
        Assert.assertTrue(o_testIs_literalMutationString75__10);
        Assert.assertFalse(o_testIs_literalMutationString75__11);
        Assert.assertTrue(o_testIs_literalMutationString75__12);
        Assert.assertTrue(o_testIs_literalMutationString75__13);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_literalMutationString75__17);
        Assert.assertFalse(o_testIs_literalMutationString75__18);
        Assert.assertTrue(o_testIs_literalMutationString75__19);
        Assert.assertTrue(o_testIs_literalMutationString75__20);
        Assert.assertFalse(o_testIs_literalMutationString75__21);
    }

    @Test(timeout = 10000)
    public void testIs_mg104() throws Exception {
        String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        Document doc = Jsoup.parse(html);
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Element p = doc.select("p").first();
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        boolean o_testIs_mg104__7 = p.is("p");
        Assert.assertTrue(o_testIs_mg104__7);
        boolean o_testIs_mg104__8 = p.is("div");
        Assert.assertFalse(o_testIs_mg104__8);
        boolean o_testIs_mg104__9 = p.is("p:has(a)");
        Assert.assertTrue(o_testIs_mg104__9);
        boolean o_testIs_mg104__10 = p.is("p:first-child");
        Assert.assertTrue(o_testIs_mg104__10);
        boolean o_testIs_mg104__11 = p.is("p:last-child");
        Assert.assertFalse(o_testIs_mg104__11);
        boolean o_testIs_mg104__12 = p.is("*");
        Assert.assertTrue(o_testIs_mg104__12);
        boolean o_testIs_mg104__13 = p.is("div p");
        Assert.assertTrue(o_testIs_mg104__13);
        Element q = doc.select("p").last();
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        boolean o_testIs_mg104__17 = q.is("p");
        Assert.assertTrue(o_testIs_mg104__17);
        boolean o_testIs_mg104__18 = q.is("p ~ p");
        Assert.assertTrue(o_testIs_mg104__18);
        boolean o_testIs_mg104__19 = q.is("p + p");
        Assert.assertTrue(o_testIs_mg104__19);
        boolean o_testIs_mg104__20 = q.is("p:last-child");
        Assert.assertTrue(o_testIs_mg104__20);
        boolean o_testIs_mg104__21 = q.is("p a");
        Assert.assertFalse(o_testIs_mg104__21);
        boolean o_testIs_mg104__22 = q.is("a");
        Assert.assertFalse(o_testIs_mg104__22);
        Document o_testIs_mg104__23 = doc.normalise();
        Assert.assertTrue(((Document) (o_testIs_mg104__23)).hasText());
        Assert.assertFalse(((Collection) (((Document) (o_testIs_mg104__23)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (o_testIs_mg104__23)).isBlock());
        Assert.assertFalse(((Document) (o_testIs_mg104__23)).hasParent());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertTrue(((Element) (p)).hasText());
        Assert.assertFalse(((Collection) (((Element) (p)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (p)).isBlock());
        Assert.assertTrue(((Element) (p)).hasParent());
        Assert.assertTrue(o_testIs_mg104__7);
        Assert.assertFalse(o_testIs_mg104__8);
        Assert.assertTrue(o_testIs_mg104__9);
        Assert.assertTrue(o_testIs_mg104__10);
        Assert.assertFalse(o_testIs_mg104__11);
        Assert.assertTrue(o_testIs_mg104__12);
        Assert.assertTrue(o_testIs_mg104__13);
        Assert.assertTrue(((Element) (q)).hasText());
        Assert.assertFalse(((Collection) (((Element) (q)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (q)).isBlock());
        Assert.assertTrue(((Element) (q)).hasParent());
        Assert.assertTrue(o_testIs_mg104__17);
        Assert.assertTrue(o_testIs_mg104__18);
        Assert.assertTrue(o_testIs_mg104__19);
        Assert.assertTrue(o_testIs_mg104__20);
        Assert.assertFalse(o_testIs_mg104__21);
        Assert.assertFalse(o_testIs_mg104__22);
    }
}

