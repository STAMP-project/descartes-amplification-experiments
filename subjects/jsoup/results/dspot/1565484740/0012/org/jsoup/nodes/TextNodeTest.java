package org.jsoup.nodes;


import java.util.Collection;
import org.jsoup.Jsoup;
import org.jsoup.TextUtil;
import org.jsoup.parser.Parser;
import org.jsoup.select.Elements;
import org.junit.Assert;
import org.junit.Test;


public class TextNodeTest {
    @Test(timeout = 10000)
    public void testSplitAnEmbolden() throws Exception {
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node o_testSplitAnEmbolden__10 = tail.wrap("<b></b>");
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden__10)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden__10)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden__10)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden__10)).hasParent());
        TextUtil.stripNewlines(div.html());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden__10)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden__10)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden__10)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden__10)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_mg96_failAssert0() throws Exception {
        try {
            String __DSPOT_regex_40 = "0xT!&b-W-(y_V1a;?h(*";
            Document doc = Jsoup.parse("<div>Hello there</div>");
            Element div = doc.select("div").first();
            TextNode tn = ((TextNode) (div.childNode(0)));
            TextNode tail = tn.splitText(6);
            tail.wrap("<b></b>");
            TextUtil.stripNewlines(div.html());
            div.getElementsMatchingOwnText(__DSPOT_regex_40);
            org.junit.Assert.fail("testSplitAnEmbolden_mg96 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Pattern syntax error: 0xT!&b-W-(y_V1a;?h(*", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_mg86_failAssert0() throws Exception {
        try {
            String __DSPOT_regex_28 = "GGUV@1wly$),bA%.UJum";
            String __DSPOT_key_27 = "Y][1u)p]QM-k,I]-r8//";
            Document doc = Jsoup.parse("<div>Hello there</div>");
            Element div = doc.select("div").first();
            TextNode tn = ((TextNode) (div.childNode(0)));
            TextNode tail = tn.splitText(6);
            tail.wrap("<b></b>");
            TextUtil.stripNewlines(div.html());
            div.getElementsByAttributeValueMatching(__DSPOT_key_27, __DSPOT_regex_28);
            org.junit.Assert.fail("testSplitAnEmbolden_mg86 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_mg90() throws Exception {
        int __DSPOT_index_34 = 756832910;
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node o_testSplitAnEmbolden_mg90__11 = tail.wrap("<b></b>");
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg90__11)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg90__11)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg90__11)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg90__11)).hasParent());
        TextUtil.stripNewlines(div.html());
        Elements o_testSplitAnEmbolden_mg90__14 = div.getElementsByIndexEquals(__DSPOT_index_34);
        Assert.assertTrue(o_testSplitAnEmbolden_mg90__14.isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg90__11)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg90__11)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg90__11)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg90__11)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_mg84() throws Exception {
        String __DSPOT_match_24 = "!][,J^uy}s#6CE3#^t l";
        String __DSPOT_key_23 = "%;sG#Ahw*&z*$G`c:wkJ";
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node o_testSplitAnEmbolden_mg84__12 = tail.wrap("<b></b>");
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg84__12)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg84__12)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg84__12)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg84__12)).hasParent());
        TextUtil.stripNewlines(div.html());
        Elements o_testSplitAnEmbolden_mg84__15 = div.getElementsByAttributeValueContaining(__DSPOT_key_23, __DSPOT_match_24);
        Assert.assertTrue(o_testSplitAnEmbolden_mg84__15.isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg84__12)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg84__12)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg84__12)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg84__12)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_mg95() throws Exception {
        String __DSPOT_searchText_39 = "JWOM_4gdsL9rC)A6fdF&";
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node o_testSplitAnEmbolden_mg95__11 = tail.wrap("<b></b>");
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg95__11)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg95__11)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg95__11)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg95__11)).hasParent());
        TextUtil.stripNewlines(div.html());
        Elements o_testSplitAnEmbolden_mg95__14 = div.getElementsContainingText(__DSPOT_searchText_39);
        Assert.assertTrue(o_testSplitAnEmbolden_mg95__14.isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg95__11)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg95__11)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg95__11)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg95__11)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_mg94() throws Exception {
        String __DSPOT_searchText_38 = "=u eShD9P/&h4]]s%=])";
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node o_testSplitAnEmbolden_mg94__11 = tail.wrap("<b></b>");
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg94__11)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg94__11)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg94__11)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg94__11)).hasParent());
        TextUtil.stripNewlines(div.html());
        Elements o_testSplitAnEmbolden_mg94__14 = div.getElementsContainingOwnText(__DSPOT_searchText_38);
        Assert.assertTrue(o_testSplitAnEmbolden_mg94__14.isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg94__11)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg94__11)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg94__11)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg94__11)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_mg82() throws Exception {
        String __DSPOT_keyPrefix_20 = "QndBdj-qEHp!#I]LDWP=";
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node o_testSplitAnEmbolden_mg82__11 = tail.wrap("<b></b>");
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg82__11)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg82__11)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg82__11)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg82__11)).hasParent());
        TextUtil.stripNewlines(div.html());
        Elements o_testSplitAnEmbolden_mg82__14 = div.getElementsByAttributeStarting(__DSPOT_keyPrefix_20);
        Assert.assertTrue(o_testSplitAnEmbolden_mg82__14.isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg82__11)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg82__11)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg82__11)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg82__11)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_mg88() throws Exception {
        String __DSPOT_valuePrefix_32 = "r@)C1RND7C-6y}W`_*s>";
        String __DSPOT_key_31 = "L#vK5WR{oE1L&q_{{l>^";
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node o_testSplitAnEmbolden_mg88__12 = tail.wrap("<b></b>");
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg88__12)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg88__12)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg88__12)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg88__12)).hasParent());
        TextUtil.stripNewlines(div.html());
        Elements o_testSplitAnEmbolden_mg88__15 = div.getElementsByAttributeValueStarting(__DSPOT_key_31, __DSPOT_valuePrefix_32);
        Assert.assertTrue(o_testSplitAnEmbolden_mg88__15.isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg88__12)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg88__12)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg88__12)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg88__12)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_rv145() throws Exception {
        String __DSPOT_attributeKey_64 = "CMs-NCPSNsen+,yJLZTg";
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node __DSPOT_invoc_10 = tail.wrap("<b></b>");
        TextUtil.stripNewlines(div.html());
        String o_testSplitAnEmbolden_rv145__16 = __DSPOT_invoc_10.absUrl(__DSPOT_attributeKey_64);
        Assert.assertEquals("", o_testSplitAnEmbolden_rv145__16);
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_rv156() throws Exception {
        String __DSPOT_attributeKey_72 = "Y3Pe#L360:}[gYFUICnc";
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node __DSPOT_invoc_10 = tail.wrap("<b></b>");
        TextUtil.stripNewlines(div.html());
        boolean o_testSplitAnEmbolden_rv156__16 = __DSPOT_invoc_10.hasAttr(__DSPOT_attributeKey_72);
        Assert.assertFalse(o_testSplitAnEmbolden_rv156__16);
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_mg44() throws Exception {
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node o_testSplitAnEmbolden_mg44__10 = tail.wrap("<b></b>");
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg44__10)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg44__10)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg44__10)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg44__10)).hasParent());
        TextUtil.stripNewlines(div.html());
        Document o_testSplitAnEmbolden_mg44__13 = doc.normalise();
        Assert.assertFalse(((Document) (o_testSplitAnEmbolden_mg44__13)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (o_testSplitAnEmbolden_mg44__13)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (o_testSplitAnEmbolden_mg44__13)).hasText());
        Assert.assertFalse(((Document) (o_testSplitAnEmbolden_mg44__13)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (o_testSplitAnEmbolden_mg44__13)).toString());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg44__10)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg44__10)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg44__10)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg44__10)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_mg87() throws Exception {
        String __DSPOT_value_30 = "y;s?/OCDfviVTx>DODA!";
        String __DSPOT_key_29 = "&)<4oK[>Va&1`i[aMe!@";
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node o_testSplitAnEmbolden_mg87__12 = tail.wrap("<b></b>");
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg87__12)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg87__12)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg87__12)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg87__12)).hasParent());
        TextUtil.stripNewlines(div.html());
        Elements o_testSplitAnEmbolden_mg87__15 = div.getElementsByAttributeValueNot(__DSPOT_key_29, __DSPOT_value_30);
        Assert.assertFalse(o_testSplitAnEmbolden_mg87__15.isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg87__12)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg87__12)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg87__12)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg87__12)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_rv166() throws Exception {
        String __DSPOT_attributeKey_74 = "SU7EvLBHp9HIW?9U-1%h";
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node __DSPOT_invoc_10 = tail.wrap("<b></b>");
        TextUtil.stripNewlines(div.html());
        Node o_testSplitAnEmbolden_rv166__16 = __DSPOT_invoc_10.removeAttr(__DSPOT_attributeKey_74);
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_rv166__16)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_rv166__16)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_rv166__16)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_rv166__16)).hasParent());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_mg97() throws Exception {
        String __DSPOT_regex_41 = "fl<xJgehgad?HCt1H=N6";
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node o_testSplitAnEmbolden_mg97__11 = tail.wrap("<b></b>");
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg97__11)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg97__11)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg97__11)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg97__11)).hasParent());
        TextUtil.stripNewlines(div.html());
        Elements o_testSplitAnEmbolden_mg97__14 = div.getElementsMatchingText(__DSPOT_regex_41);
        Assert.assertTrue(o_testSplitAnEmbolden_mg97__14.isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg97__11)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg97__11)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg97__11)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg97__11)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_mg85() throws Exception {
        String __DSPOT_valueSuffix_26 = "r}4@(!YL#ZQsb>_1JVt2";
        String __DSPOT_key_25 = "GvSzxk?Yw`yc.L`HJ*J8";
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node o_testSplitAnEmbolden_mg85__12 = tail.wrap("<b></b>");
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg85__12)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg85__12)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg85__12)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg85__12)).hasParent());
        TextUtil.stripNewlines(div.html());
        Elements o_testSplitAnEmbolden_mg85__15 = div.getElementsByAttributeValueEnding(__DSPOT_key_25, __DSPOT_valueSuffix_26);
        Assert.assertTrue(o_testSplitAnEmbolden_mg85__15.isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg85__12)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg85__12)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg85__12)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg85__12)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_mg48() throws Exception {
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello there\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element div = doc.select("div").first();
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello there\n</div>", ((Element) (div)).toString());
        TextNode tn = ((TextNode) (div.childNode(0)));
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello there", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello there", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        TextNode tail = tn.splitText(6);
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Node o_testSplitAnEmbolden_mg48__10 = tail.wrap("<b></b>");
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg48__10)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg48__10)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg48__10)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg48__10)).hasParent());
        TextUtil.stripNewlines(div.html());
        Parser o_testSplitAnEmbolden_mg48__13 = doc.parser();
        Assert.assertFalse(((Parser) (o_testSplitAnEmbolden_mg48__13)).isTrackErrors());
        Assert.assertTrue(((Collection) (((Parser) (o_testSplitAnEmbolden_mg48__13)).getErrors())).isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Collection) (((Document) (doc)).getAllElements())).isEmpty());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <div>\n   Hello \n   <b>there</b>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (div)).isBlock());
        Assert.assertFalse(((Collection) (((Element) (div)).getAllElements())).isEmpty());
        Assert.assertTrue(((Element) (div)).hasText());
        Assert.assertTrue(((Element) (div)).hasParent());
        Assert.assertEquals("<div>\n Hello \n <b>there</b>\n</div>", ((Element) (div)).toString());
        Assert.assertFalse(((TextNode) (tn)).isBlank());
        Assert.assertEquals("Hello ", ((TextNode) (tn)).getWholeText());
        Assert.assertEquals("\nHello ", ((TextNode) (tn)).toString());
        Assert.assertTrue(((TextNode) (tn)).hasParent());
        Assert.assertFalse(((TextNode) (tail)).isBlank());
        Assert.assertEquals("there", ((TextNode) (tail)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (tail)).toString());
        Assert.assertTrue(((TextNode) (tail)).hasParent());
        Assert.assertFalse(((TextNode) (o_testSplitAnEmbolden_mg48__10)).isBlank());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg48__10)).getWholeText());
        Assert.assertEquals("there", ((TextNode) (o_testSplitAnEmbolden_mg48__10)).toString());
        Assert.assertTrue(((TextNode) (o_testSplitAnEmbolden_mg48__10)).hasParent());
    }

    @Test(timeout = 10000)
    public void testSplitAnEmbolden_mg66_failAssert0() throws Exception {
        try {
            int __DSPOT_index_16 = -82777264;
            Document doc = Jsoup.parse("<div>Hello there</div>");
            Element div = doc.select("div").first();
            TextNode tn = ((TextNode) (div.childNode(0)));
            TextNode tail = tn.splitText(6);
            tail.wrap("<b></b>");
            TextUtil.stripNewlines(div.html());
            div.child(__DSPOT_index_16);
            org.junit.Assert.fail("testSplitAnEmbolden_mg66 should have thrown ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException expected) {
            Assert.assertEquals("-82777264", expected.getMessage());
        }
    }
}

