package org.jsoup.integration;


/**
 * Tests Jsoup.connect against a local server.
 */
public class ConnectTest {
    private static java.lang.String echoUrl;

    @org.junit.BeforeClass
    public static void setUp() {
        org.jsoup.integration.TestServer.start();
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|setUp()|0", (org.jsoup.integration.ConnectTest.echoUrl = org.jsoup.integration.servlets.EchoServlet.Url));
    }

    @org.junit.AfterClass
    public static void tearDown() {
        org.jsoup.integration.TestServer.stop();
    }

    @org.junit.Test
    public void canConnectToLocalServer() throws java.io.IOException {
        java.lang.String url = org.jsoup.integration.servlets.HelloServlet.Url;
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|canConnectToLocalServer()|2", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|canConnectToLocalServer()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|canConnectToLocalServer()|0", url))).get());
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.ConnectTest|canConnectToLocalServer()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|canConnectToLocalServer()|3", org.jsoup.nodes.Document.class, doc).selectFirst("p"));
        org.junit.Assert.assertEquals("Hello, World!", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|canConnectToLocalServer()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.ConnectTest|canConnectToLocalServer()|5", org.jsoup.nodes.Element.class, p).text()));
    }

    @org.junit.Test
    public void fetchURl() throws java.io.IOException {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|fetchURl()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.jsoup.integration.ConnectTest|fetchURl()|1", java.net.URL.class, new java.net.URL(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|fetchURl()|0", org.jsoup.integration.ConnectTest.echoUrl))), (10 * 1000)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|fetchURl()|5", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|fetchURl()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|fetchURl()|3", org.jsoup.nodes.Document.class, doc).title()).contains("Environment Variables")));
    }

    @org.junit.Test
    public void fetchURIWithWihtespace() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|fetchURIWithWihtespace()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|fetchURIWithWihtespace()|0", org.jsoup.integration.ConnectTest.echoUrl)) + "#with whitespaces")));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|fetchURIWithWihtespace()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|fetchURIWithWihtespace()|2", org.jsoup.Connection.class, con).get());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|fetchURIWithWihtespace()|6", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|fetchURIWithWihtespace()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|fetchURIWithWihtespace()|4", org.jsoup.nodes.Document.class, doc).title()).contains("Environment Variables")));
    }

    @org.junit.Test
    public void exceptOnUnsupportedProtocol() {
        java.lang.String url = "file://etc/passwd";
        boolean threw = false;
        try {
            org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|exceptOnUnsupportedProtocol()|2", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|exceptOnUnsupportedProtocol()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|exceptOnUnsupportedProtocol()|0", url))).get());
        } catch (java.net.MalformedURLException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|exceptOnUnsupportedProtocol()|3", (threw = true));
            org.junit.Assert.assertEquals("java.net.MalformedURLException: Only http & https protocols supported", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|exceptOnUnsupportedProtocol()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.MalformedURLException>observeState("org.jsoup.integration.ConnectTest|exceptOnUnsupportedProtocol()|4", java.net.MalformedURLException.class, e).toString()));
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|exceptOnUnsupportedProtocol()|6", threw));
    }

    private static java.lang.String ihVal(java.lang.String key, org.jsoup.nodes.Document doc) {
        final org.jsoup.nodes.Element first = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.ConnectTest|ihVal(java.lang.String,org.jsoup.nodes.Document)|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.integration.ConnectTest|ihVal(java.lang.String,org.jsoup.nodes.Document)|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|ihVal(java.lang.String,org.jsoup.nodes.Document)|0", org.jsoup.nodes.Document.class, doc).select((("th:contains(" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|ihVal(java.lang.String,org.jsoup.nodes.Document)|1", key))) + ") + td"))).first());
        return eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|ihVal(java.lang.String,org.jsoup.nodes.Document)|7", ((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.ConnectTest|ihVal(java.lang.String,org.jsoup.nodes.Document)|4", org.jsoup.nodes.Element.class, first)) != null ? eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|ihVal(java.lang.String,org.jsoup.nodes.Document)|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.ConnectTest|ihVal(java.lang.String,org.jsoup.nodes.Document)|5", org.jsoup.nodes.Element.class, first).text()) : null));
    }

    @org.junit.Test
    public void doesPost() throws java.io.IOException {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPost()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesPost()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesPost()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesPost()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesPost()|0", org.jsoup.integration.ConnectTest.echoUrl))).data("uname", "Jsoup", "uname", "Jonathan", "百", "度一下")).cookie("auth", "token")).post());
        org.junit.Assert.assertEquals("POST", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesPost()|6", org.jsoup.integration.ConnectTest.ihVal("Method", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPost()|5", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("gzip", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesPost()|8", org.jsoup.integration.ConnectTest.ihVal("Accept-Encoding", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPost()|7", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("auth=token", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesPost()|10", org.jsoup.integration.ConnectTest.ihVal("Cookie", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPost()|9", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("度一下", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesPost()|12", org.jsoup.integration.ConnectTest.ihVal("百", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPost()|11", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("Jsoup, Jonathan", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesPost()|14", org.jsoup.integration.ConnectTest.ihVal("uname", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPost()|13", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("application/x-www-form-urlencoded; charset=UTF-8", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesPost()|16", org.jsoup.integration.ConnectTest.ihVal("Content-Type", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPost()|15", org.jsoup.nodes.Document.class, doc))));
    }

    @org.junit.Test
    public void sendsRequestBodyJsonWithData() throws java.io.IOException {
        final java.lang.String body = "{key:value}";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|8", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|7", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|6", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|4", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|0", org.jsoup.integration.ConnectTest.echoUrl))).requestBody(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|2", body))).header("Content-Type", "application/json")).userAgent(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|5", org.jsoup.integration.UrlConnectTest.browserUa))).data("foo", "true")).post());
        org.junit.Assert.assertEquals("POST", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|10", org.jsoup.integration.ConnectTest.ihVal("Method", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|9", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("application/json", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|12", org.jsoup.integration.ConnectTest.ihVal("Content-Type", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|11", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("foo=true", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|14", org.jsoup.integration.ConnectTest.ihVal("Query String", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|13", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|15", body), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|17", org.jsoup.integration.ConnectTest.ihVal("Post Data", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithData()|16", org.jsoup.nodes.Document.class, doc))));
    }

    @org.junit.Test
    public void sendsRequestBodyJsonWithoutData() throws java.io.IOException {
        final java.lang.String body = "{key:value}";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|7", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|6", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|4", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|0", org.jsoup.integration.ConnectTest.echoUrl))).requestBody(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|2", body))).header("Content-Type", "application/json")).userAgent(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|5", org.jsoup.integration.UrlConnectTest.browserUa))).post());
        org.junit.Assert.assertEquals("POST", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|9", org.jsoup.integration.ConnectTest.ihVal("Method", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|8", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("application/json", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|11", org.jsoup.integration.ConnectTest.ihVal("Content-Type", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|10", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|12", body), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|14", org.jsoup.integration.ConnectTest.ihVal("Post Data", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyJsonWithoutData()|13", org.jsoup.nodes.Document.class, doc))));
    }

    @org.junit.Test
    public void sendsRequestBody() throws java.io.IOException {
        final java.lang.String body = "{key:value}";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBody()|7", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBody()|6", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBody()|4", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBody()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBody()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBody()|0", org.jsoup.integration.ConnectTest.echoUrl))).requestBody(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBody()|2", body))).header("Content-Type", "text/plain")).userAgent(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBody()|5", org.jsoup.integration.UrlConnectTest.browserUa))).post());
        org.junit.Assert.assertEquals("POST", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBody()|9", org.jsoup.integration.ConnectTest.ihVal("Method", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBody()|8", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("text/plain", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBody()|11", org.jsoup.integration.ConnectTest.ihVal("Content-Type", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBody()|10", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBody()|12", body), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBody()|14", org.jsoup.integration.ConnectTest.ihVal("Post Data", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBody()|13", org.jsoup.nodes.Document.class, doc))));
    }

    @org.junit.Test
    public void sendsRequestBodyWithUrlParams() throws java.io.IOException {
        final java.lang.String body = "{key:value}";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|8", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|7", org.jsoup.Connection.class, // todo - if user sets content-type, we should append postcharset
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|5", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|4", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|0", org.jsoup.integration.ConnectTest.echoUrl))).requestBody(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|2", body))).data("uname", "Jsoup", "uname", "Jonathan", "百", "度一下")).header("Content-Type", "text/plain")).userAgent(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|6", org.jsoup.integration.UrlConnectTest.browserUa))).post());
        org.junit.Assert.assertEquals("POST", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|10", org.jsoup.integration.ConnectTest.ihVal("Method", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|9", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("uname=Jsoup&uname=Jonathan&%E7%99%BE=%E5%BA%A6%E4%B8%80%E4%B8%8B", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|12", org.jsoup.integration.ConnectTest.ihVal("Query String", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|11", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|13", body), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|15", org.jsoup.integration.ConnectTest.ihVal("Post Data", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|sendsRequestBodyWithUrlParams()|14", org.jsoup.nodes.Document.class, doc))));
    }

    @org.junit.Test
    public void doesGet() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesGet()|4", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesGet()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesGet()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesGet()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesGet()|0", org.jsoup.integration.ConnectTest.echoUrl)) + "?what=the"))).userAgent("Mozilla")).referrer("http://example.com")).data("what", "about & me?"));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesGet()|6", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesGet()|5", org.jsoup.Connection.class, con).get());
        org.junit.Assert.assertEquals("what=the&what=about+%26+me%3F", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesGet()|8", org.jsoup.integration.ConnectTest.ihVal("Query String", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesGet()|7", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("the, about & me?", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesGet()|10", org.jsoup.integration.ConnectTest.ihVal("what", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesGet()|9", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("Mozilla", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesGet()|12", org.jsoup.integration.ConnectTest.ihVal("User-Agent", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesGet()|11", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("http://example.com", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesGet()|14", org.jsoup.integration.ConnectTest.ihVal("Referer", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesGet()|13", org.jsoup.nodes.Document.class, doc))));
    }

    @org.junit.Test
    public void doesPut() throws java.io.IOException {
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|doesPut()|6", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesPut()|5", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesPut()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesPut()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesPut()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesPut()|0", org.jsoup.integration.ConnectTest.echoUrl))).data("uname", "Jsoup", "uname", "Jonathan", "百", "度一下")).cookie("auth", "token")).method(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Method>observeState("org.jsoup.integration.ConnectTest|doesPut()|4", org.jsoup.Connection.Method.class, org.jsoup.Connection.Method.PUT))).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPut()|8", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|doesPut()|7", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals("PUT", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesPut()|10", org.jsoup.integration.ConnectTest.ihVal("Method", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPut()|9", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("gzip", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesPut()|12", org.jsoup.integration.ConnectTest.ihVal("Accept-Encoding", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPut()|11", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("auth=token", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesPut()|14", org.jsoup.integration.ConnectTest.ihVal("Cookie", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPut()|13", org.jsoup.nodes.Document.class, doc))));
    }

    // Slow Rider tests. Ignored by default so tests don't take aaages
    @org.junit.Ignore
    @org.junit.Test
    public void canInterruptBodyStringRead() throws java.io.IOException, java.lang.InterruptedException {
        // todo - implement in interruptable channels, so it's immediate
        final java.lang.String[] body = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|0", java.lang.String[].class, new java.lang.String[1]);
        java.lang.Thread runner = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Thread>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|10", java.lang.Thread.class, new java.lang.Thread(new java.lang.Runnable() {
            public void run() {
                try {
                    org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|4", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|2", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(org.jsoup.integration.servlets.SlowRider.Url)).timeout((15 * 1000))).execute());
                    eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|7", (eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|5", java.lang.String[].class, body)[0] = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|6", org.jsoup.Connection.Response.class, res).body()));
                } catch (java.io.IOException e) {
                    throw eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.RuntimeException>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|9", java.lang.RuntimeException.class, new java.lang.RuntimeException(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.IOException>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|8", java.io.IOException.class, e)));
                }
            }
        }));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Thread>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|11", java.lang.Thread.class, runner).start();
        java.lang.Thread.sleep((1000 * 3));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Thread>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|12", java.lang.Thread.class, runner).interrupt();
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Thread>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|13", java.lang.Thread.class, runner).isInterrupted()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Thread>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|15", java.lang.Thread.class, runner).join();
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|18", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|16", java.lang.String[].class, body)[0]).length())) > 0));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|21", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.jsoup.integration.ConnectTest|canInterruptBodyStringRead()|19", java.lang.String[].class, body)[0]).contains("<p>Are you still there?")));
    }

    @org.junit.Ignore
    @org.junit.Test
    public void canInterruptDocumentRead() throws java.io.IOException, java.lang.InterruptedException {
        // todo - implement in interruptable channels, so it's immediate
        final java.lang.String[] body = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|0", java.lang.String[].class, new java.lang.String[1]);
        java.lang.Thread runner = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Thread>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|11", java.lang.Thread.class, new java.lang.Thread(new java.lang.Runnable() {
            public void run() {
                try {
                    org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|4", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|2", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(org.jsoup.integration.servlets.SlowRider.Url)).timeout((15 * 1000))).execute());
                    eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|8", (eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|5", java.lang.String[].class, body)[0] = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|7", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|6", org.jsoup.Connection.Response.class, res).parse()).text()));
                } catch (java.io.IOException e) {
                    throw eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.RuntimeException>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|10", java.lang.RuntimeException.class, new java.lang.RuntimeException(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.IOException>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|9", java.io.IOException.class, e)));
                }
            }
        }));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Thread>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|12", java.lang.Thread.class, runner).start();
        java.lang.Thread.sleep((1000 * 3));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Thread>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|13", java.lang.Thread.class, runner).interrupt();
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Thread>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|14", java.lang.Thread.class, runner).isInterrupted()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Thread>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|16", java.lang.Thread.class, runner).join();
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|19", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.jsoup.integration.ConnectTest|canInterruptDocumentRead()|17", java.lang.String[].class, body)[0]).length())) == 0));// doesn't ready a failed doc

    }

    @org.junit.Ignore
    @org.junit.Test
    public void totalTimeout() throws java.io.IOException {
        int timeout = 3 * 1000;
        long start = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|totalTimeout()|0", java.lang.System.currentTimeMillis());
        boolean threw = false;
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|totalTimeout()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|totalTimeout()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|totalTimeout()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(org.jsoup.integration.servlets.SlowRider.Url)).timeout(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|totalTimeout()|2", timeout))).get());
        } catch (java.net.SocketTimeoutException e) {
            long end = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|totalTimeout()|5", java.lang.System.currentTimeMillis());
            long took = (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|totalTimeout()|6", end)) - (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|totalTimeout()|7", start));
            org.junit.Assert.assertTrue(("Time taken was " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|totalTimeout()|8", took))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|totalTimeout()|9", took)) > (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|totalTimeout()|10", timeout))));
            org.junit.Assert.assertTrue(("Time taken was " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|totalTimeout()|11", took))), ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|totalTimeout()|12", took)) < ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|totalTimeout()|13", timeout)) * 1.2)));
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|totalTimeout()|14", (threw = true));
        }
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|totalTimeout()|15", threw));
    }

    @org.junit.Ignore
    @org.junit.Test
    public void slowReadOk() throws java.io.IOException {
        // make sure that a slow read that is under the request timeout is still OK
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|slowReadOk()|2", org.jsoup.nodes.Document.class, // the request completes in 2 seconds
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|slowReadOk()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|slowReadOk()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(org.jsoup.integration.servlets.SlowRider.Url)).data(org.jsoup.integration.servlets.SlowRider.MaxTimeParam, "2000")).get());
        org.jsoup.nodes.Element h1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.ConnectTest|slowReadOk()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|slowReadOk()|3", org.jsoup.nodes.Document.class, doc).selectFirst("h1"));
        org.junit.Assert.assertEquals("outatime", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|slowReadOk()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.ConnectTest|slowReadOk()|5", org.jsoup.nodes.Element.class, h1).text()));
    }

    @org.junit.Ignore
    @org.junit.Test
    public void infiniteReadSupported() throws java.io.IOException {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|infiniteReadSupported()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|infiniteReadSupported()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|infiniteReadSupported()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|infiniteReadSupported()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(org.jsoup.integration.servlets.SlowRider.Url)).timeout(0)).data(org.jsoup.integration.servlets.SlowRider.MaxTimeParam, "2000")).get());
        org.jsoup.nodes.Element h1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.ConnectTest|infiniteReadSupported()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|infiniteReadSupported()|4", org.jsoup.nodes.Document.class, doc).selectFirst("h1"));
        org.junit.Assert.assertEquals("outatime", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|infiniteReadSupported()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.ConnectTest|infiniteReadSupported()|6", org.jsoup.nodes.Element.class, h1).text()));
    }

    /**
     * Tests upload of content to a remote service.
     */
    @org.junit.Test
    public void postFiles() throws java.io.IOException {
        java.io.File thumb = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.integration.ConnectTest|postFiles()|0", java.io.File.class, org.jsoup.integration.ParseTest.getFile("/htmltests/thumb.jpg"));
        java.io.File html = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.integration.ConnectTest|postFiles()|1", java.io.File.class, org.jsoup.integration.ParseTest.getFile("/htmltests/google-ipod.html"));
        org.jsoup.nodes.Document res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|postFiles()|15", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|postFiles()|14", org.jsoup.Connection.class, // defaults to "application-octetstream";
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|postFiles()|13", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|postFiles()|8", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|postFiles()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|postFiles()|2", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(org.jsoup.integration.servlets.EchoServlet.Url)).data("firstname", "Jay")).data("firstPart", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|postFiles()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.integration.ConnectTest|postFiles()|4", java.io.File.class, thumb).getName()), eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.FileInputStream>observeState("org.jsoup.integration.ConnectTest|postFiles()|7", java.io.FileInputStream.class, new java.io.FileInputStream(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.integration.ConnectTest|postFiles()|6", java.io.File.class, thumb))), "image/jpeg")).data("secondPart", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|postFiles()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.integration.ConnectTest|postFiles()|9", java.io.File.class, html).getName()), eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.FileInputStream>observeState("org.jsoup.integration.ConnectTest|postFiles()|12", java.io.FileInputStream.class, new java.io.FileInputStream(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.integration.ConnectTest|postFiles()|11", java.io.File.class, html))))).data("surname", "Soup")).post());
        org.junit.Assert.assertEquals("4", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|postFiles()|17", org.jsoup.integration.ConnectTest.ihVal("Parts", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|postFiles()|16", org.jsoup.nodes.Document.class, res))));
        org.junit.Assert.assertEquals("application/octet-stream", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|postFiles()|19", org.jsoup.integration.ConnectTest.ihVal("Part secondPart ContentType", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|postFiles()|18", org.jsoup.nodes.Document.class, res))));
        org.junit.Assert.assertEquals("secondPart", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|postFiles()|21", org.jsoup.integration.ConnectTest.ihVal("Part secondPart Name", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|postFiles()|20", org.jsoup.nodes.Document.class, res))));
        org.junit.Assert.assertEquals("google-ipod.html", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|postFiles()|23", org.jsoup.integration.ConnectTest.ihVal("Part secondPart Filename", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|postFiles()|22", org.jsoup.nodes.Document.class, res))));
        org.junit.Assert.assertEquals("43963", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|postFiles()|25", org.jsoup.integration.ConnectTest.ihVal("Part secondPart Size", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|postFiles()|24", org.jsoup.nodes.Document.class, res))));
        org.junit.Assert.assertEquals("image/jpeg", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|postFiles()|27", org.jsoup.integration.ConnectTest.ihVal("Part firstPart ContentType", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|postFiles()|26", org.jsoup.nodes.Document.class, res))));
        org.junit.Assert.assertEquals("firstPart", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|postFiles()|29", org.jsoup.integration.ConnectTest.ihVal("Part firstPart Name", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|postFiles()|28", org.jsoup.nodes.Document.class, res))));
        org.junit.Assert.assertEquals("thumb.jpg", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|postFiles()|31", org.jsoup.integration.ConnectTest.ihVal("Part firstPart Filename", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|postFiles()|30", org.jsoup.nodes.Document.class, res))));
        org.junit.Assert.assertEquals("1052", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|postFiles()|33", org.jsoup.integration.ConnectTest.ihVal("Part firstPart Size", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|postFiles()|32", org.jsoup.nodes.Document.class, res))));
        org.junit.Assert.assertEquals("Jay", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|postFiles()|35", org.jsoup.integration.ConnectTest.ihVal("firstname", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|postFiles()|34", org.jsoup.nodes.Document.class, res))));
        org.junit.Assert.assertEquals("Soup", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|postFiles()|37", org.jsoup.integration.ConnectTest.ihVal("surname", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|postFiles()|36", org.jsoup.nodes.Document.class, res))));
        /* <tr><th>Part secondPart ContentType</th><td>application/octet-stream</td></tr>
        <tr><th>Part secondPart Name</th><td>secondPart</td></tr>
        <tr><th>Part secondPart Filename</th><td>google-ipod.html</td></tr>
        <tr><th>Part secondPart Size</th><td>43972</td></tr>
        <tr><th>Part firstPart ContentType</th><td>image/jpeg</td></tr>
        <tr><th>Part firstPart Name</th><td>firstPart</td></tr>
        <tr><th>Part firstPart Filename</th><td>thumb.jpg</td></tr>
        <tr><th>Part firstPart Size</th><td>1052</td></tr>
         */
    }

    @org.junit.Test
    public void multipleParsesOkAfterBufferUp() throws java.io.IOException {
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|multipleParsesOkAfterBufferUp()|3", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|multipleParsesOkAfterBufferUp()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|multipleParsesOkAfterBufferUp()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|multipleParsesOkAfterBufferUp()|0", org.jsoup.integration.ConnectTest.echoUrl))).execute()).bufferUp());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|multipleParsesOkAfterBufferUp()|5", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|multipleParsesOkAfterBufferUp()|4", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|multipleParsesOkAfterBufferUp()|8", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|multipleParsesOkAfterBufferUp()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|multipleParsesOkAfterBufferUp()|6", org.jsoup.nodes.Document.class, doc).title()).contains("Environment")));
        org.jsoup.nodes.Document doc2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|multipleParsesOkAfterBufferUp()|10", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|multipleParsesOkAfterBufferUp()|9", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|multipleParsesOkAfterBufferUp()|13", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|multipleParsesOkAfterBufferUp()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|multipleParsesOkAfterBufferUp()|11", org.jsoup.nodes.Document.class, doc2).title()).contains("Environment")));
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void bodyAfterParseThrowsValidationError() throws java.io.IOException {
        try {
            org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|bodyAfterParseThrowsValidationError()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|bodyAfterParseThrowsValidationError()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|bodyAfterParseThrowsValidationError()|0", org.jsoup.integration.ConnectTest.echoUrl))).execute());
            org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|bodyAfterParseThrowsValidationError()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|bodyAfterParseThrowsValidationError()|3", org.jsoup.Connection.Response.class, res).parse());
            java.lang.String body = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|bodyAfterParseThrowsValidationError()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|bodyAfterParseThrowsValidationError()|5", org.jsoup.Connection.Response.class, res).body());
        } catch (java.lang.IllegalArgumentException a1552755452461) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.jsoup.integration.ConnectTest|bodyAfterParseThrowsValidationError()|!", a1552755452461);
            throw a1552755452461;
        }
    }

    @org.junit.Test
    public void bodyAndBytesAvailableBeforeParse() throws java.io.IOException {
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|0", org.jsoup.integration.ConnectTest.echoUrl))).execute());
        java.lang.String body = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|3", org.jsoup.Connection.Response.class, res).body());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|6", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|5", body).contains("Environment")));
        byte[] bytes = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|8", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|7", org.jsoup.Connection.Response.class, res).bodyAsBytes());
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|9", byte[].class, bytes).length)) > 100));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|12", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|11", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|15", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|bodyAndBytesAvailableBeforeParse()|13", org.jsoup.nodes.Document.class, doc).title()).contains("Environment")));
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void parseParseThrowsValidates() throws java.io.IOException {
        try {
            org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|parseParseThrowsValidates()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|parseParseThrowsValidates()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|parseParseThrowsValidates()|0", org.jsoup.integration.ConnectTest.echoUrl))).execute());
            org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|parseParseThrowsValidates()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|parseParseThrowsValidates()|3", org.jsoup.Connection.Response.class, res).parse());
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|parseParseThrowsValidates()|7", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|parseParseThrowsValidates()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|parseParseThrowsValidates()|5", org.jsoup.nodes.Document.class, doc).title()).contains("Environment")));
            org.jsoup.nodes.Document doc2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|parseParseThrowsValidates()|9", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|parseParseThrowsValidates()|8", org.jsoup.Connection.Response.class, res).parse());// should blow up because the response input stream has been drained

        } catch (java.lang.IllegalArgumentException a1552755452502) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.jsoup.integration.ConnectTest|parseParseThrowsValidates()|!", a1552755452502);
            throw a1552755452502;
        }
    }

    @org.junit.Test
    public void multiCookieSet() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|multiCookieSet()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/302-cookie.pl"));
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|multiCookieSet()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|multiCookieSet()|1", org.jsoup.Connection.class, con).execute());
        // test cookies set by redirect:
        java.util.Map<java.lang.String, java.lang.String> cookies = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.integration.ConnectTest|multiCookieSet()|4", java.util.Map.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|multiCookieSet()|3", org.jsoup.Connection.Response.class, res).cookies());
        org.junit.Assert.assertEquals("asdfg123", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|multiCookieSet()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.integration.ConnectTest|multiCookieSet()|5", java.util.Map.class, cookies).get("token")));
        org.junit.Assert.assertEquals("jhy", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|multiCookieSet()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.integration.ConnectTest|multiCookieSet()|7", java.util.Map.class, cookies).get("uid")));
        // send those cookies into the echo URL by map:
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|multiCookieSet()|13", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|multiCookieSet()|12", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|multiCookieSet()|10", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|multiCookieSet()|9", org.jsoup.integration.ConnectTest.echoUrl))).cookies(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.integration.ConnectTest|multiCookieSet()|11", java.util.Map.class, cookies))).get());
        org.junit.Assert.assertEquals("token=asdfg123; uid=jhy", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|multiCookieSet()|15", org.jsoup.integration.ConnectTest.ihVal("Cookie", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|multiCookieSet()|14", org.jsoup.nodes.Document.class, doc))));
    }

    @org.junit.Test
    public void supportsDeflate() throws java.io.IOException {
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|supportsDeflate()|1", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|supportsDeflate()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(org.jsoup.integration.servlets.Deflateservlet.Url)).execute());
        org.junit.Assert.assertEquals("deflate", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|supportsDeflate()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|supportsDeflate()|2", org.jsoup.Connection.Response.class, res).header("Content-Encoding")));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|supportsDeflate()|5", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|supportsDeflate()|4", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals("Hello, World!", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|supportsDeflate()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.ConnectTest|supportsDeflate()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|supportsDeflate()|6", org.jsoup.nodes.Document.class, doc).selectFirst("p")).text()));
    }

    @org.junit.Test
    public void handlesEmptyStreamDuringParseRead() throws java.io.IOException {
        // this handles situations where the remote server sets a content length greater than it actually writes
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|handlesEmptyStreamDuringParseRead()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|handlesEmptyStreamDuringParseRead()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|handlesEmptyStreamDuringParseRead()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(org.jsoup.integration.servlets.InterruptedServlet.Url)).timeout(200)).execute());
        boolean threw = false;
        try {
            org.jsoup.nodes.Document document = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|handlesEmptyStreamDuringParseRead()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|handlesEmptyStreamDuringParseRead()|3", org.jsoup.Connection.Response.class, res).parse());
            org.junit.Assert.assertEquals("Something", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|handlesEmptyStreamDuringParseRead()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|handlesEmptyStreamDuringParseRead()|5", org.jsoup.nodes.Document.class, document).title()));
        } catch (java.io.IOException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|handlesEmptyStreamDuringParseRead()|7", (threw = true));
        }
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|handlesEmptyStreamDuringParseRead()|8", threw));
    }

    @org.junit.Test
    public void handlesEmtpyStreamDuringBufferdRead() throws java.io.IOException {
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|handlesEmtpyStreamDuringBufferdRead()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|handlesEmtpyStreamDuringBufferdRead()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|handlesEmtpyStreamDuringBufferdRead()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(org.jsoup.integration.servlets.InterruptedServlet.Url)).timeout(200)).execute());
        boolean threw = false;
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|handlesEmtpyStreamDuringBufferdRead()|4", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|handlesEmtpyStreamDuringBufferdRead()|3", org.jsoup.Connection.Response.class, res).bufferUp());
        } catch (org.jsoup.UncheckedIOException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|handlesEmtpyStreamDuringBufferdRead()|5", (threw = true));
        }
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|handlesEmtpyStreamDuringBufferdRead()|6", threw));
    }

    @org.junit.Test
    public void handlesRedirect() throws java.io.IOException {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|handlesRedirect()|2", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|handlesRedirect()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|handlesRedirect()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(org.jsoup.integration.servlets.RedirectServlet.Url)).data(org.jsoup.integration.servlets.RedirectServlet.LocationParam, org.jsoup.integration.servlets.HelloServlet.Url)).get());
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.ConnectTest|handlesRedirect()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|handlesRedirect()|3", org.jsoup.nodes.Document.class, doc).selectFirst("p"));
        org.junit.Assert.assertEquals("Hello, World!", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|handlesRedirect()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.ConnectTest|handlesRedirect()|5", org.jsoup.nodes.Element.class, p).text()));
        org.junit.Assert.assertEquals(org.jsoup.integration.servlets.HelloServlet.Url, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|handlesRedirect()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|handlesRedirect()|7", org.jsoup.nodes.Document.class, doc).location()));
    }

    @org.junit.Test
    public void handlesEmptyRedirect() throws java.io.IOException {
        boolean threw = false;
        try {
            org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.ConnectTest|handlesEmptyRedirect()|1", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|handlesEmptyRedirect()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(org.jsoup.integration.servlets.RedirectServlet.Url)).execute());
        } catch (java.io.IOException e) {
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|handlesEmptyRedirect()|4", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|handlesEmptyRedirect()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.IOException>observeState("org.jsoup.integration.ConnectTest|handlesEmptyRedirect()|2", java.io.IOException.class, e).getMessage()).contains("Too many redirects")));
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|handlesEmptyRedirect()|5", (threw = true));
        }
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|handlesEmptyRedirect()|6", threw));
    }

    @org.junit.Test
    public void doesNotPostFor302() throws java.io.IOException {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesNotPostFor302()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesNotPostFor302()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesNotPostFor302()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesNotPostFor302()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(org.jsoup.integration.servlets.RedirectServlet.Url)).data("Hello", "there")).data(org.jsoup.integration.servlets.RedirectServlet.LocationParam, org.jsoup.integration.servlets.EchoServlet.Url)).post());
        org.junit.Assert.assertEquals(org.jsoup.integration.servlets.EchoServlet.Url, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesNotPostFor302()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesNotPostFor302()|4", org.jsoup.nodes.Document.class, doc).location()));
        org.junit.Assert.assertEquals("GET", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesNotPostFor302()|7", org.jsoup.integration.ConnectTest.ihVal("Method", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesNotPostFor302()|6", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesNotPostFor302()|9", org.jsoup.integration.ConnectTest.ihVal("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesNotPostFor302()|8", org.jsoup.nodes.Document.class, doc))));// data not sent

    }

    @org.junit.Test
    public void doesPostFor307() throws java.io.IOException {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPostFor307()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesPostFor307()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesPostFor307()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesPostFor307()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.ConnectTest|doesPostFor307()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(org.jsoup.integration.servlets.RedirectServlet.Url)).data("Hello", "there")).data(org.jsoup.integration.servlets.RedirectServlet.LocationParam, org.jsoup.integration.servlets.EchoServlet.Url)).data(org.jsoup.integration.servlets.RedirectServlet.CodeParam, "307")).post());
        org.junit.Assert.assertEquals(org.jsoup.integration.servlets.EchoServlet.Url, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesPostFor307()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPostFor307()|5", org.jsoup.nodes.Document.class, doc).location()));
        org.junit.Assert.assertEquals("POST", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesPostFor307()|8", org.jsoup.integration.ConnectTest.ihVal("Method", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPostFor307()|7", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertEquals("there", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.ConnectTest|doesPostFor307()|10", org.jsoup.integration.ConnectTest.ihVal("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.ConnectTest|doesPostFor307()|9", org.jsoup.nodes.Document.class, doc))));
    }
}

