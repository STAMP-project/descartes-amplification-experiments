package org.jsoup.integration;


/**
 * Tests the URL connection. Not enabled by default, so tests don't require network connection.
 *
 * @author Jonathan Hedley, jonathan@hedley.net
 */
// ignored by default so tests don't require network access. comment out to enable.
// todo: rebuild these into a local Jetty test server, so not reliant on the vagaries of the internet.
@org.junit.Ignore
public class UrlConnectTest {
    private static final java.lang.String WEBSITE_WITH_INVALID_CERTIFICATE = "https://certs.cac.washington.edu/CAtest/";

    private static final java.lang.String WEBSITE_WITH_SNI = "https://jsoup.org/";

    public static java.lang.String browserUa = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36";

    @org.junit.Test
    public void fetchBaidu() throws java.io.IOException {
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|fetchBaidu()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|fetchBaidu()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|fetchBaidu()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://www.baidu.com/")).timeout((10 * 1000))).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchBaidu()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|fetchBaidu()|3", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals("GBK", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchBaidu()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.integration.UrlConnectTest|fetchBaidu()|7", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.integration.UrlConnectTest|fetchBaidu()|6", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchBaidu()|5", org.jsoup.nodes.Document.class, doc).outputSettings()).charset()).displayName()));
        org.junit.Assert.assertEquals("GBK", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchBaidu()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|fetchBaidu()|9", org.jsoup.Connection.Response.class, res).charset()));
        assert eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchBaidu()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|fetchBaidu()|11", org.jsoup.Connection.Response.class, res).hasCookie("BAIDUID"));
        org.junit.Assert.assertEquals("text/html;charset=gbk", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchBaidu()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|fetchBaidu()|13", org.jsoup.Connection.Response.class, res).contentType()));
    }

    @org.junit.Test
    public void exceptOnUnknownContentType() {
        java.lang.String url = "http://direct.jsoup.org/rez/osi_logo.png";// not text/* but image/png, should throw

        boolean threw = false;
        try {
            org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|exceptOnUnknownContentType()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.jsoup.integration.UrlConnectTest|exceptOnUnknownContentType()|1", java.net.URL.class, new java.net.URL(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|exceptOnUnknownContentType()|0", url))), 3000));
        } catch (org.jsoup.UnsupportedMimeTypeException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|exceptOnUnknownContentType()|3", (threw = true));
            org.junit.Assert.assertEquals("org.jsoup.UnsupportedMimeTypeException: Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml. Mimetype=image/png, URL=http://direct.jsoup.org/rez/osi_logo.png", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|exceptOnUnknownContentType()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.UnsupportedMimeTypeException>observeState("org.jsoup.integration.UrlConnectTest|exceptOnUnknownContentType()|4", org.jsoup.UnsupportedMimeTypeException.class, e).toString()));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|exceptOnUnknownContentType()|6", url), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|exceptOnUnknownContentType()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.UnsupportedMimeTypeException>observeState("org.jsoup.integration.UrlConnectTest|exceptOnUnknownContentType()|7", org.jsoup.UnsupportedMimeTypeException.class, e).getUrl()));
            org.junit.Assert.assertEquals("image/png", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|exceptOnUnknownContentType()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.UnsupportedMimeTypeException>observeState("org.jsoup.integration.UrlConnectTest|exceptOnUnknownContentType()|9", org.jsoup.UnsupportedMimeTypeException.class, e).getMimeType()));
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|exceptOnUnknownContentType()|11", threw));
    }

    @org.junit.Test
    public void ignoresContentTypeIfSoConfigured() throws java.io.IOException {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|ignoresContentTypeIfSoConfigured()|2", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|ignoresContentTypeIfSoConfigured()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|ignoresContentTypeIfSoConfigured()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("https://jsoup.org/rez/osi_logo.png")).ignoreContentType(true)).get());
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|ignoresContentTypeIfSoConfigured()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|ignoresContentTypeIfSoConfigured()|3", org.jsoup.nodes.Document.class, doc).title()));// this will cause an ugly parse tree

    }

    private static java.lang.String ihVal(java.lang.String key, org.jsoup.nodes.Document doc) {
        return eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|ihVal(java.lang.String,org.jsoup.nodes.Document)|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.UrlConnectTest|ihVal(java.lang.String,org.jsoup.nodes.Document)|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.integration.UrlConnectTest|ihVal(java.lang.String,org.jsoup.nodes.Document)|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|ihVal(java.lang.String,org.jsoup.nodes.Document)|0", org.jsoup.nodes.Document.class, doc).select((("th:contains(" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|ihVal(java.lang.String,org.jsoup.nodes.Document)|1", key))) + ") + td"))).first()).text());
    }

    @org.junit.Test
    public void followsTempRedirect() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsTempRedirect()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/302.pl"));// http://jsoup.org

        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsTempRedirect()|2", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsTempRedirect()|1", org.jsoup.Connection.class, con).get());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsTempRedirect()|5", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsTempRedirect()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsTempRedirect()|3", org.jsoup.nodes.Document.class, doc).title()).contains("jsoup")));
    }

    @org.junit.Test
    public void followsNewTempRedirect() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsNewTempRedirect()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/307.pl"));// http://jsoup.org

        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsNewTempRedirect()|2", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsNewTempRedirect()|1", org.jsoup.Connection.class, con).get());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsNewTempRedirect()|5", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsNewTempRedirect()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsNewTempRedirect()|3", org.jsoup.nodes.Document.class, doc).title()).contains("jsoup")));
        org.junit.Assert.assertEquals("https://jsoup.org/", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsNewTempRedirect()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.jsoup.integration.UrlConnectTest|followsNewTempRedirect()|8", java.net.URL.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|followsNewTempRedirect()|7", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsNewTempRedirect()|6", org.jsoup.Connection.class, con).response()).url()).toString()));
    }

    @org.junit.Test
    public void postRedirectsFetchWithGet() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|postRedirectsFetchWithGet()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|postRedirectsFetchWithGet()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|postRedirectsFetchWithGet()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/302.pl")).data("Argument", "Riposte")).method(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Method>observeState("org.jsoup.integration.UrlConnectTest|postRedirectsFetchWithGet()|2", org.jsoup.Connection.Method.class, org.jsoup.Connection.Method.POST)));
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|postRedirectsFetchWithGet()|5", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|postRedirectsFetchWithGet()|4", org.jsoup.Connection.class, con).execute());
        org.junit.Assert.assertEquals("https://jsoup.org/", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|postRedirectsFetchWithGet()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.jsoup.integration.UrlConnectTest|postRedirectsFetchWithGet()|7", java.net.URL.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|postRedirectsFetchWithGet()|6", org.jsoup.Connection.Response.class, res).url()).toExternalForm()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Method>observeState("org.jsoup.integration.UrlConnectTest|postRedirectsFetchWithGet()|9", org.jsoup.Connection.Method.class, org.jsoup.Connection.Method.GET), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Method>observeState("org.jsoup.integration.UrlConnectTest|postRedirectsFetchWithGet()|11", org.jsoup.Connection.Method.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|postRedirectsFetchWithGet()|10", org.jsoup.Connection.Response.class, res).method()));
    }

    @org.junit.Test
    public void followsRedirectToHttps() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsRedirectToHttps()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/302-secure.pl"));// https://www.google.com

        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsRedirectToHttps()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsRedirectToHttps()|1", org.jsoup.Connection.class, con).data("id", "5"));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsRedirectToHttps()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsRedirectToHttps()|3", org.jsoup.Connection.class, con).get());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsRedirectToHttps()|7", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsRedirectToHttps()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsRedirectToHttps()|5", org.jsoup.nodes.Document.class, doc).title()).contains("Google")));
    }

    @org.junit.Test
    public void followsRelativeRedirect() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsRelativeRedirect()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/302-rel.pl"));// to /tidy/

        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsRelativeRedirect()|2", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsRelativeRedirect()|1", org.jsoup.Connection.class, con).post());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsRelativeRedirect()|5", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsRelativeRedirect()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsRelativeRedirect()|3", org.jsoup.nodes.Document.class, doc).title()).contains("HTML Tidy Online")));
    }

    @org.junit.Test
    public void followsRelativeDotRedirect() throws java.io.IOException {
        // redirects to "./ok.html", should resolve to http://direct.infohound.net/tools/ok.html
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsRelativeDotRedirect()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/302-rel-dot.pl"));// to ./ok.html

        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsRelativeDotRedirect()|2", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsRelativeDotRedirect()|1", org.jsoup.Connection.class, con).post());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsRelativeDotRedirect()|5", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsRelativeDotRedirect()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsRelativeDotRedirect()|3", org.jsoup.nodes.Document.class, doc).title()).contains("OK")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsRelativeDotRedirect()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsRelativeDotRedirect()|6", org.jsoup.nodes.Document.class, doc).location()), "http://direct.infohound.net/tools/ok.html");
    }

    @org.junit.Test
    public void followsRelativeDotRedirect2() throws java.io.IOException {
        // redirects to "esportspenedes.cat/./ep/index.php", should resolve to "esportspenedes.cat/ep/index.php"
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsRelativeDotRedirect2()|1", org.jsoup.Connection.class, // note lack of trailing / - server should redir to / first, then to ./ep/...; but doesn't'
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsRelativeDotRedirect2()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://esportspenedes.cat")).timeout(10000));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsRelativeDotRedirect2()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsRelativeDotRedirect2()|2", org.jsoup.Connection.class, con).post());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsRelativeDotRedirect2()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsRelativeDotRedirect2()|4", org.jsoup.nodes.Document.class, doc).location()), "http://esportspenedes.cat/ep/index.php");
    }

    @org.junit.Test
    public void followsRedirectsWithWithespaces() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsRedirectsWithWithespaces()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://tinyurl.com/kgofxl8"));// to http://www.google.com/?q=white spaces

        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsRedirectsWithWithespaces()|2", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|followsRedirectsWithWithespaces()|1", org.jsoup.Connection.class, con).get());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsRedirectsWithWithespaces()|5", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|followsRedirectsWithWithespaces()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|followsRedirectsWithWithespaces()|3", org.jsoup.nodes.Document.class, doc).title()).contains("Google")));
    }

    @org.junit.Test
    public void gracefullyHandleBrokenLocationRedirect() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|gracefullyHandleBrokenLocationRedirect()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://aag-ye.com"));// has Location: http:/temp/AAG_New/en/index.php

        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|gracefullyHandleBrokenLocationRedirect()|2", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|gracefullyHandleBrokenLocationRedirect()|1", org.jsoup.Connection.class, con).get()// would throw exception on error
        );
        org.junit.Assert.assertTrue(true);
    }

    @org.junit.Test
    public void throwsExceptionOnError() {
        java.lang.String url = "http://direct.infohound.net/tools/404";
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|throwsExceptionOnError()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|throwsExceptionOnError()|0", url)));
        boolean threw = false;
        try {
            org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|throwsExceptionOnError()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|throwsExceptionOnError()|2", org.jsoup.Connection.class, con).get());
        } catch (org.jsoup.HttpStatusException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|throwsExceptionOnError()|4", (threw = true));
            org.junit.Assert.assertEquals("org.jsoup.HttpStatusException: HTTP error fetching URL. Status=404, URL=http://direct.infohound.net/tools/404", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|throwsExceptionOnError()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.HttpStatusException>observeState("org.jsoup.integration.UrlConnectTest|throwsExceptionOnError()|5", org.jsoup.HttpStatusException.class, e).toString()));
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|throwsExceptionOnError()|7", url), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|throwsExceptionOnError()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.HttpStatusException>observeState("org.jsoup.integration.UrlConnectTest|throwsExceptionOnError()|8", org.jsoup.HttpStatusException.class, e).getUrl()));
            org.junit.Assert.assertEquals(404, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|throwsExceptionOnError()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.HttpStatusException>observeState("org.jsoup.integration.UrlConnectTest|throwsExceptionOnError()|10", org.jsoup.HttpStatusException.class, e).getStatusCode()));
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|throwsExceptionOnError()|12", threw));
    }

    @org.junit.Test
    public void ignoresExceptionIfSoConfigured() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|ignoresExceptionIfSoConfigured()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|ignoresExceptionIfSoConfigured()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/404")).ignoreHttpErrors(true));
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignoresExceptionIfSoConfigured()|3", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|ignoresExceptionIfSoConfigured()|2", org.jsoup.Connection.class, con).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|ignoresExceptionIfSoConfigured()|5", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignoresExceptionIfSoConfigured()|4", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals(404, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|ignoresExceptionIfSoConfigured()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignoresExceptionIfSoConfigured()|6", org.jsoup.Connection.Response.class, res).statusCode()));
        org.junit.Assert.assertEquals("404 Not Found", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|ignoresExceptionIfSoConfigured()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.UrlConnectTest|ignoresExceptionIfSoConfigured()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.integration.UrlConnectTest|ignoresExceptionIfSoConfigured()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|ignoresExceptionIfSoConfigured()|8", org.jsoup.nodes.Document.class, doc).select("h1")).first()).text()));
    }

    @org.junit.Test
    public void ignores500tExceptionIfSoConfigured() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|ignores500tExceptionIfSoConfigured()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|ignores500tExceptionIfSoConfigured()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/500.pl")).ignoreHttpErrors(true));
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignores500tExceptionIfSoConfigured()|3", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|ignores500tExceptionIfSoConfigured()|2", org.jsoup.Connection.class, con).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|ignores500tExceptionIfSoConfigured()|5", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignores500tExceptionIfSoConfigured()|4", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals(500, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|ignores500tExceptionIfSoConfigured()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignores500tExceptionIfSoConfigured()|6", org.jsoup.Connection.Response.class, res).statusCode()));
        org.junit.Assert.assertEquals("Application Error", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|ignores500tExceptionIfSoConfigured()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignores500tExceptionIfSoConfigured()|8", org.jsoup.Connection.Response.class, res).statusMessage()));
        org.junit.Assert.assertEquals("Woops", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|ignores500tExceptionIfSoConfigured()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.UrlConnectTest|ignores500tExceptionIfSoConfigured()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.integration.UrlConnectTest|ignores500tExceptionIfSoConfigured()|11", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|ignores500tExceptionIfSoConfigured()|10", org.jsoup.nodes.Document.class, doc).select("h1")).first()).text()));
    }

    @org.junit.Test
    public void ignores500WithNoContentExceptionIfSoConfigured() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|ignores500WithNoContentExceptionIfSoConfigured()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|ignores500WithNoContentExceptionIfSoConfigured()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/500-no-content.pl")).ignoreHttpErrors(true));
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignores500WithNoContentExceptionIfSoConfigured()|3", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|ignores500WithNoContentExceptionIfSoConfigured()|2", org.jsoup.Connection.class, con).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|ignores500WithNoContentExceptionIfSoConfigured()|5", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignores500WithNoContentExceptionIfSoConfigured()|4", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals(500, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|ignores500WithNoContentExceptionIfSoConfigured()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignores500WithNoContentExceptionIfSoConfigured()|6", org.jsoup.Connection.Response.class, res).statusCode()));
        org.junit.Assert.assertEquals("Application Error", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|ignores500WithNoContentExceptionIfSoConfigured()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignores500WithNoContentExceptionIfSoConfigured()|8", org.jsoup.Connection.Response.class, res).statusMessage()));
    }

    @org.junit.Test
    public void ignores200WithNoContentExceptionIfSoConfigured() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|ignores200WithNoContentExceptionIfSoConfigured()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|ignores200WithNoContentExceptionIfSoConfigured()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/200-no-content.pl")).ignoreHttpErrors(true));
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignores200WithNoContentExceptionIfSoConfigured()|3", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|ignores200WithNoContentExceptionIfSoConfigured()|2", org.jsoup.Connection.class, con).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|ignores200WithNoContentExceptionIfSoConfigured()|5", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignores200WithNoContentExceptionIfSoConfigured()|4", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals(200, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|ignores200WithNoContentExceptionIfSoConfigured()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignores200WithNoContentExceptionIfSoConfigured()|6", org.jsoup.Connection.Response.class, res).statusCode()));
        org.junit.Assert.assertEquals("All Good", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|ignores200WithNoContentExceptionIfSoConfigured()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|ignores200WithNoContentExceptionIfSoConfigured()|8", org.jsoup.Connection.Response.class, res).statusMessage()));
    }

    @org.junit.Test
    public void handles200WithNoContent() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/200-no-content.pl")).userAgent(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|1", org.jsoup.integration.UrlConnectTest.browserUa)));
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|4", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|3", org.jsoup.Connection.class, con).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|6", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|5", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals(200, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|7", org.jsoup.Connection.Response.class, res).statusCode()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|13", org.jsoup.Connection.class, (con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|11", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|9", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/200-no-content.pl")).parser(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|10", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser()))).userAgent(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|12", org.jsoup.integration.UrlConnectTest.browserUa))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|15", org.jsoup.Connection.Response.class, (res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|14", org.jsoup.Connection.class, con).execute()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|17", org.jsoup.nodes.Document.class, (doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|16", org.jsoup.Connection.Response.class, res).parse()));
        org.junit.Assert.assertEquals(200, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handles200WithNoContent()|18", org.jsoup.Connection.Response.class, res).statusCode()));
    }

    @org.junit.Test
    public void doesntRedirectIfSoConfigured() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|doesntRedirectIfSoConfigured()|1", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|doesntRedirectIfSoConfigured()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/302.pl")).followRedirects(false));
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|doesntRedirectIfSoConfigured()|3", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|doesntRedirectIfSoConfigured()|2", org.jsoup.Connection.class, con).execute());
        org.junit.Assert.assertEquals(302, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|doesntRedirectIfSoConfigured()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|doesntRedirectIfSoConfigured()|4", org.jsoup.Connection.Response.class, res).statusCode()));
        org.junit.Assert.assertEquals("http://jsoup.org", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|doesntRedirectIfSoConfigured()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|doesntRedirectIfSoConfigured()|6", org.jsoup.Connection.Response.class, res).header("Location")));
    }

    @org.junit.Test
    public void redirectsResponseCookieToNextResponse() throws java.io.IOException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|redirectsResponseCookieToNextResponse()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/302-cookie.pl"));
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|redirectsResponseCookieToNextResponse()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|redirectsResponseCookieToNextResponse()|1", org.jsoup.Connection.class, con).execute());
        org.junit.Assert.assertEquals("asdfg123", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|redirectsResponseCookieToNextResponse()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|redirectsResponseCookieToNextResponse()|3", org.jsoup.Connection.Response.class, res).cookie("token")));// confirms that cookies set on 1st hit are presented in final result

        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|redirectsResponseCookieToNextResponse()|6", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|redirectsResponseCookieToNextResponse()|5", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals("token=asdfg123; uid=jhy", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|redirectsResponseCookieToNextResponse()|8", org.jsoup.integration.UrlConnectTest.ihVal("HTTP_COOKIE", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|redirectsResponseCookieToNextResponse()|7", org.jsoup.nodes.Document.class, doc))));// confirms that redirected hit saw cookie

    }

    @org.junit.Test
    public void maximumRedirects() {
        boolean threw = false;
        try {
            org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|maximumRedirects()|1", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|maximumRedirects()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/loop.pl")).get());
        } catch (java.io.IOException e) {
            org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maximumRedirects()|4", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maximumRedirects()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.IOException>observeState("org.jsoup.integration.UrlConnectTest|maximumRedirects()|2", java.io.IOException.class, e).getMessage()).contains("Too many redirects")));
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maximumRedirects()|5", (threw = true));
        }
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maximumRedirects()|6", threw));
    }

    @org.junit.Test
    public void handlesDodgyCharset() throws java.io.IOException {
        // tests that when we get back "UFT8", that it is recognised as unsupported, and falls back to default instead
        java.lang.String url = "http://direct.infohound.net/tools/bad-charset.pl";
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handlesDodgyCharset()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handlesDodgyCharset()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesDodgyCharset()|0", url))).execute());
        org.junit.Assert.assertEquals("text/html; charset=UFT8", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesDodgyCharset()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handlesDodgyCharset()|3", org.jsoup.Connection.Response.class, res).header("Content-Type")));// from the header

        org.junit.Assert.assertEquals(null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesDodgyCharset()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handlesDodgyCharset()|5", org.jsoup.Connection.Response.class, res).charset()));// tried to get from header, not supported, so returns null

        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesDodgyCharset()|8", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handlesDodgyCharset()|7", org.jsoup.Connection.Response.class, res).parse());// would throw an error if charset unsupported

        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesDodgyCharset()|11", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesDodgyCharset()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesDodgyCharset()|9", org.jsoup.nodes.Document.class, doc).text()).contains("Hello!")));
        org.junit.Assert.assertEquals("UTF-8", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesDodgyCharset()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handlesDodgyCharset()|12", org.jsoup.Connection.Response.class, res).charset()));// set from default on parse

    }

    @org.junit.Test
    public void maxBodySize() throws java.io.IOException {
        java.lang.String url = "http://direct.infohound.net/tools/large.html";// 280 K

        org.jsoup.Connection.Response defaultRes = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|0", url))).execute());
        org.jsoup.Connection.Response smallRes = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|6", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|5", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|4", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|3", url))).maxBodySize((50 * 1024))).execute());// crops

        org.jsoup.Connection.Response mediumRes = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|10", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|9", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|8", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|7", url))).maxBodySize((200 * 1024))).execute());// crops

        org.jsoup.Connection.Response largeRes = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|14", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|13", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|12", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|11", url))).maxBodySize((300 * 1024))).execute());// does not crop

        org.jsoup.Connection.Response unlimitedRes = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|18", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|17", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|16", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|15", url))).maxBodySize(0)).execute());
        int actualDocText = 269541;
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|19", actualDocText), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|23", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|21", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|20", org.jsoup.Connection.Response.class, defaultRes).parse()).text()).length()));
        org.junit.Assert.assertEquals(49165, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|27", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|25", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|24", org.jsoup.Connection.Response.class, smallRes).parse()).text()).length()));
        org.junit.Assert.assertEquals(196577, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|31", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|30", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|29", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|28", org.jsoup.Connection.Response.class, mediumRes).parse()).text()).length()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|32", actualDocText), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|36", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|34", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|33", org.jsoup.Connection.Response.class, largeRes).parse()).text()).length()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|37", actualDocText), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|41", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|maxBodySize()|40", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|39", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|maxBodySize()|38", org.jsoup.Connection.Response.class, unlimitedRes).parse()).text()).length()));
    }

    /**
     * Verify that security disabling feature works properly.
     * <p/>
     * 1. try to hit url with invalid certificate and evaluate that exception is thrown
     *
     * @throws Exception
     * 		
     */
    @org.junit.Test(expected = java.io.IOException.class)
    public void testUnsafeFail() throws java.lang.Exception {
        try {
            java.lang.String url = org.jsoup.integration.UrlConnectTest.WEBSITE_WITH_INVALID_CERTIFICATE;
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|testUnsafeFail()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|testUnsafeFail()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|testUnsafeFail()|0", url))).execute());
        } catch (java.io.IOException a1552755452629) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.jsoup.integration.UrlConnectTest|testUnsafeFail()|!", a1552755452629);
            throw a1552755452629;
        }
    }

    /**
     * Verify that requests to websites with SNI fail on jdk 1.6
     * <p/>
     * read for more details:
     * http://en.wikipedia.org/wiki/Server_Name_Indication
     *
     * Test is ignored independent from others as it requires JDK 1.6
     *
     * @throws Exception
     * 		
     */
    @org.junit.Test(expected = java.io.IOException.class)
    public void testSNIFail() throws java.lang.Exception {
        try {
            java.lang.String url = org.jsoup.integration.UrlConnectTest.WEBSITE_WITH_SNI;
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|testSNIFail()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|testSNIFail()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|testSNIFail()|0", url))).execute());
        } catch (java.io.IOException a1552755452628) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.jsoup.integration.UrlConnectTest|testSNIFail()|!", a1552755452628);
            throw a1552755452628;
        }
    }

    @org.junit.Test
    public void shouldWorkForCharsetInExtraAttribute() throws java.io.IOException {
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldWorkForCharsetInExtraAttribute()|1", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|shouldWorkForCharsetInExtraAttribute()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("https://www.creditmutuel.com/groupe/fr/")).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|shouldWorkForCharsetInExtraAttribute()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldWorkForCharsetInExtraAttribute()|2", org.jsoup.Connection.Response.class, res).parse());// would throw an error if charset unsupported

        org.junit.Assert.assertEquals("ISO-8859-1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|shouldWorkForCharsetInExtraAttribute()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldWorkForCharsetInExtraAttribute()|4", org.jsoup.Connection.Response.class, res).charset()));
    }

    // The following tests were added to test specific domains if they work. All code paths
    // which make the following test green are tested in other unit or integration tests, so the following lines
    // could be deleted
    @org.junit.Test
    public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() throws java.io.IOException {
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags()|1", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://aamo.info/")).execute());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags()|2", org.jsoup.Connection.Response.class, res).parse()// would throw an error if charset unsupported
        );
        org.junit.Assert.assertEquals("ISO-8859-1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags()|4", org.jsoup.Connection.Response.class, res).charset()));
    }

    @org.junit.Test
    public void shouldParseBrokenHtml5MetaCharsetTagCorrectly() throws java.io.IOException {
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldParseBrokenHtml5MetaCharsetTagCorrectly()|1", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|shouldParseBrokenHtml5MetaCharsetTagCorrectly()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://9kuhkep.net")).execute());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|shouldParseBrokenHtml5MetaCharsetTagCorrectly()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldParseBrokenHtml5MetaCharsetTagCorrectly()|2", org.jsoup.Connection.Response.class, res).parse()// would throw an error if charset unsupported
        );
        org.junit.Assert.assertEquals("UTF-8", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|shouldParseBrokenHtml5MetaCharsetTagCorrectly()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldParseBrokenHtml5MetaCharsetTagCorrectly()|4", org.jsoup.Connection.Response.class, res).charset()));
    }

    @org.junit.Test
    public void shouldEmptyMetaCharsetCorrectly() throws java.io.IOException {
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldEmptyMetaCharsetCorrectly()|1", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|shouldEmptyMetaCharsetCorrectly()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://aastmultimedia.com")).execute());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|shouldEmptyMetaCharsetCorrectly()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldEmptyMetaCharsetCorrectly()|2", org.jsoup.Connection.Response.class, res).parse()// would throw an error if charset unsupported
        );
        org.junit.Assert.assertEquals("UTF-8", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|shouldEmptyMetaCharsetCorrectly()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldEmptyMetaCharsetCorrectly()|4", org.jsoup.Connection.Response.class, res).charset()));
    }

    @org.junit.Test
    public void shouldWorkForDuplicateCharsetInTag() throws java.io.IOException {
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldWorkForDuplicateCharsetInTag()|1", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|shouldWorkForDuplicateCharsetInTag()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://aaptsdassn.org")).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|shouldWorkForDuplicateCharsetInTag()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldWorkForDuplicateCharsetInTag()|2", org.jsoup.Connection.Response.class, res).parse());// would throw an error if charset unsupported

        org.junit.Assert.assertEquals("ISO-8859-1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|shouldWorkForDuplicateCharsetInTag()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|shouldWorkForDuplicateCharsetInTag()|4", org.jsoup.Connection.Response.class, res).charset()));
    }

    @org.junit.Test
    public void baseHrefCorrectAfterHttpEquiv() throws java.io.IOException {
        // https://github.com/jhy/jsoup/issues/440
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|baseHrefCorrectAfterHttpEquiv()|1", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|baseHrefCorrectAfterHttpEquiv()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/charset-base.html")).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|baseHrefCorrectAfterHttpEquiv()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|baseHrefCorrectAfterHttpEquiv()|2", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals("http://example.com/foo.jpg", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|baseHrefCorrectAfterHttpEquiv()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.UrlConnectTest|baseHrefCorrectAfterHttpEquiv()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.integration.UrlConnectTest|baseHrefCorrectAfterHttpEquiv()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|baseHrefCorrectAfterHttpEquiv()|4", org.jsoup.nodes.Document.class, doc).select("img")).first()).absUrl("src")));
    }

    /**
     * Test fetching a form, and submitting it with a file attached.
     */
    @org.junit.Test
    public void postHtmlFile() throws java.io.IOException {
        org.jsoup.nodes.Document index = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|1", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tidy/")).get());
        org.jsoup.nodes.FormElement form = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.FormElement>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|5", org.jsoup.nodes.FormElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.FormElement>>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|4", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|2", org.jsoup.nodes.Document.class, index).select("[name=tidy]")).forms()).get(0));
        org.jsoup.Connection post = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|7", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.FormElement>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|6", org.jsoup.nodes.FormElement.class, form).submit());
        java.io.File uploadFile = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|8", java.io.File.class, org.jsoup.integration.ParseTest.getFile("/htmltests/google-ipod.html"));
        java.io.FileInputStream stream = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.FileInputStream>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|10", java.io.FileInputStream.class, new java.io.FileInputStream(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|9", java.io.File.class, uploadFile)));
        org.jsoup.Connection.KeyVal fileData = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|12", org.jsoup.Connection.KeyVal.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|11", org.jsoup.Connection.class, post).data("_file"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|14", org.jsoup.Connection.KeyVal.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|13", org.jsoup.Connection.KeyVal.class, fileData).value("check.html"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|17", org.jsoup.Connection.KeyVal.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|15", org.jsoup.Connection.KeyVal.class, fileData).inputStream(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.FileInputStream>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|16", java.io.FileInputStream.class, stream)));
        org.jsoup.Connection.Response res;
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|19", org.jsoup.Connection.Response.class, (res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|18", org.jsoup.Connection.class, post).execute()));
        } finally {
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.FileInputStream>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|20", java.io.FileInputStream.class, stream).close();
        }
        org.jsoup.nodes.Document out = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|22", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|21", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|postHtmlFile()|25", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|postHtmlFile()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|postHtmlFile()|23", org.jsoup.nodes.Document.class, out).text()).contains("HTML Tidy Complete")));
    }

    @org.junit.Test
    public void handles201Created() throws java.io.IOException {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handles201Created()|1", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handles201Created()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://direct.infohound.net/tools/201.pl")).get());// 201, location=jsoup

        org.junit.Assert.assertEquals("https://jsoup.org/", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handles201Created()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handles201Created()|2", org.jsoup.nodes.Document.class, doc).location()));
    }

    @org.junit.Test
    public void fetchToW3c() throws java.io.IOException {
        java.lang.String url = "https://jsoup.org";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchToW3c()|2", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|fetchToW3c()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchToW3c()|0", url))).get());
        org.jsoup.helper.W3CDom dom = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.W3CDom>observeState("org.jsoup.integration.UrlConnectTest|fetchToW3c()|3", org.jsoup.helper.W3CDom.class, new org.jsoup.helper.W3CDom());
        org.w3c.dom.Document wDoc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.w3c.dom.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchToW3c()|6", org.w3c.dom.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.W3CDom>observeState("org.jsoup.integration.UrlConnectTest|fetchToW3c()|4", org.jsoup.helper.W3CDom.class, dom).fromJsoup(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchToW3c()|5", org.jsoup.nodes.Document.class, doc)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchToW3c()|7", url), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchToW3c()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.w3c.dom.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchToW3c()|8", org.w3c.dom.Document.class, wDoc).getDocumentURI()));
        java.lang.String html = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchToW3c()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.W3CDom>observeState("org.jsoup.integration.UrlConnectTest|fetchToW3c()|10", org.jsoup.helper.W3CDom.class, dom).asString(eu.stamp_project.reneri.instrumentation.StateObserver.<org.w3c.dom.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchToW3c()|11", org.w3c.dom.Document.class, wDoc)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchToW3c()|14", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchToW3c()|13", html).contains("jsoup")));
    }

    @org.junit.Test
    public void fetchHandlesXml() throws java.io.IOException {
        // should auto-detect xml and use XML parser, unless explicitly requested the html parser
        java.lang.String xmlUrl = "http://direct.infohound.net/tools/parse-xml.xml";
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXml()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchHandlesXml()|0", xmlUrl)));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXml()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXml()|2", org.jsoup.Connection.class, con).get());
        org.jsoup.Connection.Request req = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXml()|5", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXml()|4", org.jsoup.Connection.class, con).request());
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXml()|7", org.jsoup.parser.Parser.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXml()|6", org.jsoup.Connection.Request.class, req).parser()).getTreeBuilder()) instanceof org.jsoup.parser.XmlTreeBuilder));
        org.junit.Assert.assertEquals("<xml> <link> one </link> <table> Two </table> </xml>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchHandlesXml()|10", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchHandlesXml()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXml()|8", org.jsoup.nodes.Document.class, doc).outerHtml()))));
    }

    @org.junit.Test
    public void fetchHandlesXmlAsHtmlWhenParserSet() throws java.io.IOException {
        // should auto-detect xml and use XML parser, unless explicitly requested the html parser
        java.lang.String xmlUrl = "http://direct.infohound.net/tools/parse-xml.xml";
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXmlAsHtmlWhenParserSet()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXmlAsHtmlWhenParserSet()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchHandlesXmlAsHtmlWhenParserSet()|0", xmlUrl))).parser(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXmlAsHtmlWhenParserSet()|2", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.htmlParser())));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXmlAsHtmlWhenParserSet()|5", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXmlAsHtmlWhenParserSet()|4", org.jsoup.Connection.class, con).get());
        org.jsoup.Connection.Request req = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXmlAsHtmlWhenParserSet()|7", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXmlAsHtmlWhenParserSet()|6", org.jsoup.Connection.class, con).request());
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXmlAsHtmlWhenParserSet()|9", org.jsoup.parser.Parser.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXmlAsHtmlWhenParserSet()|8", org.jsoup.Connection.Request.class, req).parser()).getTreeBuilder()) instanceof org.jsoup.parser.HtmlTreeBuilder));
        org.junit.Assert.assertEquals("<html> <head></head> <body> <xml> <link>one <table> Two </table> </xml> </body> </html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchHandlesXmlAsHtmlWhenParserSet()|12", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchHandlesXmlAsHtmlWhenParserSet()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchHandlesXmlAsHtmlWhenParserSet()|10", org.jsoup.nodes.Document.class, doc).outerHtml()))));
    }

    @org.junit.Test
    public void combinesSameHeadersWithComma() throws java.io.IOException {
        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2
        java.lang.String url = "http://direct.infohound.net/tools/q.pl";
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|0", url)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|2", org.jsoup.Connection.class, con).get());
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|5", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|4", org.jsoup.Connection.class, con).response());
        org.junit.Assert.assertEquals("text/html", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|6", org.jsoup.Connection.Response.class, res).header("Content-Type")));
        org.junit.Assert.assertEquals("no-cache, no-store", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|8", org.jsoup.Connection.Response.class, res).header("Cache-Control")));
        java.util.List<java.lang.String> header = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|11", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|10", org.jsoup.Connection.Response.class, res).headers("Cache-Control"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|12", java.util.List.class, header).size()));
        org.junit.Assert.assertEquals("no-cache", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|14", java.util.List.class, header).get(0)));
        org.junit.Assert.assertEquals("no-store", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.integration.UrlConnectTest|combinesSameHeadersWithComma()|16", java.util.List.class, header).get(1)));
    }

    @org.junit.Test
    public void sendHeadRequest() throws java.io.IOException {
        java.lang.String url = "http://direct.infohound.net/tools/parse-xml.xml";
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|sendHeadRequest()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|sendHeadRequest()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|sendHeadRequest()|0", url))).method(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Method>observeState("org.jsoup.integration.UrlConnectTest|sendHeadRequest()|2", org.jsoup.Connection.Method.class, org.jsoup.Connection.Method.HEAD)));
        final org.jsoup.Connection.Response response = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|sendHeadRequest()|5", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|sendHeadRequest()|4", org.jsoup.Connection.class, con).execute());
        org.junit.Assert.assertEquals("text/xml", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|sendHeadRequest()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|sendHeadRequest()|6", org.jsoup.Connection.Response.class, response).header("Content-Type")));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|sendHeadRequest()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|sendHeadRequest()|8", org.jsoup.Connection.Response.class, response).body()));// head ought to have no body

        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|sendHeadRequest()|11", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|sendHeadRequest()|10", org.jsoup.Connection.Response.class, response).parse());
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|sendHeadRequest()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|sendHeadRequest()|12", org.jsoup.nodes.Document.class, doc).text()));
    }

    /* Proxy tests. Assumes local proxy running on 8888, without system propery set (so that specifying it is required). */
    @org.junit.Test
    public void fetchViaHttpProxy() throws java.io.IOException {
        java.lang.String url = "https://jsoup.org";
        java.net.Proxy proxy = eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.Proxy>observeState("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxy()|2", java.net.Proxy.class, new java.net.Proxy(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.Proxy.Type>observeState("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxy()|0", java.net.Proxy.Type.class, java.net.Proxy.Type.HTTP), eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.InetSocketAddress>observeState("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxy()|1", java.net.InetSocketAddress.class, java.net.InetSocketAddress.createUnresolved("localhost", 8888))));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxy()|7", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxy()|6", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxy()|4", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxy()|3", url))).proxy(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.Proxy>observeState("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxy()|5", java.net.Proxy.class, proxy))).get());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxy()|10", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxy()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxy()|8", org.jsoup.nodes.Document.class, doc).title()).contains("jsoup")));
    }

    @org.junit.Test
    public void fetchViaHttpProxySetByArgument() throws java.io.IOException {
        java.lang.String url = "https://jsoup.org";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxySetByArgument()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxySetByArgument()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxySetByArgument()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxySetByArgument()|0", url))).proxy("localhost", 8888)).get());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxySetByArgument()|6", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxySetByArgument()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|fetchViaHttpProxySetByArgument()|4", org.jsoup.nodes.Document.class, doc).title()).contains("jsoup")));
    }

    @org.junit.Test
    public void invalidProxyFails() throws java.io.IOException {
        boolean caught = false;
        java.lang.String url = "https://jsoup.org";
        try {
            org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|invalidProxyFails()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|invalidProxyFails()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|invalidProxyFails()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|invalidProxyFails()|0", url))).proxy("localhost", 8889)).get());
        } catch (java.io.IOException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|invalidProxyFails()|5", (caught = (eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.IOException>observeState("org.jsoup.integration.UrlConnectTest|invalidProxyFails()|4", java.io.IOException.class, e)) instanceof java.net.ConnectException));
        }
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|invalidProxyFails()|6", caught));
    }

    @org.junit.Test
    public void proxyGetAndSet() throws java.io.IOException {
        java.lang.String url = "https://jsoup.org";
        java.net.Proxy proxy = eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.Proxy>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|2", java.net.Proxy.class, new java.net.Proxy(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.Proxy.Type>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|0", java.net.Proxy.Type.class, java.net.Proxy.Type.HTTP), eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.InetSocketAddress>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|1", java.net.InetSocketAddress.class, java.net.InetSocketAddress.createUnresolved("localhost", 8889))));// invalid

        final org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|6", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|4", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|3", url))).proxy(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.Proxy>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|5", java.net.Proxy.class, proxy)));
        assert (eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.Proxy>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|9", java.net.Proxy.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|8", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|7", org.jsoup.Connection.class, con).request()).proxy())) == (eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.Proxy>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|10", java.net.Proxy.class, proxy));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|13", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|12", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|11", org.jsoup.Connection.class, con).request()).proxy(null)// disable
        );
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|15", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|14", org.jsoup.Connection.class, con).get());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|18", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|proxyGetAndSet()|16", org.jsoup.nodes.Document.class, doc).title()).contains("jsoup")));// would fail if actually went via proxy

    }

    @org.junit.Test
    public void throwsIfRequestBodyForGet() throws java.io.IOException {
        boolean caught = false;
        java.lang.String url = "https://jsoup.org";
        try {
            org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|throwsIfRequestBodyForGet()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|throwsIfRequestBodyForGet()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|throwsIfRequestBodyForGet()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|throwsIfRequestBodyForGet()|0", url))).requestBody("fail")).get());
        } catch (java.lang.IllegalArgumentException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|throwsIfRequestBodyForGet()|4", (caught = true));
        }
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|throwsIfRequestBodyForGet()|5", caught));
    }

    @org.junit.Test
    public void canSpecifyResponseCharset() throws java.io.IOException {
        // both these docs have <80> in there as euro/control char depending on charset
        java.lang.String noCharsetUrl = "http://direct.infohound.net/tools/Windows-1252-nocharset.html";
        java.lang.String charsetUrl = "http://direct.infohound.net/tools/Windows-1252-charset.html";
        // included in meta
        org.jsoup.Connection.Response res1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|0", charsetUrl))).execute());
        org.junit.Assert.assertEquals(null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|3", org.jsoup.Connection.Response.class, res1).charset()));// not set in headers

        final org.jsoup.nodes.Document doc1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|6", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|5", org.jsoup.Connection.Response.class, res1).parse());
        org.junit.Assert.assertEquals("windows-1252", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|8", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|7", org.jsoup.nodes.Document.class, doc1).charset()).displayName()));// but determined at parse time

        org.junit.Assert.assertEquals("Cost is €100", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|11", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|10", org.jsoup.nodes.Document.class, doc1).select("p")).text()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|15", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|13", org.jsoup.nodes.Document.class, doc1).text()).contains("€")));
        // no meta, no override
        org.jsoup.Connection.Response res2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|18", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|17", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|16", noCharsetUrl))).execute());
        org.junit.Assert.assertEquals(null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|19", org.jsoup.Connection.Response.class, res2).charset()));// not set in headers

        final org.jsoup.nodes.Document doc2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|22", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|21", org.jsoup.Connection.Response.class, res2).parse());
        org.junit.Assert.assertEquals("UTF-8", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|24", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|23", org.jsoup.nodes.Document.class, doc2).charset()).displayName()));// so defaults to utf-8

        org.junit.Assert.assertEquals("Cost is �100", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|27", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|26", org.jsoup.nodes.Document.class, doc2).select("p")).text()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|31", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|30", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|29", org.jsoup.nodes.Document.class, doc2).text()).contains("�")));
        // no meta, let's override
        org.jsoup.Connection.Response res3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|34", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|33", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|32", noCharsetUrl))).execute());
        org.junit.Assert.assertEquals(null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|35", org.jsoup.Connection.Response.class, res3).charset()));// not set in headers

        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|38", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|37", org.jsoup.Connection.Response.class, res3).charset("windows-1252"));
        org.junit.Assert.assertEquals("windows-1252", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|40", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|39", org.jsoup.Connection.Response.class, res3).charset()));// read back

        final org.jsoup.nodes.Document doc3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|42", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|41", org.jsoup.Connection.Response.class, res3).parse());
        org.junit.Assert.assertEquals("windows-1252", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|45", eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|44", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|43", org.jsoup.nodes.Document.class, doc3).charset()).displayName()));// from override

        org.junit.Assert.assertEquals("Cost is €100", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|48", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|47", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|46", org.jsoup.nodes.Document.class, doc3).select("p")).text()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|51", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|50", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|canSpecifyResponseCharset()|49", org.jsoup.nodes.Document.class, doc3).text()).contains("€")));
    }

    @org.junit.Test
    public void handlesUnescapedRedirects() throws java.io.IOException {
        // URL locations should be url safe (ascii) but are often not, so we should try to guess
        // in this case the location header is utf-8, but defined in spec as iso8859, so detect, convert, encode
        java.lang.String url = "http://direct.infohound.net/tools/302-utf.pl";
        java.lang.String urlEscaped = "http://direct.infohound.net/tools/test%F0%9F%92%A9.html";
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|0", url))).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|3", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|5", org.jsoup.nodes.Document.class, doc).body()).text()), "\ud83d\udca9!");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|8", org.jsoup.nodes.Document.class, doc).location()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|10", urlEscaped));
        org.jsoup.Connection.Response res2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|14", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|13", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|12", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|11", url))).followRedirects(false)).execute());
        org.junit.Assert.assertEquals("/tools/test\ud83d\udca9.html", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handlesUnescapedRedirects()|15", org.jsoup.Connection.Response.class, res2).header("Location")));
        // if we didn't notice it was utf8, would look like: Location: /tools/testð©.html
    }

    @org.junit.Test
    public void handlesEscapesInRedirecct() throws java.io.IOException {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesEscapesInRedirecct()|1", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handlesEscapesInRedirecct()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://infohound.net/tools/302-escaped.pl")).get());
        org.junit.Assert.assertEquals("http://infohound.net/tools/q.pl?q=one%20two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesEscapesInRedirecct()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesEscapesInRedirecct()|2", org.jsoup.nodes.Document.class, doc).location()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesEscapesInRedirecct()|5", org.jsoup.nodes.Document.class, (doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handlesEscapesInRedirecct()|4", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://infohound.net/tools/302-white.pl")).get()));
        org.junit.Assert.assertEquals("http://infohound.net/tools/q.pl?q=one%20two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesEscapesInRedirecct()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesEscapesInRedirecct()|6", org.jsoup.nodes.Document.class, doc).location()));
    }

    @org.junit.Test
    public void handlesUt8fInUrl() throws java.io.IOException {
        java.lang.String url = "http://direct.infohound.net/tools/test\ud83d\udca9.html";
        java.lang.String urlEscaped = "http://direct.infohound.net/tools/test%F0%9F%92%A9.html";
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handlesUt8fInUrl()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handlesUt8fInUrl()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesUt8fInUrl()|0", url))).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesUt8fInUrl()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handlesUt8fInUrl()|3", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals("\ud83d\udca9!", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesUt8fInUrl()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.integration.UrlConnectTest|handlesUt8fInUrl()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesUt8fInUrl()|5", org.jsoup.nodes.Document.class, doc).body()).text()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesUt8fInUrl()|8", urlEscaped), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesUt8fInUrl()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesUt8fInUrl()|9", org.jsoup.nodes.Document.class, doc).location()));
    }

    @org.junit.Test
    public void inWildUtfRedirect() throws java.io.IOException {
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|inWildUtfRedirect()|1", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|inWildUtfRedirect()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://brabantn.ws/Q4F")).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|inWildUtfRedirect()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|inWildUtfRedirect()|2", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals("http://www.omroepbrabant.nl/?news/2474781303/Gestrande+ree+in+Oss+niet+verdoofd,+maar+doodgeschoten+%E2%80%98Dit+kan+gewoon+niet,+bizar%E2%80%99+[VIDEO].aspx", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|inWildUtfRedirect()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|inWildUtfRedirect()|4", org.jsoup.nodes.Document.class, doc).location()));
    }

    @org.junit.Test
    public void inWildUtfRedirect2() throws java.io.IOException {
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|inWildUtfRedirect2()|1", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|inWildUtfRedirect2()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("https://ssl.souq.com/sa-en/2724288604627/s")).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|inWildUtfRedirect2()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|inWildUtfRedirect2()|2", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals("https://saudi.souq.com/sa-en/%D8%AE%D8%B2%D9%86%D8%A9-%D8%A2%D9%85%D9%86%D8%A9-3-%D8%B7%D8%A8%D9%82%D8%A7%D8%AA-%D8%A8%D9%86%D8%B8%D8%A7%D9%85-%D9%82%D9%81%D9%84-%D8%A5%D9%84%D9%83%D8%AA%D8%B1%D9%88%D9%86%D9%8A-bsd11523-6831477/i/?ctype=dsrch", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|inWildUtfRedirect2()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|inWildUtfRedirect2()|4", org.jsoup.nodes.Document.class, doc).location()));
    }

    @org.junit.Test
    public void handlesEscapedRedirectUrls() throws java.io.IOException {
        java.lang.String url = "http://www.altalex.com/documents/news/2016/12/06/questioni-civilistiche-conseguenti-alla-depenalizzazione";
        // sends: Location:http://shop.wki.it/shared/sso/sso.aspx?sso=&url=http%3a%2f%2fwww.altalex.com%2fsession%2fset%2f%3freturnurl%3dhttp%253a%252f%252fwww.altalex.com%253a80%252fdocuments%252fnews%252f2016%252f12%252f06%252fquestioni-civilistiche-conseguenti-alla-depenalizzazione
        // then to: http://www.altalex.com/session/set/?returnurl=http%3a%2f%2fwww.altalex.com%3a80%2fdocuments%2fnews%2f2016%2f12%2f06%2fquestioni-civilistiche-conseguenti-alla-depenalizzazione&sso=RDRG6T684G4AK2E7U591UGR923
        // then : http://www.altalex.com:80/documents/news/2016/12/06/questioni-civilistiche-conseguenti-alla-depenalizzazione
        // bug is that jsoup goes to
        // GET /shared/sso/sso.aspx?sso=&url=http%253a%252f%252fwww.altalex.com%252fsession%252fset%252f%253freturnurl%253dhttp%25253a%25252f%25252fwww.altalex.com%25253a80%25252fdocuments%25252fnews%25252f2016%25252f12%25252f06%25252fquestioni-civilistiche-conseguenti-alla-depenalizzazione HTTP/1.1
        // i.e. double escaped
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handlesEscapedRedirectUrls()|3", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handlesEscapedRedirectUrls()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handlesEscapedRedirectUrls()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesEscapedRedirectUrls()|0", url))).proxy("localhost", 8888)).execute());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesEscapedRedirectUrls()|5", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handlesEscapedRedirectUrls()|4", org.jsoup.Connection.Response.class, res).parse());
        org.junit.Assert.assertEquals(200, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesEscapedRedirectUrls()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.integration.UrlConnectTest|handlesEscapedRedirectUrls()|6", org.jsoup.Connection.Response.class, res).statusCode()));
    }

    @org.junit.Test
    public void handlesUnicodeInQuery() throws java.io.IOException {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesUnicodeInQuery()|1", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handlesUnicodeInQuery()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("https://www.google.pl/search?q=gąska")).get());
        org.junit.Assert.assertEquals("gąska - Szukaj w Google", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesUnicodeInQuery()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesUnicodeInQuery()|2", org.jsoup.nodes.Document.class, doc).title()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesUnicodeInQuery()|5", org.jsoup.nodes.Document.class, (doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handlesUnicodeInQuery()|4", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://mov-world.net/archiv/TV/A/%23No.Title/")).get()));
        org.junit.Assert.assertEquals("Index of /archiv/TV/A/%23No.Title", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesUnicodeInQuery()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesUnicodeInQuery()|6", org.jsoup.nodes.Document.class, doc).title()));
    }

    @org.junit.Test
    public void handlesSuperDeepPage() throws java.io.IOException {
        // https://github.com/jhy/jsoup/issues/955
        long start = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesSuperDeepPage()|0", java.lang.System.currentTimeMillis());
        java.lang.String url = "http://sv.stargate.wikia.com/wiki/M2J";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesSuperDeepPage()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handlesSuperDeepPage()|2", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesSuperDeepPage()|1", url))).get());
        org.junit.Assert.assertEquals("M2J | Sv.stargate Wiki | FANDOM powered by Wikia", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesSuperDeepPage()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesSuperDeepPage()|4", org.jsoup.nodes.Document.class, doc).title()));
        org.junit.Assert.assertEquals(110160, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesSuperDeepPage()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.integration.UrlConnectTest|handlesSuperDeepPage()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handlesSuperDeepPage()|6", org.jsoup.nodes.Document.class, doc).select("dd")).size()));
        // those are all <dl><dd> stacked in each other. wonder how that got generated?
        org.junit.Assert.assertTrue((((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesSuperDeepPage()|9", java.lang.System.currentTimeMillis())) - (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handlesSuperDeepPage()|10", start))) < 1000));
    }

    @org.junit.Test
    public void handles966() throws java.io.IOException {
        // http://szshb.nxszs.gov.cn/
        // https://github.com/jhy/jsoup/issues/966
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handles966()|1", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.integration.UrlConnectTest|handles966()|0", org.jsoup.Connection.class, org.jsoup.Jsoup.connect("http://szshb.nxszs.gov.cn/")).get());
        org.junit.Assert.assertEquals("石嘴山市环境保护局", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.integration.UrlConnectTest|handles966()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.integration.UrlConnectTest|handles966()|2", org.jsoup.nodes.Document.class, doc).title()));
    }
}

