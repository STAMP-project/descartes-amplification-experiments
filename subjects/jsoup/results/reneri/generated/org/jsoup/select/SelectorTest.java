package org.jsoup.select;


/**
 * Tests that the selector selects correctly.
 *
 * @author Jonathan Hedley, jonathan@hedley.net
 */
public class SelectorTest {
    @org.junit.Rule
    public org.jsoup.MultiLocaleRule rule = new org.jsoup.MultiLocaleRule();

    @org.junit.Test
    public void testByTag() {
        // should be case insensitive
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByTag()|1", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByTag()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello</p></div></div><DIV id=3>")).select("DIV"));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByTag()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByTag()|2", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByTag()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByTag()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByTag()|4", org.jsoup.select.Elements.class, els).get(0)).id()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByTag()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByTag()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByTag()|7", org.jsoup.select.Elements.class, els).get(1)).id()));
        org.junit.Assert.assertEquals("3", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByTag()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByTag()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByTag()|10", org.jsoup.select.Elements.class, els).get(2)).id()));
        org.jsoup.select.Elements none = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByTag()|14", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByTag()|13", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello</p></div></div><div id=3>")).select("span"));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByTag()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByTag()|15", org.jsoup.select.Elements.class, none).size()));
    }

    @org.junit.Test
    public void testById() {
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testById()|1", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testById()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p id=foo>Hello</p><p id=foo>Foo two!</p></div>")).select("#foo"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testById()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testById()|2", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testById()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testById()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testById()|4", org.jsoup.select.Elements.class, els).get(0)).text()));
        org.junit.Assert.assertEquals("Foo two!", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testById()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testById()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testById()|7", org.jsoup.select.Elements.class, els).get(1)).text()));
        org.jsoup.select.Elements none = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testById()|11", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testById()|10", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1></div>")).select("#foo"));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testById()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testById()|12", org.jsoup.select.Elements.class, none).size()));
    }

    @org.junit.Test
    public void testByClass() {
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByClass()|1", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByClass()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p id=0 class='ONE two'><p id=1 class='one'><p id=2 class='two'>")).select("P.One"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByClass()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByClass()|2", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("0", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByClass()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByClass()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByClass()|4", org.jsoup.select.Elements.class, els).get(0)).id()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByClass()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByClass()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByClass()|7", org.jsoup.select.Elements.class, els).get(1)).id()));
        org.jsoup.select.Elements none = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByClass()|11", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByClass()|10", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div class='one'></div>")).select(".foo"));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByClass()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByClass()|12", org.jsoup.select.Elements.class, none).size()));
        org.jsoup.select.Elements els2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByClass()|15", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByClass()|14", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div class='One-Two'></div>")).select(".one-two"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByClass()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByClass()|16", org.jsoup.select.Elements.class, els2).size()));
    }

    @org.junit.Test
    public void testByClassCaseInsensitive() {
        java.lang.String html = "<p Class=foo>One <p Class=Foo>Two <p class=FOO>Three <p class=farp>Four";
        org.jsoup.select.Elements elsFromClass = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|0", html))).select("P.Foo"));
        org.jsoup.select.Elements elsFromAttr = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|4", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|3", html))).select("p[class=foo]"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|6", org.jsoup.select.Elements.class, elsFromAttr).size()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|8", org.jsoup.select.Elements.class, elsFromClass).size()));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|10", org.jsoup.select.Elements.class, elsFromClass).size()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByClassCaseInsensitive()|12", org.jsoup.select.Elements.class, elsFromClass).get(1)).text()));
    }

    @org.junit.Test
    @org.jsoup.MultiLocaleRule.MultiLocaleTest
    public void testByAttribute() {
        java.lang.String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Balim /><div title=SLIM />" + "<div data-name='with spaces'/>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttribute()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|0", h)));
        org.jsoup.select.Elements withTitle = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttribute()|2", org.jsoup.nodes.Document.class, doc).select("[title]"));
        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|4", org.jsoup.select.Elements.class, withTitle).size()));
        org.jsoup.select.Elements foo = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttribute()|6", org.jsoup.nodes.Document.class, doc).select("[TITLE=foo]"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|8", org.jsoup.select.Elements.class, foo).size()));
        org.jsoup.select.Elements foo2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|11", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttribute()|10", org.jsoup.nodes.Document.class, doc).select("[title=\"foo\"]"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|12", org.jsoup.select.Elements.class, foo2).size()));
        org.jsoup.select.Elements foo3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|15", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttribute()|14", org.jsoup.nodes.Document.class, doc).select("[title=\"Foo\"]"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|16", org.jsoup.select.Elements.class, foo3).size()));
        org.jsoup.select.Elements dataName = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|19", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttribute()|18", org.jsoup.nodes.Document.class, doc).select("[data-name=\"with spaces\"]"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|20", org.jsoup.select.Elements.class, dataName).size()));
        org.junit.Assert.assertEquals("with spaces", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttribute()|23", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|22", org.jsoup.select.Elements.class, dataName).first()).attr("data-name")));
        org.jsoup.select.Elements not = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|26", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttribute()|25", org.jsoup.nodes.Document.class, doc).select("div[title!=bar]"));
        org.junit.Assert.assertEquals(5, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|27", org.jsoup.select.Elements.class, not).size()));
        org.junit.Assert.assertEquals("Foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttribute()|30", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|29", org.jsoup.select.Elements.class, not).first()).attr("title")));
        org.jsoup.select.Elements starts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|33", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttribute()|32", org.jsoup.nodes.Document.class, doc).select("[title^=ba]"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|34", org.jsoup.select.Elements.class, starts).size()));
        org.junit.Assert.assertEquals("Bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|38", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttribute()|37", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|36", org.jsoup.select.Elements.class, starts).first()).attr("title")));
        org.junit.Assert.assertEquals("Balim", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|41", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttribute()|40", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|39", org.jsoup.select.Elements.class, starts).last()).attr("title")));
        org.jsoup.select.Elements ends = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|43", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttribute()|42", org.jsoup.nodes.Document.class, doc).select("[title$=im]"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|45", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|44", org.jsoup.select.Elements.class, ends).size()));
        org.junit.Assert.assertEquals("Balim", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|48", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttribute()|47", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|46", org.jsoup.select.Elements.class, ends).first()).attr("title")));
        org.junit.Assert.assertEquals("SLIM", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|51", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttribute()|50", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|49", org.jsoup.select.Elements.class, ends).last()).attr("title")));
        org.jsoup.select.Elements contains = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|53", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttribute()|52", org.jsoup.nodes.Document.class, doc).select("[title*=i]"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|55", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|54", org.jsoup.select.Elements.class, contains).size()));
        org.junit.Assert.assertEquals("Balim", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|58", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttribute()|57", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|56", org.jsoup.select.Elements.class, contains).first()).attr("title")));
        org.junit.Assert.assertEquals("SLIM", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttribute()|61", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttribute()|60", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttribute()|59", org.jsoup.select.Elements.class, contains).last()).attr("title")));
    }

    @org.junit.Test
    public void testNamespacedTag() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>"));
        org.jsoup.select.Elements byTag = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|1", org.jsoup.nodes.Document.class, doc).select("abc|def"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNamespacedTag()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|3", org.jsoup.select.Elements.class, byTag).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNamespacedTag()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|5", org.jsoup.select.Elements.class, byTag).first()).id()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNamespacedTag()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|8", org.jsoup.select.Elements.class, byTag).last()).id()));
        org.jsoup.select.Elements byAttr = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|12", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|11", org.jsoup.nodes.Document.class, doc).select(".bold"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNamespacedTag()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|13", org.jsoup.select.Elements.class, byAttr).size()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNamespacedTag()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|15", org.jsoup.select.Elements.class, byAttr).last()).id()));
        org.jsoup.select.Elements byTagAttr = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|19", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|18", org.jsoup.nodes.Document.class, doc).select("abc|def.bold"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNamespacedTag()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|20", org.jsoup.select.Elements.class, byTagAttr).size()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNamespacedTag()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|23", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|22", org.jsoup.select.Elements.class, byTagAttr).last()).id()));
        org.jsoup.select.Elements byContains = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|26", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|25", org.jsoup.nodes.Document.class, doc).select("abc|def:contains(e)"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNamespacedTag()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|27", org.jsoup.select.Elements.class, byContains).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNamespacedTag()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|30", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|29", org.jsoup.select.Elements.class, byContains).first()).id()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNamespacedTag()|34", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|33", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNamespacedTag()|32", org.jsoup.select.Elements.class, byContains).last()).id()));
    }

    @org.junit.Test
    public void testWildcardNamespacedTag() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>"));
        org.jsoup.select.Elements byTag = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|1", org.jsoup.nodes.Document.class, doc).select("*|def"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|3", org.jsoup.select.Elements.class, byTag).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|5", org.jsoup.select.Elements.class, byTag).first()).id()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|8", org.jsoup.select.Elements.class, byTag).last()).id()));
        org.jsoup.select.Elements byAttr = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|12", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|11", org.jsoup.nodes.Document.class, doc).select(".bold"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|13", org.jsoup.select.Elements.class, byAttr).size()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|15", org.jsoup.select.Elements.class, byAttr).last()).id()));
        org.jsoup.select.Elements byTagAttr = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|19", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|18", org.jsoup.nodes.Document.class, doc).select("*|def.bold"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|20", org.jsoup.select.Elements.class, byTagAttr).size()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|23", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|22", org.jsoup.select.Elements.class, byTagAttr).last()).id()));
        org.jsoup.select.Elements byContains = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|26", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|25", org.jsoup.nodes.Document.class, doc).select("*|def:contains(e)"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|27", org.jsoup.select.Elements.class, byContains).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|30", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|29", org.jsoup.select.Elements.class, byContains).first()).id()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|34", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|33", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testWildcardNamespacedTag()|32", org.jsoup.select.Elements.class, byContains).last()).id()));
    }

    @org.junit.Test
    @org.jsoup.MultiLocaleRule.MultiLocaleTest
    public void testByAttributeStarting() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1 ATTRIBUTE data-name=jsoup>Hello</div><p data-val=5 id=2>There</p><p id=3>No</p>"));
        org.jsoup.select.Elements withData = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|1", org.jsoup.nodes.Document.class, doc).select("[^data-]"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeStarting()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|3", org.jsoup.select.Elements.class, withData).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeStarting()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|5", org.jsoup.select.Elements.class, withData).first()).id()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeStarting()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|8", org.jsoup.select.Elements.class, withData).last()).id()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|12", org.jsoup.select.Elements.class, (withData = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|11", org.jsoup.nodes.Document.class, doc).select("p[^data-]")));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeStarting()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|13", org.jsoup.select.Elements.class, withData).size()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeStarting()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|15", org.jsoup.select.Elements.class, withData).first()).id()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeStarting()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|19", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttributeStarting()|18", org.jsoup.nodes.Document.class, doc).select("[^attrib]")).size()));
    }

    @org.junit.Test
    public void testByAttributeRegex() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttributeRegex()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif><img></p>"));
        org.jsoup.select.Elements imgs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeRegex()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttributeRegex()|1", org.jsoup.nodes.Document.class, doc).select("img[src~=(?i)\\.(png|jpe?g)]"));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeRegex()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeRegex()|3", org.jsoup.select.Elements.class, imgs).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeRegex()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttributeRegex()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeRegex()|5", org.jsoup.select.Elements.class, imgs).get(0)).id()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeRegex()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttributeRegex()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeRegex()|8", org.jsoup.select.Elements.class, imgs).get(1)).id()));
        org.junit.Assert.assertEquals("3", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeRegex()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttributeRegex()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeRegex()|11", org.jsoup.select.Elements.class, imgs).get(2)).id()));
    }

    @org.junit.Test
    public void testByAttributeRegexCharacterClass() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttributeRegexCharacterClass()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif id=4></p>"));
        org.jsoup.select.Elements imgs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeRegexCharacterClass()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttributeRegexCharacterClass()|1", org.jsoup.nodes.Document.class, doc).select("img[src~=[o]]"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeRegexCharacterClass()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeRegexCharacterClass()|3", org.jsoup.select.Elements.class, imgs).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeRegexCharacterClass()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttributeRegexCharacterClass()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeRegexCharacterClass()|5", org.jsoup.select.Elements.class, imgs).get(0)).id()));
        org.junit.Assert.assertEquals("4", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeRegexCharacterClass()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testByAttributeRegexCharacterClass()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeRegexCharacterClass()|8", org.jsoup.select.Elements.class, imgs).get(1)).id()));
    }

    @org.junit.Test
    public void testByAttributeRegexCombined() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttributeRegexCombined()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><table class=x><td>Hello</td></table></div>"));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeRegexCombined()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testByAttributeRegexCombined()|1", org.jsoup.nodes.Document.class, doc).select("div table[class~=x|y]"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeRegexCombined()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeRegexCombined()|3", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testByAttributeRegexCombined()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testByAttributeRegexCombined()|5", org.jsoup.select.Elements.class, els).text()));
    }

    @org.junit.Test
    public void testCombinedWithContains() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testCombinedWithContains()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p id=1>One</p><p>Two +</p><p>Three +</p>"));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testCombinedWithContains()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testCombinedWithContains()|1", org.jsoup.nodes.Document.class, doc).select("p#1 + :contains(+)"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testCombinedWithContains()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testCombinedWithContains()|3", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("Two +", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testCombinedWithContains()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testCombinedWithContains()|5", org.jsoup.select.Elements.class, els).text()));
        org.junit.Assert.assertEquals("p", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testCombinedWithContains()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testCombinedWithContains()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testCombinedWithContains()|7", org.jsoup.select.Elements.class, els).first()).tagName()));
    }

    @org.junit.Test
    public void testAllElements() {
        java.lang.String h = "<div><p>Hello</p><p><b>there</b></p></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testAllElements()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testAllElements()|0", h)));
        org.jsoup.select.Elements allDoc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testAllElements()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testAllElements()|2", org.jsoup.nodes.Document.class, doc).select("*"));
        org.jsoup.select.Elements allUnderDiv = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testAllElements()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testAllElements()|4", org.jsoup.nodes.Document.class, doc).select("div *"));
        org.junit.Assert.assertEquals(8, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testAllElements()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testAllElements()|6", org.jsoup.select.Elements.class, allDoc).size()));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testAllElements()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testAllElements()|8", org.jsoup.select.Elements.class, allUnderDiv).size()));
        org.junit.Assert.assertEquals("p", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testAllElements()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testAllElements()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testAllElements()|10", org.jsoup.select.Elements.class, allUnderDiv).first()).tagName()));
    }

    @org.junit.Test
    public void testAllWithClass() {
        java.lang.String h = "<p class=first>One<p class=first>Two<p>Three";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testAllWithClass()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testAllWithClass()|0", h)));
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testAllWithClass()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testAllWithClass()|2", org.jsoup.nodes.Document.class, doc).select("*.first"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testAllWithClass()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testAllWithClass()|4", org.jsoup.select.Elements.class, ps).size()));
    }

    @org.junit.Test
    public void testGroupOr() {
        java.lang.String h = "<div title=foo /><div title=bar /><div /><p></p><img /><span title=qux>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testGroupOr()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOr()|0", h)));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOr()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testGroupOr()|2", org.jsoup.nodes.Document.class, doc).select("p,div,[title]"));
        org.junit.Assert.assertEquals(5, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOr()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOr()|4", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOr()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testGroupOr()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOr()|6", org.jsoup.select.Elements.class, els).get(0)).tagName()));
        org.junit.Assert.assertEquals("foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOr()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testGroupOr()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOr()|9", org.jsoup.select.Elements.class, els).get(0)).attr("title")));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOr()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testGroupOr()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOr()|12", org.jsoup.select.Elements.class, els).get(1)).tagName()));
        org.junit.Assert.assertEquals("bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOr()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testGroupOr()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOr()|15", org.jsoup.select.Elements.class, els).get(1)).attr("title")));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOr()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testGroupOr()|19", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOr()|18", org.jsoup.select.Elements.class, els).get(2)).tagName()));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOr()|24", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOr()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testGroupOr()|22", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOr()|21", org.jsoup.select.Elements.class, els).get(2)).attr("title")).length())) == 0));// missing attributes come back as empty string

        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOr()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testGroupOr()|26", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOr()|25", org.jsoup.select.Elements.class, els).get(2)).hasAttr("title")));
        org.junit.Assert.assertEquals("p", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOr()|30", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testGroupOr()|29", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOr()|28", org.jsoup.select.Elements.class, els).get(3)).tagName()));
        org.junit.Assert.assertEquals("span", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOr()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testGroupOr()|32", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOr()|31", org.jsoup.select.Elements.class, els).get(4)).tagName()));
    }

    @org.junit.Test
    public void testGroupOrAttribute() {
        java.lang.String h = "<div id=1 /><div id=2 /><div title=foo /><div title=bar />";
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOrAttribute()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testGroupOrAttribute()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOrAttribute()|0", h))).select("[id],[title=foo]"));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOrAttribute()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOrAttribute()|3", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOrAttribute()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testGroupOrAttribute()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOrAttribute()|5", org.jsoup.select.Elements.class, els).get(0)).id()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOrAttribute()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testGroupOrAttribute()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOrAttribute()|8", org.jsoup.select.Elements.class, els).get(1)).id()));
        org.junit.Assert.assertEquals("foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testGroupOrAttribute()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testGroupOrAttribute()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testGroupOrAttribute()|11", org.jsoup.select.Elements.class, els).get(2)).attr("title")));
    }

    @org.junit.Test
    public void descendant() {
        java.lang.String h = "<div class=head><p class=first>Hello</p><p>There</p></div><p>None</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|descendant()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|descendant()|0", h)));
        org.jsoup.nodes.Element root = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|descendant()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|descendant()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|descendant()|2", org.jsoup.nodes.Document.class, doc).getElementsByClass("HEAD")).first());
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|descendant()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|descendant()|5", org.jsoup.nodes.Element.class, root).select(".head p"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|descendant()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|descendant()|7", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|descendant()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|descendant()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|descendant()|9", org.jsoup.select.Elements.class, els).get(0)).text()));
        org.junit.Assert.assertEquals("There", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|descendant()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|descendant()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|descendant()|12", org.jsoup.select.Elements.class, els).get(1)).text()));
        org.jsoup.select.Elements p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|descendant()|16", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|descendant()|15", org.jsoup.nodes.Element.class, root).select("p.first"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|descendant()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|descendant()|17", org.jsoup.select.Elements.class, p).size()));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|descendant()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|descendant()|20", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|descendant()|19", org.jsoup.select.Elements.class, p).get(0)).text()));
        org.jsoup.select.Elements empty = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|descendant()|23", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|descendant()|22", org.jsoup.nodes.Element.class, root).select("p .first"));// self, not descend, should not match

        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|descendant()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|descendant()|24", org.jsoup.select.Elements.class, empty).size()));
        org.jsoup.select.Elements aboveRoot = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|descendant()|27", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|descendant()|26", org.jsoup.nodes.Element.class, root).select("body div.head"));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|descendant()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|descendant()|28", org.jsoup.select.Elements.class, aboveRoot).size()));
    }

    @org.junit.Test
    public void and() {
        java.lang.String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|and()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|and()|0", h)));
        org.jsoup.select.Elements div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|and()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|and()|2", org.jsoup.nodes.Document.class, doc).select("div.foo"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|and()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|and()|4", org.jsoup.select.Elements.class, div).size()));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|and()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|and()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|and()|6", org.jsoup.select.Elements.class, div).first()).tagName()));
        org.jsoup.select.Elements p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|and()|10", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|and()|9", org.jsoup.nodes.Document.class, doc).select("div .foo"));// space indicates like "div *.foo"

        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|and()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|and()|11", org.jsoup.select.Elements.class, p).size()));
        org.junit.Assert.assertEquals("p", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|and()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|and()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|and()|13", org.jsoup.select.Elements.class, p).first()).tagName()));
        org.jsoup.select.Elements div2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|and()|17", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|and()|16", org.jsoup.nodes.Document.class, doc).select("div#1.foo.bar[title=bar][name=qux]"));// very specific!

        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|and()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|and()|18", org.jsoup.select.Elements.class, div2).size()));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|and()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|and()|21", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|and()|20", org.jsoup.select.Elements.class, div2).first()).tagName()));
        org.jsoup.select.Elements p2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|and()|24", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|and()|23", org.jsoup.nodes.Document.class, doc).select("div *.foo"));// space indicates like "div *.foo"

        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|and()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|and()|25", org.jsoup.select.Elements.class, p2).size()));
        org.junit.Assert.assertEquals("p", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|and()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|and()|28", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|and()|27", org.jsoup.select.Elements.class, p2).first()).tagName()));
    }

    @org.junit.Test
    public void deeperDescendant() {
        java.lang.String h = "<div class=head><p><span class=first>Hello</div><div class=head><p class=first><span>Another</span><p>Again</div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|deeperDescendant()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|deeperDescendant()|0", h)));
        org.jsoup.nodes.Element root = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|deeperDescendant()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|deeperDescendant()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|deeperDescendant()|2", org.jsoup.nodes.Document.class, doc).getElementsByClass("head")).first());
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|deeperDescendant()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|deeperDescendant()|5", org.jsoup.nodes.Element.class, root).select("div p .first"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|deeperDescendant()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|deeperDescendant()|7", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|deeperDescendant()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|deeperDescendant()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|deeperDescendant()|9", org.jsoup.select.Elements.class, els).first()).text()));
        org.junit.Assert.assertEquals("span", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|deeperDescendant()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|deeperDescendant()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|deeperDescendant()|12", org.jsoup.select.Elements.class, els).first()).tagName()));
        org.jsoup.select.Elements aboveRoot = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|deeperDescendant()|16", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|deeperDescendant()|15", org.jsoup.nodes.Element.class, root).select("body p .first"));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|deeperDescendant()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|deeperDescendant()|17", org.jsoup.select.Elements.class, aboveRoot).size()));
    }

    @org.junit.Test
    public void parentChildElement() {
        java.lang.String h = "<div id=1><div id=2><div id = 3></div></div></div><div id=4></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|parentChildElement()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentChildElement()|0", h)));
        org.jsoup.select.Elements divs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentChildElement()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|parentChildElement()|2", org.jsoup.nodes.Document.class, doc).select("div > div"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentChildElement()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentChildElement()|4", org.jsoup.select.Elements.class, divs).size()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentChildElement()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|parentChildElement()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentChildElement()|6", org.jsoup.select.Elements.class, divs).get(0)).id()));// 2 is child of 1

        org.junit.Assert.assertEquals("3", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentChildElement()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|parentChildElement()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentChildElement()|9", org.jsoup.select.Elements.class, divs).get(1)).id()));// 3 is child of 2

        org.jsoup.select.Elements div2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentChildElement()|13", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|parentChildElement()|12", org.jsoup.nodes.Document.class, doc).select("div#1 > div"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentChildElement()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentChildElement()|14", org.jsoup.select.Elements.class, div2).size()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentChildElement()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|parentChildElement()|17", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentChildElement()|16", org.jsoup.select.Elements.class, div2).get(0)).id()));
    }

    @org.junit.Test
    public void parentWithClassChild() {
        java.lang.String h = "<h1 class=foo><a href=1 /></h1><h1 class=foo><a href=2 class=bar /></h1><h1><a href=3 /></h1>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|parentWithClassChild()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentWithClassChild()|0", h)));
        org.jsoup.select.Elements allAs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentWithClassChild()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|parentWithClassChild()|2", org.jsoup.nodes.Document.class, doc).select("h1 > a"));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentWithClassChild()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentWithClassChild()|4", org.jsoup.select.Elements.class, allAs).size()));
        org.junit.Assert.assertEquals("a", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentWithClassChild()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|parentWithClassChild()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentWithClassChild()|6", org.jsoup.select.Elements.class, allAs).first()).tagName()));
        org.jsoup.select.Elements fooAs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentWithClassChild()|10", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|parentWithClassChild()|9", org.jsoup.nodes.Document.class, doc).select("h1.foo > a"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentWithClassChild()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentWithClassChild()|11", org.jsoup.select.Elements.class, fooAs).size()));
        org.junit.Assert.assertEquals("a", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentWithClassChild()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|parentWithClassChild()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentWithClassChild()|13", org.jsoup.select.Elements.class, fooAs).first()).tagName()));
        org.jsoup.select.Elements barAs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentWithClassChild()|17", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|parentWithClassChild()|16", org.jsoup.nodes.Document.class, doc).select("h1.foo > a.bar"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentWithClassChild()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentWithClassChild()|18", org.jsoup.select.Elements.class, barAs).size()));
    }

    @org.junit.Test
    public void parentChildStar() {
        java.lang.String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|parentChildStar()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentChildStar()|0", h)));
        org.jsoup.select.Elements divChilds = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentChildStar()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|parentChildStar()|2", org.jsoup.nodes.Document.class, doc).select("div > *"));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentChildStar()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentChildStar()|4", org.jsoup.select.Elements.class, divChilds).size()));
        org.junit.Assert.assertEquals("p", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentChildStar()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|parentChildStar()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentChildStar()|6", org.jsoup.select.Elements.class, divChilds).get(0)).tagName()));
        org.junit.Assert.assertEquals("p", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentChildStar()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|parentChildStar()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentChildStar()|9", org.jsoup.select.Elements.class, divChilds).get(1)).tagName()));
        org.junit.Assert.assertEquals("span", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|parentChildStar()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|parentChildStar()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|parentChildStar()|12", org.jsoup.select.Elements.class, divChilds).get(2)).tagName()));
    }

    @org.junit.Test
    public void multiChildDescent() {
        java.lang.String h = "<div id=foo><h1 class=bar><a href=http://example.com/>One</a></h1></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|multiChildDescent()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|multiChildDescent()|0", h)));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|multiChildDescent()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|multiChildDescent()|2", org.jsoup.nodes.Document.class, doc).select("div#foo > h1.bar > a[href*=example]"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|multiChildDescent()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|multiChildDescent()|4", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("a", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|multiChildDescent()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|multiChildDescent()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|multiChildDescent()|6", org.jsoup.select.Elements.class, els).first()).tagName()));
    }

    @org.junit.Test
    public void caseInsensitive() {
        java.lang.String h = "<dIv tItle=bAr><div>";// mixed case so a simple toLowerCase() on value doesn't catch

        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|caseInsensitive()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|caseInsensitive()|0", h)));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|caseInsensitive()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|caseInsensitive()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|caseInsensitive()|2", org.jsoup.nodes.Document.class, doc).select("DiV")).size()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|caseInsensitive()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|caseInsensitive()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|caseInsensitive()|5", org.jsoup.nodes.Document.class, doc).select("DiV[TiTLE]")).size()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|caseInsensitive()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|caseInsensitive()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|caseInsensitive()|8", org.jsoup.nodes.Document.class, doc).select("DiV[TiTLE=BAR]")).size()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|caseInsensitive()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|caseInsensitive()|12", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|caseInsensitive()|11", org.jsoup.nodes.Document.class, doc).select("DiV[TiTLE=BARBARELLA]")).size()));
    }

    @org.junit.Test
    public void adjacentSiblings() {
        java.lang.String h = "<ol><li>One<li>Two<li>Three</ol>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|adjacentSiblings()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|adjacentSiblings()|0", h)));
        org.jsoup.select.Elements sibs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|adjacentSiblings()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|adjacentSiblings()|2", org.jsoup.nodes.Document.class, doc).select("li + li"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|adjacentSiblings()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|adjacentSiblings()|4", org.jsoup.select.Elements.class, sibs).size()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|adjacentSiblings()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|adjacentSiblings()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|adjacentSiblings()|6", org.jsoup.select.Elements.class, sibs).get(0)).text()));
        org.junit.Assert.assertEquals("Three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|adjacentSiblings()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|adjacentSiblings()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|adjacentSiblings()|9", org.jsoup.select.Elements.class, sibs).get(1)).text()));
    }

    @org.junit.Test
    public void adjacentSiblingsWithId() {
        java.lang.String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|adjacentSiblingsWithId()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|adjacentSiblingsWithId()|0", h)));
        org.jsoup.select.Elements sibs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|adjacentSiblingsWithId()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|adjacentSiblingsWithId()|2", org.jsoup.nodes.Document.class, doc).select("li#1 + li#2"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|adjacentSiblingsWithId()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|adjacentSiblingsWithId()|4", org.jsoup.select.Elements.class, sibs).size()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|adjacentSiblingsWithId()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|adjacentSiblingsWithId()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|adjacentSiblingsWithId()|6", org.jsoup.select.Elements.class, sibs).get(0)).text()));
    }

    @org.junit.Test
    public void notAdjacent() {
        java.lang.String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|notAdjacent()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|notAdjacent()|0", h)));
        org.jsoup.select.Elements sibs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notAdjacent()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|notAdjacent()|2", org.jsoup.nodes.Document.class, doc).select("li#1 + li#3"));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|notAdjacent()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notAdjacent()|4", org.jsoup.select.Elements.class, sibs).size()));
    }

    @org.junit.Test
    public void mixCombinator() {
        java.lang.String h = "<div class=foo><ol><li>One<li>Two<li>Three</ol></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|mixCombinator()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|mixCombinator()|0", h)));
        org.jsoup.select.Elements sibs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|mixCombinator()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|mixCombinator()|2", org.jsoup.nodes.Document.class, doc).select("body > div.foo li + li"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|mixCombinator()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|mixCombinator()|4", org.jsoup.select.Elements.class, sibs).size()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|mixCombinator()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|mixCombinator()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|mixCombinator()|6", org.jsoup.select.Elements.class, sibs).get(0)).text()));
        org.junit.Assert.assertEquals("Three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|mixCombinator()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|mixCombinator()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|mixCombinator()|9", org.jsoup.select.Elements.class, sibs).get(1)).text()));
    }

    @org.junit.Test
    public void mixCombinatorGroup() {
        java.lang.String h = "<div class=foo><ol><li>One<li>Two<li>Three</ol></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|mixCombinatorGroup()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|mixCombinatorGroup()|0", h)));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|mixCombinatorGroup()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|mixCombinatorGroup()|2", org.jsoup.nodes.Document.class, doc).select(".foo > ol, ol > li + li"));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|mixCombinatorGroup()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|mixCombinatorGroup()|4", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("ol", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|mixCombinatorGroup()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|mixCombinatorGroup()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|mixCombinatorGroup()|6", org.jsoup.select.Elements.class, els).get(0)).tagName()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|mixCombinatorGroup()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|mixCombinatorGroup()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|mixCombinatorGroup()|9", org.jsoup.select.Elements.class, els).get(1)).text()));
        org.junit.Assert.assertEquals("Three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|mixCombinatorGroup()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|mixCombinatorGroup()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|mixCombinatorGroup()|12", org.jsoup.select.Elements.class, els).get(2)).text()));
    }

    @org.junit.Test
    public void generalSiblings() {
        java.lang.String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|generalSiblings()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|generalSiblings()|0", h)));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|generalSiblings()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|generalSiblings()|2", org.jsoup.nodes.Document.class, doc).select("#1 ~ #3"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|generalSiblings()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|generalSiblings()|4", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("Three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|generalSiblings()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|generalSiblings()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|generalSiblings()|6", org.jsoup.select.Elements.class, els).first()).text()));
    }

    // for http://github.com/jhy/jsoup/issues#issue/10
    @org.junit.Test
    public void testCharactersInIdAndClass() {
        // using CSS spec for identifiers (id and class): a-z0-9, -, _. NOT . (which is OK in html spec, but not css)
        java.lang.String h = "<div><p id='a1-foo_bar'>One</p><p class='b2-qux_bif'>Two</p></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|0", h)));
        org.jsoup.nodes.Element el1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|2", org.jsoup.nodes.Document.class, doc).getElementById("a1-foo_bar"));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|4", org.jsoup.nodes.Element.class, el1).text()));
        org.jsoup.nodes.Element el2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|6", org.jsoup.nodes.Document.class, doc).getElementsByClass("b2-qux_bif")).first());
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|9", org.jsoup.nodes.Element.class, el2).text()));
        org.jsoup.nodes.Element el3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|12", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|11", org.jsoup.nodes.Document.class, doc).select("#a1-foo_bar")).first());
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|14", org.jsoup.nodes.Element.class, el3).text()));
        org.jsoup.nodes.Element el4 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|17", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|16", org.jsoup.nodes.Document.class, doc).select(".b2-qux_bif")).first());
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testCharactersInIdAndClass()|19", org.jsoup.nodes.Element.class, el4).text()));
    }

    // for http://github.com/jhy/jsoup/issues#issue/13
    @org.junit.Test
    public void testSupportsLeadingCombinator() {
        java.lang.String h = "<div><p><span>One</span><span>Two</span></p></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|0", h)));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|2", org.jsoup.nodes.Document.class, doc).select("div > p")).first());
        org.jsoup.select.Elements spans = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|5", org.jsoup.nodes.Element.class, p).select("> span"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|7", org.jsoup.select.Elements.class, spans).size()));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|9", org.jsoup.select.Elements.class, spans).first()).text()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|12", // make sure doesn't get nested
        (h = "<div id=1><div id=2><div id=3></div></div></div>"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|14", org.jsoup.nodes.Document.class, (doc = org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|13", h))));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|17", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|16", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|15", org.jsoup.nodes.Document.class, doc).select("div")).select(" > div")).first());
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testSupportsLeadingCombinator()|19", org.jsoup.nodes.Element.class, div).id()));
    }

    @org.junit.Test
    public void testPseudoLessThan() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoLessThan()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"));
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoLessThan()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoLessThan()|1", org.jsoup.nodes.Document.class, doc).select("div p:lt(2)"));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoLessThan()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoLessThan()|3", org.jsoup.select.Elements.class, ps).size()));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoLessThan()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoLessThan()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoLessThan()|5", org.jsoup.select.Elements.class, ps).get(0)).text()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoLessThan()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoLessThan()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoLessThan()|8", org.jsoup.select.Elements.class, ps).get(1)).text()));
        org.junit.Assert.assertEquals("Four", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoLessThan()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoLessThan()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoLessThan()|11", org.jsoup.select.Elements.class, ps).get(2)).text()));
    }

    @org.junit.Test
    public void testPseudoGreaterThan() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoGreaterThan()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>"));
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoGreaterThan()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoGreaterThan()|1", org.jsoup.nodes.Document.class, doc).select("div p:gt(0)"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoGreaterThan()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoGreaterThan()|3", org.jsoup.select.Elements.class, ps).size()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoGreaterThan()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoGreaterThan()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoGreaterThan()|5", org.jsoup.select.Elements.class, ps).get(0)).text()));
        org.junit.Assert.assertEquals("Three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoGreaterThan()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoGreaterThan()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoGreaterThan()|8", org.jsoup.select.Elements.class, ps).get(1)).text()));
    }

    @org.junit.Test
    public void testPseudoEquals() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"));
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|1", org.jsoup.nodes.Document.class, doc).select("div p:eq(0)"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoEquals()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|3", org.jsoup.select.Elements.class, ps).size()));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoEquals()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|5", org.jsoup.select.Elements.class, ps).get(0)).text()));
        org.junit.Assert.assertEquals("Four", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoEquals()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|8", org.jsoup.select.Elements.class, ps).get(1)).text()));
        org.jsoup.select.Elements ps2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|12", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|11", org.jsoup.nodes.Document.class, doc).select("div:eq(0) p:eq(0)"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoEquals()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|13", org.jsoup.select.Elements.class, ps2).size()));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoEquals()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|15", org.jsoup.select.Elements.class, ps2).get(0)).text()));
        org.junit.Assert.assertEquals("p", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoEquals()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|19", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoEquals()|18", org.jsoup.select.Elements.class, ps2).get(0)).tagName()));
    }

    @org.junit.Test
    public void testPseudoBetween() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoBetween()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"));
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoBetween()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoBetween()|1", org.jsoup.nodes.Document.class, doc).select("div p:gt(0):lt(2)"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoBetween()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoBetween()|3", org.jsoup.select.Elements.class, ps).size()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoBetween()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoBetween()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoBetween()|5", org.jsoup.select.Elements.class, ps).get(0)).text()));
    }

    @org.junit.Test
    public void testPseudoCombined() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoCombined()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"));
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoCombined()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoCombined()|1", org.jsoup.nodes.Document.class, doc).select("div.foo p:gt(0)"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoCombined()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoCombined()|3", org.jsoup.select.Elements.class, ps).size()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoCombined()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoCombined()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoCombined()|5", org.jsoup.select.Elements.class, ps).get(0)).text()));
    }

    @org.junit.Test
    public void testPseudoHas() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>"));
        org.jsoup.select.Elements divs1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|1", org.jsoup.nodes.Document.class, doc).select("div:has(span)"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoHas()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|3", org.jsoup.select.Elements.class, divs1).size()));
        org.junit.Assert.assertEquals("0", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoHas()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|5", org.jsoup.select.Elements.class, divs1).get(0)).id()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoHas()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|8", org.jsoup.select.Elements.class, divs1).get(1)).id()));
        org.jsoup.select.Elements divs2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|12", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|11", org.jsoup.nodes.Document.class, doc).select("div:has([class])"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoHas()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|13", org.jsoup.select.Elements.class, divs2).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoHas()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|15", org.jsoup.select.Elements.class, divs2).get(0)).id()));
        org.jsoup.select.Elements divs3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|19", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|18", org.jsoup.nodes.Document.class, doc).select("div:has(span, p)"));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoHas()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|20", org.jsoup.select.Elements.class, divs3).size()));
        org.junit.Assert.assertEquals("0", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoHas()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|23", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|22", org.jsoup.select.Elements.class, divs3).get(0)).id()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoHas()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|26", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|25", org.jsoup.select.Elements.class, divs3).get(1)).id()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoHas()|30", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|29", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|28", org.jsoup.select.Elements.class, divs3).get(2)).id()));
        org.jsoup.select.Elements els1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|33", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|32", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|31", org.jsoup.nodes.Document.class, doc).body()).select(":has(p)"));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoHas()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|34", org.jsoup.select.Elements.class, els1).size()));// body, div, dib

        org.junit.Assert.assertEquals("body", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoHas()|38", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|37", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|36", org.jsoup.select.Elements.class, els1).first()).tagName()));
        org.junit.Assert.assertEquals("0", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoHas()|41", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|40", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|39", org.jsoup.select.Elements.class, els1).get(1)).id()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoHas()|44", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|43", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoHas()|42", org.jsoup.select.Elements.class, els1).get(2)).id()));
    }

    @org.junit.Test
    public void testNestedHas() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testNestedHas()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p><span>One</span></p></div> <div><p>Two</p></div>"));
        org.jsoup.select.Elements divs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNestedHas()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testNestedHas()|1", org.jsoup.nodes.Document.class, doc).select("div:has(p:has(span))"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNestedHas()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNestedHas()|3", org.jsoup.select.Elements.class, divs).size()));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNestedHas()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testNestedHas()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNestedHas()|5", org.jsoup.select.Elements.class, divs).first()).text()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNestedHas()|9", org.jsoup.select.Elements.class, // test matches in has
        (divs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testNestedHas()|8", org.jsoup.nodes.Document.class, doc).select("div:has(p:matches((?i)two))")));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNestedHas()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNestedHas()|10", org.jsoup.select.Elements.class, divs).size()));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNestedHas()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testNestedHas()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNestedHas()|12", org.jsoup.select.Elements.class, divs).first()).tagName()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNestedHas()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testNestedHas()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNestedHas()|15", org.jsoup.select.Elements.class, divs).first()).text()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNestedHas()|19", org.jsoup.select.Elements.class, // test contains in has
        (divs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testNestedHas()|18", org.jsoup.nodes.Document.class, doc).select("div:has(p:contains(two))")));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNestedHas()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNestedHas()|20", org.jsoup.select.Elements.class, divs).size()));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNestedHas()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testNestedHas()|23", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNestedHas()|22", org.jsoup.select.Elements.class, divs).first()).tagName()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testNestedHas()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testNestedHas()|26", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testNestedHas()|25", org.jsoup.select.Elements.class, divs).first()).text()));
    }

    @org.junit.Test
    @org.jsoup.MultiLocaleRule.MultiLocaleTest
    public void testPseudoContains() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>The Rain.</p> <p class=light>The <i>RAIN</i>.</p> <p>Rain, the.</p></div>"));
        org.jsoup.select.Elements ps1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|1", org.jsoup.nodes.Document.class, doc).select("p:contains(Rain)"));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoContains()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|3", org.jsoup.select.Elements.class, ps1).size()));
        org.jsoup.select.Elements ps2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|5", org.jsoup.nodes.Document.class, doc).select("p:contains(the rain)"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoContains()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|7", org.jsoup.select.Elements.class, ps2).size()));
        org.junit.Assert.assertEquals("The Rain.", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoContains()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|9", org.jsoup.select.Elements.class, ps2).first()).html()));
        org.junit.Assert.assertEquals("The <i>RAIN</i>.", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoContains()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|12", org.jsoup.select.Elements.class, ps2).last()).html()));
        org.jsoup.select.Elements ps3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|16", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|15", org.jsoup.nodes.Document.class, doc).select("p:contains(the Rain):has(i)"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoContains()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|17", org.jsoup.select.Elements.class, ps3).size()));
        org.junit.Assert.assertEquals("light", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoContains()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|20", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|19", org.jsoup.select.Elements.class, ps3).first()).className()));
        org.jsoup.select.Elements ps4 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|23", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|22", org.jsoup.nodes.Document.class, doc).select(".light:contains(rain)"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoContains()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|24", org.jsoup.select.Elements.class, ps4).size()));
        org.junit.Assert.assertEquals("light", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoContains()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|27", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|26", org.jsoup.select.Elements.class, ps3).first()).className()));
        org.jsoup.select.Elements ps5 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|30", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|29", org.jsoup.nodes.Document.class, doc).select(":contains(rain)"));
        org.junit.Assert.assertEquals(8, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoContains()|32", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|31", org.jsoup.select.Elements.class, ps5).size()));// html, body, div,...

        org.jsoup.select.Elements ps6 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|34", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|33", org.jsoup.nodes.Document.class, doc).select(":contains(RAIN)"));
        org.junit.Assert.assertEquals(8, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPseudoContains()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPseudoContains()|35", org.jsoup.select.Elements.class, ps6).size()));
    }

    @org.junit.Test
    public void testPsuedoContainsWithParentheses() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p id=1>This (is good)</p><p id=2>This is bad)</p>"));
        org.jsoup.select.Elements ps1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|1", org.jsoup.nodes.Document.class, doc).select("p:contains(this (is good))"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|3", org.jsoup.select.Elements.class, ps1).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|5", org.jsoup.select.Elements.class, ps1).first()).id()));
        org.jsoup.select.Elements ps2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|8", org.jsoup.nodes.Document.class, doc).select("p:contains(this is bad\\))"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|10", org.jsoup.select.Elements.class, ps2).size()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testPsuedoContainsWithParentheses()|12", org.jsoup.select.Elements.class, ps2).first()).id()));
    }

    @org.junit.Test
    @org.jsoup.MultiLocaleRule.MultiLocaleTest
    public void containsOwn() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|containsOwn()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p id=1>Hello <b>there</b> igor</p>"));
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsOwn()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|containsOwn()|1", org.jsoup.nodes.Document.class, doc).select("p:containsOwn(Hello IGOR)"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsOwn()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsOwn()|3", org.jsoup.select.Elements.class, ps).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsOwn()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|containsOwn()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsOwn()|5", org.jsoup.select.Elements.class, ps).first()).id()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsOwn()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsOwn()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|containsOwn()|8", org.jsoup.nodes.Document.class, doc).select("p:containsOwn(there)")).size()));
        org.jsoup.nodes.Document doc2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|containsOwn()|11", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p>Hello <b>there</b> IGOR</p>"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsOwn()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsOwn()|13", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|containsOwn()|12", org.jsoup.nodes.Document.class, doc2).select("p:containsOwn(igor)")).size()));
    }

    @org.junit.Test
    public void testMatches() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testMatches()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p id=1>The <i>Rain</i></p> <p id=2>There are 99 bottles.</p> <p id=3>Harder (this)</p> <p id=4>Rain</p>"));
        org.jsoup.select.Elements p1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testMatches()|1", org.jsoup.nodes.Document.class, doc).select("p:matches(The rain)"));// no match, case sensitive

        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testMatches()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|3", org.jsoup.select.Elements.class, p1).size()));
        org.jsoup.select.Elements p2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testMatches()|5", org.jsoup.nodes.Document.class, doc).select("p:matches((?i)the rain)"));// case insense. should include root, html, body

        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testMatches()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|7", org.jsoup.select.Elements.class, p2).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testMatches()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testMatches()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|9", org.jsoup.select.Elements.class, p2).first()).id()));
        org.jsoup.select.Elements p4 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|13", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testMatches()|12", org.jsoup.nodes.Document.class, doc).select("p:matches((?i)^rain$)"));// bounding

        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testMatches()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|14", org.jsoup.select.Elements.class, p4).size()));
        org.junit.Assert.assertEquals("4", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testMatches()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testMatches()|17", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|16", org.jsoup.select.Elements.class, p4).first()).id()));
        org.jsoup.select.Elements p5 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|20", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testMatches()|19", org.jsoup.nodes.Document.class, doc).select("p:matches(\\d+)"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testMatches()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|21", org.jsoup.select.Elements.class, p5).size()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testMatches()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testMatches()|24", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|23", org.jsoup.select.Elements.class, p5).first()).id()));
        org.jsoup.select.Elements p6 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|27", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testMatches()|26", org.jsoup.nodes.Document.class, doc).select("p:matches(\\w+\\s+\\(\\w+\\))"));// test bracket matching

        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testMatches()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|28", org.jsoup.select.Elements.class, p6).size()));
        org.junit.Assert.assertEquals("3", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testMatches()|32", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testMatches()|31", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|30", org.jsoup.select.Elements.class, p6).first()).id()));
        org.jsoup.select.Elements p7 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|34", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testMatches()|33", org.jsoup.nodes.Document.class, doc).select("p:matches((?i)the):has(i)"));// multi

        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testMatches()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|35", org.jsoup.select.Elements.class, p7).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testMatches()|39", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testMatches()|38", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testMatches()|37", org.jsoup.select.Elements.class, p7).first()).id()));
    }

    @org.junit.Test
    public void matchesOwn() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|matchesOwn()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p id=1>Hello <b>there</b> now</p>"));
        org.jsoup.select.Elements p1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|matchesOwn()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|matchesOwn()|1", org.jsoup.nodes.Document.class, doc).select("p:matchesOwn((?i)hello now)"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|matchesOwn()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|matchesOwn()|3", org.jsoup.select.Elements.class, p1).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|matchesOwn()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|matchesOwn()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|matchesOwn()|5", org.jsoup.select.Elements.class, p1).first()).id()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|matchesOwn()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|matchesOwn()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|matchesOwn()|8", org.jsoup.nodes.Document.class, doc).select("p:matchesOwn(there)")).size()));
    }

    @org.junit.Test
    public void testRelaxedTags() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testRelaxedTags()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<abc_def id=1>Hello</abc_def> <abc-def id=2>There</abc-def>"));
        org.jsoup.select.Elements el1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testRelaxedTags()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testRelaxedTags()|1", org.jsoup.nodes.Document.class, doc).select("abc_def"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testRelaxedTags()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testRelaxedTags()|3", org.jsoup.select.Elements.class, el1).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testRelaxedTags()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testRelaxedTags()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testRelaxedTags()|5", org.jsoup.select.Elements.class, el1).first()).id()));
        org.jsoup.select.Elements el2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testRelaxedTags()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|testRelaxedTags()|8", org.jsoup.nodes.Document.class, doc).select("abc-def"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testRelaxedTags()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testRelaxedTags()|10", org.jsoup.select.Elements.class, el2).size()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|testRelaxedTags()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|testRelaxedTags()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|testRelaxedTags()|12", org.jsoup.select.Elements.class, el2).first()).id()));
    }

    @org.junit.Test
    public void notParas() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|notParas()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p id=1>One</p> <p>Two</p> <p><span>Three</span></p>"));
        org.jsoup.select.Elements el1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notParas()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|notParas()|1", org.jsoup.nodes.Document.class, doc).select("p:not([id=1])"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|notParas()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notParas()|3", org.jsoup.select.Elements.class, el1).size()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|notParas()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|notParas()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notParas()|5", org.jsoup.select.Elements.class, el1).first()).text()));
        org.junit.Assert.assertEquals("Three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|notParas()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|notParas()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notParas()|8", org.jsoup.select.Elements.class, el1).last()).text()));
        org.jsoup.select.Elements el2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notParas()|12", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|notParas()|11", org.jsoup.nodes.Document.class, doc).select("p:not(:has(span))"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|notParas()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notParas()|13", org.jsoup.select.Elements.class, el2).size()));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|notParas()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|notParas()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notParas()|15", org.jsoup.select.Elements.class, el2).first()).text()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|notParas()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|notParas()|19", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notParas()|18", org.jsoup.select.Elements.class, el2).last()).text()));
    }

    @org.junit.Test
    public void notAll() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|notAll()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p>Two</p> <p><span>Three</span></p>"));
        org.jsoup.select.Elements el1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notAll()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|notAll()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|notAll()|1", org.jsoup.nodes.Document.class, doc).body()).select(":not(p)"));// should just be the span

        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|notAll()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notAll()|4", org.jsoup.select.Elements.class, el1).size()));
        org.junit.Assert.assertEquals("body", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|notAll()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|notAll()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notAll()|6", org.jsoup.select.Elements.class, el1).first()).tagName()));
        org.junit.Assert.assertEquals("span", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|notAll()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|notAll()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notAll()|9", org.jsoup.select.Elements.class, el1).last()).tagName()));
    }

    @org.junit.Test
    public void notClass() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|notClass()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div class=left>One</div><div class=right id=1><p>Two</p></div>"));
        org.jsoup.select.Elements el1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notClass()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|notClass()|1", org.jsoup.nodes.Document.class, doc).select("div:not(.left)"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|notClass()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notClass()|3", org.jsoup.select.Elements.class, el1).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|notClass()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|notClass()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|notClass()|5", org.jsoup.select.Elements.class, el1).first()).id()));
    }

    @org.junit.Test
    public void handlesCommasInSelector() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|handlesCommasInSelector()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>"));
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|handlesCommasInSelector()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|handlesCommasInSelector()|1", org.jsoup.nodes.Document.class, doc).select("[name=1,2]"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|handlesCommasInSelector()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|handlesCommasInSelector()|3", org.jsoup.select.Elements.class, ps).size()));
        org.jsoup.select.Elements containers = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|handlesCommasInSelector()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|handlesCommasInSelector()|5", org.jsoup.nodes.Document.class, doc).select("div, li:matches([0-9,]+)"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|handlesCommasInSelector()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|handlesCommasInSelector()|7", org.jsoup.select.Elements.class, containers).size()));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|handlesCommasInSelector()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|handlesCommasInSelector()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|handlesCommasInSelector()|9", org.jsoup.select.Elements.class, containers).get(0)).tagName()));
        org.junit.Assert.assertEquals("li", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|handlesCommasInSelector()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|handlesCommasInSelector()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|handlesCommasInSelector()|12", org.jsoup.select.Elements.class, containers).get(1)).tagName()));
        org.junit.Assert.assertEquals("123", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|handlesCommasInSelector()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|handlesCommasInSelector()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|handlesCommasInSelector()|15", org.jsoup.select.Elements.class, containers).get(1)).text()));
    }

    @org.junit.Test
    public void selectSupplementaryCharacter() {
        java.lang.String s = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|1", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<char[]>observeState("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|0", char[].class, java.lang.Character.toChars(135361))));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|5", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse((((((("<div k" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|2", s))) + "='") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|3", s))) + "'>^") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|4", s))) + "$/div>")));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|6", org.jsoup.nodes.Document.class, doc).select((("div[k" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|7", s))) + "]"))).first()).tagName()));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|13", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|11", org.jsoup.nodes.Document.class, doc).select((("div:containsOwn(" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectSupplementaryCharacter()|12", s))) + ")"))).first()).tagName()));
    }

    @org.junit.Test
    public void selectClassWithSpace() {
        final java.lang.String html = "<div class=\"value\">class without space</div>\n" + "<div class=\"value \">class with space</div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectClassWithSpace()|0", html)));
        org.jsoup.select.Elements found = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|2", org.jsoup.nodes.Document.class, doc).select("div[class=value ]"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectClassWithSpace()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|4", org.jsoup.select.Elements.class, found).size()));
        org.junit.Assert.assertEquals("class without space", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectClassWithSpace()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|6", org.jsoup.select.Elements.class, found).get(0)).text()));
        org.junit.Assert.assertEquals("class with space", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectClassWithSpace()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|9", org.jsoup.select.Elements.class, found).get(1)).text()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|13", org.jsoup.select.Elements.class, (found = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|12", org.jsoup.nodes.Document.class, doc).select("div[class=\"value \"]")));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectClassWithSpace()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|14", org.jsoup.select.Elements.class, found).size()));
        org.junit.Assert.assertEquals("class without space", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectClassWithSpace()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|17", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|16", org.jsoup.select.Elements.class, found).get(0)).text()));
        org.junit.Assert.assertEquals("class with space", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectClassWithSpace()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|20", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|19", org.jsoup.select.Elements.class, found).get(1)).text()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|23", org.jsoup.select.Elements.class, (found = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|22", org.jsoup.nodes.Document.class, doc).select("div[class=\"value\\ \"]")));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectClassWithSpace()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectClassWithSpace()|24", org.jsoup.select.Elements.class, found).size()));
    }

    @org.junit.Test
    public void selectSameElements() {
        final java.lang.String html = "<div>one</div><div>one</div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectSameElements()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectSameElements()|0", html)));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectSameElements()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectSameElements()|2", org.jsoup.nodes.Document.class, doc).select("div"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectSameElements()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectSameElements()|4", org.jsoup.select.Elements.class, els).size()));
        org.jsoup.select.Elements subSelect = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectSameElements()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectSameElements()|6", org.jsoup.select.Elements.class, els).select(":contains(one)"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectSameElements()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|selectSameElements()|8", org.jsoup.select.Elements.class, subSelect).size()));
    }

    @org.junit.Test
    public void attributeWithBrackets() {
        java.lang.String html = "<div data='End]'>One</div> <div data='[Another)]]'>Two</div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|attributeWithBrackets()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|attributeWithBrackets()|0", html)));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|attributeWithBrackets()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|attributeWithBrackets()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|attributeWithBrackets()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|attributeWithBrackets()|2", org.jsoup.nodes.Document.class, doc).select("div[data='End]']")).first()).text()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|attributeWithBrackets()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|attributeWithBrackets()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|attributeWithBrackets()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|attributeWithBrackets()|6", org.jsoup.nodes.Document.class, doc).select("div[data='[Another)]]']")).first()).text()));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|attributeWithBrackets()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|attributeWithBrackets()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|attributeWithBrackets()|11", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|attributeWithBrackets()|10", org.jsoup.nodes.Document.class, doc).select("div[data=\"End]\"]")).first()).text()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|attributeWithBrackets()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|attributeWithBrackets()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|attributeWithBrackets()|15", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|attributeWithBrackets()|14", org.jsoup.nodes.Document.class, doc).select("div[data=\"[Another)]]\"]")).first()).text()));
    }

    @org.junit.Test
    @org.jsoup.MultiLocaleRule.MultiLocaleTest
    public void containsData() {
        java.lang.String html = "<p>function</p><script>FUNCTION</script><style>item</style><span><!-- comments --></span>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|containsData()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsData()|0", html)));
        org.jsoup.nodes.Element body = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|containsData()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|containsData()|2", org.jsoup.nodes.Document.class, doc).body());
        org.jsoup.select.Elements dataEls1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|containsData()|4", org.jsoup.nodes.Element.class, body).select(":containsData(function)"));
        org.jsoup.select.Elements dataEls2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|containsData()|6", org.jsoup.nodes.Element.class, body).select("script:containsData(function)"));
        org.jsoup.select.Elements dataEls3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|containsData()|8", org.jsoup.nodes.Element.class, body).select("span:containsData(comments)"));
        org.jsoup.select.Elements dataEls4 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|11", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|containsData()|10", org.jsoup.nodes.Element.class, body).select(":containsData(o)"));
        org.jsoup.select.Elements dataEls5 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|13", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|containsData()|12", org.jsoup.nodes.Element.class, body).select("style:containsData(ITEM)"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsData()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|14", org.jsoup.select.Elements.class, dataEls1).size()));// body and script

        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsData()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|16", org.jsoup.select.Elements.class, dataEls2).size()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|containsData()|19", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|18", org.jsoup.select.Elements.class, dataEls1).last()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|containsData()|21", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|20", org.jsoup.select.Elements.class, dataEls2).first()));
        org.junit.Assert.assertEquals("<script>FUNCTION</script>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsData()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|22", org.jsoup.select.Elements.class, dataEls2).outerHtml()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsData()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|24", org.jsoup.select.Elements.class, dataEls3).size()));
        org.junit.Assert.assertEquals("span", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsData()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|containsData()|27", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|26", org.jsoup.select.Elements.class, dataEls3).first()).tagName()));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsData()|30", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|29", org.jsoup.select.Elements.class, dataEls4).size()));
        org.junit.Assert.assertEquals("body", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsData()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|containsData()|32", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|31", org.jsoup.select.Elements.class, dataEls4).first()).tagName()));
        org.junit.Assert.assertEquals("script", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsData()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|containsData()|35", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|34", org.jsoup.select.Elements.class, dataEls4).get(1)).tagName()));
        org.junit.Assert.assertEquals("span", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsData()|39", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|containsData()|38", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|37", org.jsoup.select.Elements.class, dataEls4).get(2)).tagName()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsData()|41", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsData()|40", org.jsoup.select.Elements.class, dataEls5).size()));
    }

    @org.junit.Test
    public void containsWithQuote() {
        java.lang.String html = "<p>One'One</p><p>One'Two</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|containsWithQuote()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsWithQuote()|0", html)));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsWithQuote()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|containsWithQuote()|2", org.jsoup.nodes.Document.class, doc).select("p:contains(One\\\'One)"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsWithQuote()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsWithQuote()|4", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("One'One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|containsWithQuote()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|containsWithQuote()|6", org.jsoup.select.Elements.class, els).text()));
    }

    @org.junit.Test
    public void selectFirst() {
        java.lang.String html = "<p>One<p>Two<p>Three";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectFirst()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectFirst()|0", html)));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectFirst()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|selectFirst()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectFirst()|2", org.jsoup.nodes.Document.class, doc).selectFirst("p")).text()));
    }

    @org.junit.Test
    public void selectFirstWithAnd() {
        java.lang.String html = "<p>One<p class=foo>Two<p>Three";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectFirstWithAnd()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectFirstWithAnd()|0", html)));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectFirstWithAnd()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|selectFirstWithAnd()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectFirstWithAnd()|2", org.jsoup.nodes.Document.class, doc).selectFirst("p.foo")).text()));
    }

    @org.junit.Test
    public void selectFirstWithOr() {
        java.lang.String html = "<p>One<p>Two<p>Three<div>Four";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectFirstWithOr()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectFirstWithOr()|0", html)));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|selectFirstWithOr()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|selectFirstWithOr()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|selectFirstWithOr()|2", org.jsoup.nodes.Document.class, doc).selectFirst("p, div")).text()));
    }

    @org.junit.Test
    public void matchText() {
        java.lang.String html = "<p>One<br>Two</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|matchText()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|matchText()|0", html)));
        java.lang.String origHtml = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|matchText()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|matchText()|2", org.jsoup.nodes.Document.class, doc).html());
        org.jsoup.select.Elements one = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|matchText()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|matchText()|4", org.jsoup.nodes.Document.class, doc).select("p:matchText:first-child"));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|matchText()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|matchText()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|matchText()|6", org.jsoup.select.Elements.class, one).first()).text()));
        org.jsoup.select.Elements two = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|matchText()|10", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|matchText()|9", org.jsoup.nodes.Document.class, doc).select("p:matchText:last-child"));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|matchText()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|matchText()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|matchText()|11", org.jsoup.select.Elements.class, two).first()).text()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|matchText()|14", origHtml), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|matchText()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|matchText()|15", org.jsoup.nodes.Document.class, doc).html()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|matchText()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|matchText()|18", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|matchText()|17", org.jsoup.nodes.Document.class, doc).select("p:matchText + br + *")).text()));
    }

    @org.junit.Test
    public void splitOnBr() {
        java.lang.String html = "<div><p>One<br>Two<br>Three</p></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|splitOnBr()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|splitOnBr()|0", html)));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|splitOnBr()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|splitOnBr()|2", org.jsoup.nodes.Document.class, doc).select("p:matchText"));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|splitOnBr()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|splitOnBr()|4", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|splitOnBr()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|splitOnBr()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|splitOnBr()|6", org.jsoup.select.Elements.class, els).get(0)).text()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|splitOnBr()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|splitOnBr()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|splitOnBr()|9", org.jsoup.select.Elements.class, els).get(1)).text()));
        org.junit.Assert.assertEquals("Three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|splitOnBr()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.select.SelectorTest|splitOnBr()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|splitOnBr()|12", org.jsoup.select.Elements.class, els).get(2)).toString()));
    }

    @org.junit.Test
    public void matchTextAttributes() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|matchTextAttributes()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p class=one>One<br>Two<p class=two>Three<br>Four"));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|matchTextAttributes()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|matchTextAttributes()|1", org.jsoup.nodes.Document.class, doc).select("p.two:matchText:last-child"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|matchTextAttributes()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|matchTextAttributes()|3", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("Four", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|matchTextAttributes()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|matchTextAttributes()|5", org.jsoup.select.Elements.class, els).text()));
    }

    @org.junit.Test
    public void findBetweenSpan() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|findBetweenSpan()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p><span>One</span> Two <span>Three</span>"));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|findBetweenSpan()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.select.SelectorTest|findBetweenSpan()|1", org.jsoup.nodes.Document.class, doc).select("span ~ p:matchText"));// the Two becomes its own p, sibling of the span

        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|findBetweenSpan()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|findBetweenSpan()|3", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.select.SelectorTest|findBetweenSpan()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.select.SelectorTest|findBetweenSpan()|5", org.jsoup.select.Elements.class, els).text()));
    }
}

