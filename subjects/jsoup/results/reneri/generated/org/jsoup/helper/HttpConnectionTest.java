package org.jsoup.helper;


public class HttpConnectionTest {
    /* most actual network http connection tests are in integration */
    @org.junit.Rule
    public org.jsoup.MultiLocaleRule rule = new org.jsoup.MultiLocaleRule();

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void throwsExceptionOnParseWithoutExecute() throws java.io.IOException {
        try {
            org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnParseWithoutExecute()|0", org.jsoup.Connection.class, org.jsoup.helper.HttpConnection.connect("http://example.com"));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnParseWithoutExecute()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnParseWithoutExecute()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnParseWithoutExecute()|1", org.jsoup.Connection.class, con).response()).parse());
        } catch (java.lang.IllegalArgumentException a1552755452429) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnParseWithoutExecute()|!", a1552755452429);
            throw a1552755452429;
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void throwsExceptionOnBodyWithoutExecute() throws java.io.IOException {
        try {
            org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnBodyWithoutExecute()|0", org.jsoup.Connection.class, org.jsoup.helper.HttpConnection.connect("http://example.com"));
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnBodyWithoutExecute()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnBodyWithoutExecute()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnBodyWithoutExecute()|1", org.jsoup.Connection.class, con).response()).body());
        } catch (java.lang.IllegalArgumentException a1552755452428) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnBodyWithoutExecute()|!", a1552755452428);
            throw a1552755452428;
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void throwsExceptionOnBodyAsBytesWithoutExecute() throws java.io.IOException {
        try {
            org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnBodyAsBytesWithoutExecute()|0", org.jsoup.Connection.class, org.jsoup.helper.HttpConnection.connect("http://example.com"));
            eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnBodyAsBytesWithoutExecute()|3", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnBodyAsBytesWithoutExecute()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnBodyAsBytesWithoutExecute()|1", org.jsoup.Connection.class, con).response()).bodyAsBytes());
        } catch (java.lang.IllegalArgumentException a1552755452427) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.jsoup.helper.HttpConnectionTest|throwsExceptionOnBodyAsBytesWithoutExecute()|!", a1552755452427);
            throw a1552755452427;
        }
    }

    @org.junit.Test
    @org.jsoup.MultiLocaleRule.MultiLocaleTest
    public void caseInsensitiveHeaders() {
        org.jsoup.Connection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|0", org.jsoup.helper.HttpConnection.Response.class, new org.jsoup.helper.HttpConnection.Response());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|1", org.jsoup.Connection.Response.class, res).header("Accept-Encoding", "gzip"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|4", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|3", org.jsoup.Connection.Response.class, res).header("content-type", "text/html"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|6", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|5", org.jsoup.Connection.Response.class, res).header("refErrer", "http://example.com"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|7", org.jsoup.Connection.Response.class, res).hasHeader("Accept-Encoding")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|9", org.jsoup.Connection.Response.class, res).hasHeader("accept-encoding")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|11", org.jsoup.Connection.Response.class, res).hasHeader("accept-Encoding")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|13", org.jsoup.Connection.Response.class, res).hasHeader("ACCEPT-ENCODING")));
        org.junit.Assert.assertEquals("gzip", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|15", org.jsoup.Connection.Response.class, res).header("accept-Encoding")));
        org.junit.Assert.assertEquals("gzip", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|17", org.jsoup.Connection.Response.class, res).header("ACCEPT-ENCODING")));
        org.junit.Assert.assertEquals("text/html", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|19", org.jsoup.Connection.Response.class, res).header("Content-Type")));
        org.junit.Assert.assertEquals("http://example.com", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|21", org.jsoup.Connection.Response.class, res).header("Referrer")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|24", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|23", org.jsoup.Connection.Response.class, res).removeHeader("Content-Type"));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|25", org.jsoup.Connection.Response.class, res).hasHeader("content-type")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|28", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|27", org.jsoup.Connection.Response.class, res).removeHeader("ACCEPT-ENCODING"));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|30", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|29", org.jsoup.Connection.Response.class, res).hasHeader("Accept-Encoding")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|32", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|31", org.jsoup.Connection.Response.class, res).header("ACCEPT-ENCODING", "deflate"));
        org.junit.Assert.assertEquals("deflate", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|34", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|33", org.jsoup.Connection.Response.class, res).header("Accept-Encoding")));
        org.junit.Assert.assertEquals("deflate", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|caseInsensitiveHeaders()|35", org.jsoup.Connection.Response.class, res).header("accept-Encoding")));
    }

    @org.junit.Test
    public void headers() {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|headers()|0", org.jsoup.Connection.class, org.jsoup.helper.HttpConnection.connect("http://example.com"));
        java.util.Map<java.lang.String, java.lang.String> headers = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<java.lang.String, java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|headers()|1", java.util.HashMap.class, new java.util.HashMap<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|headers()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|headers()|2", java.util.Map.class, headers).put("content-type", "text/html"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|headers()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|headers()|4", java.util.Map.class, headers).put("Connection", "keep-alive"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|headers()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|headers()|6", java.util.Map.class, headers).put("Host", "http://example.com"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|headers()|10", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|headers()|8", org.jsoup.Connection.class, con).headers(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|headers()|9", java.util.Map.class, headers)));
        org.junit.Assert.assertEquals("text/html", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|headers()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|headers()|12", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|headers()|11", org.jsoup.Connection.class, con).request()).header("content-type")));
        org.junit.Assert.assertEquals("keep-alive", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|headers()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|headers()|15", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|headers()|14", org.jsoup.Connection.class, con).request()).header("Connection")));
        org.junit.Assert.assertEquals("http://example.com", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|headers()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|headers()|18", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|headers()|17", org.jsoup.Connection.class, con).request()).header("Host")));
    }

    @org.junit.Test
    public void sameHeadersCombineWithComma() {
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> headers = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|sameHeadersCombineWithComma()|0", java.util.HashMap.class, new java.util.HashMap<>());
        java.util.List<java.lang.String> values = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|sameHeadersCombineWithComma()|1", java.util.ArrayList.class, new java.util.ArrayList<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|sameHeadersCombineWithComma()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|sameHeadersCombineWithComma()|2", java.util.List.class, values).add("no-cache"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|sameHeadersCombineWithComma()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|sameHeadersCombineWithComma()|4", java.util.List.class, values).add("no-store"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|sameHeadersCombineWithComma()|8", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|sameHeadersCombineWithComma()|6", java.util.Map.class, headers).put("Cache-Control", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|sameHeadersCombineWithComma()|7", java.util.List.class, values)));
        org.jsoup.helper.HttpConnection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Response>observeState("org.jsoup.helper.HttpConnectionTest|sameHeadersCombineWithComma()|9", org.jsoup.helper.HttpConnection.Response.class, new org.jsoup.helper.HttpConnection.Response());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Response>observeState("org.jsoup.helper.HttpConnectionTest|sameHeadersCombineWithComma()|10", org.jsoup.helper.HttpConnection.Response.class, res).processResponseHeaders(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|sameHeadersCombineWithComma()|11", java.util.Map.class, headers));
        org.junit.Assert.assertEquals("no-cache, no-store", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|sameHeadersCombineWithComma()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Response>observeState("org.jsoup.helper.HttpConnectionTest|sameHeadersCombineWithComma()|12", org.jsoup.helper.HttpConnection.Response.class, res).header("Cache-Control")));
    }

    @org.junit.Test
    public void multipleHeaders() {
        org.jsoup.Connection.Request req = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|0", org.jsoup.helper.HttpConnection.Request.class, new org.jsoup.helper.HttpConnection.Request());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|2", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|1", org.jsoup.Connection.Request.class, req).addHeader("Accept", "Something"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|4", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|3", org.jsoup.Connection.Request.class, req).addHeader("Accept", "Everything"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|6", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|5", org.jsoup.Connection.Request.class, req).addHeader("Foo", "Bar"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|7", org.jsoup.Connection.Request.class, req).hasHeader("Accept")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|9", org.jsoup.Connection.Request.class, req).hasHeader("ACCEpt")));
        org.junit.Assert.assertEquals("Something, Everything", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|11", org.jsoup.Connection.Request.class, req).header("accept")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|13", org.jsoup.Connection.Request.class, req).hasHeader("fOO")));
        org.junit.Assert.assertEquals("Bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|15", org.jsoup.Connection.Request.class, req).header("foo")));
        java.util.List<java.lang.String> accept = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|18", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|17", org.jsoup.Connection.Request.class, req).headers("accept"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|19", java.util.List.class, accept).size()));
        org.junit.Assert.assertEquals("Something", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|21", java.util.List.class, accept).get(0)));
        org.junit.Assert.assertEquals("Everything", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|23", java.util.List.class, accept).get(1)));
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> headers = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|26", java.util.Map.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|25", org.jsoup.Connection.Request.class, req).multiHeaders());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|27", java.util.List.class, accept), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|29", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|28", java.util.Map.class, headers).get("Accept")));
        org.junit.Assert.assertEquals("Bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|32", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|31", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|30", java.util.Map.class, headers).get("Foo")).get(0)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|34", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|33", org.jsoup.Connection.Request.class, req).hasHeader("Accept")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|35", org.jsoup.Connection.Request.class, req).hasHeaderWithValue("accept", "Something")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|38", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|37", org.jsoup.Connection.Request.class, req).hasHeaderWithValue("accept", "Everything")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|40", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|39", org.jsoup.Connection.Request.class, req).hasHeaderWithValue("accept", "Something for nothing")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|42", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|41", org.jsoup.Connection.Request.class, req).removeHeader("accept"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|44", java.util.Map.class, (headers = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|43", org.jsoup.Connection.Request.class, req).multiHeaders()));
        org.junit.Assert.assertEquals("Bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|47", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|46", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|45", java.util.Map.class, headers).get("Foo")).get(0)));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|49", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|48", org.jsoup.Connection.Request.class, req).hasHeader("Accept")));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|51", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|multipleHeaders()|50", java.util.Map.class, headers).get("Accept"))) == null));
    }

    @org.junit.Test
    public void ignoresEmptySetCookies() {
        // prep http response header map
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> headers = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptySetCookies()|0", java.util.HashMap.class, new java.util.HashMap<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptySetCookies()|3", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptySetCookies()|1", java.util.Map.class, headers).put("Set-Cookie", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptySetCookies()|2", java.util.List.class, java.util.Collections.<java.lang.String>emptyList())));
        org.jsoup.helper.HttpConnection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Response>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptySetCookies()|4", org.jsoup.helper.HttpConnection.Response.class, new org.jsoup.helper.HttpConnection.Response());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Response>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptySetCookies()|5", org.jsoup.helper.HttpConnection.Response.class, res).processResponseHeaders(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptySetCookies()|6", java.util.Map.class, headers));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|ignoresEmptySetCookies()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptySetCookies()|8", java.util.Map.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Response>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptySetCookies()|7", org.jsoup.helper.HttpConnection.Response.class, res).cookies()).size()));
    }

    @org.junit.Test
    public void ignoresEmptyCookieNameAndVals() {
        // prep http response header map
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> headers = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|0", java.util.HashMap.class, new java.util.HashMap<>());
        java.util.List<java.lang.String> cookieStrings = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|1", java.util.ArrayList.class, new java.util.ArrayList<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|2", java.util.List.class, cookieStrings).add(null));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|4", java.util.List.class, cookieStrings).add(""));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|6", java.util.List.class, cookieStrings).add("one"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|8", java.util.List.class, cookieStrings).add("two="));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|10", java.util.List.class, cookieStrings).add("three=;"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|12", java.util.List.class, cookieStrings).add("four=data; Domain=.example.com; Path=/"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|16", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|14", java.util.Map.class, headers).put("Set-Cookie", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|15", java.util.List.class, cookieStrings)));
        org.jsoup.helper.HttpConnection.Response res = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Response>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|17", org.jsoup.helper.HttpConnection.Response.class, new org.jsoup.helper.HttpConnection.Response());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Response>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|18", org.jsoup.helper.HttpConnection.Response.class, res).processResponseHeaders(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.util.List<java.lang.String>>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|19", java.util.Map.class, headers));
        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|21", java.util.Map.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Response>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|20", org.jsoup.helper.HttpConnection.Response.class, res).cookies()).size()));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Response>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|23", org.jsoup.helper.HttpConnection.Response.class, res).cookie("one")));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Response>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|25", org.jsoup.helper.HttpConnection.Response.class, res).cookie("two")));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Response>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|27", org.jsoup.helper.HttpConnection.Response.class, res).cookie("three")));
        org.junit.Assert.assertEquals("data", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|30", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.Response>observeState("org.jsoup.helper.HttpConnectionTest|ignoresEmptyCookieNameAndVals()|29", org.jsoup.helper.HttpConnection.Response.class, res).cookie("four")));
    }

    @org.junit.Test
    public void connectWithUrl() throws java.net.MalformedURLException {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|connectWithUrl()|1", org.jsoup.Connection.class, org.jsoup.helper.HttpConnection.connect(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.jsoup.helper.HttpConnectionTest|connectWithUrl()|0", java.net.URL.class, new java.net.URL("http://example.com"))));
        org.junit.Assert.assertEquals("http://example.com", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|connectWithUrl()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.jsoup.helper.HttpConnectionTest|connectWithUrl()|4", java.net.URL.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|connectWithUrl()|3", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|connectWithUrl()|2", org.jsoup.Connection.class, con).request()).url()).toExternalForm()));
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void throwsOnMalformedUrl() {
        try {
            org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|throwsOnMalformedUrl()|0", org.jsoup.Connection.class, org.jsoup.helper.HttpConnection.connect("bzzt"));
        } catch (java.lang.IllegalArgumentException a1552755452430) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.jsoup.helper.HttpConnectionTest|throwsOnMalformedUrl()|!", a1552755452430);
            throw a1552755452430;
        }
    }

    @org.junit.Test
    public void userAgent() {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|userAgent()|0", org.jsoup.Connection.class, org.jsoup.helper.HttpConnection.connect("http://example.com/"));
        org.junit.Assert.assertEquals(org.jsoup.helper.HttpConnection.DEFAULT_UA, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|userAgent()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|userAgent()|2", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|userAgent()|1", org.jsoup.Connection.class, con).request()).header("User-Agent")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|userAgent()|5", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|userAgent()|4", org.jsoup.Connection.class, con).userAgent("Mozilla"));
        org.junit.Assert.assertEquals("Mozilla", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|userAgent()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|userAgent()|7", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|userAgent()|6", org.jsoup.Connection.class, con).request()).header("User-Agent")));
    }

    @org.junit.Test
    public void timeout() {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|timeout()|0", org.jsoup.Connection.class, org.jsoup.helper.HttpConnection.connect("http://example.com/"));
        org.junit.Assert.assertEquals((30 * 1000), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|timeout()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|timeout()|2", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|timeout()|1", org.jsoup.Connection.class, con).request()).timeout()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|timeout()|5", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|timeout()|4", org.jsoup.Connection.class, con).timeout(1000));
        org.junit.Assert.assertEquals(1000, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|timeout()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|timeout()|7", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|timeout()|6", org.jsoup.Connection.class, con).request()).timeout()));
    }

    @org.junit.Test
    public void referrer() {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|referrer()|0", org.jsoup.Connection.class, org.jsoup.helper.HttpConnection.connect("http://example.com/"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|referrer()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|referrer()|1", org.jsoup.Connection.class, con).referrer("http://foo.com"));
        org.junit.Assert.assertEquals("http://foo.com", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|referrer()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|referrer()|4", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|referrer()|3", org.jsoup.Connection.class, con).request()).header("Referer")));
    }

    @org.junit.Test
    public void method() {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|method()|0", org.jsoup.Connection.class, org.jsoup.helper.HttpConnection.connect("http://example.com/"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Method>observeState("org.jsoup.helper.HttpConnectionTest|method()|1", org.jsoup.Connection.Method.class, org.jsoup.Connection.Method.GET), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Method>observeState("org.jsoup.helper.HttpConnectionTest|method()|4", org.jsoup.Connection.Method.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|method()|3", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|method()|2", org.jsoup.Connection.class, con).request()).method()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|method()|7", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|method()|5", org.jsoup.Connection.class, con).method(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Method>observeState("org.jsoup.helper.HttpConnectionTest|method()|6", org.jsoup.Connection.Method.class, org.jsoup.Connection.Method.POST)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Method>observeState("org.jsoup.helper.HttpConnectionTest|method()|8", org.jsoup.Connection.Method.class, org.jsoup.Connection.Method.POST), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Method>observeState("org.jsoup.helper.HttpConnectionTest|method()|11", org.jsoup.Connection.Method.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|method()|10", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|method()|9", org.jsoup.Connection.class, con).request()).method()));
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void throwsOnOddData() {
        try {
            org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|throwsOnOddData()|0", org.jsoup.Connection.class, org.jsoup.helper.HttpConnection.connect("http://example.com/"));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|throwsOnOddData()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|throwsOnOddData()|1", org.jsoup.Connection.class, con).data("Name", "val", "what"));
        } catch (java.lang.IllegalArgumentException a1552755452430) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.jsoup.helper.HttpConnectionTest|throwsOnOddData()|!", a1552755452430);
            throw a1552755452430;
        }
    }

    @org.junit.Test
    public void data() {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|data()|0", org.jsoup.Connection.class, org.jsoup.helper.HttpConnection.connect("http://example.com/"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|data()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|data()|1", org.jsoup.Connection.class, con).data("Name", "Val", "Foo", "bar"));
        java.util.Collection<org.jsoup.Connection.KeyVal> values = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.jsoup.Connection.KeyVal>>observeState("org.jsoup.helper.HttpConnectionTest|data()|5", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|data()|4", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|data()|3", org.jsoup.Connection.class, con).request()).data());
        java.lang.Object[] data = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.jsoup.helper.HttpConnectionTest|data()|7", java.lang.Object[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<org.jsoup.Connection.KeyVal>>observeState("org.jsoup.helper.HttpConnectionTest|data()|6", java.util.Collection.class, values).toArray());
        org.jsoup.Connection.KeyVal one = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.helper.HttpConnectionTest|data()|9", org.jsoup.Connection.KeyVal.class, ((org.jsoup.Connection.KeyVal) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.jsoup.helper.HttpConnectionTest|data()|8", java.lang.Object[].class, data)[0])));
        org.jsoup.Connection.KeyVal two = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.helper.HttpConnectionTest|data()|11", org.jsoup.Connection.KeyVal.class, ((org.jsoup.Connection.KeyVal) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.jsoup.helper.HttpConnectionTest|data()|10", java.lang.Object[].class, data)[1])));
        org.junit.Assert.assertEquals("Name", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|data()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.helper.HttpConnectionTest|data()|12", org.jsoup.Connection.KeyVal.class, one).key()));
        org.junit.Assert.assertEquals("Val", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|data()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.helper.HttpConnectionTest|data()|14", org.jsoup.Connection.KeyVal.class, one).value()));
        org.junit.Assert.assertEquals("Foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|data()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.helper.HttpConnectionTest|data()|16", org.jsoup.Connection.KeyVal.class, two).key()));
        org.junit.Assert.assertEquals("bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|data()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.helper.HttpConnectionTest|data()|18", org.jsoup.Connection.KeyVal.class, two).value()));
    }

    @org.junit.Test
    public void cookie() {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|cookie()|0", org.jsoup.Connection.class, org.jsoup.helper.HttpConnection.connect("http://example.com/"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|cookie()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|cookie()|1", org.jsoup.Connection.class, con).cookie("Name", "Val"));
        org.junit.Assert.assertEquals("Val", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|cookie()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|cookie()|4", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|cookie()|3", org.jsoup.Connection.class, con).request()).cookie("Name")));
    }

    @org.junit.Test
    public void inputStream() {
        org.jsoup.Connection.KeyVal kv = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection.KeyVal>observeState("org.jsoup.helper.HttpConnectionTest|inputStream()|1", org.jsoup.helper.HttpConnection.KeyVal.class, org.jsoup.helper.HttpConnection.KeyVal.create("file", "thumb.jpg", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.InputStream>observeState("org.jsoup.helper.HttpConnectionTest|inputStream()|0", java.io.InputStream.class, org.jsoup.integration.ParseTest.inputStreamFrom("Check"))));
        org.junit.Assert.assertEquals("file", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|inputStream()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.helper.HttpConnectionTest|inputStream()|2", org.jsoup.Connection.KeyVal.class, kv).key()));
        org.junit.Assert.assertEquals("thumb.jpg", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|inputStream()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.helper.HttpConnectionTest|inputStream()|4", org.jsoup.Connection.KeyVal.class, kv).value()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|inputStream()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.helper.HttpConnectionTest|inputStream()|6", org.jsoup.Connection.KeyVal.class, kv).hasInputStream()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.helper.HttpConnectionTest|inputStream()|8", org.jsoup.Connection.KeyVal.class, (kv = org.jsoup.helper.HttpConnection.KeyVal.create("one", "two")));
        org.junit.Assert.assertEquals("one", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|inputStream()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.helper.HttpConnectionTest|inputStream()|9", org.jsoup.Connection.KeyVal.class, kv).key()));
        org.junit.Assert.assertEquals("two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|inputStream()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.helper.HttpConnectionTest|inputStream()|11", org.jsoup.Connection.KeyVal.class, kv).value()));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|inputStream()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.KeyVal>observeState("org.jsoup.helper.HttpConnectionTest|inputStream()|13", org.jsoup.Connection.KeyVal.class, kv).hasInputStream()));
    }

    @org.junit.Test
    public void requestBody() {
        org.jsoup.Connection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|requestBody()|0", org.jsoup.Connection.class, org.jsoup.helper.HttpConnection.connect("http://example.com/"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|requestBody()|2", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|requestBody()|1", org.jsoup.Connection.class, con).requestBody("foo"));
        org.junit.Assert.assertEquals("foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|requestBody()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Request>observeState("org.jsoup.helper.HttpConnectionTest|requestBody()|4", org.jsoup.Connection.Request.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.helper.HttpConnectionTest|requestBody()|3", org.jsoup.Connection.class, con).request()).requestBody()));
    }

    @org.junit.Test
    public void encodeUrl() throws java.net.MalformedURLException {
        java.net.URL url1 = eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.jsoup.helper.HttpConnectionTest|encodeUrl()|0", java.net.URL.class, new java.net.URL("http://test.com/?q=white space"));
        java.net.URL url2 = eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.jsoup.helper.HttpConnectionTest|encodeUrl()|2", java.net.URL.class, org.jsoup.helper.HttpConnection.encodeUrl(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.jsoup.helper.HttpConnectionTest|encodeUrl()|1", java.net.URL.class, url1)));
        org.junit.Assert.assertEquals("http://test.com/?q=white%20space", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|encodeUrl()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.jsoup.helper.HttpConnectionTest|encodeUrl()|3", java.net.URL.class, url2).toExternalForm()));
    }

    @org.junit.Test
    public void noUrlThrowsValidationError() throws java.io.IOException {
        org.jsoup.helper.HttpConnection con = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection>observeState("org.jsoup.helper.HttpConnectionTest|noUrlThrowsValidationError()|0", org.jsoup.helper.HttpConnection.class, new org.jsoup.helper.HttpConnection());
        boolean threw = false;
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.helper.HttpConnectionTest|noUrlThrowsValidationError()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.helper.HttpConnection>observeState("org.jsoup.helper.HttpConnectionTest|noUrlThrowsValidationError()|1", org.jsoup.helper.HttpConnection.class, con).execute());
        } catch (java.lang.IllegalArgumentException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|noUrlThrowsValidationError()|3", (threw = true));
            org.junit.Assert.assertEquals("URL must be specified to connect", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|noUrlThrowsValidationError()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("org.jsoup.helper.HttpConnectionTest|noUrlThrowsValidationError()|4", java.lang.IllegalArgumentException.class, e).getMessage()));
        }
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.helper.HttpConnectionTest|noUrlThrowsValidationError()|6", threw));
    }
}

