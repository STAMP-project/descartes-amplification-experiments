package org.jsoup.parser;


/**
 * Test suite for attribute parser.
 *
 * @author Jonathan Hedley, jonathan@hedley.net
 */
public class AttributeParseTest {
    @org.junit.Test
    public void parsesRoughAttributeString() {
        java.lang.String html = "<a id=\"123\" class=\"baz = \'bar\'\" style = \'border: 2px\'qux zim foo = 12 mux=18 />";
        // should be: <id=123>, <class=baz = 'bar'>, <qux=>, <zim=>, <foo=12>, <mux.=18>
        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|0", html))).getElementsByTag("a")).get(0));
        org.jsoup.nodes.Attributes attr = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|5", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|4", org.jsoup.nodes.Element.class, el).attributes());
        org.junit.Assert.assertEquals(7, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|6", org.jsoup.nodes.Attributes.class, attr).size()));
        org.junit.Assert.assertEquals("123", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|8", org.jsoup.nodes.Attributes.class, attr).get("id")));
        org.junit.Assert.assertEquals("baz = 'bar'", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|10", org.jsoup.nodes.Attributes.class, attr).get("class")));
        org.junit.Assert.assertEquals("border: 2px", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|12", org.jsoup.nodes.Attributes.class, attr).get("style")));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|14", org.jsoup.nodes.Attributes.class, attr).get("qux")));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|16", org.jsoup.nodes.Attributes.class, attr).get("zim")));
        org.junit.Assert.assertEquals("12", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|18", org.jsoup.nodes.Attributes.class, attr).get("foo")));
        org.junit.Assert.assertEquals("18", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|parsesRoughAttributeString()|20", org.jsoup.nodes.Attributes.class, attr).get("mux")));
    }

    @org.junit.Test
    public void handlesNewLinesAndReturns() {
        java.lang.String html = "<a\r\nfoo=\'bar\r\nqux\'\r\nbar\r\n=\r\ntwo>One</a>";
        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|handlesNewLinesAndReturns()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.AttributeParseTest|handlesNewLinesAndReturns()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.AttributeParseTest|handlesNewLinesAndReturns()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|handlesNewLinesAndReturns()|0", html))).select("a")).first());
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|handlesNewLinesAndReturns()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|handlesNewLinesAndReturns()|5", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|handlesNewLinesAndReturns()|4", org.jsoup.nodes.Element.class, el).attributes()).size()));
        org.junit.Assert.assertEquals("bar\r\nqux", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|handlesNewLinesAndReturns()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|handlesNewLinesAndReturns()|7", org.jsoup.nodes.Element.class, el).attr("foo")));// currently preserves newlines in quoted attributes. todo confirm if should.

        org.junit.Assert.assertEquals("two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|handlesNewLinesAndReturns()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|handlesNewLinesAndReturns()|9", org.jsoup.nodes.Element.class, el).attr("bar")));
    }

    @org.junit.Test
    public void parsesEmptyString() {
        java.lang.String html = "<a />";
        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|parsesEmptyString()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.AttributeParseTest|parsesEmptyString()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.AttributeParseTest|parsesEmptyString()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesEmptyString()|0", html))).getElementsByTag("a")).get(0));
        org.jsoup.nodes.Attributes attr = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|parsesEmptyString()|5", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|parsesEmptyString()|4", org.jsoup.nodes.Element.class, el).attributes());
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesEmptyString()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|parsesEmptyString()|6", org.jsoup.nodes.Attributes.class, attr).size()));
    }

    @org.junit.Test
    public void canStartWithEq() {
        java.lang.String html = "<a =empty />";
        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|canStartWithEq()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.AttributeParseTest|canStartWithEq()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.AttributeParseTest|canStartWithEq()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|canStartWithEq()|0", html))).getElementsByTag("a")).get(0));
        org.jsoup.nodes.Attributes attr = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|canStartWithEq()|5", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|canStartWithEq()|4", org.jsoup.nodes.Element.class, el).attributes());
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|canStartWithEq()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|canStartWithEq()|6", org.jsoup.nodes.Attributes.class, attr).size()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|canStartWithEq()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|canStartWithEq()|8", org.jsoup.nodes.Attributes.class, attr).hasKey("=empty")));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|canStartWithEq()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|canStartWithEq()|10", org.jsoup.nodes.Attributes.class, attr).get("=empty")));
    }

    @org.junit.Test
    public void strictAttributeUnescapes() {
        java.lang.String html = "<a id=1 href='?foo=bar&mid&lt=true'>One</a> <a id=2 href='?foo=bar&lt;qux&lg=1'>Two</a>";
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.AttributeParseTest|strictAttributeUnescapes()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.AttributeParseTest|strictAttributeUnescapes()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|strictAttributeUnescapes()|0", html))).select("a"));
        org.junit.Assert.assertEquals("?foo=bar&mid&lt=true", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|strictAttributeUnescapes()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|strictAttributeUnescapes()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.AttributeParseTest|strictAttributeUnescapes()|3", org.jsoup.select.Elements.class, els).first()).attr("href")));
        org.junit.Assert.assertEquals("?foo=bar<qux&lg=1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|strictAttributeUnescapes()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|strictAttributeUnescapes()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.AttributeParseTest|strictAttributeUnescapes()|6", org.jsoup.select.Elements.class, els).last()).attr("href")));
    }

    @org.junit.Test
    public void moreAttributeUnescapes() {
        java.lang.String html = "<a href='&wr_id=123&mid-size=true&ok=&wr'>Check</a>";
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.AttributeParseTest|moreAttributeUnescapes()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.AttributeParseTest|moreAttributeUnescapes()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|moreAttributeUnescapes()|0", html))).select("a"));
        org.junit.Assert.assertEquals("&wr_id=123&mid-size=true&ok=&wr", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|moreAttributeUnescapes()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|moreAttributeUnescapes()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.AttributeParseTest|moreAttributeUnescapes()|3", org.jsoup.select.Elements.class, els).first()).attr("href")));
    }

    @org.junit.Test
    public void parsesBooleanAttributes() {
        java.lang.String html = "<a normal=\"123\" boolean empty=\"\"></a>";
        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|0", html))).select("a")).first());
        org.junit.Assert.assertEquals("123", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|4", org.jsoup.nodes.Element.class, el).attr("normal")));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|6", org.jsoup.nodes.Element.class, el).attr("boolean")));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|8", org.jsoup.nodes.Element.class, el).attr("empty")));
        java.util.List<org.jsoup.nodes.Attribute> attributes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Attribute>>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|12", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|11", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|10", org.jsoup.nodes.Element.class, el).attributes()).asList());
        org.junit.Assert.assertEquals("There should be 3 attribute present", 3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Attribute>>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|13", java.util.List.class, attributes).size()));
        // Assuming the list order always follows the parsed html
        org.junit.Assert.assertFalse("'normal' attribute should not be boolean", ((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attribute>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|16", org.jsoup.nodes.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Attribute>>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|15", java.util.List.class, attributes).get(0))) instanceof org.jsoup.nodes.BooleanAttribute));
        org.junit.Assert.assertTrue("'boolean' attribute should be boolean", ((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attribute>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|18", org.jsoup.nodes.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Attribute>>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|17", java.util.List.class, attributes).get(1))) instanceof org.jsoup.nodes.BooleanAttribute));
        org.junit.Assert.assertFalse("'empty' attribute should not be boolean", ((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attribute>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|20", org.jsoup.nodes.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Attribute>>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|19", java.util.List.class, attributes).get(2))) instanceof org.jsoup.nodes.BooleanAttribute));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|21", html), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|parsesBooleanAttributes()|22", org.jsoup.nodes.Element.class, el).outerHtml()));
    }

    @org.junit.Test
    public void dropsSlashFromAttributeName() {
        java.lang.String html = "<img /onerror='doMyJob'/>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.AttributeParseTest|dropsSlashFromAttributeName()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|dropsSlashFromAttributeName()|0", html)));
        org.junit.Assert.assertTrue("SelfClosingStartTag ignores last character", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|dropsSlashFromAttributeName()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.AttributeParseTest|dropsSlashFromAttributeName()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.AttributeParseTest|dropsSlashFromAttributeName()|2", org.jsoup.nodes.Document.class, doc).select("img[onerror]")).size())) != 0));
        org.junit.Assert.assertEquals("<img onerror=\"doMyJob\">", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|dropsSlashFromAttributeName()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.AttributeParseTest|dropsSlashFromAttributeName()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.AttributeParseTest|dropsSlashFromAttributeName()|5", org.jsoup.nodes.Document.class, doc).body()).html()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.AttributeParseTest|dropsSlashFromAttributeName()|10", org.jsoup.nodes.Document.class, (doc = org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|dropsSlashFromAttributeName()|8", html), "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.AttributeParseTest|dropsSlashFromAttributeName()|9", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser()))));
        org.junit.Assert.assertEquals("<img onerror=\"doMyJob\" />", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.AttributeParseTest|dropsSlashFromAttributeName()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.AttributeParseTest|dropsSlashFromAttributeName()|11", org.jsoup.nodes.Document.class, doc).html()));
    }
}

