package org.jsoup.parser;


/**
 * Test suite for character reader.
 *
 * @author Jonathan Hedley, jonathan@hedley.net
 */
public class CharacterReaderTest {
    public static final int maxBufferLen = org.jsoup.parser.CharacterReader.maxBufferLen;

    @org.junit.Test
    public void consume() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consume()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("one"));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consume()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consume()|1", org.jsoup.parser.CharacterReader.class, r).pos()));
        org.junit.Assert.assertEquals('o', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consume()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consume()|3", org.jsoup.parser.CharacterReader.class, r).current()));
        org.junit.Assert.assertEquals('o', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consume()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consume()|5", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consume()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consume()|7", org.jsoup.parser.CharacterReader.class, r).pos()));
        org.junit.Assert.assertEquals('n', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consume()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consume()|9", org.jsoup.parser.CharacterReader.class, r).current()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consume()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consume()|11", org.jsoup.parser.CharacterReader.class, r).pos()));
        org.junit.Assert.assertEquals('n', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consume()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consume()|13", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertEquals('e', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consume()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consume()|15", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consume()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consume()|17", org.jsoup.parser.CharacterReader.class, r).isEmpty()));
        org.junit.Assert.assertEquals(org.jsoup.parser.CharacterReader.EOF, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consume()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consume()|19", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consume()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consume()|21", org.jsoup.parser.CharacterReader.class, r).isEmpty()));
        org.junit.Assert.assertEquals(org.jsoup.parser.CharacterReader.EOF, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consume()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consume()|23", org.jsoup.parser.CharacterReader.class, r).consume()));
    }

    @org.junit.Test
    public void unconsume() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("one"));
        org.junit.Assert.assertEquals('o', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|unconsume()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|1", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertEquals('n', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|unconsume()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|3", org.jsoup.parser.CharacterReader.class, r).current()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|5", org.jsoup.parser.CharacterReader.class, r).unconsume();
        org.junit.Assert.assertEquals('o', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|unconsume()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|6", org.jsoup.parser.CharacterReader.class, r).current()));
        org.junit.Assert.assertEquals('o', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|unconsume()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|8", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertEquals('n', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|unconsume()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|10", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertEquals('e', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|unconsume()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|12", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|unconsume()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|14", org.jsoup.parser.CharacterReader.class, r).isEmpty()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|16", org.jsoup.parser.CharacterReader.class, r).unconsume();
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|unconsume()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|17", org.jsoup.parser.CharacterReader.class, r).isEmpty()));
        org.junit.Assert.assertEquals('e', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|unconsume()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|19", org.jsoup.parser.CharacterReader.class, r).current()));
        org.junit.Assert.assertEquals('e', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|unconsume()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|21", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|unconsume()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|23", org.jsoup.parser.CharacterReader.class, r).isEmpty()));
        org.junit.Assert.assertEquals(org.jsoup.parser.CharacterReader.EOF, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|unconsume()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|25", org.jsoup.parser.CharacterReader.class, r).consume()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|27", org.jsoup.parser.CharacterReader.class, r).unconsume();
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|unconsume()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|28", org.jsoup.parser.CharacterReader.class, r).isEmpty()));
        org.junit.Assert.assertEquals(org.jsoup.parser.CharacterReader.EOF, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|unconsume()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|unconsume()|30", org.jsoup.parser.CharacterReader.class, r).current()));
    }

    @org.junit.Test
    public void mark() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|mark()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("one"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|mark()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|mark()|1", org.jsoup.parser.CharacterReader.class, r).consume());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|mark()|3", org.jsoup.parser.CharacterReader.class, r).mark();
        org.junit.Assert.assertEquals('n', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|mark()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|mark()|4", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertEquals('e', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|mark()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|mark()|6", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|mark()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|mark()|8", org.jsoup.parser.CharacterReader.class, r).isEmpty()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|mark()|10", org.jsoup.parser.CharacterReader.class, r).rewindToMark();
        org.junit.Assert.assertEquals('n', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|mark()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|mark()|11", org.jsoup.parser.CharacterReader.class, r).consume()));
    }

    @org.junit.Test
    public void consumeToEnd() {
        java.lang.String in = "one two three";
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToEnd()|1", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToEnd()|0", in)));
        java.lang.String toEnd = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToEnd()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToEnd()|2", org.jsoup.parser.CharacterReader.class, r).consumeToEnd());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToEnd()|4", in), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToEnd()|5", toEnd));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToEnd()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToEnd()|6", org.jsoup.parser.CharacterReader.class, r).isEmpty()));
    }

    @org.junit.Test
    public void nextIndexOfChar() {
        java.lang.String in = "blah blah";
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|1", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|0", in)));
        org.junit.Assert.assertEquals((-1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|2", org.jsoup.parser.CharacterReader.class, r).nextIndexOf('x')));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|4", org.jsoup.parser.CharacterReader.class, r).nextIndexOf('h')));
        java.lang.String pull = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|6", org.jsoup.parser.CharacterReader.class, r).consumeTo('h'));
        org.junit.Assert.assertEquals("bla", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|8", pull));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|9", org.jsoup.parser.CharacterReader.class, r).consume());
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|11", org.jsoup.parser.CharacterReader.class, r).nextIndexOf('l')));
        org.junit.Assert.assertEquals(" blah", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|13", org.jsoup.parser.CharacterReader.class, r).consumeToEnd()));
        org.junit.Assert.assertEquals((-1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfChar()|15", org.jsoup.parser.CharacterReader.class, r).nextIndexOf('x')));
    }

    @org.junit.Test
    public void nextIndexOfString() {
        java.lang.String in = "One Two something Two Three Four";
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfString()|1", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfString()|0", in)));
        org.junit.Assert.assertEquals((-1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfString()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfString()|2", org.jsoup.parser.CharacterReader.class, r).nextIndexOf("Foo")));
        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfString()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfString()|4", org.jsoup.parser.CharacterReader.class, r).nextIndexOf("Two")));
        org.junit.Assert.assertEquals("One Two ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfString()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfString()|6", org.jsoup.parser.CharacterReader.class, r).consumeTo("something")));
        org.junit.Assert.assertEquals(10, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfString()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfString()|8", org.jsoup.parser.CharacterReader.class, r).nextIndexOf("Two")));
        org.junit.Assert.assertEquals("something Two Three Four", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfString()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfString()|10", org.jsoup.parser.CharacterReader.class, r).consumeToEnd()));
        org.junit.Assert.assertEquals((-1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfString()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfString()|12", org.jsoup.parser.CharacterReader.class, r).nextIndexOf("Two")));
    }

    @org.junit.Test
    public void nextIndexOfUnmatched() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfUnmatched()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("<[[one]]"));
        org.junit.Assert.assertEquals((-1), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|nextIndexOfUnmatched()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|nextIndexOfUnmatched()|1", org.jsoup.parser.CharacterReader.class, r).nextIndexOf("]]>")));
    }

    @org.junit.Test
    public void consumeToChar() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToChar()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("One Two Three"));
        org.junit.Assert.assertEquals("One ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToChar()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToChar()|1", org.jsoup.parser.CharacterReader.class, r).consumeTo('T')));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToChar()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToChar()|3", org.jsoup.parser.CharacterReader.class, r).consumeTo('T')));// on Two

        org.junit.Assert.assertEquals('T', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToChar()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToChar()|5", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertEquals("wo ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToChar()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToChar()|7", org.jsoup.parser.CharacterReader.class, r).consumeTo('T')));
        org.junit.Assert.assertEquals('T', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToChar()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToChar()|9", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertEquals("hree", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToChar()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToChar()|11", org.jsoup.parser.CharacterReader.class, r).consumeTo('T')));// consume to end

    }

    @org.junit.Test
    public void consumeToString() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToString()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("One Two Two Four"));
        org.junit.Assert.assertEquals("One ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToString()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToString()|1", org.jsoup.parser.CharacterReader.class, r).consumeTo("Two")));
        org.junit.Assert.assertEquals('T', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToString()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToString()|3", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertEquals("wo ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToString()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToString()|5", org.jsoup.parser.CharacterReader.class, r).consumeTo("Two")));
        org.junit.Assert.assertEquals('T', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToString()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToString()|7", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertEquals("wo Four", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToString()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToString()|9", org.jsoup.parser.CharacterReader.class, r).consumeTo("Qux")));
    }

    @org.junit.Test
    public void advance() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|advance()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("One Two Three"));
        org.junit.Assert.assertEquals('O', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|advance()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|advance()|1", org.jsoup.parser.CharacterReader.class, r).consume()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|advance()|3", org.jsoup.parser.CharacterReader.class, r).advance();
        org.junit.Assert.assertEquals('e', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|advance()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|advance()|4", org.jsoup.parser.CharacterReader.class, r).consume()));
    }

    @org.junit.Test
    public void consumeToAny() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToAny()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("One &bar; qux"));
        org.junit.Assert.assertEquals("One ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToAny()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToAny()|1", org.jsoup.parser.CharacterReader.class, r).consumeToAny('&', ';')));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToAny()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToAny()|3", org.jsoup.parser.CharacterReader.class, r).matches('&')));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToAny()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToAny()|5", org.jsoup.parser.CharacterReader.class, r).matches("&bar;")));
        org.junit.Assert.assertEquals('&', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToAny()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToAny()|7", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertEquals("bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToAny()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToAny()|9", org.jsoup.parser.CharacterReader.class, r).consumeToAny('&', ';')));
        org.junit.Assert.assertEquals(';', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToAny()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToAny()|11", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertEquals(" qux", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToAny()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToAny()|13", org.jsoup.parser.CharacterReader.class, r).consumeToAny('&', ';')));
    }

    @org.junit.Test
    public void consumeLetterSequence() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeLetterSequence()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("One &bar; qux"));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeLetterSequence()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeLetterSequence()|1", org.jsoup.parser.CharacterReader.class, r).consumeLetterSequence()));
        org.junit.Assert.assertEquals(" &", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeLetterSequence()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeLetterSequence()|3", org.jsoup.parser.CharacterReader.class, r).consumeTo("bar;")));
        org.junit.Assert.assertEquals("bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeLetterSequence()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeLetterSequence()|5", org.jsoup.parser.CharacterReader.class, r).consumeLetterSequence()));
        org.junit.Assert.assertEquals("; qux", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeLetterSequence()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeLetterSequence()|7", org.jsoup.parser.CharacterReader.class, r).consumeToEnd()));
    }

    @org.junit.Test
    public void consumeLetterThenDigitSequence() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeLetterThenDigitSequence()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("One12 Two &bar; qux"));
        org.junit.Assert.assertEquals("One12", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeLetterThenDigitSequence()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeLetterThenDigitSequence()|1", org.jsoup.parser.CharacterReader.class, r).consumeLetterThenDigitSequence()));
        org.junit.Assert.assertEquals(' ', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeLetterThenDigitSequence()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeLetterThenDigitSequence()|3", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeLetterThenDigitSequence()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeLetterThenDigitSequence()|5", org.jsoup.parser.CharacterReader.class, r).consumeLetterThenDigitSequence()));
        org.junit.Assert.assertEquals(" &bar; qux", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeLetterThenDigitSequence()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeLetterThenDigitSequence()|7", org.jsoup.parser.CharacterReader.class, r).consumeToEnd()));
    }

    @org.junit.Test
    public void matches() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matches()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("One Two Three"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matches()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matches()|1", org.jsoup.parser.CharacterReader.class, r).matches('O')));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matches()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matches()|3", org.jsoup.parser.CharacterReader.class, r).matches("One Two Three")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matches()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matches()|5", org.jsoup.parser.CharacterReader.class, r).matches("One")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matches()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matches()|7", org.jsoup.parser.CharacterReader.class, r).matches("one")));
        org.junit.Assert.assertEquals('O', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matches()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matches()|9", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matches()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matches()|11", org.jsoup.parser.CharacterReader.class, r).matches("One")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matches()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matches()|13", org.jsoup.parser.CharacterReader.class, r).matches("ne Two Three")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matches()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matches()|15", org.jsoup.parser.CharacterReader.class, r).matches("ne Two Three Four")));
        org.junit.Assert.assertEquals("ne Two Three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matches()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matches()|17", org.jsoup.parser.CharacterReader.class, r).consumeToEnd()));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matches()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matches()|19", org.jsoup.parser.CharacterReader.class, r).matches("ne")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matches()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matches()|21", org.jsoup.parser.CharacterReader.class, r).isEmpty()));
    }

    @org.junit.Test
    public void matchesIgnoreCase() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("One Two Three"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|1", org.jsoup.parser.CharacterReader.class, r).matchesIgnoreCase("O")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|3", org.jsoup.parser.CharacterReader.class, r).matchesIgnoreCase("o")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|5", org.jsoup.parser.CharacterReader.class, r).matches('O')));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|7", org.jsoup.parser.CharacterReader.class, r).matches('o')));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|9", org.jsoup.parser.CharacterReader.class, r).matchesIgnoreCase("One Two Three")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|11", org.jsoup.parser.CharacterReader.class, r).matchesIgnoreCase("ONE two THREE")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|13", org.jsoup.parser.CharacterReader.class, r).matchesIgnoreCase("One")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|15", org.jsoup.parser.CharacterReader.class, r).matchesIgnoreCase("one")));
        org.junit.Assert.assertEquals('O', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|17", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|19", org.jsoup.parser.CharacterReader.class, r).matchesIgnoreCase("One")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|21", org.jsoup.parser.CharacterReader.class, r).matchesIgnoreCase("NE Two Three")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|23", org.jsoup.parser.CharacterReader.class, r).matchesIgnoreCase("ne Two Three Four")));
        org.junit.Assert.assertEquals("ne Two Three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|25", org.jsoup.parser.CharacterReader.class, r).consumeToEnd()));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesIgnoreCase()|27", org.jsoup.parser.CharacterReader.class, r).matchesIgnoreCase("ne")));
    }

    @org.junit.Test
    public void containsIgnoreCase() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|containsIgnoreCase()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("One TWO three"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|containsIgnoreCase()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|containsIgnoreCase()|1", org.jsoup.parser.CharacterReader.class, r).containsIgnoreCase("two")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|containsIgnoreCase()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|containsIgnoreCase()|3", org.jsoup.parser.CharacterReader.class, r).containsIgnoreCase("three")));
        // weird one: does not find one, because it scans for consistent case only
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|containsIgnoreCase()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|containsIgnoreCase()|5", org.jsoup.parser.CharacterReader.class, r).containsIgnoreCase("one")));
    }

    @org.junit.Test
    public void matchesAny() {
        char[] scan = eu.stamp_project.reneri.instrumentation.StateObserver.<char[]>observeState("org.jsoup.parser.CharacterReaderTest|matchesAny()|0", char[].class, new char[]{ ' ', '\n', '\t' });
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesAny()|1", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("One\nTwo\tThree"));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesAny()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesAny()|2", org.jsoup.parser.CharacterReader.class, r).matchesAny(eu.stamp_project.reneri.instrumentation.StateObserver.<char[]>observeState("org.jsoup.parser.CharacterReaderTest|matchesAny()|3", char[].class, scan))));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesAny()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesAny()|5", org.jsoup.parser.CharacterReader.class, r).consumeToAny(eu.stamp_project.reneri.instrumentation.StateObserver.<char[]>observeState("org.jsoup.parser.CharacterReaderTest|matchesAny()|6", char[].class, scan))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesAny()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesAny()|8", org.jsoup.parser.CharacterReader.class, r).matchesAny(eu.stamp_project.reneri.instrumentation.StateObserver.<char[]>observeState("org.jsoup.parser.CharacterReaderTest|matchesAny()|9", char[].class, scan))));
        org.junit.Assert.assertEquals('\n', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesAny()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesAny()|11", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|matchesAny()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|matchesAny()|13", org.jsoup.parser.CharacterReader.class, r).matchesAny(eu.stamp_project.reneri.instrumentation.StateObserver.<char[]>observeState("org.jsoup.parser.CharacterReaderTest|matchesAny()|14", char[].class, scan))));
    }

    @org.junit.Test
    public void cachesStrings() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|cachesStrings()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE\tA string that is longer than 16 chars"));
        java.lang.String one = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|cachesStrings()|1", org.jsoup.parser.CharacterReader.class, r).consumeTo('\t'));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|cachesStrings()|3", org.jsoup.parser.CharacterReader.class, r).consume());
        java.lang.String two = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|cachesStrings()|5", org.jsoup.parser.CharacterReader.class, r).consumeTo('\t'));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|cachesStrings()|7", org.jsoup.parser.CharacterReader.class, r).consume());
        java.lang.String three = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|cachesStrings()|9", org.jsoup.parser.CharacterReader.class, r).consumeTo('\t'));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|cachesStrings()|11", org.jsoup.parser.CharacterReader.class, r).consume());
        java.lang.String four = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|cachesStrings()|13", org.jsoup.parser.CharacterReader.class, r).consumeTo('\t'));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|cachesStrings()|15", org.jsoup.parser.CharacterReader.class, r).consume());
        java.lang.String five = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|cachesStrings()|17", org.jsoup.parser.CharacterReader.class, r).consumeTo('\t'));
        org.junit.Assert.assertEquals("Check", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|19", one));
        org.junit.Assert.assertEquals("Check", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|20", two));
        org.junit.Assert.assertEquals("Check", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|21", three));
        org.junit.Assert.assertEquals("CHOKE", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|22", four));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|23", one)) == (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|24", two))));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|25", two)) == (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|26", three))));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|27", three)) != (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|28", four))));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|29", four)) != (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|30", five))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|cachesStrings()|31", five), "A string that is longer than 16 chars");
    }

    @org.junit.Test
    public void rangeEquals() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|rangeEquals()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|rangeEquals()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|rangeEquals()|1", org.jsoup.parser.CharacterReader.class, r).rangeEquals(0, 5, "Check")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|rangeEquals()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|rangeEquals()|3", org.jsoup.parser.CharacterReader.class, r).rangeEquals(0, 5, "CHOKE")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|rangeEquals()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|rangeEquals()|5", org.jsoup.parser.CharacterReader.class, r).rangeEquals(0, 5, "Chec")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|rangeEquals()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|rangeEquals()|7", org.jsoup.parser.CharacterReader.class, r).rangeEquals(6, 5, "Check")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|rangeEquals()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|rangeEquals()|9", org.jsoup.parser.CharacterReader.class, r).rangeEquals(6, 5, "Chuck")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|rangeEquals()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|rangeEquals()|11", org.jsoup.parser.CharacterReader.class, r).rangeEquals(12, 5, "Check")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|rangeEquals()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|rangeEquals()|13", org.jsoup.parser.CharacterReader.class, r).rangeEquals(12, 5, "Cheeky")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|rangeEquals()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|rangeEquals()|15", org.jsoup.parser.CharacterReader.class, r).rangeEquals(18, 5, "CHOKE")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|rangeEquals()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|rangeEquals()|17", org.jsoup.parser.CharacterReader.class, r).rangeEquals(18, 5, "CHIKE")));
    }

    @org.junit.Test
    public void empty() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|empty()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("One"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|empty()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|empty()|1", org.jsoup.parser.CharacterReader.class, r).matchConsume("One")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|empty()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|empty()|3", org.jsoup.parser.CharacterReader.class, r).isEmpty()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|empty()|5", org.jsoup.parser.CharacterReader.class, (r = new org.jsoup.parser.CharacterReader("Two")));
        java.lang.String two = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|empty()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|empty()|6", org.jsoup.parser.CharacterReader.class, r).consumeToEnd());
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|empty()|8", two));
    }

    @org.junit.Test
    public void consumeToNonexistentEndWhenAtAnd() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToNonexistentEndWhenAtAnd()|0", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader("<!"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToNonexistentEndWhenAtAnd()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToNonexistentEndWhenAtAnd()|1", org.jsoup.parser.CharacterReader.class, r).matchConsume("<!")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToNonexistentEndWhenAtAnd()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToNonexistentEndWhenAtAnd()|3", org.jsoup.parser.CharacterReader.class, r).isEmpty()));
        java.lang.String after = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToNonexistentEndWhenAtAnd()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToNonexistentEndWhenAtAnd()|5", org.jsoup.parser.CharacterReader.class, r).consumeTo('>'));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToNonexistentEndWhenAtAnd()|7", after));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|consumeToNonexistentEndWhenAtAnd()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|consumeToNonexistentEndWhenAtAnd()|8", org.jsoup.parser.CharacterReader.class, r).isEmpty()));
    }

    @org.junit.Ignore
    @org.junit.Test
    public void notEmptyAtBufferSplitPoint() {
        org.jsoup.parser.CharacterReader r = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|notEmptyAtBufferSplitPoint()|1", org.jsoup.parser.CharacterReader.class, new org.jsoup.parser.CharacterReader(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringReader>observeState("org.jsoup.parser.CharacterReaderTest|notEmptyAtBufferSplitPoint()|0", java.io.StringReader.class, new java.io.StringReader("How about now")), 3));
        org.junit.Assert.assertEquals("How", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|notEmptyAtBufferSplitPoint()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|notEmptyAtBufferSplitPoint()|2", org.jsoup.parser.CharacterReader.class, r).consumeTo(' ')));
        org.junit.Assert.assertFalse("Should not be empty", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|notEmptyAtBufferSplitPoint()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|notEmptyAtBufferSplitPoint()|4", org.jsoup.parser.CharacterReader.class, r).isEmpty()));
        org.junit.Assert.assertEquals(' ', eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|notEmptyAtBufferSplitPoint()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|notEmptyAtBufferSplitPoint()|6", org.jsoup.parser.CharacterReader.class, r).consume()));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.CharacterReaderTest|notEmptyAtBufferSplitPoint()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.CharacterReader>observeState("org.jsoup.parser.CharacterReaderTest|notEmptyAtBufferSplitPoint()|8", org.jsoup.parser.CharacterReader.class, r).isEmpty()));
        // todo - current consume to won't expand buffer. impl buffer extension and test
    }
}

