package org.jsoup.parser;


/**
 * Tests for the Parser
 *
 * @author Jonathan Hedley, jonathan@hedley.net
 */
public class HtmlParserTest {
    @org.junit.Test
    public void parsesSimpleDocument() {
        java.lang.String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesSimpleDocument()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesSimpleDocument()|0", html)));
        // need a better way to verify these:
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesSimpleDocument()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesSimpleDocument()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesSimpleDocument()|2", org.jsoup.nodes.Document.class, doc).body()).child(0));
        org.junit.Assert.assertEquals("p", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesSimpleDocument()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesSimpleDocument()|5", org.jsoup.nodes.Element.class, p).tagName()));
        org.jsoup.nodes.Element img = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesSimpleDocument()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesSimpleDocument()|7", org.jsoup.nodes.Element.class, p).child(0));
        org.junit.Assert.assertEquals("foo.png", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesSimpleDocument()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesSimpleDocument()|9", org.jsoup.nodes.Element.class, img).attr("src")));
        org.junit.Assert.assertEquals("img", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesSimpleDocument()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesSimpleDocument()|11", org.jsoup.nodes.Element.class, img).tagName()));
    }

    @org.junit.Test
    public void parsesRoughAttributes() {
        java.lang.String html = "<html><head><title>First!</title></head><body><p class=\"foo > bar\">First post! <img src=\"foo.png\" /></p></body></html>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesRoughAttributes()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesRoughAttributes()|0", html)));
        // need a better way to verify these:
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesRoughAttributes()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesRoughAttributes()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesRoughAttributes()|2", org.jsoup.nodes.Document.class, doc).body()).child(0));
        org.junit.Assert.assertEquals("p", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesRoughAttributes()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesRoughAttributes()|5", org.jsoup.nodes.Element.class, p).tagName()));
        org.junit.Assert.assertEquals("foo > bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesRoughAttributes()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesRoughAttributes()|7", org.jsoup.nodes.Element.class, p).attr("class")));
    }

    @org.junit.Test
    public void parsesQuiteRoughAttributes() {
        java.lang.String html = "<p =a>One<a <p>Something</p>Else";
        // this (used to; now gets cleaner) gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesQuiteRoughAttributes()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesQuiteRoughAttributes()|0", html)));
        // NOTE: per spec this should be the test case. but impacts too many ppl
        // assertEquals("<p =a>One<a <p>Something</a></p>\n<a <p>Else</a>", doc.body().html());
        org.junit.Assert.assertEquals("<p =a>One<a></a></p><p><a>Something</a></p><a>Else</a>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesQuiteRoughAttributes()|5", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesQuiteRoughAttributes()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesQuiteRoughAttributes()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesQuiteRoughAttributes()|2", org.jsoup.nodes.Document.class, doc).body()).html()))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesQuiteRoughAttributes()|6", org.jsoup.nodes.Document.class, (doc = org.jsoup.Jsoup.parse("<p .....>")));
        org.junit.Assert.assertEquals("<p .....></p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesQuiteRoughAttributes()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesQuiteRoughAttributes()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesQuiteRoughAttributes()|7", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void parsesComments() {
        java.lang.String html = "<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesComments()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesComments()|0", html)));
        org.jsoup.nodes.Element body = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesComments()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesComments()|2", org.jsoup.nodes.Document.class, doc).body());
        org.jsoup.nodes.Comment comment = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Comment>observeState("org.jsoup.parser.HtmlParserTest|parsesComments()|5", org.jsoup.nodes.Comment.class, ((org.jsoup.nodes.Comment) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesComments()|4", org.jsoup.nodes.Element.class, body).childNode(1))));// comment should not be sub of img, as it's an empty tag

        org.junit.Assert.assertEquals(" <table><tr><td></table> ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesComments()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Comment>observeState("org.jsoup.parser.HtmlParserTest|parsesComments()|6", org.jsoup.nodes.Comment.class, comment).getData()));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesComments()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesComments()|8", org.jsoup.nodes.Element.class, body).child(1));
        org.jsoup.nodes.TextNode text = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.parser.HtmlParserTest|parsesComments()|11", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesComments()|10", org.jsoup.nodes.Element.class, p).childNode(0))));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesComments()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.parser.HtmlParserTest|parsesComments()|12", org.jsoup.nodes.TextNode.class, text).getWholeText()));
    }

    @org.junit.Test
    public void parsesUnterminatedComments() {
        java.lang.String html = "<p>Hello<!-- <tr><td>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|0", html)));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|2", org.jsoup.nodes.Document.class, doc).getElementsByTag("p")).get(0));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|5", org.jsoup.nodes.Element.class, p).text()));
        org.jsoup.nodes.TextNode text = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|8", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|7", org.jsoup.nodes.Element.class, p).childNode(0))));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|9", org.jsoup.nodes.TextNode.class, text).getWholeText()));
        org.jsoup.nodes.Comment comment = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Comment>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|12", org.jsoup.nodes.Comment.class, ((org.jsoup.nodes.Comment) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|11", org.jsoup.nodes.Element.class, p).childNode(1))));
        org.junit.Assert.assertEquals(" <tr><td>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Comment>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedComments()|13", org.jsoup.nodes.Comment.class, comment).getData()));
    }

    @org.junit.Test
    public void dropsUnterminatedTag() {
        // jsoup used to parse this to <p>, but whatwg, webkit will drop.
        java.lang.String h1 = "<p";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|dropsUnterminatedTag()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|dropsUnterminatedTag()|0", h1)));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|dropsUnterminatedTag()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|dropsUnterminatedTag()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|dropsUnterminatedTag()|2", org.jsoup.nodes.Document.class, doc).getElementsByTag("p")).size()));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|dropsUnterminatedTag()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|dropsUnterminatedTag()|5", org.jsoup.nodes.Document.class, doc).text()));
        java.lang.String h2 = "<div id=1<p id='2'";
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|dropsUnterminatedTag()|8", org.jsoup.nodes.Document.class, (doc = org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|dropsUnterminatedTag()|7", h2))));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|dropsUnterminatedTag()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|dropsUnterminatedTag()|9", org.jsoup.nodes.Document.class, doc).text()));
    }

    @org.junit.Test
    public void dropsUnterminatedAttribute() {
        // jsoup used to parse this to <p id="foo">, but whatwg, webkit will drop.
        java.lang.String h1 = "<p id=\"foo";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|dropsUnterminatedAttribute()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|dropsUnterminatedAttribute()|0", h1)));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|dropsUnterminatedAttribute()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|dropsUnterminatedAttribute()|2", org.jsoup.nodes.Document.class, doc).text()));
    }

    @org.junit.Test
    public void parsesUnterminatedTextarea() {
        // don't parse right to end, but break on <p>
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedTextarea()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<body><p><textarea>one<p>two"));
        org.jsoup.nodes.Element t = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedTextarea()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedTextarea()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedTextarea()|1", org.jsoup.nodes.Document.class, doc).select("textarea")).first());
        org.junit.Assert.assertEquals("one", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesUnterminatedTextarea()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedTextarea()|4", org.jsoup.nodes.Element.class, t).text()));
        org.junit.Assert.assertEquals("two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesUnterminatedTextarea()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedTextarea()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedTextarea()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedTextarea()|6", org.jsoup.nodes.Document.class, doc).select("p")).get(1)).text()));
    }

    @org.junit.Test
    public void parsesUnterminatedOption() {
        // bit weird this -- browsers and spec get stuck in select until there's a </select>
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedOption()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<body><p><select><option>One<option>Two</p><p>Three</p>"));
        org.jsoup.select.Elements options = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedOption()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedOption()|1", org.jsoup.nodes.Document.class, doc).select("option"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesUnterminatedOption()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedOption()|3", org.jsoup.select.Elements.class, options).size()));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesUnterminatedOption()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedOption()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedOption()|5", org.jsoup.select.Elements.class, options).first()).text()));
        org.junit.Assert.assertEquals("TwoThree", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesUnterminatedOption()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedOption()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|parsesUnterminatedOption()|8", org.jsoup.select.Elements.class, options).last()).text()));
    }

    @org.junit.Test
    public void testSelectWithOption() {
        org.jsoup.parser.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|testSelectWithOption()|0", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.htmlParser());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|testSelectWithOption()|2", org.jsoup.parser.Parser.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|testSelectWithOption()|1", org.jsoup.parser.Parser.class, parser).setTrackErrors(10));
        org.jsoup.nodes.Document document = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testSelectWithOption()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|testSelectWithOption()|3", org.jsoup.parser.Parser.class, parser).parseInput("<select><option>Option 1</option></select>", "http://jsoup.org"));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testSelectWithOption()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseErrorList>observeState("org.jsoup.parser.HtmlParserTest|testSelectWithOption()|6", org.jsoup.parser.ParseErrorList.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|testSelectWithOption()|5", org.jsoup.parser.Parser.class, parser).getErrors()).size()));
    }

    @org.junit.Test
    public void testSpaceAfterTag() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testSpaceAfterTag()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div > <a name=\"top\"></a ><p id=1 >Hello</p></div>"));
        org.junit.Assert.assertEquals("<div> <a name=\"top\"></a><p id=\"1\">Hello</p></div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testSpaceAfterTag()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testSpaceAfterTag()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testSpaceAfterTag()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testSpaceAfterTag()|1", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void createsDocumentStructure() {
        java.lang.String html = "<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hello world</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|0", html)));
        org.jsoup.nodes.Element head = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|2", org.jsoup.nodes.Document.class, doc).head());
        org.jsoup.nodes.Element body = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|4", org.jsoup.nodes.Document.class, doc).body());
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|6", org.jsoup.nodes.Document.class, doc).children()).size()));// root node: contains html node

        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|11", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|9", org.jsoup.nodes.Document.class, doc).child(0)).children()).size()));// html node: head and body

        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|14", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|13", org.jsoup.nodes.Element.class, head).children()).size()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|17", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|16", org.jsoup.nodes.Element.class, body).children()).size()));
        org.junit.Assert.assertEquals("keywords", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|21", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|20", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|19", org.jsoup.nodes.Element.class, head).getElementsByTag("meta")).get(0)).attr("name")));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|24", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|23", org.jsoup.nodes.Element.class, body).getElementsByTag("meta")).size()));
        org.junit.Assert.assertEquals("jsoup", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|26", org.jsoup.nodes.Document.class, doc).title()));
        org.junit.Assert.assertEquals("Hello world", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|28", org.jsoup.nodes.Element.class, body).text()));
        org.junit.Assert.assertEquals("Hello world", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|32", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|31", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsDocumentStructure()|30", org.jsoup.nodes.Element.class, body).children()).get(0)).text()));
    }

    @org.junit.Test
    public void createsStructureFromBodySnippet() {
        // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine
        // needs to move into the start of the body
        java.lang.String html = "foo <b>bar</b> baz";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|createsStructureFromBodySnippet()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsStructureFromBodySnippet()|0", html)));
        org.junit.Assert.assertEquals("foo bar baz", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsStructureFromBodySnippet()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|createsStructureFromBodySnippet()|2", org.jsoup.nodes.Document.class, doc).text()));
    }

    @org.junit.Test
    public void handlesEscapedData() {
        java.lang.String html = "<div title='Surf &amp; Turf'>Reef &amp; Beef</div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesEscapedData()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesEscapedData()|0", html)));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesEscapedData()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesEscapedData()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesEscapedData()|2", org.jsoup.nodes.Document.class, doc).getElementsByTag("div")).get(0));
        org.junit.Assert.assertEquals("Surf & Turf", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesEscapedData()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesEscapedData()|5", org.jsoup.nodes.Element.class, div).attr("title")));
        org.junit.Assert.assertEquals("Reef & Beef", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesEscapedData()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesEscapedData()|7", org.jsoup.nodes.Element.class, div).text()));
    }

    @org.junit.Test
    public void handlesDataOnlyTags() {
        java.lang.String t = "<style>font-family: bold</style>";
        java.util.List<org.jsoup.nodes.Element> tels = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|0", t))).getElementsByTag("style"));
        org.junit.Assert.assertEquals("font-family: bold", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|3", java.util.List.class, tels).get(0)).data()));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|6", java.util.List.class, tels).get(0)).text()));
        java.lang.String s = "<p>Hello</p><script>obj.insert(\'<a rel=\"none\" />\');\ni++;</script><p>There</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|10", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|9", s)));
        org.junit.Assert.assertEquals("Hello There", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|11", org.jsoup.nodes.Document.class, doc).text()));
        org.junit.Assert.assertEquals("obj.insert(\'<a rel=\"none\" />\');\ni++;", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesDataOnlyTags()|13", org.jsoup.nodes.Document.class, doc).data()));
    }

    @org.junit.Test
    public void handlesTextAfterData() {
        java.lang.String h = "<html><body>pre <script>inner</script> aft</body></html>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesTextAfterData()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesTextAfterData()|0", h)));
        org.junit.Assert.assertEquals("<html><head></head><body>pre <script>inner</script> aft</body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesTextAfterData()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesTextAfterData()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesTextAfterData()|2", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void handlesTextArea() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesTextArea()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<textarea>Hello</textarea>"));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesTextArea()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesTextArea()|1", org.jsoup.nodes.Document.class, doc).select("textarea"));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesTextArea()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesTextArea()|3", org.jsoup.select.Elements.class, els).text()));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesTextArea()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesTextArea()|5", org.jsoup.select.Elements.class, els).val()));
    }

    @org.junit.Test
    public void preservesSpaceInTextArea() {
        // preserve because the tag is marked as preserve white space
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<textarea>\n\tOne\n\tTwo\n\tThree\n</textarea>"));
        java.lang.String expect = "One\n\tTwo\n\tThree";// the leading and trailing spaces are dropped as a convenience to authors

        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|1", org.jsoup.nodes.Document.class, doc).select("textarea")).first());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|4", expect), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|5", org.jsoup.nodes.Element.class, el).text()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|7", expect), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|8", org.jsoup.nodes.Element.class, el).val()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|10", expect), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|11", org.jsoup.nodes.Element.class, el).html()));
        org.junit.Assert.assertEquals((("<textarea>\n\t" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|13", expect))) + "\n</textarea>"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInTextArea()|14", org.jsoup.nodes.Element.class, el).outerHtml()));// but preserved in round-trip html

    }

    @org.junit.Test
    public void preservesSpaceInScript() {
        // preserve because it's content is a data node
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInScript()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>\nOne\n\tTwo\n\tThree\n</script>"));
        java.lang.String expect = "\nOne\n\tTwo\n\tThree\n";
        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInScript()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInScript()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInScript()|1", org.jsoup.nodes.Document.class, doc).select("script")).first());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preservesSpaceInScript()|4", expect), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preservesSpaceInScript()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInScript()|5", org.jsoup.nodes.Element.class, el).data()));
        org.junit.Assert.assertEquals("One\n\tTwo\n\tThree", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preservesSpaceInScript()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInScript()|7", org.jsoup.nodes.Element.class, el).html()));
        org.junit.Assert.assertEquals((("<script>" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preservesSpaceInScript()|9", expect))) + "</script>"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preservesSpaceInScript()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|preservesSpaceInScript()|10", org.jsoup.nodes.Element.class, el).outerHtml()));
    }

    @org.junit.Test
    public void doesNotCreateImplicitLists() {
        // old jsoup used to wrap this in <ul>, but that's not to spec
        java.lang.String h = "<li>Point one<li>Point two";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|0", h)));
        org.jsoup.select.Elements ol = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|2", org.jsoup.nodes.Document.class, doc).select("ul"));// should NOT have created a default ul.

        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|4", org.jsoup.select.Elements.class, ol).size()));
        org.jsoup.select.Elements lis = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|6", org.jsoup.nodes.Document.class, doc).select("li"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|8", org.jsoup.select.Elements.class, lis).size()));
        org.junit.Assert.assertEquals("body", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|10", org.jsoup.select.Elements.class, lis).first()).parent()).tagName()));
        // no fiddling with non-implicit lists
        java.lang.String h2 = "<ol><li><p>Point the first<li><p>Point the second";
        org.jsoup.nodes.Document doc2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|15", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|14", h2)));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|17", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|16", org.jsoup.nodes.Document.class, doc2).select("ul")).size()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|20", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|19", org.jsoup.nodes.Document.class, doc2).select("ol")).size()));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|23", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|22", org.jsoup.nodes.Document.class, doc2).select("ol li")).size()));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|26", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|25", org.jsoup.nodes.Document.class, doc2).select("ol li p")).size()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|32", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|31", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|30", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|29", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|doesNotCreateImplicitLists()|28", org.jsoup.nodes.Document.class, doc2).select("ol li")).get(0)).children()).size()));// one p in first li

    }

    @org.junit.Test
    public void discardsNakedTds() {
        // jsoup used to make this into an implicit table; but browsers make it into a text run
        java.lang.String h = "<td>Hello<td><p>There<p>now";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|discardsNakedTds()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|discardsNakedTds()|0", h)));
        org.junit.Assert.assertEquals("Hello<p>There</p><p>now</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|discardsNakedTds()|5", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|discardsNakedTds()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|discardsNakedTds()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|discardsNakedTds()|2", org.jsoup.nodes.Document.class, doc).body()).html()))));
        // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table
    }

    @org.junit.Test
    public void handlesNestedImplicitTable() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesNestedImplicitTable()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>"));
        org.junit.Assert.assertEquals("<table><tbody><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tbody><tr><td>3</td> <td>4</td></tr></tbody></table> </td></tr><tr><td>5</td></tr></tbody></table>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesNestedImplicitTable()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesNestedImplicitTable()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesNestedImplicitTable()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesNestedImplicitTable()|1", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void handlesWhatWgExpensesTableExample() {
        // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesWhatWgExpensesTableExample()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>"));
        org.junit.Assert.assertEquals("<table> <colgroup> <col> </colgroup><colgroup> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\"rowgroup\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\"rowgroup\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesWhatWgExpensesTableExample()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesWhatWgExpensesTableExample()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesWhatWgExpensesTableExample()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesWhatWgExpensesTableExample()|1", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void handlesTbodyTable() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesTbodyTable()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>"));
        org.junit.Assert.assertEquals("<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesTbodyTable()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesTbodyTable()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesTbodyTable()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesTbodyTable()|1", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void handlesImplicitCaptionClose() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesImplicitCaptionClose()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<table><caption>A caption<td>One<td>Two"));
        org.junit.Assert.assertEquals("<table><caption>A caption</caption><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesImplicitCaptionClose()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesImplicitCaptionClose()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesImplicitCaptionClose()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesImplicitCaptionClose()|1", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void noTableDirectInTable() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|noTableDirectInTable()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<table> <td>One <td><table><td>Two</table> <table><td>Three"));
        org.junit.Assert.assertEquals("<table> <tbody><tr><td>One </td><td><table><tbody><tr><td>Two</td></tr></tbody></table> <table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|noTableDirectInTable()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|noTableDirectInTable()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|noTableDirectInTable()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|noTableDirectInTable()|1", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void ignoresDupeEndTrTag() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|ignoresDupeEndTrTag()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>"));// two </tr></tr>, must ignore or will close table

        org.junit.Assert.assertEquals("<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|ignoresDupeEndTrTag()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|ignoresDupeEndTrTag()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|ignoresDupeEndTrTag()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|ignoresDupeEndTrTag()|1", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void handlesBaseTags() {
        // only listen to the first base href
        java.lang.String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=/4>#</a>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|0", h), "http://foo/"));
        org.junit.Assert.assertEquals("http://foo/2/", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|2", org.jsoup.nodes.Document.class, doc).baseUri()));// gets set once, so doc and descendants have first only

        org.jsoup.select.Elements anchors = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|4", org.jsoup.nodes.Document.class, doc).getElementsByTag("a"));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|6", org.jsoup.select.Elements.class, anchors).size()));
        org.junit.Assert.assertEquals("http://foo/2/", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|8", org.jsoup.select.Elements.class, anchors).get(0)).baseUri()));
        org.junit.Assert.assertEquals("http://foo/2/", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|11", org.jsoup.select.Elements.class, anchors).get(1)).baseUri()));
        org.junit.Assert.assertEquals("http://foo/2/", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|14", org.jsoup.select.Elements.class, anchors).get(2)).baseUri()));
        org.junit.Assert.assertEquals("http://foo/2/1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|17", org.jsoup.select.Elements.class, anchors).get(0)).absUrl("href")));
        org.junit.Assert.assertEquals("http://foo/2/3", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|21", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|20", org.jsoup.select.Elements.class, anchors).get(1)).absUrl("href")));
        org.junit.Assert.assertEquals("http://foo/4", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|24", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseTags()|23", org.jsoup.select.Elements.class, anchors).get(2)).absUrl("href")));
    }

    @org.junit.Test
    public void handlesProtocolRelativeUrl() {
        java.lang.String base = "https://example.com/";
        java.lang.String html = "<img src='//example.net/img.jpg'>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesProtocolRelativeUrl()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesProtocolRelativeUrl()|0", html), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesProtocolRelativeUrl()|1", base)));
        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesProtocolRelativeUrl()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesProtocolRelativeUrl()|4", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesProtocolRelativeUrl()|3", org.jsoup.nodes.Document.class, doc).select("img")).first());
        org.junit.Assert.assertEquals("https://example.net/img.jpg", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesProtocolRelativeUrl()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesProtocolRelativeUrl()|6", org.jsoup.nodes.Element.class, el).absUrl("src")));
    }

    @org.junit.Test
    public void handlesCdata() {
        // todo: as this is html namespace, should actually treat as bogus comment, not cdata. keep as cdata for now
        java.lang.String h = "<div id=1><![CDATA[<html>\n <foo><&amp;]]></div>";// the &amp; in there should remain literal

        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesCdata()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdata()|0", h)));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesCdata()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesCdata()|2", org.jsoup.nodes.Document.class, doc).getElementById("1"));
        org.junit.Assert.assertEquals("<html>\n <foo><&amp;", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdata()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesCdata()|4", org.jsoup.nodes.Element.class, div).text()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdata()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesCdata()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesCdata()|6", org.jsoup.nodes.Element.class, div).children()).size()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdata()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesCdata()|9", org.jsoup.nodes.Element.class, div).childNodeSize()));// no elements, one text node

    }

    @org.junit.Test
    public void roundTripsCdata() {
        java.lang.String h = "<div id=1><![CDATA[\n<html>\n <foo><&amp;]]></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|0", h)));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|2", org.jsoup.nodes.Document.class, doc).getElementById("1"));
        org.junit.Assert.assertEquals("<html>\n <foo><&amp;", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|4", org.jsoup.nodes.Element.class, div).text()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|6", org.jsoup.nodes.Element.class, div).children()).size()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|9", org.jsoup.nodes.Element.class, div).childNodeSize()));// no elements, one text node

        org.junit.Assert.assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]>\n</div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|11", org.jsoup.nodes.Element.class, div).outerHtml()));
        org.jsoup.nodes.CDataNode cdata = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.CDataNode>observeState("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|15", org.jsoup.nodes.CDataNode.class, ((org.jsoup.nodes.CDataNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|14", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|13", org.jsoup.nodes.Element.class, div).textNodes()).get(0))));
        org.junit.Assert.assertEquals("\n<html>\n <foo><&amp;", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.CDataNode>observeState("org.jsoup.parser.HtmlParserTest|roundTripsCdata()|16", org.jsoup.nodes.CDataNode.class, cdata).text()));
    }

    @org.junit.Test
    public void handlesCdataAcrossBuffer() {
        java.lang.StringBuilder sb = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|0", java.lang.StringBuilder.class, new java.lang.StringBuilder());
        while ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|1", java.lang.StringBuilder.class, sb).length())) <= (org.jsoup.parser.CharacterReader.maxBufferLen)) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|4", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|3", java.lang.StringBuilder.class, sb).append("A suitable amount of CData.\n"));
        } 
        java.lang.String cdata = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|5", java.lang.StringBuilder.class, sb).toString());
        java.lang.String h = ("<div><![CDATA[" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|7", cdata))) + "]]></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|9", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|8", h)));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|10", org.jsoup.nodes.Document.class, doc).selectFirst("div"));
        org.jsoup.nodes.CDataNode node = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.CDataNode>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|14", org.jsoup.nodes.CDataNode.class, ((org.jsoup.nodes.CDataNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|13", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|12", org.jsoup.nodes.Element.class, div).textNodes()).get(0))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|15", cdata), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.CDataNode>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataAcrossBuffer()|16", org.jsoup.nodes.CDataNode.class, node).text()));
    }

    @org.junit.Test
    public void handlesCdataInScript() {
        java.lang.String html = "<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|0", html)));
        java.lang.String data = "//<![CDATA[\n\n  foo();\n//]]>";
        org.jsoup.nodes.Element script = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|2", org.jsoup.nodes.Document.class, doc).selectFirst("script"));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|4", org.jsoup.nodes.Element.class, script).text()));// won't be parsed as cdata because in script data section

        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|6", data), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|7", org.jsoup.nodes.Element.class, script).data()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|9", html), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|10", org.jsoup.nodes.Element.class, script).outerHtml()));
        org.jsoup.nodes.DataNode dataNode = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.DataNode>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|13", org.jsoup.nodes.DataNode.class, ((org.jsoup.nodes.DataNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|12", org.jsoup.nodes.Element.class, script).childNode(0))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|14", data), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.DataNode>observeState("org.jsoup.parser.HtmlParserTest|handlesCdataInScript()|15", org.jsoup.nodes.DataNode.class, dataNode).getWholeData()));
        // see - not a cdata node, because in script. contrast with XmlTreeBuilder - will be cdata.
    }

    @org.junit.Test
    public void handlesUnclosedCdataAtEOF() {
        // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF
        java.lang.String h = "<![CDATA[]]";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedCdataAtEOF()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedCdataAtEOF()|0", h)));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedCdataAtEOF()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedCdataAtEOF()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedCdataAtEOF()|2", org.jsoup.nodes.Document.class, doc).body()).childNodeSize()));
    }

    @org.junit.Test
    public void handleCDataInText() {
        java.lang.String h = "<p>One <![CDATA[Two <&]]> Three</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handleCDataInText()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handleCDataInText()|0", h)));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handleCDataInText()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handleCDataInText()|2", org.jsoup.nodes.Document.class, doc).selectFirst("p"));
        java.util.List<org.jsoup.nodes.Node> nodes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.HtmlParserTest|handleCDataInText()|5", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handleCDataInText()|4", org.jsoup.nodes.Element.class, p).childNodes());
        org.junit.Assert.assertEquals("One ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handleCDataInText()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.parser.HtmlParserTest|handleCDataInText()|7", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.HtmlParserTest|handleCDataInText()|6", java.util.List.class, nodes).get(0)))).getWholeText()));
        org.junit.Assert.assertEquals("Two <&", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handleCDataInText()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.parser.HtmlParserTest|handleCDataInText()|10", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.HtmlParserTest|handleCDataInText()|9", java.util.List.class, nodes).get(1)))).getWholeText()));
        org.junit.Assert.assertEquals("Two <&", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handleCDataInText()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.CDataNode>observeState("org.jsoup.parser.HtmlParserTest|handleCDataInText()|13", org.jsoup.nodes.CDataNode.class, ((org.jsoup.nodes.CDataNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.HtmlParserTest|handleCDataInText()|12", java.util.List.class, nodes).get(1)))).getWholeText()));
        org.junit.Assert.assertEquals(" Three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handleCDataInText()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.parser.HtmlParserTest|handleCDataInText()|16", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.HtmlParserTest|handleCDataInText()|15", java.util.List.class, nodes).get(2)))).getWholeText()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handleCDataInText()|18", h), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handleCDataInText()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handleCDataInText()|19", org.jsoup.nodes.Element.class, p).outerHtml()));
    }

    @org.junit.Test
    public void cdataNodesAreTextNodes() {
        java.lang.String h = "<p>One <![CDATA[ Two <& ]]> Three</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|0", h)));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|2", org.jsoup.nodes.Document.class, doc).selectFirst("p"));
        java.util.List<org.jsoup.nodes.TextNode> nodes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|5", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|4", org.jsoup.nodes.Element.class, p).textNodes());
        org.junit.Assert.assertEquals("One ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|7", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|6", java.util.List.class, nodes).get(0)).text()));
        org.junit.Assert.assertEquals(" Two <& ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|10", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|9", java.util.List.class, nodes).get(1)).text()));
        org.junit.Assert.assertEquals(" Three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|13", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.parser.HtmlParserTest|cdataNodesAreTextNodes()|12", java.util.List.class, nodes).get(2)).text()));
    }

    @org.junit.Test
    public void handlesInvalidStartTags() {
        java.lang.String h = "<div>Hello < There <&amp;></div>";// parse to <div {#text=Hello < There <&>}>

        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesInvalidStartTags()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesInvalidStartTags()|0", h)));
        org.junit.Assert.assertEquals("Hello < There <&>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesInvalidStartTags()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesInvalidStartTags()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesInvalidStartTags()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesInvalidStartTags()|2", org.jsoup.nodes.Document.class, doc).select("div")).first()).text()));
    }

    @org.junit.Test
    public void handlesUnknownTags() {
        java.lang.String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|0", h)));
        org.jsoup.select.Elements foos = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|2", org.jsoup.nodes.Document.class, doc).select("foo"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|4", org.jsoup.select.Elements.class, foos).size()));
        org.junit.Assert.assertEquals("bar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|6", org.jsoup.select.Elements.class, foos).first()).attr("title")));
        org.junit.Assert.assertEquals("qux", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|9", org.jsoup.select.Elements.class, foos).last()).attr("title")));
        org.junit.Assert.assertEquals("there", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownTags()|12", org.jsoup.select.Elements.class, foos).last()).text()));
    }

    @org.junit.Test
    public void handlesUnknownInlineTags() {
        java.lang.String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownInlineTags()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parseBodyFragment(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnknownInlineTags()|0", h)));
        java.lang.String out = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnknownInlineTags()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownInlineTags()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownInlineTags()|2", org.jsoup.nodes.Document.class, doc).body()).html());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnknownInlineTags()|5", h), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnknownInlineTags()|7", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnknownInlineTags()|6", out))));
    }

    @org.junit.Test
    public void parsesBodyFragment() {
        java.lang.String h = "<!-- comment --><p><a href='foo'>One</a></p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesBodyFragment()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parseBodyFragment(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesBodyFragment()|0", h), "http://example.com"));
        org.junit.Assert.assertEquals("<body><!-- comment --><p><a href=\"foo\">One</a></p></body>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesBodyFragment()|5", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesBodyFragment()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesBodyFragment()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesBodyFragment()|2", org.jsoup.nodes.Document.class, doc).body()).outerHtml()))));
        org.junit.Assert.assertEquals("http://example.com/foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|parsesBodyFragment()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|parsesBodyFragment()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|parsesBodyFragment()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|parsesBodyFragment()|6", org.jsoup.nodes.Document.class, doc).select("a")).first()).absUrl("href")));
    }

    @org.junit.Test
    public void handlesUnknownNamespaceTags() {
        // note that the first foo:bar should not really be allowed to be self closing, if parsed in html mode.
        java.lang.String h = "<foo:bar id='1' /><abc:def id=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownNamespaceTags()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnknownNamespaceTags()|0", h)));
        org.junit.Assert.assertEquals("<foo:bar id=\"1\" /><abc:def id=\"2\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnknownNamespaceTags()|5", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnknownNamespaceTags()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownNamespaceTags()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnknownNamespaceTags()|2", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void handlesKnownEmptyBlocks() {
        // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.
        java.lang.String h = "<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyBlocks()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyBlocks()|0", h)));
        org.junit.Assert.assertEquals("<div id=\"1\"></div><script src=\"/foo\"></script><div id=\"2\"><img><img></div><a id=\"3\"></a><i></i><foo /><foo>One</foo> <hr> hr text <hr> hr text two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyBlocks()|5", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyBlocks()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyBlocks()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyBlocks()|2", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void handlesKnownEmptyNoFrames() {
        java.lang.String h = "<html><head><noframes /><meta name=foo></head><body>One</body></html>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyNoFrames()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyNoFrames()|0", h)));
        org.junit.Assert.assertEquals("<html><head><noframes></noframes><meta name=\"foo\"></head><body>One</body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyNoFrames()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyNoFrames()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyNoFrames()|2", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void handlesKnownEmptyStyle() {
        java.lang.String h = "<html><head><style /><meta name=foo></head><body>One</body></html>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyStyle()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyStyle()|0", h)));
        org.junit.Assert.assertEquals("<html><head><style></style><meta name=\"foo\"></head><body>One</body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyStyle()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyStyle()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyStyle()|2", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void handlesKnownEmptyTitle() {
        java.lang.String h = "<html><head><title /><meta name=foo></head><body>One</body></html>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyTitle()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyTitle()|0", h)));
        org.junit.Assert.assertEquals("<html><head><title></title><meta name=\"foo\"></head><body>One</body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyTitle()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyTitle()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyTitle()|2", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void handlesKnownEmptyIframe() {
        java.lang.String h = "<p>One</p><iframe id=1 /><p>Two";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyIframe()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyIframe()|0", h)));
        org.junit.Assert.assertEquals("<html><head></head><body><p>One</p><iframe id=\"1\"></iframe><p>Two</p></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyIframe()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyIframe()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesKnownEmptyIframe()|2", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void handlesSolidusAtAttributeEnd() {
        // this test makes sure [<a href=/>link</a>] is parsed as [<a href="/">link</a>], not [<a href="" /><a>link</a>]
        java.lang.String h = "<a href=/>link</a>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesSolidusAtAttributeEnd()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesSolidusAtAttributeEnd()|0", h)));
        org.junit.Assert.assertEquals("<a href=\"/\">link</a>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesSolidusAtAttributeEnd()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesSolidusAtAttributeEnd()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesSolidusAtAttributeEnd()|2", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void handlesMultiClosingBody() {
        java.lang.String h = "<body><p>Hello</body><p>there</p></body></body></html><p>now";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesMultiClosingBody()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesMultiClosingBody()|0", h)));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesMultiClosingBody()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesMultiClosingBody()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesMultiClosingBody()|2", org.jsoup.nodes.Document.class, doc).select("p")).size()));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesMultiClosingBody()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesMultiClosingBody()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesMultiClosingBody()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesMultiClosingBody()|5", org.jsoup.nodes.Document.class, doc).body()).children()).size()));
    }

    @org.junit.Test
    public void handlesUnclosedDefinitionLists() {
        // jsoup used to create a <dl>, but that's not to spec
        java.lang.String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|0", h)));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|2", org.jsoup.nodes.Document.class, doc).select("dl")).size()));// no auto dl

        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|5", org.jsoup.nodes.Document.class, doc).select("dt, dd")).size()));
        org.jsoup.select.Elements dts = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|8", org.jsoup.nodes.Document.class, doc).select("dt"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|10", org.jsoup.select.Elements.class, dts).size()));
        org.junit.Assert.assertEquals("Zug", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedDefinitionLists()|12", org.jsoup.select.Elements.class, dts).get(1)).nextElementSibling()).text()));
    }

    @org.junit.Test
    public void handlesBlocksInDefinitions() {
        // per the spec, dt and dd are inline, but in practise are block
        java.lang.String h = "<dl><dt><div id=1>Term</div></dt><dd><div id=2>Def</div></dd></dl>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|0", h)));
        org.junit.Assert.assertEquals("dt", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|2", org.jsoup.nodes.Document.class, doc).select("#1")).first()).parent()).tagName()));
        org.junit.Assert.assertEquals("dd", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|7", org.jsoup.nodes.Document.class, doc).select("#2")).first()).parent()).tagName()));
        org.junit.Assert.assertEquals("<dl><dt><div id=\"1\">Term</div></dt><dd><div id=\"2\">Def</div></dd></dl>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|15", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesBlocksInDefinitions()|12", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void handlesFrames() {
        java.lang.String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesFrames()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesFrames()|0", h)));
        org.junit.Assert.assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\"><frame src=\"foo\"></frameset></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesFrames()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesFrames()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesFrames()|2", org.jsoup.nodes.Document.class, doc).html()))));
        // no body auto vivification
    }

    @org.junit.Test
    public void ignoresContentAfterFrameset() {
        java.lang.String h = "<html><head><title>One</title></head><frameset><frame /><frame /></frameset><table></table></html>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|ignoresContentAfterFrameset()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|ignoresContentAfterFrameset()|0", h)));
        org.junit.Assert.assertEquals("<html><head><title>One</title></head><frameset><frame><frame></frameset></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|ignoresContentAfterFrameset()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|ignoresContentAfterFrameset()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|ignoresContentAfterFrameset()|2", org.jsoup.nodes.Document.class, doc).html()))));
        // no body, no table. No crash!
    }

    @org.junit.Test
    public void handlesJavadocFont() {
        java.lang.String h = "<TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"deprecated-list.html\"><FONT CLASS=\"NavBarFont1\"><B>Deprecated</B></FONT></A>&nbsp;</TD>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesJavadocFont()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesJavadocFont()|0", h)));
        org.jsoup.nodes.Element a = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesJavadocFont()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesJavadocFont()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesJavadocFont()|2", org.jsoup.nodes.Document.class, doc).select("a")).first());
        org.junit.Assert.assertEquals("Deprecated", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesJavadocFont()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesJavadocFont()|5", org.jsoup.nodes.Element.class, a).text()));
        org.junit.Assert.assertEquals("font", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesJavadocFont()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesJavadocFont()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesJavadocFont()|7", org.jsoup.nodes.Element.class, a).child(0)).tagName()));
        org.junit.Assert.assertEquals("b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesJavadocFont()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesJavadocFont()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesJavadocFont()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesJavadocFont()|10", org.jsoup.nodes.Element.class, a).child(0)).child(0)).tagName()));
    }

    @org.junit.Test
    public void handlesBaseWithoutHref() {
        java.lang.String h = "<head><base target='_blank'></head><body><a href=/foo>Test</a></body>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseWithoutHref()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBaseWithoutHref()|0", h), "http://example.com/"));
        org.jsoup.nodes.Element a = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseWithoutHref()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseWithoutHref()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseWithoutHref()|2", org.jsoup.nodes.Document.class, doc).select("a")).first());
        org.junit.Assert.assertEquals("/foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBaseWithoutHref()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseWithoutHref()|5", org.jsoup.nodes.Element.class, a).attr("href")));
        org.junit.Assert.assertEquals("http://example.com/foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesBaseWithoutHref()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesBaseWithoutHref()|7", org.jsoup.nodes.Element.class, a).attr("abs:href")));
    }

    @org.junit.Test
    public void normalisesDocument() {
        java.lang.String h = "<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven ";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|normalisesDocument()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|normalisesDocument()|0", h)));
        org.junit.Assert.assertEquals("<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven </body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|normalisesDocument()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|normalisesDocument()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|normalisesDocument()|2", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void normalisesEmptyDocument() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|normalisesEmptyDocument()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(""));
        org.junit.Assert.assertEquals("<html><head></head><body></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|normalisesEmptyDocument()|3", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|normalisesEmptyDocument()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|normalisesEmptyDocument()|1", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void normalisesHeadlessBody() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|normalisesHeadlessBody()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<html><body><span class=\"foo\">bar</span>"));
        org.junit.Assert.assertEquals("<html><head></head><body><span class=\"foo\">bar</span></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|normalisesHeadlessBody()|3", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|normalisesHeadlessBody()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|normalisesHeadlessBody()|1", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void normalisedBodyAfterContent() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|normalisedBodyAfterContent()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<font face=Arial><body class=name><div>One</div></body></font>"));
        org.junit.Assert.assertEquals("<html><head></head><body class=\"name\"><font face=\"Arial\"><div>One</div></font></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|normalisedBodyAfterContent()|3", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|normalisedBodyAfterContent()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|normalisedBodyAfterContent()|1", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void findsCharsetInMalformedMeta() {
        java.lang.String h = "<meta http-equiv=Content-Type content=text/html; charset=gb2312>";
        // example cited for reason of html5's <meta charset> element
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|findsCharsetInMalformedMeta()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|findsCharsetInMalformedMeta()|0", h)));
        org.junit.Assert.assertEquals("gb2312", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|findsCharsetInMalformedMeta()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|findsCharsetInMalformedMeta()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|findsCharsetInMalformedMeta()|2", org.jsoup.nodes.Document.class, doc).select("meta")).attr("charset")));
    }

    @org.junit.Test
    public void testHgroup() {
        // jsoup used to not allow hroup in h{n}, but that's not in spec, and browsers are OK
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testHgroup()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<h1>Hello <h2>There <hgroup><h1>Another<h2>headline</hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup>"));
        org.junit.Assert.assertEquals("<h1>Hello </h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup></h2>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testHgroup()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testHgroup()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testHgroup()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testHgroup()|1", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void testRelaxedTags() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testRelaxedTags()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<abc_def id=1>Hello</abc_def> <abc-def>There</abc-def>"));
        org.junit.Assert.assertEquals("<abc_def id=\"1\">Hello</abc_def> <abc-def>There</abc-def>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testRelaxedTags()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testRelaxedTags()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testRelaxedTags()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testRelaxedTags()|1", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void testHeaderContents() {
        // h* tags (h1 .. h9) in browsers can handle any internal content other than other h*. which is not per any
        // spec, which defines them as containing phrasing content only. so, reality over theory.
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testHeaderContents()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>"));
        org.junit.Assert.assertEquals("<h1>Hello <div>There</div> now</h1> <h2>More </h2><h3>Content</h3>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testHeaderContents()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testHeaderContents()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testHeaderContents()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testHeaderContents()|1", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void testSpanContents() {
        // like h1 tags, the spec says SPAN is phrasing only, but browsers and publisher treat span as a block tag
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testSpanContents()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>"));
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testSpanContents()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testSpanContents()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testSpanContents()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testSpanContents()|1", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void testNoImagesInNoScriptInHead() {
        // jsoup used to allow, but against spec if parsing with noscript
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testNoImagesInNoScriptInHead()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>"));
        org.junit.Assert.assertEquals("<html><head><noscript>&lt;img src=\"foo\"&gt;</noscript></head><body><p>Hello</p></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testNoImagesInNoScriptInHead()|3", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testNoImagesInNoScriptInHead()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testNoImagesInNoScriptInHead()|1", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void testAFlowContents() {
        // html5 has <a> as either phrasing or block
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testAFlowContents()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<a>Hello <div>there</div> <span>now</span></a>"));
        org.junit.Assert.assertEquals("<a>Hello <div>there</div> <span>now</span></a>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testAFlowContents()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testAFlowContents()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testAFlowContents()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testAFlowContents()|1", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void testFontFlowContents() {
        // html5 has no definition of <font>; often used as flow
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testFontFlowContents()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<font>Hello <div>there</div> <span>now</span></font>"));
        org.junit.Assert.assertEquals("<font>Hello <div>there</div> <span>now</span></font>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testFontFlowContents()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testFontFlowContents()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testFontFlowContents()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testFontFlowContents()|1", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void handlesMisnestedTagsBI() {
        // whatwg: <b><i></b></i>
        java.lang.String h = "<p>1<b>2<i>3</b>4</i>5</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesMisnestedTagsBI()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesMisnestedTagsBI()|0", h)));
        org.junit.Assert.assertEquals("<p>1<b>2<i>3</i></b><i>4</i>5</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesMisnestedTagsBI()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesMisnestedTagsBI()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesMisnestedTagsBI()|2", org.jsoup.nodes.Document.class, doc).body()).html()));
        // adoption agency on </b>, reconstruction of formatters on 4.
    }

    @org.junit.Test
    public void handlesMisnestedTagsBP() {
        // whatwg: <b><p></b></p>
        java.lang.String h = "<b>1<p>2</b>3</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesMisnestedTagsBP()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesMisnestedTagsBP()|0", h)));
        org.junit.Assert.assertEquals("<b>1</b>\n<p><b>2</b>3</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesMisnestedTagsBP()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesMisnestedTagsBP()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesMisnestedTagsBP()|2", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    // todo: test case for https://github.com/jhy/jsoup/issues/845. Doesn't work yet.
    @org.junit.Ignore
    @org.junit.Test
    public void handlesMisnestedAInDivs() {
        java.lang.String h = "<a href='#1'><div><div><a href='#2'>child</a</div</div></a>";
        java.lang.String w = "<a href=\"#1\"></a><div><a href=\"#1\"></a><div><a href=\"#1\"></a><a href=\"#2\">child</a></div></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesMisnestedAInDivs()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesMisnestedAInDivs()|0", h)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesMisnestedAInDivs()|3", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesMisnestedAInDivs()|2", w))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesMisnestedAInDivs()|7", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesMisnestedAInDivs()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesMisnestedAInDivs()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesMisnestedAInDivs()|4", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void handlesUnexpectedMarkupInTables() {
        // whatwg - tests markers in active formatting (if they didn't work, would get in in table)
        // also tests foster parenting
        java.lang.String h = "<table><b><tr><td>aaa</td></tr>bbb</table>ccc";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnexpectedMarkupInTables()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnexpectedMarkupInTables()|0", h)));
        org.junit.Assert.assertEquals("<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnexpectedMarkupInTables()|5", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnexpectedMarkupInTables()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnexpectedMarkupInTables()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnexpectedMarkupInTables()|2", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void handlesUnclosedFormattingElements() {
        // whatwg: formatting elements get collected and applied, but excess elements are thrown away
        java.lang.String h = "<!DOCTYPE html>\n" + ((("<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n" + "<p>X\n") + "<p><b><b class=x><b>X\n") + "<p></b></b></b></b></b></b>X");
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedFormattingElements()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedFormattingElements()|0", h)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedFormattingElements()|4", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedFormattingElements()|3", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedFormattingElements()|2", org.jsoup.nodes.Document.class, doc).outputSettings()).indentAmount(0));
        java.lang.String want = "<!doctype html>\n" + (((((((("<html>\n" + "<head></head>\n") + "<body>\n") + "<p><b class=\"x\"><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></b></p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b><b><b class=\"x\"><b>X </b></b></b></b></b></b></b></b></p>\n") + "<p>X</p>\n") + "</body>\n") + "</html>");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedFormattingElements()|5", want), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedFormattingElements()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedFormattingElements()|6", org.jsoup.nodes.Document.class, doc).html()));
    }

    @org.junit.Test
    public void handlesUnclosedAnchors() {
        java.lang.String h = "<a href='http://example.com/'>Link<p>Error link</a>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedAnchors()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedAnchors()|0", h)));
        java.lang.String want = "<a href=\"http://example.com/\">Link</a>\n<p><a href=\"http://example.com/\">Error link</a></p>";
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedAnchors()|2", want), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedAnchors()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedAnchors()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedAnchors()|3", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void reconstructFormattingElements() {
        // tests attributes and multi b
        java.lang.String h = "<p><b class=one>One <i>Two <b>Three</p><p>Hello</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|reconstructFormattingElements()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|reconstructFormattingElements()|0", h)));
        org.junit.Assert.assertEquals("<p><b class=\"one\">One <i>Two <b>Three</b></i></b></p>\n<p><b class=\"one\"><i><b>Hello</b></i></b></p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|reconstructFormattingElements()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|reconstructFormattingElements()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|reconstructFormattingElements()|2", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void reconstructFormattingElementsInTable() {
        // tests that tables get formatting markers -- the <b> applies outside the table and does not leak in,
        // and the <i> inside the table and does not leak out.
        java.lang.String h = "<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|reconstructFormattingElementsInTable()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|reconstructFormattingElementsInTable()|0", h)));
        java.lang.String want = "<p><b>One</b></p>\n" + ((((((("<b> \n" + " <table>\n") + "  <tbody>\n") + "   <tr>\n") + "    <td><p><i>Three</i></p><p><i>Four</i></p></td>\n") + "   </tr>\n") + "  </tbody>\n") + " </table> <p>Five</p></b>");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|reconstructFormattingElementsInTable()|2", want), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|reconstructFormattingElementsInTable()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|reconstructFormattingElementsInTable()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|reconstructFormattingElementsInTable()|3", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void commentBeforeHtml() {
        java.lang.String h = "<!-- comment --><!-- comment 2 --><p>One</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|commentBeforeHtml()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|commentBeforeHtml()|0", h)));
        org.junit.Assert.assertEquals("<!-- comment --><!-- comment 2 --><html><head></head><body><p>One</p></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|commentBeforeHtml()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|commentBeforeHtml()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|commentBeforeHtml()|2", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void emptyTdTag() {
        java.lang.String h = "<table><tr><td>One</td><td id='2' /></tr></table>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|emptyTdTag()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|emptyTdTag()|0", h)));
        org.junit.Assert.assertEquals("<td>One</td>\n<td id=\"2\"></td>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|emptyTdTag()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|emptyTdTag()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|emptyTdTag()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|emptyTdTag()|2", org.jsoup.nodes.Document.class, doc).select("tr")).first()).html()));
    }

    @org.junit.Test
    public void handlesSolidusInA() {
        // test for bug #66
        java.lang.String h = "<a class=lp href=/lib/14160711/>link text</a>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesSolidusInA()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesSolidusInA()|0", h)));
        org.jsoup.nodes.Element a = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesSolidusInA()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesSolidusInA()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesSolidusInA()|2", org.jsoup.nodes.Document.class, doc).select("a")).first());
        org.junit.Assert.assertEquals("link text", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesSolidusInA()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesSolidusInA()|5", org.jsoup.nodes.Element.class, a).text()));
        org.junit.Assert.assertEquals("/lib/14160711/", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesSolidusInA()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesSolidusInA()|7", org.jsoup.nodes.Element.class, a).attr("href")));
    }

    @org.junit.Test
    public void handlesSpanInTbody() {
        // test for bug 64
        java.lang.String h = "<table><tbody><span class='1'><tr><td>One</td></tr><tr><td>Two</td></tr></span></tbody></table>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesSpanInTbody()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesSpanInTbody()|0", h)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesSpanInTbody()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesSpanInTbody()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesSpanInTbody()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesSpanInTbody()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesSpanInTbody()|2", org.jsoup.nodes.Document.class, doc).select("span")).first()).children()).size()), 0);// the span gets closed

        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesSpanInTbody()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesSpanInTbody()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesSpanInTbody()|7", org.jsoup.nodes.Document.class, doc).select("table")).size()), 1);// only one table

    }

    @org.junit.Test
    public void handlesUnclosedTitleAtEof() {
        org.junit.Assert.assertEquals("Data", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitleAtEof()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitleAtEof()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>Data")).title()));
        org.junit.Assert.assertEquals("Data<", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitleAtEof()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitleAtEof()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>Data<")).title()));
        org.junit.Assert.assertEquals("Data</", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitleAtEof()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitleAtEof()|4", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>Data</")).title()));
        org.junit.Assert.assertEquals("Data</t", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitleAtEof()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitleAtEof()|6", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>Data</t")).title()));
        org.junit.Assert.assertEquals("Data</ti", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitleAtEof()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitleAtEof()|8", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>Data</ti")).title()));
        org.junit.Assert.assertEquals("Data", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitleAtEof()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitleAtEof()|10", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>Data</title>")).title()));
        org.junit.Assert.assertEquals("Data", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitleAtEof()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitleAtEof()|12", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>Data</title >")).title()));
    }

    @org.junit.Test
    public void handlesUnclosedTitle() {
        org.jsoup.nodes.Document one = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitle()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>One <b>Two <b>Three</TITLE><p>Test</p>"));// has title, so <b> is plain text

        org.junit.Assert.assertEquals("One <b>Two <b>Three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitle()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitle()|1", org.jsoup.nodes.Document.class, one).title()));
        org.junit.Assert.assertEquals("Test", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitle()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitle()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitle()|4", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitle()|3", org.jsoup.nodes.Document.class, one).select("p")).first()).text()));
        org.jsoup.nodes.Document two = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitle()|7", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>One<b>Two <p>Test</p>"));// no title, so <b> causes </title> breakout

        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitle()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitle()|8", org.jsoup.nodes.Document.class, two).title()));
        org.junit.Assert.assertEquals("<b>Two <p>Test</p></b>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitle()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitle()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedTitle()|10", org.jsoup.nodes.Document.class, two).body()).html()));
    }

    @org.junit.Test
    public void handlesUnclosedScriptAtEof() {
        org.junit.Assert.assertEquals("Data", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|1", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>Data")).select("script")).first()).data()));
        org.junit.Assert.assertEquals("Data<", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|4", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>Data<")).select("script")).first()).data()));
        org.junit.Assert.assertEquals("Data</sc", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|8", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>Data</sc")).select("script")).first()).data()));
        org.junit.Assert.assertEquals("Data</-sc", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|13", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|12", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>Data</-sc")).select("script")).first()).data()));
        org.junit.Assert.assertEquals("Data</sc-", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|17", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|16", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>Data</sc-")).select("script")).first()).data()));
        org.junit.Assert.assertEquals("Data</sc--", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|22", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|21", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|20", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>Data</sc--")).select("script")).first()).data()));
        org.junit.Assert.assertEquals("Data", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|26", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|25", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|24", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>Data</script>")).select("script")).first()).data()));
        org.junit.Assert.assertEquals("Data</script", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|30", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|29", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|28", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>Data</script")).select("script")).first()).data()));
        org.junit.Assert.assertEquals("Data", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|34", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|33", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|32", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>Data</script ")).select("script")).first()).data()));
        org.junit.Assert.assertEquals("Data", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|39", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|38", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|37", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|36", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>Data</script n")).select("script")).first()).data()));
        org.junit.Assert.assertEquals("Data", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|43", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|42", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|41", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|40", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>Data</script n=")).select("script")).first()).data()));
        org.junit.Assert.assertEquals("Data", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|47", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|46", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|45", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|44", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>Data</script n=\"")).select("script")).first()).data()));
        org.junit.Assert.assertEquals("Data", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|51", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|50", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|49", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedScriptAtEof()|48", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>Data</script n=\"p")).select("script")).first()).data()));
    }

    @org.junit.Test
    public void handlesUnclosedRawtextAtEof() {
        org.junit.Assert.assertEquals("Data", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|1", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<style>Data")).select("style")).first()).data()));
        org.junit.Assert.assertEquals("Data</st", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|4", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<style>Data</st")).select("style")).first()).data()));
        org.junit.Assert.assertEquals("Data", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|8", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<style>Data</style>")).select("style")).first()).data()));
        org.junit.Assert.assertEquals("Data</style", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|13", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|12", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<style>Data</style")).select("style")).first()).data()));
        org.junit.Assert.assertEquals("Data</-style", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|17", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|16", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<style>Data</-style")).select("style")).first()).data()));
        org.junit.Assert.assertEquals("Data</style-", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|22", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|21", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|20", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<style>Data</style-")).select("style")).first()).data()));
        org.junit.Assert.assertEquals("Data</style--", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|26", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|25", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesUnclosedRawtextAtEof()|24", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<style>Data</style--")).select("style")).first()).data()));
    }

    @org.junit.Test
    public void noImplicitFormForTextAreas() {
        // old jsoup parser would create implicit forms for form children like <textarea>, but no more
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|noImplicitFormForTextAreas()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<textarea>One</textarea>"));
        org.junit.Assert.assertEquals("<textarea>One</textarea>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|noImplicitFormForTextAreas()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|noImplicitFormForTextAreas()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|noImplicitFormForTextAreas()|1", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void handlesEscapedScript() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesEscapedScript()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script><!-- one <script>Blah</script> --></script>"));
        org.junit.Assert.assertEquals("<!-- one <script>Blah</script> -->", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesEscapedScript()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesEscapedScript()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesEscapedScript()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesEscapedScript()|1", org.jsoup.nodes.Document.class, doc).select("script")).first()).data()));
    }

    @org.junit.Test
    public void handles0CharacterAsText() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handles0CharacterAsText()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("0<p>0</p>"));
        org.junit.Assert.assertEquals("0\n<p>0</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handles0CharacterAsText()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handles0CharacterAsText()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handles0CharacterAsText()|1", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void handlesNullInData() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesNullInData()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p id=\u0000>Blah \u0000</p>"));
        org.junit.Assert.assertEquals("<p id=\"\ufffd\">Blah \u0000</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesNullInData()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesNullInData()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesNullInData()|1", org.jsoup.nodes.Document.class, doc).body()).html()));// replaced in attr, NOT replaced in data

    }

    @org.junit.Test
    public void handlesNullInComments() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesNullInComments()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<body><!-- \u0000 \u0000 -->"));
        org.junit.Assert.assertEquals("<!-- \ufffd \ufffd -->", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesNullInComments()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesNullInComments()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesNullInComments()|1", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void handlesNewlinesAndWhitespaceInTag() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesNewlinesAndWhitespaceInTag()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<a \n href=\"one\" \r\n id=\"two\" \f >"));
        org.junit.Assert.assertEquals("<a href=\"one\" id=\"two\"></a>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesNewlinesAndWhitespaceInTag()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesNewlinesAndWhitespaceInTag()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesNewlinesAndWhitespaceInTag()|1", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void handlesWhitespaceInoDocType() {
        java.lang.String html = "<!DOCTYPE html\r\n" + ("      PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n" + "      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesWhitespaceInoDocType()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesWhitespaceInoDocType()|0", html)));
        org.junit.Assert.assertEquals("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesWhitespaceInoDocType()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.parser.HtmlParserTest|handlesWhitespaceInoDocType()|3", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesWhitespaceInoDocType()|2", org.jsoup.nodes.Document.class, doc).childNode(0)).outerHtml()));
    }

    @org.junit.Test
    public void tracksErrorsWhenRequested() {
        java.lang.String html = "<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo";
        org.jsoup.parser.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|1", org.jsoup.parser.Parser.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|0", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.htmlParser()).setTrackErrors(500));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|4", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|2", html), "http://example.com", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|3", org.jsoup.parser.Parser.class, parser)));
        java.util.List<org.jsoup.parser.ParseError> errors = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseErrorList>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|6", org.jsoup.parser.ParseErrorList.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|5", org.jsoup.parser.Parser.class, parser).getErrors());
        org.junit.Assert.assertEquals(5, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.parser.ParseError>>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|7", java.util.List.class, errors).size()));
        org.junit.Assert.assertEquals("20: Attributes incorrectly present on end tag", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseError>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|10", org.jsoup.parser.ParseError.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.parser.ParseError>>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|9", java.util.List.class, errors).get(0)).toString()));
        org.junit.Assert.assertEquals("35: Unexpected token [Doctype] when in state [InBody]", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseError>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|13", org.jsoup.parser.ParseError.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.parser.ParseError>>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|12", java.util.List.class, errors).get(1)).toString()));
        org.junit.Assert.assertEquals("36: Invalid character reference: invalid named referenece 'arrgh'", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseError>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|16", org.jsoup.parser.ParseError.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.parser.ParseError>>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|15", java.util.List.class, errors).get(2)).toString()));
        org.junit.Assert.assertEquals("50: Tag cannot be self closing; not a void tag", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseError>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|19", org.jsoup.parser.ParseError.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.parser.ParseError>>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|18", java.util.List.class, errors).get(3)).toString()));
        org.junit.Assert.assertEquals("61: Unexpectedly reached end of file (EOF) in input state [TagName]", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseError>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|22", org.jsoup.parser.ParseError.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.parser.ParseError>>observeState("org.jsoup.parser.HtmlParserTest|tracksErrorsWhenRequested()|21", java.util.List.class, errors).get(4)).toString()));
    }

    @org.junit.Test
    public void tracksLimitedErrorsWhenRequested() {
        java.lang.String html = "<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo";
        org.jsoup.parser.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|1", org.jsoup.parser.Parser.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|0", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.htmlParser()).setTrackErrors(3));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|2", org.jsoup.parser.Parser.class, parser).parseInput(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|3", html), "http://example.com"));
        java.util.List<org.jsoup.parser.ParseError> errors = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseErrorList>observeState("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|6", org.jsoup.parser.ParseErrorList.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|5", org.jsoup.parser.Parser.class, parser).getErrors());
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.parser.ParseError>>observeState("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|7", java.util.List.class, errors).size()));
        org.junit.Assert.assertEquals("20: Attributes incorrectly present on end tag", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseError>observeState("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|10", org.jsoup.parser.ParseError.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.parser.ParseError>>observeState("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|9", java.util.List.class, errors).get(0)).toString()));
        org.junit.Assert.assertEquals("35: Unexpected token [Doctype] when in state [InBody]", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseError>observeState("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|13", org.jsoup.parser.ParseError.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.parser.ParseError>>observeState("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|12", java.util.List.class, errors).get(1)).toString()));
        org.junit.Assert.assertEquals("36: Invalid character reference: invalid named referenece 'arrgh'", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseError>observeState("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|16", org.jsoup.parser.ParseError.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.parser.ParseError>>observeState("org.jsoup.parser.HtmlParserTest|tracksLimitedErrorsWhenRequested()|15", java.util.List.class, errors).get(2)).toString()));
    }

    @org.junit.Test
    public void noErrorsByDefault() {
        java.lang.String html = "<p>One</p href='no'>&arrgh;<font /><br /><foo";
        org.jsoup.parser.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|noErrorsByDefault()|0", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.htmlParser());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|noErrorsByDefault()|3", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|noErrorsByDefault()|1", html), "http://example.com", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|noErrorsByDefault()|2", org.jsoup.parser.Parser.class, parser)));
        java.util.List<org.jsoup.parser.ParseError> errors = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseErrorList>observeState("org.jsoup.parser.HtmlParserTest|noErrorsByDefault()|5", org.jsoup.parser.ParseErrorList.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|noErrorsByDefault()|4", org.jsoup.parser.Parser.class, parser).getErrors());
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|noErrorsByDefault()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.parser.ParseError>>observeState("org.jsoup.parser.HtmlParserTest|noErrorsByDefault()|6", java.util.List.class, errors).size()));
    }

    @org.junit.Test
    public void handlesCommentsInTable() {
        java.lang.String html = "<table><tr><td>text</td><!-- Comment --></tr></table>";
        org.jsoup.nodes.Document node = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesCommentsInTable()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parseBodyFragment(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCommentsInTable()|0", html)));
        org.junit.Assert.assertEquals("<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCommentsInTable()|4", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesCommentsInTable()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesCommentsInTable()|2", org.jsoup.nodes.Document.class, node).outerHtml()))));
    }

    @org.junit.Test
    public void handlesQuotesInCommentsInScripts() {
        java.lang.String html = "<script>\n" + ((("  <!--\n" + "    document.write(\'</scr\' + \'ipt>\');\n") + "  // -->\n") + "</script>");
        org.jsoup.nodes.Document node = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesQuotesInCommentsInScripts()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parseBodyFragment(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesQuotesInCommentsInScripts()|0", html)));
        org.junit.Assert.assertEquals(("<script>\n" + ((("  <!--\n" + "    document.write(\'</scr\' + \'ipt>\');\n") + "  // -->\n") + "</script>")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesQuotesInCommentsInScripts()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesQuotesInCommentsInScripts()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesQuotesInCommentsInScripts()|2", org.jsoup.nodes.Document.class, node).body()).html()));
    }

    @org.junit.Test
    public void handleNullContextInParseFragment() {
        java.lang.String html = "<ol><li>One</li></ol><p>Two</p>";
        java.util.List<org.jsoup.nodes.Node> nodes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.HtmlParserTest|handleNullContextInParseFragment()|1", java.util.List.class, org.jsoup.parser.Parser.parseFragment(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handleNullContextInParseFragment()|0", html), null, "http://example.com/"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handleNullContextInParseFragment()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.HtmlParserTest|handleNullContextInParseFragment()|2", java.util.List.class, nodes).size()));// returns <html> node (not document) -- no context means doc gets created

        org.junit.Assert.assertEquals("html", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handleNullContextInParseFragment()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.parser.HtmlParserTest|handleNullContextInParseFragment()|5", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.HtmlParserTest|handleNullContextInParseFragment()|4", java.util.List.class, nodes).get(0)).nodeName()));
        org.junit.Assert.assertEquals("<html> <head></head> <body> <ol> <li>One</li> </ol> <p>Two</p> </body> </html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handleNullContextInParseFragment()|10", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handleNullContextInParseFragment()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.parser.HtmlParserTest|handleNullContextInParseFragment()|8", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.HtmlParserTest|handleNullContextInParseFragment()|7", java.util.List.class, nodes).get(0)).outerHtml()))));
    }

    @org.junit.Test
    public void doesNotFindShortestMatchingEntity() {
        // previous behaviour was to identify a possible entity, then chomp down the string until a match was found.
        // (as defined in html5.) However in practise that lead to spurious matches against the author's intent.
        java.lang.String html = "One &clubsuite; &clubsuit;";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|doesNotFindShortestMatchingEntity()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|doesNotFindShortestMatchingEntity()|0", html)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|doesNotFindShortestMatchingEntity()|2", org.jsoup.internal.StringUtil.normaliseWhitespace("One &amp;clubsuite; ♣")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|doesNotFindShortestMatchingEntity()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|doesNotFindShortestMatchingEntity()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|doesNotFindShortestMatchingEntity()|3", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void relaxedBaseEntityMatchAndStrictExtendedMatch() {
        // extended entities need a ; at the end to match, base does not
        java.lang.String html = "&amp &quot &reg &icy &hopf &icy; &hopf;";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|relaxedBaseEntityMatchAndStrictExtendedMatch()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|relaxedBaseEntityMatchAndStrictExtendedMatch()|0", html)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.parser.HtmlParserTest|relaxedBaseEntityMatchAndStrictExtendedMatch()|6", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.parser.HtmlParserTest|relaxedBaseEntityMatchAndStrictExtendedMatch()|5", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.parser.HtmlParserTest|relaxedBaseEntityMatchAndStrictExtendedMatch()|3", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|relaxedBaseEntityMatchAndStrictExtendedMatch()|2", org.jsoup.nodes.Document.class, doc).outputSettings()).escapeMode(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Entities.EscapeMode>observeState("org.jsoup.parser.HtmlParserTest|relaxedBaseEntityMatchAndStrictExtendedMatch()|4", org.jsoup.nodes.Entities.EscapeMode.class, org.jsoup.nodes.Entities.EscapeMode.extended))).charset("ascii")// modifies output only to clarify test
        );
        org.junit.Assert.assertEquals("&amp; \" &reg; &amp;icy &amp;hopf &icy; &hopf;", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|relaxedBaseEntityMatchAndStrictExtendedMatch()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|relaxedBaseEntityMatchAndStrictExtendedMatch()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|relaxedBaseEntityMatchAndStrictExtendedMatch()|7", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void handlesXmlDeclarationAsBogusComment() {
        java.lang.String html = "<?xml encoding='UTF-8' ?><body>One</body>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesXmlDeclarationAsBogusComment()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesXmlDeclarationAsBogusComment()|0", html)));
        org.junit.Assert.assertEquals("<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesXmlDeclarationAsBogusComment()|4", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesXmlDeclarationAsBogusComment()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesXmlDeclarationAsBogusComment()|2", org.jsoup.nodes.Document.class, doc).outerHtml()))));
    }

    @org.junit.Test
    public void handlesTagsInTextarea() {
        java.lang.String html = "<textarea><p>Jsoup</p></textarea>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesTagsInTextarea()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesTagsInTextarea()|0", html)));
        org.junit.Assert.assertEquals("<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesTagsInTextarea()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesTagsInTextarea()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesTagsInTextarea()|2", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    // form tests
    @org.junit.Test
    public void createsFormElements() {
        java.lang.String html = "<body><form><input id=1><input id=2></form></body>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|createsFormElements()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsFormElements()|0", html)));
        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsFormElements()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|createsFormElements()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|createsFormElements()|2", org.jsoup.nodes.Document.class, doc).select("form")).first());
        org.junit.Assert.assertTrue("Is form element", ((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsFormElements()|5", org.jsoup.nodes.Element.class, el)) instanceof org.jsoup.nodes.FormElement));
        org.jsoup.nodes.FormElement form = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.FormElement>observeState("org.jsoup.parser.HtmlParserTest|createsFormElements()|6", org.jsoup.nodes.FormElement.class, ((org.jsoup.nodes.FormElement) (el)));
        org.jsoup.select.Elements controls = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|createsFormElements()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.FormElement>observeState("org.jsoup.parser.HtmlParserTest|createsFormElements()|7", org.jsoup.nodes.FormElement.class, form).elements());
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsFormElements()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|createsFormElements()|9", org.jsoup.select.Elements.class, controls).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsFormElements()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsFormElements()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|createsFormElements()|11", org.jsoup.select.Elements.class, controls).get(0)).id()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|createsFormElements()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|createsFormElements()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|createsFormElements()|14", org.jsoup.select.Elements.class, controls).get(1)).id()));
    }

    @org.junit.Test
    public void associatedFormControlsWithDisjointForms() {
        // form gets closed, isn't parent of controls
        java.lang.String html = "<table><tr><form><input type=hidden id=1><td><input type=text id=2></td><tr></table>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|0", html)));
        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|2", org.jsoup.nodes.Document.class, doc).select("form")).first());
        org.junit.Assert.assertTrue("Is form element", ((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|5", org.jsoup.nodes.Element.class, el)) instanceof org.jsoup.nodes.FormElement));
        org.jsoup.nodes.FormElement form = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.FormElement>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|6", org.jsoup.nodes.FormElement.class, ((org.jsoup.nodes.FormElement) (el)));
        org.jsoup.select.Elements controls = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.FormElement>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|7", org.jsoup.nodes.FormElement.class, form).elements());
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|9", org.jsoup.select.Elements.class, controls).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|11", org.jsoup.select.Elements.class, controls).get(0)).id()));
        org.junit.Assert.assertEquals("2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|14", org.jsoup.select.Elements.class, controls).get(1)).id()));
        org.junit.Assert.assertEquals("<table><tbody><tr><form></form><input type=\"hidden\" id=\"1\"><td><input type=\"text\" id=\"2\"></td></tr><tr></tr></tbody></table>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|20", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|associatedFormControlsWithDisjointForms()|17", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void handlesInputInTable() {
        java.lang.String h = "<body>\n" + (((("<input type=\"hidden\" name=\"a\" value=\"\">\n" + "<table>\n") + "<input type=\"hidden\" name=\"b\" value=\"\" />\n") + "</table>\n") + "</body>");
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesInputInTable()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesInputInTable()|0", h)));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesInputInTable()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesInputInTable()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesInputInTable()|2", org.jsoup.nodes.Document.class, doc).select("table input")).size()));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesInputInTable()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesInputInTable()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesInputInTable()|5", org.jsoup.nodes.Document.class, doc).select("input")).size()));
    }

    @org.junit.Test
    public void convertsImageToImg() {
        // image to img, unless in a svg. old html cruft.
        java.lang.String h = "<body><image><svg><image /></svg></body>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|convertsImageToImg()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|convertsImageToImg()|0", h)));
        org.junit.Assert.assertEquals("<img>\n<svg>\n <image />\n</svg>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|convertsImageToImg()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|convertsImageToImg()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|convertsImageToImg()|2", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void handlesInvalidDoctypes() {
        // would previously throw invalid name exception on empty doctype
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesInvalidDoctypes()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<!DOCTYPE>"));
        org.junit.Assert.assertEquals("<!doctype> <html> <head></head> <body></body> </html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesInvalidDoctypes()|3", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesInvalidDoctypes()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesInvalidDoctypes()|1", org.jsoup.nodes.Document.class, doc).outerHtml()))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesInvalidDoctypes()|4", org.jsoup.nodes.Document.class, (doc = org.jsoup.Jsoup.parse("<!DOCTYPE><html><p>Foo</p></html>")));
        org.junit.Assert.assertEquals("<!doctype> <html> <head></head> <body> <p>Foo</p> </body> </html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesInvalidDoctypes()|7", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesInvalidDoctypes()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesInvalidDoctypes()|5", org.jsoup.nodes.Document.class, doc).outerHtml()))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesInvalidDoctypes()|8", org.jsoup.nodes.Document.class, (doc = org.jsoup.Jsoup.parse("<!DOCTYPE \u0000>")));
        org.junit.Assert.assertEquals("<!doctype �> <html> <head></head> <body></body> </html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesInvalidDoctypes()|11", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesInvalidDoctypes()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesInvalidDoctypes()|9", org.jsoup.nodes.Document.class, doc).outerHtml()))));
    }

    @org.junit.Test
    public void handlesManyChildren() {
        // Arrange
        java.lang.StringBuilder longBody = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|0", java.lang.StringBuilder.class, new java.lang.StringBuilder(500000));
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|1", i)) < 25000; i++) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|5", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|4", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|2", java.lang.StringBuilder.class, longBody).append(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|3", i))).append("<br>"));
        }
        // Act
        long start = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|6", java.lang.System.currentTimeMillis());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|9", org.jsoup.nodes.Document.class, org.jsoup.parser.Parser.parseBodyFragment(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|7", java.lang.StringBuilder.class, longBody).toString()), ""));
        // Assert
        org.junit.Assert.assertEquals(50000, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|10", org.jsoup.nodes.Document.class, doc).body()).childNodeSize()));
        org.junit.Assert.assertTrue((((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|13", java.lang.System.currentTimeMillis())) - (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesManyChildren()|14", start))) < 1000));
    }

    @org.junit.Test
    public void handlesDeepStack() {
        // inspired by http://sv.stargate.wikia.com/wiki/M2J and https://github.com/jhy/jsoup/issues/955
        // I didn't put it in the integration tests, because explorer and intellij kept dieing trying to preview/index it
        // Arrange
        java.lang.StringBuilder longBody = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|0", java.lang.StringBuilder.class, new java.lang.StringBuilder(500000));
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|1", i)) < 25000; i++) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|5", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|4", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|2", java.lang.StringBuilder.class, longBody).append(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|3", i))).append("<dl><dd>"));
        }
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|6", i)) < 25000; i++) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|10", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|9", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|7", java.lang.StringBuilder.class, longBody).append(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|8", i))).append("</dd></dl>"));
        }
        // Act
        long start = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|11", java.lang.System.currentTimeMillis());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|14", org.jsoup.nodes.Document.class, org.jsoup.parser.Parser.parseBodyFragment(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|12", java.lang.StringBuilder.class, longBody).toString()), ""));
        // Assert
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|15", org.jsoup.nodes.Document.class, doc).body()).childNodeSize()));
        org.junit.Assert.assertEquals(25000, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|19", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|18", org.jsoup.nodes.Document.class, doc).select("dd")).size()));
        org.junit.Assert.assertTrue((((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|21", java.lang.System.currentTimeMillis())) - (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesDeepStack()|22", start))) < 2000));
    }

    @org.junit.Test
    public void testInvalidTableContents() throws java.io.IOException {
        java.io.File in = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|0", java.io.File.class, org.jsoup.integration.ParseTest.getFile("/htmltests/table-invalid-elements.html"));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|1", java.io.File.class, in), "UTF-8"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|5", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|4", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|3", org.jsoup.nodes.Document.class, doc).outputSettings()).prettyPrint(true));
        java.lang.String rendered = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|6", org.jsoup.nodes.Document.class, doc).toString());
        int endOfEmail = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|9", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|8", rendered).indexOf("Comment"));
        int guarantee = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|11", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|10", rendered).indexOf("Why am I here?"));
        org.junit.Assert.assertTrue("Comment not found", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|12", endOfEmail)) > (-1)));
        org.junit.Assert.assertTrue("Search text not found", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|13", guarantee)) > (-1)));
        org.junit.Assert.assertTrue("Search text did not come after comment", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|14", guarantee)) > (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testInvalidTableContents()|15", endOfEmail))));
    }

    @org.junit.Test
    public void testNormalisesIsIndex() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testNormalisesIsIndex()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<body><isindex action='/submit'></body>"));
        java.lang.String html = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testNormalisesIsIndex()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testNormalisesIsIndex()|1", org.jsoup.nodes.Document.class, doc).outerHtml());
        org.junit.Assert.assertEquals("<form action=\"/submit\"> <hr> <label>This is a searchable index. Enter search keywords: <input name=\"isindex\"></label> <hr> </form>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testNormalisesIsIndex()|6", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testNormalisesIsIndex()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testNormalisesIsIndex()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testNormalisesIsIndex()|3", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void testReinsertionModeForThCelss() {
        java.lang.String body = "<body> <table> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testReinsertionModeForThCelss()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testReinsertionModeForThCelss()|0", body)));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testReinsertionModeForThCelss()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|testReinsertionModeForThCelss()|4", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testReinsertionModeForThCelss()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testReinsertionModeForThCelss()|2", org.jsoup.nodes.Document.class, doc).body()).children()).size()));
    }

    @org.junit.Test
    public void testUsingSingleQuotesInQueries() {
        java.lang.String body = "<body> <div class='main'>hello</div></body>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testUsingSingleQuotesInQueries()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testUsingSingleQuotesInQueries()|0", body)));
        org.jsoup.select.Elements main = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|testUsingSingleQuotesInQueries()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testUsingSingleQuotesInQueries()|2", org.jsoup.nodes.Document.class, doc).select("div[class='main']"));
        org.junit.Assert.assertEquals("hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testUsingSingleQuotesInQueries()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|testUsingSingleQuotesInQueries()|4", org.jsoup.select.Elements.class, main).text()));
    }

    @org.junit.Test
    public void testSupportsNonAsciiTags() {
        java.lang.String body = "<進捗推移グラフ>Yes</進捗推移グラフ><русский-тэг>Correct</<русский-тэг>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testSupportsNonAsciiTags()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testSupportsNonAsciiTags()|0", body)));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|testSupportsNonAsciiTags()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testSupportsNonAsciiTags()|2", org.jsoup.nodes.Document.class, doc).select("進捗推移グラフ"));
        org.junit.Assert.assertEquals("Yes", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testSupportsNonAsciiTags()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|testSupportsNonAsciiTags()|4", org.jsoup.select.Elements.class, els).text()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|testSupportsNonAsciiTags()|7", org.jsoup.select.Elements.class, (els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testSupportsNonAsciiTags()|6", org.jsoup.nodes.Document.class, doc).select("русский-тэг")));
        org.junit.Assert.assertEquals("Correct", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testSupportsNonAsciiTags()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|testSupportsNonAsciiTags()|8", org.jsoup.select.Elements.class, els).text()));
    }

    @org.junit.Test
    public void testSupportsPartiallyNonAsciiTags() {
        java.lang.String body = "<div>Check</divá>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testSupportsPartiallyNonAsciiTags()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testSupportsPartiallyNonAsciiTags()|0", body)));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|testSupportsPartiallyNonAsciiTags()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testSupportsPartiallyNonAsciiTags()|2", org.jsoup.nodes.Document.class, doc).select("div"));
        org.junit.Assert.assertEquals("Check", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testSupportsPartiallyNonAsciiTags()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|testSupportsPartiallyNonAsciiTags()|4", org.jsoup.select.Elements.class, els).text()));
    }

    @org.junit.Test
    public void testFragment() {
        // make sure when parsing a body fragment, a script tag at start goes into the body
        java.lang.String html = "<script type=\"text/javascript\">console.log(\'foo\');</script>\n" + ("<div id=\"somecontent\">some content</div>\n" + "<script type=\"text/javascript\">console.log(\'bar\');</script>");
        org.jsoup.nodes.Document body = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testFragment()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parseBodyFragment(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testFragment()|0", html)));
        org.junit.Assert.assertEquals(("<script type=\"text/javascript\">console.log(\'foo\');</script> \n" + ((("<div id=\"somecontent\">\n" + " some content\n") + "</div> \n") + "<script type=\"text/javascript\">console.log(\'bar\');</script>")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testFragment()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testFragment()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testFragment()|2", org.jsoup.nodes.Document.class, body).body()).html()));
    }

    @org.junit.Test
    public void testHtmlLowerCase() {
        java.lang.String html = "<!doctype HTML><DIV ID=1>One</DIV>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testHtmlLowerCase()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testHtmlLowerCase()|0", html)));
        org.junit.Assert.assertEquals("<!doctype html> <html> <head></head> <body> <div id=\"1\"> One </div> </body> </html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testHtmlLowerCase()|4", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testHtmlLowerCase()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testHtmlLowerCase()|2", org.jsoup.nodes.Document.class, doc).outerHtml()))));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testHtmlLowerCase()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testHtmlLowerCase()|5", org.jsoup.nodes.Document.class, doc).selectFirst("#1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testHtmlLowerCase()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testHtmlLowerCase()|7", org.jsoup.nodes.Element.class, div).after("<TaG>One</TaG>"));
        org.junit.Assert.assertEquals("<tag>One</tag>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testHtmlLowerCase()|12", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testHtmlLowerCase()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testHtmlLowerCase()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testHtmlLowerCase()|9", org.jsoup.nodes.Element.class, div).nextElementSibling()).outerHtml()))));
    }

    @org.junit.Test
    public void canPreserveTagCase() {
        org.jsoup.parser.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|0", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.htmlParser());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|3", org.jsoup.parser.Parser.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|1", org.jsoup.parser.Parser.class, parser).settings(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseSettings>observeState("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|2", org.jsoup.parser.ParseSettings.class, new org.jsoup.parser.ParseSettings(true, false))));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|5", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|4", org.jsoup.parser.Parser.class, parser).parseInput("<div id=1><SPAN ID=2>", ""));
        org.junit.Assert.assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN id=\"2\"></SPAN> </div> </body> </html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|8", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|6", org.jsoup.nodes.Document.class, doc).outerHtml()))));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|9", org.jsoup.nodes.Document.class, doc).selectFirst("#1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|11", org.jsoup.nodes.Element.class, div).after("<TaG ID=one>One</TaG>"));
        org.junit.Assert.assertEquals("<TaG id=\"one\">One</TaG>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|16", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveTagCase()|13", org.jsoup.nodes.Element.class, div).nextElementSibling()).outerHtml()))));
    }

    @org.junit.Test
    public void canPreserveAttributeCase() {
        org.jsoup.parser.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|0", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.htmlParser());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|3", org.jsoup.parser.Parser.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|1", org.jsoup.parser.Parser.class, parser).settings(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseSettings>observeState("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|2", org.jsoup.parser.ParseSettings.class, new org.jsoup.parser.ParseSettings(false, true))));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|5", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|4", org.jsoup.parser.Parser.class, parser).parseInput("<div id=1><SPAN ID=2>", ""));
        org.junit.Assert.assertEquals("<html> <head></head> <body> <div id=\"1\"> <span ID=\"2\"></span> </div> </body> </html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|8", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|6", org.jsoup.nodes.Document.class, doc).outerHtml()))));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|9", org.jsoup.nodes.Document.class, doc).selectFirst("#1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|11", org.jsoup.nodes.Element.class, div).after("<TaG ID=one>One</TaG>"));
        org.junit.Assert.assertEquals("<tag ID=\"one\">One</tag>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|16", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveAttributeCase()|13", org.jsoup.nodes.Element.class, div).nextElementSibling()).outerHtml()))));
    }

    @org.junit.Test
    public void canPreserveBothCase() {
        org.jsoup.parser.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|0", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.htmlParser());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|3", org.jsoup.parser.Parser.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|1", org.jsoup.parser.Parser.class, parser).settings(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseSettings>observeState("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|2", org.jsoup.parser.ParseSettings.class, new org.jsoup.parser.ParseSettings(true, true))));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|5", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|4", org.jsoup.parser.Parser.class, parser).parseInput("<div id=1><SPAN ID=2>", ""));
        org.junit.Assert.assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN ID=\"2\"></SPAN> </div> </body> </html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|8", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|6", org.jsoup.nodes.Document.class, doc).outerHtml()))));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|9", org.jsoup.nodes.Document.class, doc).selectFirst("#1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|11", org.jsoup.nodes.Element.class, div).after("<TaG ID=one>One</TaG>"));
        org.junit.Assert.assertEquals("<TaG ID=\"one\">One</TaG>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|16", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|canPreserveBothCase()|13", org.jsoup.nodes.Element.class, div).nextElementSibling()).outerHtml()))));
    }

    @org.junit.Test
    public void handlesControlCodeInAttributeName() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesControlCodeInAttributeName()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p><a \u0006=foo>One</a><a/\u0006=bar><a foo\u0006=bar>Two</a></p>"));
        org.junit.Assert.assertEquals("<p><a>One</a><a></a><a foo=\"bar\">Two</a></p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesControlCodeInAttributeName()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesControlCodeInAttributeName()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesControlCodeInAttributeName()|1", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void caseSensitiveParseTree() {
        java.lang.String html = "<r><X>A</X><y>B</y></r>";
        org.jsoup.parser.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|caseSensitiveParseTree()|0", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.htmlParser());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|caseSensitiveParseTree()|3", org.jsoup.parser.Parser.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|caseSensitiveParseTree()|1", org.jsoup.parser.Parser.class, parser).settings(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseSettings>observeState("org.jsoup.parser.HtmlParserTest|caseSensitiveParseTree()|2", org.jsoup.parser.ParseSettings.class, org.jsoup.parser.ParseSettings.preserveCase)));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|caseSensitiveParseTree()|6", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|caseSensitiveParseTree()|4", org.jsoup.parser.Parser.class, parser).parseInput(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|caseSensitiveParseTree()|5", html), ""));
        org.junit.Assert.assertEquals("<r> <X> A </X> <y> B </y> </r>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|caseSensitiveParseTree()|10", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|caseSensitiveParseTree()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|caseSensitiveParseTree()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|caseSensitiveParseTree()|7", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void caseInsensitiveParseTree() {
        java.lang.String html = "<r><X>A</X><y>B</y></r>";
        org.jsoup.parser.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|caseInsensitiveParseTree()|0", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.htmlParser());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|caseInsensitiveParseTree()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|caseInsensitiveParseTree()|1", org.jsoup.parser.Parser.class, parser).parseInput(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|caseInsensitiveParseTree()|2", html), ""));
        org.junit.Assert.assertEquals("<r> <x> A </x> <y> B </y> </r>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|caseInsensitiveParseTree()|7", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|caseInsensitiveParseTree()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|caseInsensitiveParseTree()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|caseInsensitiveParseTree()|4", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void normalizesDiscordantTags() {
        org.jsoup.nodes.Document document = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|normalizesDiscordantTags()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div>test</DIV><p></p>"));
        org.junit.Assert.assertEquals("<div>\n test\n</div>\n<p></p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|normalizesDiscordantTags()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|normalizesDiscordantTags()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|normalizesDiscordantTags()|1", org.jsoup.nodes.Document.class, document).body()).html()));
    }

    @org.junit.Test
    public void selfClosingVoidIsNotAnError() {
        java.lang.String html = "<p>test<br/>test<br/></p>";
        org.jsoup.parser.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|1", org.jsoup.parser.Parser.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|0", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.htmlParser()).setTrackErrors(5));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|2", org.jsoup.parser.Parser.class, parser).parseInput(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|3", html), ""));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseErrorList>observeState("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|6", org.jsoup.parser.ParseErrorList.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|5", org.jsoup.parser.Parser.class, parser).getErrors()).size()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|10", org.jsoup.Jsoup.isValid(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|8", html), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.safety.Whitelist>observeState("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|9", org.jsoup.safety.Whitelist.class, org.jsoup.safety.Whitelist.basic()))));
        java.lang.String clean = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|13", org.jsoup.Jsoup.clean(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|11", html), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.safety.Whitelist>observeState("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|12", org.jsoup.safety.Whitelist.class, org.jsoup.safety.Whitelist.basic())));
        org.junit.Assert.assertEquals("<p>test<br>test<br></p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingVoidIsNotAnError()|14", clean));
    }

    @org.junit.Test
    public void selfClosingOnNonvoidIsError() {
        java.lang.String html = "<p>test</p><div /><div>Two</div>";
        org.jsoup.parser.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|1", org.jsoup.parser.Parser.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|0", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.htmlParser()).setTrackErrors(5));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|2", org.jsoup.parser.Parser.class, parser).parseInput(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|3", html), ""));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseErrorList>observeState("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|6", org.jsoup.parser.ParseErrorList.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|5", org.jsoup.parser.Parser.class, parser).getErrors()).size()));
        org.junit.Assert.assertEquals("18: Tag cannot be self closing; not a void tag", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseError>observeState("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|10", org.jsoup.parser.ParseError.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseErrorList>observeState("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|9", org.jsoup.parser.ParseErrorList.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|8", org.jsoup.parser.Parser.class, parser).getErrors()).get(0)).toString()));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|14", org.jsoup.Jsoup.isValid(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|12", html), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.safety.Whitelist>observeState("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|13", org.jsoup.safety.Whitelist.class, org.jsoup.safety.Whitelist.relaxed()))));
        java.lang.String clean = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|17", org.jsoup.Jsoup.clean(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|15", html), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.safety.Whitelist>observeState("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|16", org.jsoup.safety.Whitelist.class, org.jsoup.safety.Whitelist.relaxed())));
        org.junit.Assert.assertEquals("<p>test</p> <div></div> <div> Two </div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|19", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|selfClosingOnNonvoidIsError()|18", clean))));
    }

    @org.junit.Test
    public void testTemplateInsideTable() throws java.io.IOException {
        java.io.File in = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.parser.HtmlParserTest|testTemplateInsideTable()|0", java.io.File.class, org.jsoup.integration.ParseTest.getFile("/htmltests/table-polymer-template.html"));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testTemplateInsideTable()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.parser.HtmlParserTest|testTemplateInsideTable()|1", java.io.File.class, in), "UTF-8"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.parser.HtmlParserTest|testTemplateInsideTable()|5", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.parser.HtmlParserTest|testTemplateInsideTable()|4", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testTemplateInsideTable()|3", org.jsoup.nodes.Document.class, doc).outputSettings()).prettyPrint(true));
        org.jsoup.select.Elements templates = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|testTemplateInsideTable()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testTemplateInsideTable()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testTemplateInsideTable()|6", org.jsoup.nodes.Document.class, doc).body()).getElementsByTag("template"));
        for (org.jsoup.nodes.Element template : eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|testTemplateInsideTable()|9", org.jsoup.select.Elements.class, templates)) {
            org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testTemplateInsideTable()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.HtmlParserTest|testTemplateInsideTable()|11", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|testTemplateInsideTable()|10", org.jsoup.nodes.Element.class, template).childNodes()).size())) > 1));
        }
    }

    @org.junit.Test
    public void testHandlesDeepSpans() {
        java.lang.StringBuilder sb = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|0", java.lang.StringBuilder.class, new java.lang.StringBuilder());
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|1", i)) < 200; i++) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|3", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|2", java.lang.StringBuilder.class, sb).append("<span>"));
        }
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|5", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|4", java.lang.StringBuilder.class, sb).append("<p>One</p>"));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|8", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|6", java.lang.StringBuilder.class, sb).toString())));
        org.junit.Assert.assertEquals(200, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|10", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|9", org.jsoup.nodes.Document.class, doc).select("span")).size()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|13", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|testHandlesDeepSpans()|12", org.jsoup.nodes.Document.class, doc).select("p")).size()));
    }

    @org.junit.Test
    public void commentAtEnd() throws java.lang.Exception {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|commentAtEnd()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<!"));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.parser.HtmlParserTest|commentAtEnd()|2", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|commentAtEnd()|1", org.jsoup.nodes.Document.class, doc).childNode(0))) instanceof org.jsoup.nodes.Comment));
    }

    @org.junit.Test
    public void preSkipsFirstNewline() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|preSkipsFirstNewline()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<pre>\n\nOne\nTwo\n</pre>"));
        org.jsoup.nodes.Element pre = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|preSkipsFirstNewline()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|preSkipsFirstNewline()|1", org.jsoup.nodes.Document.class, doc).selectFirst("pre"));
        org.junit.Assert.assertEquals("One\nTwo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preSkipsFirstNewline()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|preSkipsFirstNewline()|3", org.jsoup.nodes.Element.class, pre).text()));
        org.junit.Assert.assertEquals("\nOne\nTwo\n", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|preSkipsFirstNewline()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|preSkipsFirstNewline()|5", org.jsoup.nodes.Element.class, pre).wholeText()));
    }

    @org.junit.Test
    public void handlesXmlDeclAndCommentsBeforeDoctype() throws java.io.IOException {
        java.io.File in = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.parser.HtmlParserTest|handlesXmlDeclAndCommentsBeforeDoctype()|0", java.io.File.class, org.jsoup.integration.ParseTest.getFile("/htmltests/comments.html"));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesXmlDeclAndCommentsBeforeDoctype()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.parser.HtmlParserTest|handlesXmlDeclAndCommentsBeforeDoctype()|1", java.io.File.class, in), "UTF-8"));
        org.junit.Assert.assertEquals("<!--?xml version=\"1.0\" encoding=\"utf-8\"?--> <!-- so --><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <!-- what --> <html xml:lang=\"en\" lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"> <!-- now --> <head> <!-- then --> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> <title>A Certain Kind of Test</title> </head> <body> <h1>Hello</h1>h1&gt; (There is a UTF8 hidden BOM at the top of this file.) </body> </html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesXmlDeclAndCommentsBeforeDoctype()|5", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesXmlDeclAndCommentsBeforeDoctype()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesXmlDeclAndCommentsBeforeDoctype()|3", org.jsoup.nodes.Document.class, doc).html()))));
        org.junit.Assert.assertEquals("A Certain Kind of Test", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|handlesXmlDeclAndCommentsBeforeDoctype()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.HtmlParserTest|handlesXmlDeclAndCommentsBeforeDoctype()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.HtmlParserTest|handlesXmlDeclAndCommentsBeforeDoctype()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|handlesXmlDeclAndCommentsBeforeDoctype()|6", org.jsoup.nodes.Document.class, doc).head()).select("title")).text()));
    }

    @org.junit.Test
    public void fallbackToUtfIfCantEncode() throws java.io.IOException {
        // that charset can't be encoded, so make sure we flip to utf
        java.lang.String in = "<html><meta charset=\"ISO-2022-CN\"/>One</html>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|fallbackToUtfIfCantEncode()|3", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayInputStream>observeState("org.jsoup.parser.HtmlParserTest|fallbackToUtfIfCantEncode()|2", java.io.ByteArrayInputStream.class, new java.io.ByteArrayInputStream(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.parser.HtmlParserTest|fallbackToUtfIfCantEncode()|1", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|fallbackToUtfIfCantEncode()|0", in).getBytes()))), null, ""));
        org.junit.Assert.assertEquals("UTF-8", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|fallbackToUtfIfCantEncode()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.parser.HtmlParserTest|fallbackToUtfIfCantEncode()|5", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|fallbackToUtfIfCantEncode()|4", org.jsoup.nodes.Document.class, doc).charset()).name()));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|fallbackToUtfIfCantEncode()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|fallbackToUtfIfCantEncode()|7", org.jsoup.nodes.Document.class, doc).text()));
        java.lang.String html = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|fallbackToUtfIfCantEncode()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.HtmlParserTest|fallbackToUtfIfCantEncode()|9", org.jsoup.nodes.Document.class, doc).outerHtml());
        org.junit.Assert.assertEquals("<html><head><meta charset=\"UTF-8\"></head><body>One</body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|fallbackToUtfIfCantEncode()|12", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.HtmlParserTest|fallbackToUtfIfCantEncode()|11", html))));
    }
}

