package org.jsoup.parser;


/**
 * Tests XmlTreeBuilder.
 *
 * @author Jonathan Hedley
 */
public class XmlTreeBuilderTest {
    @org.junit.Test
    public void testSimpleXmlParse() {
        java.lang.String xml = "<doc id=2 href='/bar'>Foo <br /><link>One</link><link>Two</link></doc>";
        org.jsoup.parser.XmlTreeBuilder tb = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.XmlTreeBuilder>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSimpleXmlParse()|0", org.jsoup.parser.XmlTreeBuilder.class, new org.jsoup.parser.XmlTreeBuilder());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSimpleXmlParse()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.XmlTreeBuilder>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSimpleXmlParse()|1", org.jsoup.parser.XmlTreeBuilder.class, tb).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSimpleXmlParse()|2", xml), "http://foo.com/"));
        org.junit.Assert.assertEquals("<doc id=\"2\" href=\"/bar\">Foo <br /><link>One</link><link>Two</link></doc>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSimpleXmlParse()|6", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSimpleXmlParse()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSimpleXmlParse()|4", org.jsoup.nodes.Document.class, doc).html()))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSimpleXmlParse()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSimpleXmlParse()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSimpleXmlParse()|7", org.jsoup.nodes.Document.class, doc).getElementById("2")).absUrl("href")), "http://foo.com/bar");
    }

    @org.junit.Test
    public void testPopToClose() {
        // test: </val> closes Two, </bar> ignored
        java.lang.String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        org.jsoup.parser.XmlTreeBuilder tb = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.XmlTreeBuilder>observeState("org.jsoup.parser.XmlTreeBuilderTest|testPopToClose()|0", org.jsoup.parser.XmlTreeBuilder.class, new org.jsoup.parser.XmlTreeBuilder());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testPopToClose()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.XmlTreeBuilder>observeState("org.jsoup.parser.XmlTreeBuilderTest|testPopToClose()|1", org.jsoup.parser.XmlTreeBuilder.class, tb).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testPopToClose()|2", xml), "http://foo.com/"));
        org.junit.Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testPopToClose()|6", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testPopToClose()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testPopToClose()|4", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void testCommentAndDocType() {
        java.lang.String xml = "<!DOCTYPE HTML><!-- a comment -->One <qux />Two";
        org.jsoup.parser.XmlTreeBuilder tb = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.XmlTreeBuilder>observeState("org.jsoup.parser.XmlTreeBuilderTest|testCommentAndDocType()|0", org.jsoup.parser.XmlTreeBuilder.class, new org.jsoup.parser.XmlTreeBuilder());
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testCommentAndDocType()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.XmlTreeBuilder>observeState("org.jsoup.parser.XmlTreeBuilderTest|testCommentAndDocType()|1", org.jsoup.parser.XmlTreeBuilder.class, tb).parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testCommentAndDocType()|2", xml), "http://foo.com/"));
        org.junit.Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testCommentAndDocType()|6", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testCommentAndDocType()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testCommentAndDocType()|4", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void testSupplyParserToJsoupClass() {
        java.lang.String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToJsoupClass()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToJsoupClass()|0", xml), "http://foo.com/", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToJsoupClass()|1", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser())));
        org.junit.Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToJsoupClass()|5", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToJsoupClass()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToJsoupClass()|3", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Ignore
    @org.junit.Test
    public void testSupplyParserToConnection() throws java.io.IOException {
        java.lang.String xmlUrl = "http://direct.infohound.net/tools/jsoup-xml-test.xml";
        // parse with both xml and html parser, ensure different
        org.jsoup.nodes.Document xmlDoc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|4", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|0", xmlUrl))).parser(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|2", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser()))).get());
        org.jsoup.nodes.Document htmlDoc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|9", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|8", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|6", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|5", xmlUrl))).parser(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|7", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.htmlParser()))).get());
        org.jsoup.nodes.Document autoXmlDoc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|12", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|11", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|10", xmlUrl))).get());// check connection auto detects xml, uses xml parser

        org.junit.Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|15", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|13", org.jsoup.nodes.Document.class, xmlDoc).html()))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|16", org.jsoup.nodes.Document.class, htmlDoc).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|17", org.jsoup.nodes.Document.class, xmlDoc))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|19", org.jsoup.nodes.Document.class, xmlDoc), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|20", org.jsoup.nodes.Document.class, autoXmlDoc));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|22", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|21", org.jsoup.nodes.Document.class, htmlDoc).select("head")).size()));// html parser normalises

        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|25", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|24", org.jsoup.nodes.Document.class, xmlDoc).select("head")).size()));// xml parser does not

        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|28", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToConnection()|27", org.jsoup.nodes.Document.class, autoXmlDoc).select("head")).size()));// xml parser does not

    }

    @org.junit.Test
    public void testSupplyParserToDataStream() throws java.io.IOException, java.net.URISyntaxException {
        java.io.File xmlFile = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToDataStream()|2", java.io.File.class, new java.io.File(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URI>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToDataStream()|1", java.net.URI.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToDataStream()|0", java.net.URL.class, org.jsoup.parser.XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml")).toURI())));
        java.io.InputStream inStream = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.FileInputStream>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToDataStream()|4", java.io.FileInputStream.class, new java.io.FileInputStream(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToDataStream()|3", java.io.File.class, xmlFile)));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToDataStream()|7", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.InputStream>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToDataStream()|5", java.io.InputStream.class, inStream), null, "http://foo.com", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToDataStream()|6", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser())));
        org.junit.Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToDataStream()|10", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToDataStream()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testSupplyParserToDataStream()|8", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void testDoesNotForceSelfClosingKnownTags() {
        // html will force "<br>one</br>" to logically "<br />One<br />". XML should be stay "<br>one</br> -- don't recognise tag.
        org.jsoup.nodes.Document htmlDoc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDoesNotForceSelfClosingKnownTags()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<br>one</br>"));
        org.junit.Assert.assertEquals("<br>one\n<br>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testDoesNotForceSelfClosingKnownTags()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDoesNotForceSelfClosingKnownTags()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDoesNotForceSelfClosingKnownTags()|1", org.jsoup.nodes.Document.class, htmlDoc).body()).html()));
        org.jsoup.nodes.Document xmlDoc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDoesNotForceSelfClosingKnownTags()|5", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<br>one</br>", "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDoesNotForceSelfClosingKnownTags()|4", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser())));
        org.junit.Assert.assertEquals("<br>one</br>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testDoesNotForceSelfClosingKnownTags()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDoesNotForceSelfClosingKnownTags()|6", org.jsoup.nodes.Document.class, xmlDoc).html()));
    }

    @org.junit.Test
    public void handlesXmlDeclarationAsDeclaration() {
        java.lang.String html = "<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|handlesXmlDeclarationAsDeclaration()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|handlesXmlDeclarationAsDeclaration()|0", html), "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|handlesXmlDeclarationAsDeclaration()|1", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser())));
        org.junit.Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|handlesXmlDeclarationAsDeclaration()|5", org.jsoup.internal.StringUtil.normaliseWhitespace(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|handlesXmlDeclarationAsDeclaration()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|handlesXmlDeclarationAsDeclaration()|3", org.jsoup.nodes.Document.class, doc).outerHtml()))));
        org.junit.Assert.assertEquals("#declaration", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|handlesXmlDeclarationAsDeclaration()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.parser.XmlTreeBuilderTest|handlesXmlDeclarationAsDeclaration()|7", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|handlesXmlDeclarationAsDeclaration()|6", org.jsoup.nodes.Document.class, doc).childNode(0)).nodeName()));
        org.junit.Assert.assertEquals("#comment", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|handlesXmlDeclarationAsDeclaration()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.parser.XmlTreeBuilderTest|handlesXmlDeclarationAsDeclaration()|10", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|handlesXmlDeclarationAsDeclaration()|9", org.jsoup.nodes.Document.class, doc).childNode(2)).nodeName()));
    }

    @org.junit.Test
    public void xmlFragment() {
        java.lang.String xml = "<one src='/foo/' />Two<three><four /></three>";
        java.util.List<org.jsoup.nodes.Node> nodes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.XmlTreeBuilderTest|xmlFragment()|1", java.util.List.class, org.jsoup.parser.Parser.parseXmlFragment(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|xmlFragment()|0", xml), "http://example.com/"));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|xmlFragment()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.XmlTreeBuilderTest|xmlFragment()|2", java.util.List.class, nodes).size()));
        org.junit.Assert.assertEquals("http://example.com/foo/", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|xmlFragment()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.parser.XmlTreeBuilderTest|xmlFragment()|5", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.XmlTreeBuilderTest|xmlFragment()|4", java.util.List.class, nodes).get(0)).absUrl("src")));
        org.junit.Assert.assertEquals("one", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|xmlFragment()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.parser.XmlTreeBuilderTest|xmlFragment()|8", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.XmlTreeBuilderTest|xmlFragment()|7", java.util.List.class, nodes).get(0)).nodeName()));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|xmlFragment()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.parser.XmlTreeBuilderTest|xmlFragment()|11", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.parser.XmlTreeBuilderTest|xmlFragment()|10", java.util.List.class, nodes).get(1)))).text()));
    }

    @org.junit.Test
    public void xmlParseDefaultsToHtmlOutputSyntax() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|xmlParseDefaultsToHtmlOutputSyntax()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("x", "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|xmlParseDefaultsToHtmlOutputSyntax()|0", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser())));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings.Syntax>observeState("org.jsoup.parser.XmlTreeBuilderTest|xmlParseDefaultsToHtmlOutputSyntax()|2", org.jsoup.nodes.Document.OutputSettings.Syntax.class, org.jsoup.nodes.Document.OutputSettings.Syntax.xml), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings.Syntax>observeState("org.jsoup.parser.XmlTreeBuilderTest|xmlParseDefaultsToHtmlOutputSyntax()|5", org.jsoup.nodes.Document.OutputSettings.Syntax.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.parser.XmlTreeBuilderTest|xmlParseDefaultsToHtmlOutputSyntax()|4", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|xmlParseDefaultsToHtmlOutputSyntax()|3", org.jsoup.nodes.Document.class, doc).outputSettings()).syntax()));
    }

    @org.junit.Test
    public void testDoesHandleEOFInTag() {
        java.lang.String html = "<img src=asdf onerror=\"alert(1)\" x=";
        org.jsoup.nodes.Document xmlDoc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDoesHandleEOFInTag()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testDoesHandleEOFInTag()|0", html), "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDoesHandleEOFInTag()|1", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser())));
        org.junit.Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testDoesHandleEOFInTag()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDoesHandleEOFInTag()|3", org.jsoup.nodes.Document.class, xmlDoc).html()));
    }

    @org.junit.Test
    public void testDetectCharsetEncodingDeclaration() throws java.io.IOException, java.net.URISyntaxException {
        java.io.File xmlFile = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDetectCharsetEncodingDeclaration()|2", java.io.File.class, new java.io.File(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URI>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDetectCharsetEncodingDeclaration()|1", java.net.URI.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDetectCharsetEncodingDeclaration()|0", java.net.URL.class, org.jsoup.parser.XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml")).toURI())));
        java.io.InputStream inStream = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.FileInputStream>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDetectCharsetEncodingDeclaration()|4", java.io.FileInputStream.class, new java.io.FileInputStream(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDetectCharsetEncodingDeclaration()|3", java.io.File.class, xmlFile)));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDetectCharsetEncodingDeclaration()|7", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.InputStream>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDetectCharsetEncodingDeclaration()|5", java.io.InputStream.class, inStream), null, "http://example.com/", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDetectCharsetEncodingDeclaration()|6", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser())));
        org.junit.Assert.assertEquals("ISO-8859-1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testDetectCharsetEncodingDeclaration()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDetectCharsetEncodingDeclaration()|9", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDetectCharsetEncodingDeclaration()|8", org.jsoup.nodes.Document.class, doc).charset()).name()));
        org.junit.Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testDetectCharsetEncodingDeclaration()|13", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testDetectCharsetEncodingDeclaration()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testDetectCharsetEncodingDeclaration()|11", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void testParseDeclarationAttributes() {
        java.lang.String xml = "<?xml version='1' encoding='UTF-8' something='else'?><val>One</val>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|0", xml), "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|1", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser())));
        org.jsoup.nodes.XmlDeclaration decl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|4", org.jsoup.nodes.XmlDeclaration.class, ((org.jsoup.nodes.XmlDeclaration) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|3", org.jsoup.nodes.Document.class, doc).childNode(0))));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|5", org.jsoup.nodes.XmlDeclaration.class, decl).attr("version")));
        org.junit.Assert.assertEquals("UTF-8", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|7", org.jsoup.nodes.XmlDeclaration.class, decl).attr("encoding")));
        org.junit.Assert.assertEquals("else", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|9", org.jsoup.nodes.XmlDeclaration.class, decl).attr("something")));
        org.junit.Assert.assertEquals("version=\"1\" encoding=\"UTF-8\" something=\"else\"", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|11", org.jsoup.nodes.XmlDeclaration.class, decl).getWholeDeclaration()));
        org.junit.Assert.assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.parser.XmlTreeBuilderTest|testParseDeclarationAttributes()|13", org.jsoup.nodes.XmlDeclaration.class, decl).outerHtml()));
    }

    @org.junit.Test
    public void caseSensitiveDeclaration() {
        java.lang.String xml = "<?XML version='1' encoding='UTF-8' something='else'?>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|caseSensitiveDeclaration()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|caseSensitiveDeclaration()|0", xml), "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|caseSensitiveDeclaration()|1", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser())));
        org.junit.Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|caseSensitiveDeclaration()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|caseSensitiveDeclaration()|3", org.jsoup.nodes.Document.class, doc).outerHtml()));
    }

    @org.junit.Test
    public void testCreatesValidProlog() {
        org.jsoup.nodes.Document document = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testCreatesValidProlog()|0", org.jsoup.nodes.Document.class, org.jsoup.nodes.Document.createShell(""));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.parser.XmlTreeBuilderTest|testCreatesValidProlog()|4", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.parser.XmlTreeBuilderTest|testCreatesValidProlog()|2", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testCreatesValidProlog()|1", org.jsoup.nodes.Document.class, document).outputSettings()).syntax(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings.Syntax>observeState("org.jsoup.parser.XmlTreeBuilderTest|testCreatesValidProlog()|3", org.jsoup.nodes.Document.OutputSettings.Syntax.class, org.jsoup.nodes.Document.OutputSettings.Syntax.xml)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testCreatesValidProlog()|5", org.jsoup.nodes.Document.class, document).charset(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.parser.XmlTreeBuilderTest|testCreatesValidProlog()|6", java.nio.charset.Charset.class, java.nio.charset.Charset.forName("utf-8")));
        org.junit.Assert.assertEquals(("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + ((("<html>\n" + " <head></head>\n") + " <body></body>\n") + "</html>")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|testCreatesValidProlog()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|testCreatesValidProlog()|7", org.jsoup.nodes.Document.class, document).outerHtml()));
    }

    @org.junit.Test
    public void preservesCaseByDefault() {
        java.lang.String xml = "<CHECK>One</CHECK><TEST ID=1>Check</TEST>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|preservesCaseByDefault()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|preservesCaseByDefault()|0", xml), "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|preservesCaseByDefault()|1", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser())));
        org.junit.Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|preservesCaseByDefault()|5", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|preservesCaseByDefault()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|preservesCaseByDefault()|3", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void appendPreservesCaseByDefault() {
        java.lang.String xml = "<One>One</One>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|appendPreservesCaseByDefault()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|appendPreservesCaseByDefault()|0", xml), "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|appendPreservesCaseByDefault()|1", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser())));
        org.jsoup.select.Elements one = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.XmlTreeBuilderTest|appendPreservesCaseByDefault()|4", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|appendPreservesCaseByDefault()|3", org.jsoup.nodes.Document.class, doc).select("One"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.XmlTreeBuilderTest|appendPreservesCaseByDefault()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.XmlTreeBuilderTest|appendPreservesCaseByDefault()|5", org.jsoup.select.Elements.class, one).append("<Two ID=2>Two</Two>"));
        org.junit.Assert.assertEquals("<One>One<Two ID=\"2\">Two</Two></One>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|appendPreservesCaseByDefault()|9", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|appendPreservesCaseByDefault()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|appendPreservesCaseByDefault()|7", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void canNormalizeCase() {
        java.lang.String xml = "<TEST ID=1>Check</TEST>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|canNormalizeCase()|4", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|canNormalizeCase()|0", xml), "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|canNormalizeCase()|3", org.jsoup.parser.Parser.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|canNormalizeCase()|1", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser()).settings(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseSettings>observeState("org.jsoup.parser.XmlTreeBuilderTest|canNormalizeCase()|2", org.jsoup.parser.ParseSettings.class, org.jsoup.parser.ParseSettings.htmlDefault)))));
        org.junit.Assert.assertEquals("<test id=\"1\">Check</test>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|canNormalizeCase()|7", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|canNormalizeCase()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|canNormalizeCase()|5", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void normalizesDiscordantTags() {
        org.jsoup.parser.Parser parser = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|normalizesDiscordantTags()|2", org.jsoup.parser.Parser.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|normalizesDiscordantTags()|0", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser()).settings(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.ParseSettings>observeState("org.jsoup.parser.XmlTreeBuilderTest|normalizesDiscordantTags()|1", org.jsoup.parser.ParseSettings.class, org.jsoup.parser.ParseSettings.htmlDefault)));
        org.jsoup.nodes.Document document = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|normalizesDiscordantTags()|4", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div>test</DIV><p></p>", "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|normalizesDiscordantTags()|3", org.jsoup.parser.Parser.class, parser)));
        org.junit.Assert.assertEquals("<div>\n test\n</div>\n<p></p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|normalizesDiscordantTags()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|normalizesDiscordantTags()|5", org.jsoup.nodes.Document.class, document).html()));
        // was failing -> toString() = "<div>\n test\n <p></p>\n</div>"
    }

    @org.junit.Test
    public void roundTripsCdata() {
        java.lang.String xml = "<div id=1><![CDATA[\n<html>\n <foo><&amp;]]></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|0", xml), "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|1", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser())));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|3", org.jsoup.nodes.Document.class, doc).getElementById("1"));
        org.junit.Assert.assertEquals("<html>\n <foo><&amp;", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|5", org.jsoup.nodes.Element.class, div).text()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|7", org.jsoup.nodes.Element.class, div).children()).size()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|10", org.jsoup.nodes.Element.class, div).childNodeSize()));// no elements, one text node

        org.junit.Assert.assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]>\n</div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|12", org.jsoup.nodes.Element.class, div).outerHtml()));
        org.jsoup.nodes.CDataNode cdata = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.CDataNode>observeState("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|16", org.jsoup.nodes.CDataNode.class, ((org.jsoup.nodes.CDataNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|15", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|14", org.jsoup.nodes.Element.class, div).textNodes()).get(0))));
        org.junit.Assert.assertEquals("\n<html>\n <foo><&amp;", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.CDataNode>observeState("org.jsoup.parser.XmlTreeBuilderTest|roundTripsCdata()|17", org.jsoup.nodes.CDataNode.class, cdata).text()));
    }

    @org.junit.Test
    public void cdataPreservesWhiteSpace() {
        java.lang.String xml = "<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|cdataPreservesWhiteSpace()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|cdataPreservesWhiteSpace()|0", xml), "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|cdataPreservesWhiteSpace()|1", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser())));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|cdataPreservesWhiteSpace()|3", xml), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|cdataPreservesWhiteSpace()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|cdataPreservesWhiteSpace()|4", org.jsoup.nodes.Document.class, doc).outerHtml()));
        org.junit.Assert.assertEquals("//\n\n  foo();\n//", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|cdataPreservesWhiteSpace()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.parser.XmlTreeBuilderTest|cdataPreservesWhiteSpace()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|cdataPreservesWhiteSpace()|6", org.jsoup.nodes.Document.class, doc).selectFirst("script")).text()));
    }

    @org.junit.Test
    public void handlesDodgyXmlDecl() {
        java.lang.String xml = "<?xml version='1.0'><val>One</val>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|handlesDodgyXmlDecl()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|handlesDodgyXmlDecl()|0", xml), "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Parser>observeState("org.jsoup.parser.XmlTreeBuilderTest|handlesDodgyXmlDecl()|1", org.jsoup.parser.Parser.class, org.jsoup.parser.Parser.xmlParser())));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.parser.XmlTreeBuilderTest|handlesDodgyXmlDecl()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.parser.XmlTreeBuilderTest|handlesDodgyXmlDecl()|4", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.parser.XmlTreeBuilderTest|handlesDodgyXmlDecl()|3", org.jsoup.nodes.Document.class, doc).select("val")).text()));
    }
}

