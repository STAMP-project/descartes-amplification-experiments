package org.jsoup.internal;


@org.junit.Ignore
public class ConstrainableInputStreamTest {
    // todo - move these all to local jetty, don't ignore
    @org.junit.Test
    public void remainingAfterFirstRead() throws java.io.IOException {
        int bufferSize = 5 * 1024;
        int capSize = 100 * 1024;
        java.lang.String url = "http://direct.infohound.net/tools/large.html";// 280 K

        java.io.BufferedInputStream inputStream = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.BufferedInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|5", java.io.BufferedInputStream.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|4", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|3", org.jsoup.Connection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|0", url))).maxBodySize(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|2", capSize))).execute()).bodyStream());
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.BufferedInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|6", java.io.BufferedInputStream.class, inputStream)) instanceof org.jsoup.internal.ConstrainableInputStream));
        org.jsoup.internal.ConstrainableInputStream stream = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.internal.ConstrainableInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|7", org.jsoup.internal.ConstrainableInputStream.class, ((org.jsoup.internal.ConstrainableInputStream) (inputStream)));
        // simulates parse which does a limited read first
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.internal.ConstrainableInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|8", org.jsoup.internal.ConstrainableInputStream.class, stream).mark(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|9", bufferSize));
        java.nio.ByteBuffer firstBytes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.ByteBuffer>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|12", java.nio.ByteBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.internal.ConstrainableInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|10", org.jsoup.internal.ConstrainableInputStream.class, stream).readToByteBuffer(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|11", bufferSize)));
        byte[] array = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|14", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.ByteBuffer>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|13", java.nio.ByteBuffer.class, firstBytes).array());
        java.lang.String firstText = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|16", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|15", byte[].class, array), "UTF-8"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|18", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|17", firstText).startsWith("<html><head><title>Large")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|19", bufferSize), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|20", byte[].class, array).length));
        boolean fullyRead = (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.internal.ConstrainableInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|22", org.jsoup.internal.ConstrainableInputStream.class, stream).read())) == (-1);
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|24", fullyRead));
        // reset and read again
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.internal.ConstrainableInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|25", org.jsoup.internal.ConstrainableInputStream.class, stream).reset();
        java.nio.ByteBuffer fullRead = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.ByteBuffer>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|27", java.nio.ByteBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.internal.ConstrainableInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|26", org.jsoup.internal.ConstrainableInputStream.class, stream).readToByteBuffer(0));
        byte[] fullArray = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|29", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.ByteBuffer>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|28", java.nio.ByteBuffer.class, fullRead).array());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|30", capSize), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|32", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|31", byte[].class, fullArray).length));
        java.lang.String fullText = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|34", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|33", byte[].class, fullArray), "UTF-8"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|37", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|35", fullText).startsWith(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|remainingAfterFirstRead()|36", firstText))));
    }

    @org.junit.Test
    public void noLimitAfterFirstRead() throws java.io.IOException {
        int bufferSize = 5 * 1024;
        java.lang.String url = "http://direct.infohound.net/tools/large.html";// 280 K

        java.io.BufferedInputStream inputStream = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.BufferedInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|3", java.io.BufferedInputStream.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection.Response>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|2", org.jsoup.Connection.Response.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.Connection>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|1", org.jsoup.Connection.class, org.jsoup.Jsoup.connect(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|0", url))).execute()).bodyStream());
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.BufferedInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|4", java.io.BufferedInputStream.class, inputStream)) instanceof org.jsoup.internal.ConstrainableInputStream));
        org.jsoup.internal.ConstrainableInputStream stream = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.internal.ConstrainableInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|5", org.jsoup.internal.ConstrainableInputStream.class, ((org.jsoup.internal.ConstrainableInputStream) (inputStream)));
        // simulates parse which does a limited read first
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.internal.ConstrainableInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|6", org.jsoup.internal.ConstrainableInputStream.class, stream).mark(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|7", bufferSize));
        java.nio.ByteBuffer firstBytes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.ByteBuffer>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|10", java.nio.ByteBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.internal.ConstrainableInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|8", org.jsoup.internal.ConstrainableInputStream.class, stream).readToByteBuffer(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|9", bufferSize)));
        byte[] array = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|12", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.ByteBuffer>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|11", java.nio.ByteBuffer.class, firstBytes).array());
        java.lang.String firstText = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|14", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|13", byte[].class, array), "UTF-8"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|16", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|15", firstText).startsWith("<html><head><title>Large")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|17", bufferSize), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|18", byte[].class, array).length));
        // reset and read fully
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.internal.ConstrainableInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|20", org.jsoup.internal.ConstrainableInputStream.class, stream).reset();
        java.nio.ByteBuffer fullRead = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.ByteBuffer>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|22", java.nio.ByteBuffer.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.internal.ConstrainableInputStream>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|21", org.jsoup.internal.ConstrainableInputStream.class, stream).readToByteBuffer(0));
        byte[] fullArray = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|24", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.ByteBuffer>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|23", java.nio.ByteBuffer.class, fullRead).array());
        org.junit.Assert.assertEquals(280735, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|25", byte[].class, fullArray).length));
        java.lang.String fullText = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|28", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|27", byte[].class, fullArray), "UTF-8"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|31", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|29", fullText).startsWith(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.internal.ConstrainableInputStreamTest|noLimitAfterFirstRead()|30", firstText))));
    }
}

