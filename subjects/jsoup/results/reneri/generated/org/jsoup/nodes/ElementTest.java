package org.jsoup.nodes;


/**
 * Tests for Element (DOM stuff mostly).
 *
 * @author Jonathan Hedley
 */
public class ElementTest {
    private java.lang.String reference = "<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>";

    @org.junit.Test
    public void getElementsByTagName() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|getElementsByTagName()|0", reference)));
        java.util.List<org.jsoup.nodes.Element> divs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|2", org.jsoup.nodes.Document.class, doc).getElementsByTag("div"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|getElementsByTagName()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|4", java.util.List.class, divs).size()));
        org.junit.Assert.assertEquals("div1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|getElementsByTagName()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|6", java.util.List.class, divs).get(0)).id()));
        org.junit.Assert.assertEquals("div2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|getElementsByTagName()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|9", java.util.List.class, divs).get(1)).id()));
        java.util.List<org.jsoup.nodes.Element> ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|13", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|12", org.jsoup.nodes.Document.class, doc).getElementsByTag("p"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|getElementsByTagName()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|14", java.util.List.class, ps).size()));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|getElementsByTagName()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|18", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|17", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|16", java.util.List.class, ps).get(0)).childNode(0)))).getWholeText()));
        org.junit.Assert.assertEquals("Another ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|getElementsByTagName()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|22", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|21", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|20", java.util.List.class, ps).get(1)).childNode(0)))).getWholeText()));
        java.util.List<org.jsoup.nodes.Element> ps2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|25", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|24", org.jsoup.nodes.Document.class, doc).getElementsByTag("P"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|26", java.util.List.class, ps), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|27", java.util.List.class, ps2));
        java.util.List<org.jsoup.nodes.Element> imgs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|29", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|28", org.jsoup.nodes.Document.class, doc).getElementsByTag("img"));
        org.junit.Assert.assertEquals("foo.png", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|getElementsByTagName()|32", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|31", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|30", java.util.List.class, imgs).get(0)).attr("src")));
        java.util.List<org.jsoup.nodes.Element> empty = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|34", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|33", org.jsoup.nodes.Document.class, doc).getElementsByTag("wtf"));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|getElementsByTagName()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|getElementsByTagName()|35", java.util.List.class, empty).size()));
    }

    @org.junit.Test
    public void getNamespacedElementsByTag() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|getNamespacedElementsByTag()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div>"));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|getNamespacedElementsByTag()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|getNamespacedElementsByTag()|1", org.jsoup.nodes.Document.class, doc).getElementsByTag("abc:def"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|getNamespacedElementsByTag()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|getNamespacedElementsByTag()|3", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|getNamespacedElementsByTag()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|getNamespacedElementsByTag()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|getNamespacedElementsByTag()|5", org.jsoup.select.Elements.class, els).first()).id()));
        org.junit.Assert.assertEquals("abc:def", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|getNamespacedElementsByTag()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|getNamespacedElementsByTag()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|getNamespacedElementsByTag()|8", org.jsoup.select.Elements.class, els).first()).tagName()));
    }

    @org.junit.Test
    public void testGetElementById() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementById()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementById()|0", reference)));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementById()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementById()|2", org.jsoup.nodes.Document.class, doc).getElementById("div1"));
        org.junit.Assert.assertEquals("div1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementById()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementById()|4", org.jsoup.nodes.Element.class, div).id()));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementById()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementById()|6", org.jsoup.nodes.Document.class, doc).getElementById("none")));
        org.jsoup.nodes.Document doc2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementById()|8", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>"));
        org.jsoup.nodes.Element div2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementById()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementById()|9", org.jsoup.nodes.Document.class, doc2).getElementById("2"));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementById()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementById()|11", org.jsoup.nodes.Element.class, div2).tagName()));// not the span

        org.jsoup.nodes.Element span = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementById()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementById()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementById()|13", org.jsoup.nodes.Element.class, div2).child(0)).getElementById("2"));// called from <p> context should be span

        org.junit.Assert.assertEquals("span", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementById()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementById()|16", org.jsoup.nodes.Element.class, span).tagName()));
    }

    @org.junit.Test
    public void testGetText() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetText()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetText()|0", reference)));
        org.junit.Assert.assertEquals("Hello Another element", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetText()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetText()|2", org.jsoup.nodes.Document.class, doc).text()));
        org.junit.Assert.assertEquals("Another element", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetText()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetText()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetText()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetText()|4", org.jsoup.nodes.Document.class, doc).getElementsByTag("p")).get(1)).text()));
    }

    @org.junit.Test
    public void testGetChildText() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetChildText()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p>Hello <b>there</b> now"));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetChildText()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetChildText()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetChildText()|1", org.jsoup.nodes.Document.class, doc).select("p")).first());
        org.junit.Assert.assertEquals("Hello there now", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetChildText()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetChildText()|4", org.jsoup.nodes.Element.class, p).text()));
        org.junit.Assert.assertEquals("Hello now", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetChildText()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetChildText()|6", org.jsoup.nodes.Element.class, p).ownText()));
    }

    @org.junit.Test
    public void testNormalisesText() {
        java.lang.String h = "<p>Hello<p>There.</p> \n <p>Here <b>is</b> \n s<b>om</b>e text.";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNormalisesText()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalisesText()|0", h)));
        java.lang.String text = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalisesText()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNormalisesText()|2", org.jsoup.nodes.Document.class, doc).text());
        org.junit.Assert.assertEquals("Hello There. Here is some text.", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalisesText()|4", text));
    }

    @org.junit.Test
    public void testKeepsPreText() {
        java.lang.String h = "<p>Hello \n \n there.</p> <div><pre>  What\'s \n\n  that?</pre>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testKeepsPreText()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testKeepsPreText()|0", h)));
        org.junit.Assert.assertEquals("Hello there.   What\'s \n\n  that?", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testKeepsPreText()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testKeepsPreText()|2", org.jsoup.nodes.Document.class, doc).text()));
    }

    @org.junit.Test
    public void testKeepsPreTextInCode() {
        java.lang.String h = "<pre><code>code\n\ncode</code></pre>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testKeepsPreTextInCode()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testKeepsPreTextInCode()|0", h)));
        org.junit.Assert.assertEquals("code\n\ncode", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testKeepsPreTextInCode()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testKeepsPreTextInCode()|2", org.jsoup.nodes.Document.class, doc).text()));
        org.junit.Assert.assertEquals("<pre><code>code\n\ncode</code></pre>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testKeepsPreTextInCode()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testKeepsPreTextInCode()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testKeepsPreTextInCode()|4", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void testKeepsPreTextAtDepth() {
        java.lang.String h = "<pre><code><span><b>code\n\ncode</b></span></code></pre>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testKeepsPreTextAtDepth()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testKeepsPreTextAtDepth()|0", h)));
        org.junit.Assert.assertEquals("code\n\ncode", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testKeepsPreTextAtDepth()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testKeepsPreTextAtDepth()|2", org.jsoup.nodes.Document.class, doc).text()));
        org.junit.Assert.assertEquals("<pre><code><span><b>code\n\ncode</b></span></code></pre>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testKeepsPreTextAtDepth()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testKeepsPreTextAtDepth()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testKeepsPreTextAtDepth()|4", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void testBrHasSpace() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testBrHasSpace()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p>Hello<br>there</p>"));
        org.junit.Assert.assertEquals("Hello there", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testBrHasSpace()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testBrHasSpace()|1", org.jsoup.nodes.Document.class, doc).text()));
        org.junit.Assert.assertEquals("Hello there", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testBrHasSpace()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testBrHasSpace()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testBrHasSpace()|4", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testBrHasSpace()|3", org.jsoup.nodes.Document.class, doc).select("p")).first()).ownText()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testBrHasSpace()|7", org.jsoup.nodes.Document.class, (doc = org.jsoup.Jsoup.parse("<p>Hello <br> there</p>")));
        org.junit.Assert.assertEquals("Hello there", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testBrHasSpace()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testBrHasSpace()|8", org.jsoup.nodes.Document.class, doc).text()));
    }

    @org.junit.Test
    public void testWholeText() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testWholeText()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p> Hello\nthere &nbsp;  </p>"));
        org.junit.Assert.assertEquals(" Hello\nthere \u00a0  ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testWholeText()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testWholeText()|1", org.jsoup.nodes.Document.class, doc).wholeText()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testWholeText()|3", org.jsoup.nodes.Document.class, (doc = org.jsoup.Jsoup.parse("<p>Hello  \n  there</p>")));
        org.junit.Assert.assertEquals("Hello  \n  there", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testWholeText()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testWholeText()|4", org.jsoup.nodes.Document.class, doc).wholeText()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testWholeText()|6", org.jsoup.nodes.Document.class, (doc = org.jsoup.Jsoup.parse("<p>Hello  <div>\n  there</div></p>")));
        org.junit.Assert.assertEquals("Hello  \n  there", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testWholeText()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testWholeText()|7", org.jsoup.nodes.Document.class, doc).wholeText()));
    }

    @org.junit.Test
    public void testGetSiblings() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetSiblings()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblings()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetSiblings()|1", org.jsoup.nodes.Document.class, doc).getElementById("1"));
        org.junit.Assert.assertEquals("there", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetSiblings()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblings()|3", org.jsoup.nodes.Element.class, p).text()));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetSiblings()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblings()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblings()|5", org.jsoup.nodes.Element.class, p).previousElementSibling()).text()));
        org.junit.Assert.assertEquals("this", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetSiblings()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblings()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblings()|8", org.jsoup.nodes.Element.class, p).nextElementSibling()).text()));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetSiblings()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblings()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblings()|11", org.jsoup.nodes.Element.class, p).firstElementSibling()).text()));
        org.junit.Assert.assertEquals("element", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetSiblings()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblings()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblings()|14", org.jsoup.nodes.Element.class, p).lastElementSibling()).text()));
    }

    @org.junit.Test
    public void testGetSiblingsWithDuplicateContent() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>"));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|1", org.jsoup.nodes.Document.class, doc).getElementById("1"));
        org.junit.Assert.assertEquals("there", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|3", org.jsoup.nodes.Element.class, p).text()));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|5", org.jsoup.nodes.Element.class, p).previousElementSibling()).text()));
        org.junit.Assert.assertEquals("this", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|8", org.jsoup.nodes.Element.class, p).nextElementSibling()).text()));
        org.junit.Assert.assertEquals("this", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|11", org.jsoup.nodes.Element.class, p).nextElementSibling()).nextElementSibling()).text()));
        org.junit.Assert.assertEquals("is", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|17", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|15", org.jsoup.nodes.Element.class, p).nextElementSibling()).nextElementSibling()).nextElementSibling()).text()));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|21", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|20", org.jsoup.nodes.Element.class, p).firstElementSibling()).text()));
        org.junit.Assert.assertEquals("element", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|24", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetSiblingsWithDuplicateContent()|23", org.jsoup.nodes.Element.class, p).lastElementSibling()).text()));
    }

    @org.junit.Test
    public void testGetParents() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetParents()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>Hello <span>there</span></div>"));
        org.jsoup.nodes.Element span = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetParents()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetParents()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetParents()|1", org.jsoup.nodes.Document.class, doc).select("span")).first());
        org.jsoup.select.Elements parents = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetParents()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetParents()|4", org.jsoup.nodes.Element.class, span).parents());
        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetParents()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetParents()|6", org.jsoup.select.Elements.class, parents).size()));
        org.junit.Assert.assertEquals("p", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetParents()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetParents()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetParents()|8", org.jsoup.select.Elements.class, parents).get(0)).tagName()));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetParents()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetParents()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetParents()|11", org.jsoup.select.Elements.class, parents).get(1)).tagName()));
        org.junit.Assert.assertEquals("body", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetParents()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetParents()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetParents()|14", org.jsoup.select.Elements.class, parents).get(2)).tagName()));
        org.junit.Assert.assertEquals("html", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetParents()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetParents()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetParents()|17", org.jsoup.select.Elements.class, parents).get(3)).tagName()));
    }

    @org.junit.Test
    public void testElementSiblingIndex() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndex()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>"));
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndex()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndex()|1", org.jsoup.nodes.Document.class, doc).select("p"));
        org.junit.Assert.assertTrue((0 == (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testElementSiblingIndex()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndex()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndex()|3", org.jsoup.select.Elements.class, ps).get(0)).elementSiblingIndex()))));
        org.junit.Assert.assertTrue((1 == (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testElementSiblingIndex()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndex()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndex()|6", org.jsoup.select.Elements.class, ps).get(1)).elementSiblingIndex()))));
        org.junit.Assert.assertTrue((2 == (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testElementSiblingIndex()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndex()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndex()|9", org.jsoup.select.Elements.class, ps).get(2)).elementSiblingIndex()))));
    }

    @org.junit.Test
    public void testElementSiblingIndexSameContent() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndexSameContent()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>One</p>...<p>One</p>...<p>One</p>"));
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndexSameContent()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndexSameContent()|1", org.jsoup.nodes.Document.class, doc).select("p"));
        org.junit.Assert.assertTrue((0 == (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testElementSiblingIndexSameContent()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndexSameContent()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndexSameContent()|3", org.jsoup.select.Elements.class, ps).get(0)).elementSiblingIndex()))));
        org.junit.Assert.assertTrue((1 == (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testElementSiblingIndexSameContent()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndexSameContent()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndexSameContent()|6", org.jsoup.select.Elements.class, ps).get(1)).elementSiblingIndex()))));
        org.junit.Assert.assertTrue((2 == (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testElementSiblingIndexSameContent()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndexSameContent()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testElementSiblingIndexSameContent()|9", org.jsoup.select.Elements.class, ps).get(2)).elementSiblingIndex()))));
    }

    @org.junit.Test
    public void testGetElementsWithClass() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>"));
        java.util.List<org.jsoup.nodes.Element> els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|1", org.jsoup.nodes.Document.class, doc).getElementsByClass("mellow"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|3", java.util.List.class, els).size()));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|5", java.util.List.class, els).get(0)).tagName()));
        org.junit.Assert.assertEquals("span", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|8", java.util.List.class, els).get(1)).tagName()));
        java.util.List<org.jsoup.nodes.Element> els2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|12", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|11", org.jsoup.nodes.Document.class, doc).getElementsByClass("yellow"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|13", java.util.List.class, els2).size()));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|15", java.util.List.class, els2).get(0)).tagName()));
        org.junit.Assert.assertEquals("b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|19", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|18", java.util.List.class, els2).get(1)).tagName()));
        java.util.List<org.jsoup.nodes.Element> none = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|22", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|21", org.jsoup.nodes.Document.class, doc).getElementsByClass("solo"));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithClass()|23", java.util.List.class, none).size()));
    }

    @org.junit.Test
    public void testGetElementsWithAttribute() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div style='bold'><p title=qux><p><b style></b></p></div>"));
        java.util.List<org.jsoup.nodes.Element> els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|1", org.jsoup.nodes.Document.class, doc).getElementsByAttribute("style"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|3", java.util.List.class, els).size()));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|5", java.util.List.class, els).get(0)).tagName()));
        org.junit.Assert.assertEquals("b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|8", java.util.List.class, els).get(1)).tagName()));
        java.util.List<org.jsoup.nodes.Element> none = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|12", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|11", org.jsoup.nodes.Document.class, doc).getElementsByAttribute("class"));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttribute()|13", java.util.List.class, none).size()));
    }

    @org.junit.Test
    public void testGetElementsWithAttributeDash() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeDash()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<meta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>"));
        org.jsoup.select.Elements meta = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeDash()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeDash()|1", org.jsoup.nodes.Document.class, doc).select("meta[http-equiv=content-type], meta[charset]"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeDash()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeDash()|3", org.jsoup.select.Elements.class, meta).size()));
        org.junit.Assert.assertEquals("1", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeDash()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeDash()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeDash()|5", org.jsoup.select.Elements.class, meta).first()).id()));
    }

    @org.junit.Test
    public void testGetElementsWithAttributeValue() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeValue()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div style='bold'><p><p><b style></b></p></div>"));
        java.util.List<org.jsoup.nodes.Element> els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeValue()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeValue()|1", org.jsoup.nodes.Document.class, doc).getElementsByAttributeValue("style", "bold"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeValue()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeValue()|3", java.util.List.class, els).size()));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeValue()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeValue()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeValue()|5", java.util.List.class, els).get(0)).tagName()));
        java.util.List<org.jsoup.nodes.Element> none = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeValue()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeValue()|8", org.jsoup.nodes.Document.class, doc).getElementsByAttributeValue("style", "none"));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeValue()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testGetElementsWithAttributeValue()|10", java.util.List.class, none).size()));
    }

    @org.junit.Test
    public void testClassDomMethods() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>"));
        java.util.List<org.jsoup.nodes.Element> els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|1", org.jsoup.nodes.Document.class, doc).getElementsByAttribute("class"));
        org.jsoup.nodes.Element span = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|3", java.util.List.class, els).get(0));
        org.junit.Assert.assertEquals("mellow yellow", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassDomMethods()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|5", org.jsoup.nodes.Element.class, span).className()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassDomMethods()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|7", org.jsoup.nodes.Element.class, span).hasClass("mellow")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassDomMethods()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|9", org.jsoup.nodes.Element.class, span).hasClass("yellow")));
        java.util.Set<java.lang.String> classes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|12", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|11", org.jsoup.nodes.Element.class, span).classNames());
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassDomMethods()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|13", java.util.Set.class, classes).size()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassDomMethods()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|15", java.util.Set.class, classes).contains("mellow")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassDomMethods()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|17", java.util.Set.class, classes).contains("yellow")));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassDomMethods()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|19", org.jsoup.nodes.Document.class, doc).className()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|22", java.util.Set.class, (classes = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|21", org.jsoup.nodes.Document.class, doc).classNames()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassDomMethods()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|23", java.util.Set.class, classes).size()));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassDomMethods()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClassDomMethods()|25", org.jsoup.nodes.Document.class, doc).hasClass("mellow")));
    }

    @org.junit.Test
    public void testHasClassDomMethods() {
        org.jsoup.parser.Tag tag = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|0", org.jsoup.parser.Tag.class, org.jsoup.parser.Tag.valueOf("a"));
        org.jsoup.nodes.Attributes attribs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|1", org.jsoup.nodes.Attributes.class, new org.jsoup.nodes.Attributes());
        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|4", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|2", org.jsoup.parser.Tag.class, tag), "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|3", org.jsoup.nodes.Attributes.class, attribs)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|6", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|5", org.jsoup.nodes.Attributes.class, attribs).put("class", "toto"));
        boolean hasClass = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|7", org.jsoup.nodes.Element.class, el).hasClass("toto"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|9", hasClass));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|11", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|10", org.jsoup.nodes.Attributes.class, attribs).put("class", " toto"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|13", (hasClass = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|12", org.jsoup.nodes.Element.class, el).hasClass("toto")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|14", hasClass));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|16", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|15", org.jsoup.nodes.Attributes.class, attribs).put("class", "toto "));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|18", (hasClass = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|17", org.jsoup.nodes.Element.class, el).hasClass("toto")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|19", hasClass));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|21", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|20", org.jsoup.nodes.Attributes.class, attribs).put("class", "\ttoto "));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|23", (hasClass = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|22", org.jsoup.nodes.Element.class, el).hasClass("toto")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|24", hasClass));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|26", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|25", org.jsoup.nodes.Attributes.class, attribs).put("class", "  toto "));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|28", (hasClass = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|27", org.jsoup.nodes.Element.class, el).hasClass("toto")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|29", hasClass));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|31", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|30", org.jsoup.nodes.Attributes.class, attribs).put("class", "ab"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|33", (hasClass = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|32", org.jsoup.nodes.Element.class, el).hasClass("toto")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|34", hasClass));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|36", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|35", org.jsoup.nodes.Attributes.class, attribs).put("class", "     "));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|38", (hasClass = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|37", org.jsoup.nodes.Element.class, el).hasClass("toto")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|39", hasClass));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|41", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|40", org.jsoup.nodes.Attributes.class, attribs).put("class", "tototo"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|43", (hasClass = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|42", org.jsoup.nodes.Element.class, el).hasClass("toto")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|44", hasClass));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|46", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|45", org.jsoup.nodes.Attributes.class, attribs).put("class", "raulpismuth  "));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|48", (hasClass = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|47", org.jsoup.nodes.Element.class, el).hasClass("raulpismuth")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|49", hasClass));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|51", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|50", org.jsoup.nodes.Attributes.class, attribs).put("class", " abcd  raulpismuth efgh "));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|53", (hasClass = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|52", org.jsoup.nodes.Element.class, el).hasClass("raulpismuth")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|54", hasClass));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|56", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|55", org.jsoup.nodes.Attributes.class, attribs).put("class", " abcd efgh raulpismuth"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|58", (hasClass = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|57", org.jsoup.nodes.Element.class, el).hasClass("raulpismuth")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|59", hasClass));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|61", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|60", org.jsoup.nodes.Attributes.class, attribs).put("class", " abcd efgh raulpismuth "));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|63", (hasClass = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|62", org.jsoup.nodes.Element.class, el).hasClass("raulpismuth")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasClassDomMethods()|64", hasClass));
    }

    @org.junit.Test
    public void testClassUpdates() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|1", org.jsoup.nodes.Document.class, doc).select("div")).first());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|4", org.jsoup.nodes.Element.class, div).addClass("green"));
        org.junit.Assert.assertEquals("mellow yellow green", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassUpdates()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|6", org.jsoup.nodes.Element.class, div).className()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|8", org.jsoup.nodes.Element.class, div).removeClass("red")// noop
        );
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|10", org.jsoup.nodes.Element.class, div).removeClass("yellow"));
        org.junit.Assert.assertEquals("mellow green", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassUpdates()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|12", org.jsoup.nodes.Element.class, div).className()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|14", org.jsoup.nodes.Element.class, div).toggleClass("green")).toggleClass("red"));
        org.junit.Assert.assertEquals("mellow red", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassUpdates()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassUpdates()|17", org.jsoup.nodes.Element.class, div).className()));
    }

    @org.junit.Test
    public void testOuterHtml() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testOuterHtml()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"));
        org.junit.Assert.assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\"><p><!-- comment -->Hello</p><p>there</p></div></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testOuterHtml()|3", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testOuterHtml()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testOuterHtml()|1", org.jsoup.nodes.Document.class, doc).outerHtml()))));
    }

    @org.junit.Test
    public void testInnerHtml() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testInnerHtml()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div>\n <p>Hello</p> </div>"));
        org.junit.Assert.assertEquals("<p>Hello</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testInnerHtml()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testInnerHtml()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testInnerHtml()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testInnerHtml()|1", org.jsoup.nodes.Document.class, doc).getElementsByTag("div")).get(0)).html()));
    }

    @org.junit.Test
    public void testFormatHtml() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testFormatHtml()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>"));
        org.junit.Assert.assertEquals("<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>Hello <span>jsoup <span>users</span></span></p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testFormatHtml()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testFormatHtml()|1", org.jsoup.nodes.Document.class, doc).html()));
    }

    @org.junit.Test
    public void testFormatOutline() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testFormatOutline()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.ElementTest|testFormatOutline()|3", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.ElementTest|testFormatOutline()|2", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testFormatOutline()|1", org.jsoup.nodes.Document.class, doc).outputSettings()).outline(true));
        org.junit.Assert.assertEquals("<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>\n    Hello \n    <span>\n     jsoup \n     <span>users</span>\n    </span>\n   </p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testFormatOutline()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testFormatOutline()|4", org.jsoup.nodes.Document.class, doc).html()));
    }

    @org.junit.Test
    public void testSetIndent() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testSetIndent()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>Hello\nthere</p></div>"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.ElementTest|testSetIndent()|3", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.ElementTest|testSetIndent()|2", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testSetIndent()|1", org.jsoup.nodes.Document.class, doc).outputSettings()).indentAmount(0));
        org.junit.Assert.assertEquals("<html>\n<head></head>\n<body>\n<div>\n<p>Hello there</p>\n</div>\n</body>\n</html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testSetIndent()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testSetIndent()|4", org.jsoup.nodes.Document.class, doc).html()));
    }

    @org.junit.Test
    public void testNotPretty() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNotPretty()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.ElementTest|testNotPretty()|3", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.ElementTest|testNotPretty()|2", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNotPretty()|1", org.jsoup.nodes.Document.class, doc).outputSettings()).prettyPrint(false));
        org.junit.Assert.assertEquals("<html><head></head><body><div>   \n<p>Hello\n there\n</p></div></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNotPretty()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNotPretty()|4", org.jsoup.nodes.Document.class, doc).html()));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNotPretty()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNotPretty()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNotPretty()|6", org.jsoup.nodes.Document.class, doc).select("div")).first());
        org.junit.Assert.assertEquals("   \n<p>Hello\n there\n</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNotPretty()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNotPretty()|9", org.jsoup.nodes.Element.class, div).html()));
    }

    @org.junit.Test
    public void testEmptyElementFormatHtml() {
        // don't put newlines into empty blocks
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testEmptyElementFormatHtml()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<section><div></div></section>"));
        org.junit.Assert.assertEquals("<section>\n <div></div>\n</section>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testEmptyElementFormatHtml()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testEmptyElementFormatHtml()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testEmptyElementFormatHtml()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testEmptyElementFormatHtml()|1", org.jsoup.nodes.Document.class, doc).select("section")).first()).outerHtml()));
    }

    @org.junit.Test
    public void testNoIndentOnScriptAndStyle() {
        // don't newline+indent closing </script> and </style> tags
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNoIndentOnScriptAndStyle()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>one\ntwo</script>\n<style>three\nfour</style>"));
        org.junit.Assert.assertEquals("<script>one\ntwo</script> \n<style>three\nfour</style>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNoIndentOnScriptAndStyle()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNoIndentOnScriptAndStyle()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNoIndentOnScriptAndStyle()|1", org.jsoup.nodes.Document.class, doc).head()).html()));
    }

    @org.junit.Test
    public void testContainerOutput() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testContainerOutput()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>"));
        org.junit.Assert.assertEquals("<title>Hello there</title>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testContainerOutput()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testContainerOutput()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testContainerOutput()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testContainerOutput()|1", org.jsoup.nodes.Document.class, doc).select("title")).first()).outerHtml()));
        org.junit.Assert.assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testContainerOutput()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testContainerOutput()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testContainerOutput()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testContainerOutput()|5", org.jsoup.nodes.Document.class, doc).select("div")).first()).outerHtml()));
        org.junit.Assert.assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div> \n<div>\n Another\n</div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testContainerOutput()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testContainerOutput()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testContainerOutput()|10", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testContainerOutput()|9", org.jsoup.nodes.Document.class, doc).select("body")).first()).html()));
    }

    @org.junit.Test
    public void testSetText() {
        java.lang.String h = "<div id=1>Hello <p>there <b>now</b></p></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testSetText()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testSetText()|0", h)));
        org.junit.Assert.assertEquals("Hello there now", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testSetText()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testSetText()|2", org.jsoup.nodes.Document.class, doc).text()));// need to sort out node whitespace

        org.junit.Assert.assertEquals("there now", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testSetText()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetText()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testSetText()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testSetText()|4", org.jsoup.nodes.Document.class, doc).select("p")).get(0)).text()));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetText()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetText()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testSetText()|8", org.jsoup.nodes.Document.class, doc).getElementById("1")).text("Gone"));
        org.junit.Assert.assertEquals("Gone", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testSetText()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetText()|11", org.jsoup.nodes.Element.class, div).text()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testSetText()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testSetText()|14", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testSetText()|13", org.jsoup.nodes.Document.class, doc).select("p")).size()));
    }

    @org.junit.Test
    public void testAddNewElement() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|1", org.jsoup.nodes.Document.class, doc).getElementById("1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|3", org.jsoup.nodes.Element.class, div).appendElement("p")).text("there"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|6", org.jsoup.nodes.Element.class, div).appendElement("P")).attr("CLASS", "second")).text("now"));
        // manually specifying tag and attributes should maintain case based on parser settings
        org.junit.Assert.assertEquals("<html><head></head><body><div id=\"1\"><p>Hello</p><p>there</p><p class=\"second\">now</p></div></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewElement()|12", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewElement()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|10", org.jsoup.nodes.Document.class, doc).html()))));
        // check sibling index (with short circuit on reindexChildren):
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|14", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|13", org.jsoup.nodes.Document.class, doc).select("p"));
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewElement()|15", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewElement()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|16", org.jsoup.select.Elements.class, ps).size())); i++) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewElement()|18", i), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewElement()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|21", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testAddNewElement()|19", org.jsoup.select.Elements.class, ps).get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewElement()|20", i))).siblingIndex));
        }
    }

    @org.junit.Test
    public void testAddBooleanAttribute() {
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|1", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|0", org.jsoup.parser.Tag.class, org.jsoup.parser.Tag.valueOf("div")), ""));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|2", org.jsoup.nodes.Element.class, div).attr("true", true));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|4", org.jsoup.nodes.Element.class, div).attr("false", "value"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|6", org.jsoup.nodes.Element.class, div).attr("false", false));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|8", org.jsoup.nodes.Element.class, div).hasAttr("true")));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|10", org.jsoup.nodes.Element.class, div).attr("true")));
        java.util.List<org.jsoup.nodes.Attribute> attributes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Attribute>>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|14", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|13", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|12", org.jsoup.nodes.Element.class, div).attributes()).asList());
        org.junit.Assert.assertEquals("There should be one attribute", 1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Attribute>>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|15", java.util.List.class, attributes).size()));
        org.junit.Assert.assertTrue("Attribute should be boolean", ((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attribute>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|18", org.jsoup.nodes.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Attribute>>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|17", java.util.List.class, attributes).get(0))) instanceof org.jsoup.nodes.BooleanAttribute));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|19", org.jsoup.nodes.Element.class, div).hasAttr("false")));
        org.junit.Assert.assertEquals("<div true></div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddBooleanAttribute()|21", org.jsoup.nodes.Element.class, div).outerHtml()));
    }

    @org.junit.Test
    public void testAppendRowToTable() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAppendRowToTable()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>"));
        org.jsoup.nodes.Element table = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendRowToTable()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testAppendRowToTable()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAppendRowToTable()|1", org.jsoup.nodes.Document.class, doc).select("tbody")).first());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendRowToTable()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendRowToTable()|4", org.jsoup.nodes.Element.class, table).append("<tr><td>2</td></tr>"));
        org.junit.Assert.assertEquals("<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAppendRowToTable()|9", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAppendRowToTable()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendRowToTable()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAppendRowToTable()|6", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void testPrependRowToTable() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPrependRowToTable()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>"));
        org.jsoup.nodes.Element table = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependRowToTable()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testPrependRowToTable()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPrependRowToTable()|1", org.jsoup.nodes.Document.class, doc).select("tbody")).first());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependRowToTable()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependRowToTable()|4", org.jsoup.nodes.Element.class, table).prepend("<tr><td>2</td></tr>"));
        org.junit.Assert.assertEquals("<table><tbody><tr><td>2</td></tr><tr><td>1</td></tr></tbody></table>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependRowToTable()|9", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependRowToTable()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependRowToTable()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPrependRowToTable()|6", org.jsoup.nodes.Document.class, doc).body()).html()))));
        // check sibling index (reindexChildren):
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testPrependRowToTable()|11", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPrependRowToTable()|10", org.jsoup.nodes.Document.class, doc).select("tr"));
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependRowToTable()|12", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependRowToTable()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testPrependRowToTable()|13", org.jsoup.select.Elements.class, ps).size())); i++) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependRowToTable()|15", i), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependRowToTable()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependRowToTable()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testPrependRowToTable()|16", org.jsoup.select.Elements.class, ps).get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependRowToTable()|17", i))).siblingIndex));
        }
    }

    @org.junit.Test
    public void testPrependElement() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPrependElement()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependElement()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPrependElement()|1", org.jsoup.nodes.Document.class, doc).getElementById("1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependElement()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependElement()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependElement()|3", org.jsoup.nodes.Element.class, div).prependElement("p")).text("Before"));
        org.junit.Assert.assertEquals("Before", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependElement()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependElement()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependElement()|6", org.jsoup.nodes.Element.class, div).child(0)).text()));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependElement()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependElement()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependElement()|9", org.jsoup.nodes.Element.class, div).child(1)).text()));
    }

    @org.junit.Test
    public void testAddNewText() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAddNewText()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewText()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAddNewText()|1", org.jsoup.nodes.Document.class, doc).getElementById("1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewText()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewText()|3", org.jsoup.nodes.Element.class, div).appendText(" there & now >"));
        org.junit.Assert.assertEquals("<p>Hello</p> there &amp; now &gt;", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewText()|7", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewText()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewText()|5", org.jsoup.nodes.Element.class, div).html()))));
    }

    @org.junit.Test
    public void testPrependText() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPrependText()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependText()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPrependText()|1", org.jsoup.nodes.Document.class, doc).getElementById("1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependText()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependText()|3", org.jsoup.nodes.Element.class, div).prependText("there & now > "));
        org.junit.Assert.assertEquals("there & now > Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependText()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependText()|5", org.jsoup.nodes.Element.class, div).text()));
        org.junit.Assert.assertEquals("there &amp; now &gt; <p>Hello</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependText()|9", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependText()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependText()|7", org.jsoup.nodes.Element.class, div).html()))));
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testThrowsOnAddNullText() {
        try {
            org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testThrowsOnAddNullText()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>"));
            org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testThrowsOnAddNullText()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testThrowsOnAddNullText()|1", org.jsoup.nodes.Document.class, doc).getElementById("1"));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testThrowsOnAddNullText()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testThrowsOnAddNullText()|3", org.jsoup.nodes.Element.class, div).appendText(null));
        } catch (java.lang.IllegalArgumentException a1552755452879) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.jsoup.nodes.ElementTest|testThrowsOnAddNullText()|!", a1552755452879);
            throw a1552755452879;
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testThrowsOnPrependNullText() {
        try {
            org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testThrowsOnPrependNullText()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>"));
            org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testThrowsOnPrependNullText()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testThrowsOnPrependNullText()|1", org.jsoup.nodes.Document.class, doc).getElementById("1"));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testThrowsOnPrependNullText()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testThrowsOnPrependNullText()|3", org.jsoup.nodes.Element.class, div).prependText(null));
        } catch (java.lang.IllegalArgumentException a1552755452879) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.jsoup.nodes.ElementTest|testThrowsOnPrependNullText()|!", a1552755452879);
            throw a1552755452879;
        }
    }

    @org.junit.Test
    public void testAddNewHtml() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAddNewHtml()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewHtml()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAddNewHtml()|1", org.jsoup.nodes.Document.class, doc).getElementById("1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewHtml()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewHtml()|3", org.jsoup.nodes.Element.class, div).append("<p>there</p><p>now</p>"));
        org.junit.Assert.assertEquals("<p>Hello</p><p>there</p><p>now</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewHtml()|7", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewHtml()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewHtml()|5", org.jsoup.nodes.Element.class, div).html()))));
        // check sibling index (no reindexChildren):
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testAddNewHtml()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAddNewHtml()|8", org.jsoup.nodes.Document.class, doc).select("p"));
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewHtml()|10", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewHtml()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testAddNewHtml()|11", org.jsoup.select.Elements.class, ps).size())); i++) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewHtml()|13", i), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewHtml()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAddNewHtml()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testAddNewHtml()|14", org.jsoup.select.Elements.class, ps).get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAddNewHtml()|15", i))).siblingIndex));
        }
    }

    @org.junit.Test
    public void testPrependNewHtml() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPrependNewHtml()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependNewHtml()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPrependNewHtml()|1", org.jsoup.nodes.Document.class, doc).getElementById("1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependNewHtml()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependNewHtml()|3", org.jsoup.nodes.Element.class, div).prepend("<p>there</p><p>now</p>"));
        org.junit.Assert.assertEquals("<p>there</p><p>now</p><p>Hello</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependNewHtml()|7", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependNewHtml()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependNewHtml()|5", org.jsoup.nodes.Element.class, div).html()))));
        // check sibling index (reindexChildren):
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testPrependNewHtml()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPrependNewHtml()|8", org.jsoup.nodes.Document.class, doc).select("p"));
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependNewHtml()|10", i)) < (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependNewHtml()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testPrependNewHtml()|11", org.jsoup.select.Elements.class, ps).size())); i++) {
            org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependNewHtml()|13", i), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependNewHtml()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPrependNewHtml()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testPrependNewHtml()|14", org.jsoup.select.Elements.class, ps).get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPrependNewHtml()|15", i))).siblingIndex));
        }
    }

    @org.junit.Test
    public void testSetHtml() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testSetHtml()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtml()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testSetHtml()|1", org.jsoup.nodes.Document.class, doc).getElementById("1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtml()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtml()|3", org.jsoup.nodes.Element.class, div).html("<p>there</p><p>now</p>"));
        org.junit.Assert.assertEquals("<p>there</p><p>now</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testSetHtml()|7", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testSetHtml()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtml()|5", org.jsoup.nodes.Element.class, div).html()))));
    }

    @org.junit.Test
    public void testSetHtmlTitle() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<html><head id=2><title id=1></title></head></html>"));
        org.jsoup.nodes.Element title = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|1", org.jsoup.nodes.Document.class, doc).getElementById("1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|3", org.jsoup.nodes.Element.class, title).html("good"));
        org.junit.Assert.assertEquals("good", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|5", org.jsoup.nodes.Element.class, title).html()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|7", org.jsoup.nodes.Element.class, title).html("<i>bad</i>"));
        org.junit.Assert.assertEquals("&lt;i&gt;bad&lt;/i&gt;", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|9", org.jsoup.nodes.Element.class, title).html()));
        org.jsoup.nodes.Element head = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|11", org.jsoup.nodes.Document.class, doc).getElementById("2"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|13", org.jsoup.nodes.Element.class, head).html("<title><i>bad</i></title>"));
        org.junit.Assert.assertEquals("<title>&lt;i&gt;bad&lt;/i&gt;</title>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testSetHtmlTitle()|15", org.jsoup.nodes.Element.class, head).html()));
    }

    @org.junit.Test
    public void testWrap() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testWrap()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>"));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testWrap()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testWrap()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testWrap()|1", org.jsoup.nodes.Document.class, doc).select("p")).first());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testWrap()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testWrap()|4", org.jsoup.nodes.Element.class, p).wrap("<div class='head'></div>"));
        org.junit.Assert.assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There</p></div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testWrap()|9", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testWrap()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testWrap()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testWrap()|6", org.jsoup.nodes.Document.class, doc).body()).html()))));
        org.jsoup.nodes.Element ret = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testWrap()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testWrap()|10", org.jsoup.nodes.Element.class, p).wrap("<div><div class=foo></div><p>What?</p></div>"));
        org.junit.Assert.assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testWrap()|15", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testWrap()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testWrap()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testWrap()|12", org.jsoup.nodes.Document.class, doc).body()).html()))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testWrap()|16", org.jsoup.nodes.Element.class, ret), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testWrap()|17", org.jsoup.nodes.Element.class, p));
    }

    @org.junit.Test
    public void before() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|before()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>"));
        org.jsoup.nodes.Element p1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|before()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|before()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|before()|1", org.jsoup.nodes.Document.class, doc).select("p")).first());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|before()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|before()|4", org.jsoup.nodes.Element.class, p1).before("<div>one</div><div>two</div>"));
        org.junit.Assert.assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|before()|9", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|before()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|before()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|before()|6", org.jsoup.nodes.Document.class, doc).body()).html()))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|before()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|before()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|before()|11", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|before()|10", org.jsoup.nodes.Document.class, doc).select("p")).last()).before("<p>Three</p><!-- four -->"));
        org.junit.Assert.assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|before()|17", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|before()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|before()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|before()|14", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void after() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|after()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>"));
        org.jsoup.nodes.Element p1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|after()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|after()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|after()|1", org.jsoup.nodes.Document.class, doc).select("p")).first());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|after()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|after()|4", org.jsoup.nodes.Element.class, p1).after("<div>one</div><div>two</div>"));
        org.junit.Assert.assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p></div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|after()|9", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|after()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|after()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|after()|6", org.jsoup.nodes.Document.class, doc).body()).html()))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|after()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|after()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|after()|11", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|after()|10", org.jsoup.nodes.Document.class, doc).select("p")).last()).after("<p>Three</p><!-- four -->"));
        org.junit.Assert.assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p><p>Three</p><!-- four --></div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|after()|17", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|after()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|after()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|after()|14", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void testWrapWithRemainder() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testWrapWithRemainder()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>Hello</p></div>"));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testWrapWithRemainder()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testWrapWithRemainder()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testWrapWithRemainder()|1", org.jsoup.nodes.Document.class, doc).select("p")).first());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testWrapWithRemainder()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testWrapWithRemainder()|4", org.jsoup.nodes.Element.class, p).wrap("<div class='head'></div><p>There!</p>"));
        org.junit.Assert.assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testWrapWithRemainder()|9", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testWrapWithRemainder()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testWrapWithRemainder()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testWrapWithRemainder()|6", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void testHasText() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testHasText()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>Hello</p><p></p></div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasText()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHasText()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testHasText()|1", org.jsoup.nodes.Document.class, doc).select("div")).first());
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHasText()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testHasText()|4", org.jsoup.nodes.Document.class, doc).select("p"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasText()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasText()|6", org.jsoup.nodes.Element.class, div).hasText()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasText()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasText()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHasText()|8", org.jsoup.select.Elements.class, ps).first()).hasText()));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHasText()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHasText()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHasText()|11", org.jsoup.select.Elements.class, ps).last()).hasText()));
    }

    @org.junit.Test
    public void dataset() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|dataset()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|dataset()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|dataset()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|dataset()|1", org.jsoup.nodes.Document.class, doc).select("div")).first());
        java.util.Map<java.lang.String, java.lang.String> dataset = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.nodes.ElementTest|dataset()|5", java.util.Map.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|dataset()|4", org.jsoup.nodes.Element.class, div).dataset());
        org.jsoup.nodes.Attributes attributes = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|dataset()|7", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|dataset()|6", org.jsoup.nodes.Element.class, div).attributes());
        // size, get, set, add, remove
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.nodes.ElementTest|dataset()|8", java.util.Map.class, dataset).size()));
        org.junit.Assert.assertEquals("jsoup", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.nodes.ElementTest|dataset()|10", java.util.Map.class, dataset).get("name")));
        org.junit.Assert.assertEquals("jar", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.nodes.ElementTest|dataset()|12", java.util.Map.class, dataset).get("package")));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.nodes.ElementTest|dataset()|14", java.util.Map.class, dataset).put("name", "jsoup updated"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.nodes.ElementTest|dataset()|16", java.util.Map.class, dataset).put("language", "java"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.nodes.ElementTest|dataset()|18", java.util.Map.class, dataset).remove("package"));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.nodes.ElementTest|dataset()|20", java.util.Map.class, dataset).size()));
        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|dataset()|22", org.jsoup.nodes.Attributes.class, attributes).size()));
        org.junit.Assert.assertEquals("jsoup updated", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|dataset()|24", org.jsoup.nodes.Attributes.class, attributes).get("data-name")));
        org.junit.Assert.assertEquals("jsoup updated", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.nodes.ElementTest|dataset()|26", java.util.Map.class, dataset).get("name")));
        org.junit.Assert.assertEquals("java", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|dataset()|28", org.jsoup.nodes.Attributes.class, attributes).get("data-language")));
        org.junit.Assert.assertEquals("java", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.nodes.ElementTest|dataset()|30", java.util.Map.class, dataset).get("language")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|dataset()|33", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|dataset()|32", org.jsoup.nodes.Attributes.class, attributes).put("data-food", "bacon"));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.nodes.ElementTest|dataset()|34", java.util.Map.class, dataset).size()));
        org.junit.Assert.assertEquals("bacon", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|37", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.nodes.ElementTest|dataset()|36", java.util.Map.class, dataset).get("food")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|dataset()|39", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|dataset()|38", org.jsoup.nodes.Attributes.class, attributes).put("data-", "empty"));
        org.junit.Assert.assertEquals(null, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|41", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.nodes.ElementTest|dataset()|40", java.util.Map.class, dataset).get("")));// data- is not a data attribute

        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|dataset()|44", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|dataset()|43", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|dataset()|42", org.jsoup.nodes.Document.class, doc).select("p")).first());
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|dataset()|47", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.jsoup.nodes.ElementTest|dataset()|46", java.util.Map.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|dataset()|45", org.jsoup.nodes.Element.class, p).dataset()).size()));
    }

    @org.junit.Test
    public void parentlessToString() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|parentlessToString()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<img src='foo'>"));
        org.jsoup.nodes.Element img = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|parentlessToString()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|parentlessToString()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|parentlessToString()|1", org.jsoup.nodes.Document.class, doc).select("img")).first());
        org.junit.Assert.assertEquals("<img src=\"foo\">", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|parentlessToString()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|parentlessToString()|4", org.jsoup.nodes.Element.class, img).toString()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|parentlessToString()|6", org.jsoup.nodes.Element.class, img).remove();// lost its parent

        org.junit.Assert.assertEquals("<img src=\"foo\">", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|parentlessToString()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|parentlessToString()|7", org.jsoup.nodes.Element.class, img).toString()));
    }

    @org.junit.Test
    public void testClone() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClone()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>"));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testClone()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClone()|1", org.jsoup.nodes.Document.class, doc).select("p")).get(1));
        org.jsoup.nodes.Element clone = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|4", org.jsoup.nodes.Element.class, p).clone());
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|6", org.jsoup.nodes.Element.class, clone).parent()));// should be orphaned

        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClone()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|8", org.jsoup.nodes.Element.class, clone).siblingIndex));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClone()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|10", org.jsoup.nodes.Element.class, p).siblingIndex));
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|12", org.jsoup.nodes.Element.class, p).parent()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|14", org.jsoup.nodes.Element.class, clone).append("<span>Three"));
        org.junit.Assert.assertEquals("<p><span>Two</span><span>Three</span></p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClone()|18", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClone()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|16", org.jsoup.nodes.Element.class, clone).outerHtml()))));
        org.junit.Assert.assertEquals("<div><p>One</p><p><span>Two</span></p></div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClone()|22", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClone()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|20", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClone()|19", org.jsoup.nodes.Document.class, doc).body()).html()))));// not modified

        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|26", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|24", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClone()|23", org.jsoup.nodes.Document.class, doc).body()).appendChild(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|25", org.jsoup.nodes.Element.class, clone))// adopt
        );
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|28", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|27", org.jsoup.nodes.Element.class, clone).parent()));
        org.junit.Assert.assertEquals("<div><p>One</p><p><span>Two</span></p></div><p><span>Two</span><span>Three</span></p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClone()|32", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClone()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClone()|30", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClone()|29", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void testClonesClassnames() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div class='one two'></div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|1", org.jsoup.nodes.Document.class, doc).select("div")).first());
        java.util.Set<java.lang.String> classes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|5", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|4", org.jsoup.nodes.Element.class, div).classNames());
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClonesClassnames()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|6", java.util.Set.class, classes).size()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClonesClassnames()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|8", java.util.Set.class, classes).contains("one")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClonesClassnames()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|10", java.util.Set.class, classes).contains("two")));
        org.jsoup.nodes.Element copy = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|12", org.jsoup.nodes.Element.class, div).clone());
        java.util.Set<java.lang.String> copyClasses = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|15", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|14", org.jsoup.nodes.Element.class, copy).classNames());
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClonesClassnames()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|16", java.util.Set.class, copyClasses).size()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClonesClassnames()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|18", java.util.Set.class, copyClasses).contains("one")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClonesClassnames()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|20", java.util.Set.class, copyClasses).contains("two")));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClonesClassnames()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|22", java.util.Set.class, copyClasses).add("three"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClonesClassnames()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|24", java.util.Set.class, copyClasses).remove("one"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClonesClassnames()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|26", java.util.Set.class, classes).contains("one")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClonesClassnames()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|28", java.util.Set.class, classes).contains("three")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClonesClassnames()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|30", java.util.Set.class, copyClasses).contains("one")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClonesClassnames()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|32", java.util.Set.class, copyClasses).contains("three")));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClonesClassnames()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|34", org.jsoup.nodes.Element.class, div).html()));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClonesClassnames()|37", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClonesClassnames()|36", org.jsoup.nodes.Element.class, copy).html()));
    }

    @org.junit.Test
    public void testShallowClone() {
        java.lang.String base = "http://example.com/";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1 class=one><p id=2 class=two>One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShallowClone()|0", base)));
        org.jsoup.nodes.Element d = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|2", org.jsoup.nodes.Document.class, doc).selectFirst("div"));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|4", org.jsoup.nodes.Document.class, doc).selectFirst("p"));
        org.jsoup.nodes.TextNode t = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|8", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|7", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|6", org.jsoup.nodes.Element.class, p).textNodes()).get(0));
        org.jsoup.nodes.Element d2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|9", org.jsoup.nodes.Element.class, d).shallowClone());
        org.jsoup.nodes.Element p2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|11", org.jsoup.nodes.Element.class, p).shallowClone());
        org.jsoup.nodes.TextNode t2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|14", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|13", org.jsoup.nodes.TextNode.class, t).shallowClone())));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShallowClone()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|15", org.jsoup.nodes.Element.class, d).childNodeSize()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShallowClone()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|17", org.jsoup.nodes.Element.class, d2).childNodeSize()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShallowClone()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|19", org.jsoup.nodes.Element.class, p).childNodeSize()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShallowClone()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|21", org.jsoup.nodes.Element.class, p2).childNodeSize()));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShallowClone()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|23", org.jsoup.nodes.Element.class, p2).text()));
        org.junit.Assert.assertEquals("two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShallowClone()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|25", org.jsoup.nodes.Element.class, p2).className()));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShallowClone()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|27", org.jsoup.nodes.TextNode.class, t2).text()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|30", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|29", org.jsoup.nodes.Element.class, d2).append("<p id=3>Three"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShallowClone()|32", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|31", org.jsoup.nodes.Element.class, d2).childNodeSize()));
        org.junit.Assert.assertEquals("Three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShallowClone()|34", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|33", org.jsoup.nodes.Element.class, d2).text()));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShallowClone()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|35", org.jsoup.nodes.Element.class, d).text()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShallowClone()|37", base), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShallowClone()|39", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShallowClone()|38", org.jsoup.nodes.Element.class, d2).baseUri()));
    }

    @org.junit.Test
    public void testTagNameSet() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testTagNameSet()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><i>Hello</i>"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testTagNameSet()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testTagNameSet()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testTagNameSet()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testTagNameSet()|1", org.jsoup.nodes.Document.class, doc).select("i")).first()).tagName("em"));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testTagNameSet()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testTagNameSet()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testTagNameSet()|5", org.jsoup.nodes.Document.class, doc).select("i")).size()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testTagNameSet()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testTagNameSet()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testTagNameSet()|8", org.jsoup.nodes.Document.class, doc).select("em")).size()));
        org.junit.Assert.assertEquals("<em>Hello</em>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testTagNameSet()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testTagNameSet()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testTagNameSet()|12", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testTagNameSet()|11", org.jsoup.nodes.Document.class, doc).select("div")).first()).html()));
    }

    @org.junit.Test
    public void testHtmlContainsOuter() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>Check</title> <div>Hello there</div>"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|3", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|2", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|1", org.jsoup.nodes.Document.class, doc).outputSettings()).indentAmount(0));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|9", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|4", org.jsoup.nodes.Document.class, doc).html()).contains(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|6", org.jsoup.nodes.Document.class, doc).select("title")).outerHtml()))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|15", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|10", org.jsoup.nodes.Document.class, doc).html()).contains(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|13", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testHtmlContainsOuter()|12", org.jsoup.nodes.Document.class, doc).select("div")).outerHtml()))));
    }

    @org.junit.Test
    public void testGetTextNodes() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>"));
        java.util.List<org.jsoup.nodes.TextNode> textNodes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|4", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|1", org.jsoup.nodes.Document.class, doc).select("p")).first()).textNodes());
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetTextNodes()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|5", java.util.List.class, textNodes).size()));
        org.junit.Assert.assertEquals("One ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetTextNodes()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|8", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|7", java.util.List.class, textNodes).get(0)).text()));
        org.junit.Assert.assertEquals(" Three ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetTextNodes()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|11", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|10", java.util.List.class, textNodes).get(1)).text()));
        org.junit.Assert.assertEquals(" Four", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetTextNodes()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|14", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|13", java.util.List.class, textNodes).get(2)).text()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetTextNodes()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|19", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|17", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetTextNodes()|16", org.jsoup.nodes.Document.class, doc).select("br")).first()).textNodes()).size()));
    }

    @org.junit.Test
    public void testManipulateTextNodes() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>"));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|1", org.jsoup.nodes.Document.class, doc).select("p")).first());
        java.util.List<org.jsoup.nodes.TextNode> textNodes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|5", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|4", org.jsoup.nodes.Element.class, p).textNodes());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|8", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|7", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|6", java.util.List.class, textNodes).get(1)).text(" three-more "));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|12", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|11", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|10", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|9", java.util.List.class, textNodes).get(2)).splitText(3)).text("-ur"));
        org.junit.Assert.assertEquals("One Two three-more Fo-ur", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|13", org.jsoup.nodes.Element.class, p).text()));
        org.junit.Assert.assertEquals("One three-more Fo-ur", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|15", org.jsoup.nodes.Element.class, p).ownText()));
        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|18", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testManipulateTextNodes()|17", org.jsoup.nodes.Element.class, p).textNodes()).size()));// grew because of split

    }

    @org.junit.Test
    public void testGetDataNodes() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>"));
        org.jsoup.nodes.Element script = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|1", org.jsoup.nodes.Document.class, doc).select("script")).first());
        org.jsoup.nodes.Element style = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|4", org.jsoup.nodes.Document.class, doc).select("style")).first());
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|7", org.jsoup.nodes.Document.class, doc).select("p")).first());
        java.util.List<org.jsoup.nodes.DataNode> scriptData = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.DataNode>>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|11", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|10", org.jsoup.nodes.Element.class, script).dataNodes());
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetDataNodes()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.DataNode>>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|12", java.util.List.class, scriptData).size()));
        org.junit.Assert.assertEquals("One Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetDataNodes()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.DataNode>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|15", org.jsoup.nodes.DataNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.DataNode>>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|14", java.util.List.class, scriptData).get(0)).getWholeData()));
        java.util.List<org.jsoup.nodes.DataNode> styleData = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.DataNode>>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|18", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|17", org.jsoup.nodes.Element.class, style).dataNodes());
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetDataNodes()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.DataNode>>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|19", java.util.List.class, styleData).size()));
        org.junit.Assert.assertEquals("Three Four", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetDataNodes()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.DataNode>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|22", org.jsoup.nodes.DataNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.DataNode>>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|21", java.util.List.class, styleData).get(0)).getWholeData()));
        java.util.List<org.jsoup.nodes.DataNode> pData = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.DataNode>>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|25", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|24", org.jsoup.nodes.Element.class, p).dataNodes());
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testGetDataNodes()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.DataNode>>observeState("org.jsoup.nodes.ElementTest|testGetDataNodes()|26", java.util.List.class, pData).size()));
    }

    @org.junit.Test
    public void elementIsNotASiblingOfItself() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>One<p>Two<p>Three</div>"));
        org.jsoup.nodes.Element p2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|1", org.jsoup.nodes.Document.class, doc).select("p")).get(1));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|4", org.jsoup.nodes.Element.class, p2).text()));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|6", org.jsoup.nodes.Element.class, p2).siblingElements());
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|8", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("<p>One</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|10", org.jsoup.select.Elements.class, els).get(0)).outerHtml()));
        org.junit.Assert.assertEquals("<p>Three</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|elementIsNotASiblingOfItself()|13", org.jsoup.select.Elements.class, els).get(1)).outerHtml()));
    }

    @org.junit.Test
    public void testChildThrowsIndexOutOfBoundsOnMissing() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testChildThrowsIndexOutOfBoundsOnMissing()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>One</p><p>Two</p></div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildThrowsIndexOutOfBoundsOnMissing()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildThrowsIndexOutOfBoundsOnMissing()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testChildThrowsIndexOutOfBoundsOnMissing()|1", org.jsoup.nodes.Document.class, doc).select("div")).first());
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildThrowsIndexOutOfBoundsOnMissing()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildThrowsIndexOutOfBoundsOnMissing()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildThrowsIndexOutOfBoundsOnMissing()|4", org.jsoup.nodes.Element.class, div).children()).size()));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildThrowsIndexOutOfBoundsOnMissing()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildThrowsIndexOutOfBoundsOnMissing()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildThrowsIndexOutOfBoundsOnMissing()|7", org.jsoup.nodes.Element.class, div).child(0)).text()));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildThrowsIndexOutOfBoundsOnMissing()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildThrowsIndexOutOfBoundsOnMissing()|10", org.jsoup.nodes.Element.class, div).child(3));
            org.junit.Assert.fail("Should throw index out of bounds");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
    }

    @org.junit.Test
    public void moveByAppend() {
        // test for https://github.com/jhy/jsoup/issues/239
        // can empty an element and append its children to another element
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>"));
        org.jsoup.nodes.Element div1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|1", org.jsoup.nodes.Document.class, doc).select("div")).get(0));
        org.jsoup.nodes.Element div2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|4", org.jsoup.nodes.Document.class, doc).select("div")).get(1));
        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|moveByAppend()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|7", org.jsoup.nodes.Element.class, div1).childNodeSize()));
        java.util.List<org.jsoup.nodes.Node> children = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|10", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|9", org.jsoup.nodes.Element.class, div1).childNodes());
        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|moveByAppend()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|11", java.util.List.class, children).size()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|13", org.jsoup.nodes.Element.class, div2).insertChildren(0, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|14", java.util.List.class, children)));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|moveByAppend()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|16", java.util.List.class, children).size()));// children is backed by div1.childNodes, moved, so should be 0 now

        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|moveByAppend()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|18", org.jsoup.nodes.Element.class, div1).childNodeSize()));
        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|moveByAppend()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|20", org.jsoup.nodes.Element.class, div2).childNodeSize()));
        org.junit.Assert.assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p> Text \n <p>Two</p>\n</div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|moveByAppend()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|23", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|moveByAppend()|22", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void insertChildrenArgumentValidation() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>"));
        org.jsoup.nodes.Element div1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|1", org.jsoup.nodes.Document.class, doc).select("div")).get(0));
        org.jsoup.nodes.Element div2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|4", org.jsoup.nodes.Document.class, doc).select("div")).get(1));
        java.util.List<org.jsoup.nodes.Node> children = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|8", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|7", org.jsoup.nodes.Element.class, div1).childNodes());
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|9", org.jsoup.nodes.Element.class, div2).insertChildren(6, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|10", java.util.List.class, children)));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException e) {
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|12", org.jsoup.nodes.Element.class, div2).insertChildren((-5), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|13", java.util.List.class, children)));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException e) {
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenArgumentValidation()|15", org.jsoup.nodes.Element.class, div2).insertChildren(0, ((java.util.Collection<? extends org.jsoup.nodes.Node>) (null))));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @org.junit.Test
    public void insertChildrenAtPosition() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>"));
        org.jsoup.nodes.Element div1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|1", org.jsoup.nodes.Document.class, doc).select("div")).get(0));
        org.jsoup.select.Elements p1s = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|4", org.jsoup.nodes.Element.class, div1).select("p"));
        org.jsoup.nodes.Element div2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|6", org.jsoup.nodes.Document.class, doc).select("div")).get(1));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|9", org.jsoup.nodes.Element.class, div2).childNodeSize()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|11", org.jsoup.nodes.Element.class, div2).insertChildren((-1), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|12", org.jsoup.select.Elements.class, p1s)));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|14", org.jsoup.nodes.Element.class, div1).childNodeSize()));// moved two out

        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|16", org.jsoup.nodes.Element.class, div2).childNodeSize()));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|19", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|18", org.jsoup.select.Elements.class, p1s).get(1)).siblingIndex()));// should be last

        java.util.List<org.jsoup.nodes.Node> els = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|21", java.util.ArrayList.class, new java.util.ArrayList<>());
        org.jsoup.nodes.Element el1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|24", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|23", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|22", org.jsoup.parser.Tag.class, org.jsoup.parser.Tag.valueOf("span")), "")).text("Span1"));
        org.jsoup.nodes.Element el2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|27", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|26", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|25", org.jsoup.parser.Tag.class, org.jsoup.parser.Tag.valueOf("span")), "")).text("Span2"));
        org.jsoup.nodes.TextNode tn1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|28", org.jsoup.nodes.TextNode.class, new org.jsoup.nodes.TextNode("Text4"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|29", java.util.List.class, els).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|30", org.jsoup.nodes.Element.class, el1)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|34", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|32", java.util.List.class, els).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|33", org.jsoup.nodes.Element.class, el2)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|37", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|35", java.util.List.class, els).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|36", org.jsoup.nodes.TextNode.class, tn1)));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|39", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|38", org.jsoup.nodes.Element.class, el1).parent()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|42", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|40", org.jsoup.nodes.Element.class, div2).insertChildren((-2), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|41", java.util.List.class, els)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|43", org.jsoup.nodes.Element.class, div2), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|45", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|44", org.jsoup.nodes.Element.class, el1).parent()));
        org.junit.Assert.assertEquals(7, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|47", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|46", org.jsoup.nodes.Element.class, div2).childNodeSize()));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|49", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|48", org.jsoup.nodes.Element.class, el1).siblingIndex()));
        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|51", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|50", org.jsoup.nodes.Element.class, el2).siblingIndex()));
        org.junit.Assert.assertEquals(5, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|53", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|insertChildrenAtPosition()|52", org.jsoup.nodes.TextNode.class, tn1).siblingIndex()));
    }

    @org.junit.Test
    public void insertChildrenAsCopy() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>"));
        org.jsoup.nodes.Element div1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|1", org.jsoup.nodes.Document.class, doc).select("div")).get(0));
        org.jsoup.nodes.Element div2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|4", org.jsoup.nodes.Document.class, doc).select("div")).get(1));
        org.jsoup.select.Elements ps = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|7", org.jsoup.nodes.Document.class, doc).select("p")).clone());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|10", org.jsoup.select.Elements.class, ps).first()).text("One cloned"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|13", org.jsoup.nodes.Element.class, div2).insertChildren((-1), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|14", org.jsoup.select.Elements.class, ps)));
        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|16", org.jsoup.nodes.Element.class, div1).childNodeSize()));// not moved -- cloned

        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|18", org.jsoup.nodes.Element.class, div2).childNodeSize()));
        org.junit.Assert.assertEquals("<div id=\"1\">Text <p>One</p> Text <p>Two</p></div><div id=\"2\"><p>One cloned</p><p>Two</p></div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|23", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|21", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|insertChildrenAsCopy()|20", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void testCssPath() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testCssPath()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>"));
        org.jsoup.nodes.Element divA = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testCssPath()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testCssPath()|1", org.jsoup.nodes.Document.class, doc).select("div")).get(0));
        org.jsoup.nodes.Element divB = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testCssPath()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testCssPath()|4", org.jsoup.nodes.Document.class, doc).select("div")).get(1));
        org.jsoup.nodes.Element divC = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testCssPath()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testCssPath()|7", org.jsoup.nodes.Document.class, doc).select("div")).get(2));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testCssPath()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|10", org.jsoup.nodes.Element.class, divA).cssSelector()), "#id1");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testCssPath()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|12", org.jsoup.nodes.Element.class, divB).cssSelector()), "html > body > div:nth-child(2)");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testCssPath()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|14", org.jsoup.nodes.Element.class, divC).cssSelector()), "html > body > div.c1.c2");
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|16", org.jsoup.nodes.Element.class, divA)) == (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|21", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testCssPath()|20", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testCssPath()|17", org.jsoup.nodes.Document.class, doc).select(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testCssPath()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|18", org.jsoup.nodes.Element.class, divA).cssSelector()))).first()))));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|22", org.jsoup.nodes.Element.class, divB)) == (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|27", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testCssPath()|26", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testCssPath()|23", org.jsoup.nodes.Document.class, doc).select(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testCssPath()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|24", org.jsoup.nodes.Element.class, divB).cssSelector()))).first()))));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|28", org.jsoup.nodes.Element.class, divC)) == (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|33", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testCssPath()|32", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testCssPath()|29", org.jsoup.nodes.Document.class, doc).select(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testCssPath()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testCssPath()|30", org.jsoup.nodes.Element.class, divC).cssSelector()))).first()))));
    }

    @org.junit.Test
    public void testClassNames() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClassNames()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassNames()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testClassNames()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testClassNames()|1", org.jsoup.nodes.Document.class, doc).select("div")).get(0));
        org.junit.Assert.assertEquals("c1 c2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassNames()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassNames()|4", org.jsoup.nodes.Element.class, div).className()));
        final java.util.Set<java.lang.String> set1 = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassNames()|7", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassNames()|6", org.jsoup.nodes.Element.class, div).classNames());
        final java.lang.Object[] arr1 = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.jsoup.nodes.ElementTest|testClassNames()|9", java.lang.Object[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassNames()|8", java.util.Set.class, set1).toArray());
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassNames()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.jsoup.nodes.ElementTest|testClassNames()|10", java.lang.Object[].class, arr1).length)) == 2));
        org.junit.Assert.assertEquals("c1", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.jsoup.nodes.ElementTest|testClassNames()|13", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.jsoup.nodes.ElementTest|testClassNames()|12", java.lang.Object[].class, arr1)[0]));
        org.junit.Assert.assertEquals("c2", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.jsoup.nodes.ElementTest|testClassNames()|15", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.jsoup.nodes.ElementTest|testClassNames()|14", java.lang.Object[].class, arr1)[1]));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassNames()|17", // Changes to the set should not be reflected in the Elements getters
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassNames()|16", java.util.Set.class, set1).add("c3"));
        org.junit.Assert.assertTrue((2 == (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassNames()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassNames()|19", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassNames()|18", org.jsoup.nodes.Element.class, div).classNames()).size()))));
        org.junit.Assert.assertEquals("c1 c2", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassNames()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassNames()|21", org.jsoup.nodes.Element.class, div).className()));
        // Update the class names to a fresh set
        final java.util.Set<java.lang.String> newSet = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.LinkedHashSet<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassNames()|23", java.util.LinkedHashSet.class, new java.util.LinkedHashSet<>(3));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassNames()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassNames()|24", java.util.Set.class, newSet).addAll(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassNames()|25", java.util.Set.class, set1)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassNames()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassNames()|27", java.util.Set.class, newSet).add("c3"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassNames()|31", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassNames()|29", org.jsoup.nodes.Element.class, div).classNames(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassNames()|30", java.util.Set.class, newSet)));
        org.junit.Assert.assertEquals("c1 c2 c3", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassNames()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassNames()|32", org.jsoup.nodes.Element.class, div).className()));
        final java.util.Set<java.lang.String> set2 = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassNames()|35", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testClassNames()|34", org.jsoup.nodes.Element.class, div).classNames());
        final java.lang.Object[] arr2 = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.jsoup.nodes.ElementTest|testClassNames()|37", java.lang.Object[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|testClassNames()|36", java.util.Set.class, set2).toArray());
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testClassNames()|39", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.jsoup.nodes.ElementTest|testClassNames()|38", java.lang.Object[].class, arr2).length)) == 3));
        org.junit.Assert.assertEquals("c1", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.jsoup.nodes.ElementTest|testClassNames()|41", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.jsoup.nodes.ElementTest|testClassNames()|40", java.lang.Object[].class, arr2)[0]));
        org.junit.Assert.assertEquals("c2", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.jsoup.nodes.ElementTest|testClassNames()|43", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.jsoup.nodes.ElementTest|testClassNames()|42", java.lang.Object[].class, arr2)[1]));
        org.junit.Assert.assertEquals("c3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("org.jsoup.nodes.ElementTest|testClassNames()|45", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("org.jsoup.nodes.ElementTest|testClassNames()|44", java.lang.Object[].class, arr2)[2]));
    }

    @org.junit.Test
    public void testHashAndEqualsAndValue() {
        // .equals and hashcode are identity. value is content.
        java.lang.String doc1 = "<div id=1><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>" + "<div id=2><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|0", doc1)));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|2", org.jsoup.nodes.Document.class, doc).select("p"));
        /* for (Element el : els) {
        System.out.println(el.hashCode() + " - " + el.outerHtml());
        }

        0 1534787905 - <p class="one">One</p>
        1 1534787905 - <p class="one">One</p>
        2 1539683239 - <p class="one">Two</p>
        3 1535455211 - <p class="two">One</p>
        4 1534787905 - <p class="one">One</p>
        5 1534787905 - <p class="one">One</p>
        6 1539683239 - <p class="one">Two</p>
        7 1535455211 - <p class="two">One</p>
         */
        org.junit.Assert.assertEquals(8, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|4", org.jsoup.select.Elements.class, els).size()));
        org.jsoup.nodes.Element e0 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|6", org.jsoup.select.Elements.class, els).get(0));
        org.jsoup.nodes.Element e1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|8", org.jsoup.select.Elements.class, els).get(1));
        org.jsoup.nodes.Element e2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|10", org.jsoup.select.Elements.class, els).get(2));
        org.jsoup.nodes.Element e3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|12", org.jsoup.select.Elements.class, els).get(3));
        org.jsoup.nodes.Element e4 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|14", org.jsoup.select.Elements.class, els).get(4));
        org.jsoup.nodes.Element e5 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|17", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|16", org.jsoup.select.Elements.class, els).get(5));
        org.jsoup.nodes.Element e6 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|19", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|18", org.jsoup.select.Elements.class, els).get(6));
        org.jsoup.nodes.Element e7 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|21", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|20", org.jsoup.select.Elements.class, els).get(7));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|22", org.jsoup.nodes.Element.class, e0), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|23", org.jsoup.nodes.Element.class, e0));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|24", org.jsoup.nodes.Element.class, e0).hasSameValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|25", org.jsoup.nodes.Element.class, e1))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|27", org.jsoup.nodes.Element.class, e0).hasSameValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|28", org.jsoup.nodes.Element.class, e4))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|32", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|30", org.jsoup.nodes.Element.class, e0).hasSameValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|31", org.jsoup.nodes.Element.class, e5))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|33", org.jsoup.nodes.Element.class, e0).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|34", org.jsoup.nodes.Element.class, e2))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|38", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|36", org.jsoup.nodes.Element.class, e0).hasSameValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|37", org.jsoup.nodes.Element.class, e2))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|41", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|39", org.jsoup.nodes.Element.class, e0).hasSameValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|40", org.jsoup.nodes.Element.class, e3))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|44", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|42", org.jsoup.nodes.Element.class, e0).hasSameValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|43", org.jsoup.nodes.Element.class, e6))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|47", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|45", org.jsoup.nodes.Element.class, e0).hasSameValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|46", org.jsoup.nodes.Element.class, e7))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|49", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|48", org.jsoup.nodes.Element.class, e0).hashCode()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|51", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|50", org.jsoup.nodes.Element.class, e0).hashCode()));
        org.junit.Assert.assertFalse(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|53", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|52", org.jsoup.nodes.Element.class, e0).hashCode())) == (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|55", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|54", org.jsoup.nodes.Element.class, e2).hashCode()))));
        org.junit.Assert.assertFalse(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|57", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|56", org.jsoup.nodes.Element.class, e0).hashCode())) == (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|59", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|58", org.jsoup.nodes.Element.class, e3).hashCode()))));
        org.junit.Assert.assertFalse(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|61", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|60", org.jsoup.nodes.Element.class, e0).hashCode())) == (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|63", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|62", org.jsoup.nodes.Element.class, e6).hashCode()))));
        org.junit.Assert.assertFalse(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|65", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|64", org.jsoup.nodes.Element.class, e0).hashCode())) == (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|67", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashAndEqualsAndValue()|66", org.jsoup.nodes.Element.class, e7).hashCode()))));
    }

    @org.junit.Test
    public void testRelativeUrls() {
        java.lang.String html = "<body><a href='./one.html'>One</a> <a href='two.html'>two</a> <a href='../three.html'>Three</a> <a href='//example2.com/four/'>Four</a> <a href='https://example2.com/five/'>Five</a>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testRelativeUrls()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testRelativeUrls()|0", html), "http://example.com/bar/"));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRelativeUrls()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testRelativeUrls()|2", org.jsoup.nodes.Document.class, doc).select("a"));
        org.junit.Assert.assertEquals("http://example.com/bar/one.html", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testRelativeUrls()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRelativeUrls()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRelativeUrls()|4", org.jsoup.select.Elements.class, els).get(0)).absUrl("href")));
        org.junit.Assert.assertEquals("http://example.com/bar/two.html", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testRelativeUrls()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRelativeUrls()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRelativeUrls()|7", org.jsoup.select.Elements.class, els).get(1)).absUrl("href")));
        org.junit.Assert.assertEquals("http://example.com/three.html", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testRelativeUrls()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRelativeUrls()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRelativeUrls()|10", org.jsoup.select.Elements.class, els).get(2)).absUrl("href")));
        org.junit.Assert.assertEquals("http://example2.com/four/", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testRelativeUrls()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRelativeUrls()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRelativeUrls()|13", org.jsoup.select.Elements.class, els).get(3)).absUrl("href")));
        org.junit.Assert.assertEquals("https://example2.com/five/", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testRelativeUrls()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRelativeUrls()|17", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRelativeUrls()|16", org.jsoup.select.Elements.class, els).get(4)).absUrl("href")));
    }

    @org.junit.Test
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|0", org.jsoup.nodes.Document.class, new org.jsoup.nodes.Document(""));
        org.jsoup.nodes.Element body = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|1", org.jsoup.nodes.Document.class, doc).appendElement("body"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|3", org.jsoup.nodes.Element.class, body).appendElement("div1"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|5", org.jsoup.nodes.Element.class, body).appendElement("div2"));
        final org.jsoup.nodes.Element div3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|7", org.jsoup.nodes.Element.class, body).appendElement("div3"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|9", org.jsoup.nodes.Element.class, div3).text("Check"));
        final org.jsoup.nodes.Element div4 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|11", org.jsoup.nodes.Element.class, body).appendElement("div4"));
        java.util.ArrayList<org.jsoup.nodes.Element> toMove = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|13", java.util.ArrayList.class, new java.util.ArrayList<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|14", java.util.ArrayList.class, toMove).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|15", org.jsoup.nodes.Element.class, div3)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|17", java.util.ArrayList.class, toMove).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|18", org.jsoup.nodes.Element.class, div4)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|22", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|20", org.jsoup.nodes.Element.class, body).insertChildren(0, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|21", java.util.ArrayList.class, toMove)));
        java.lang.String result = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|25", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|23", org.jsoup.nodes.Document.class, doc).toString()).replaceAll("\\s+", ""));
        org.junit.Assert.assertEquals("<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|appendMustCorrectlyMoveChildrenInsideOneParentElement()|26", result));
    }

    @org.junit.Test
    public void testHashcodeIsStableWithContentChanges() {
        org.jsoup.nodes.Element root = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashcodeIsStableWithContentChanges()|1", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.ElementTest|testHashcodeIsStableWithContentChanges()|0", org.jsoup.parser.Tag.class, org.jsoup.parser.Tag.valueOf("root")), ""));
        java.util.HashSet<org.jsoup.nodes.Element> set = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashSet<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testHashcodeIsStableWithContentChanges()|2", java.util.HashSet.class, new java.util.HashSet<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashcodeIsStableWithContentChanges()|5", // Add root node:
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashSet<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testHashcodeIsStableWithContentChanges()|3", java.util.HashSet.class, set).add(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashcodeIsStableWithContentChanges()|4", org.jsoup.nodes.Element.class, root)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashcodeIsStableWithContentChanges()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashcodeIsStableWithContentChanges()|6", org.jsoup.nodes.Element.class, root).appendChild(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashcodeIsStableWithContentChanges()|8", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.ElementTest|testHashcodeIsStableWithContentChanges()|7", org.jsoup.parser.Tag.class, org.jsoup.parser.Tag.valueOf("a")), ""))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testHashcodeIsStableWithContentChanges()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.HashSet<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testHashcodeIsStableWithContentChanges()|10", java.util.HashSet.class, set).contains(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testHashcodeIsStableWithContentChanges()|11", org.jsoup.nodes.Element.class, root))));
    }

    @org.junit.Test
    public void testNamespacedElements() {
        // Namespaces with ns:tag in HTML must be translated to ns|tag in CSS.
        java.lang.String html = "<html><body><fb:comments /></body></html>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNamespacedElements()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNamespacedElements()|0", html), "http://example.com/bar/"));
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNamespacedElements()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNamespacedElements()|2", org.jsoup.nodes.Document.class, doc).select("fb|comments"));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNamespacedElements()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNamespacedElements()|4", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals("html > body > fb|comments", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNamespacedElements()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNamespacedElements()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNamespacedElements()|6", org.jsoup.select.Elements.class, els).get(0)).cssSelector()));
    }

    @org.junit.Test
    public void testChainedRemoveAttributes() {
        java.lang.String html = "<a one two three four>Text</a>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testChainedRemoveAttributes()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChainedRemoveAttributes()|0", html)));
        org.jsoup.nodes.Element a = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChainedRemoveAttributes()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChainedRemoveAttributes()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testChainedRemoveAttributes()|2", org.jsoup.nodes.Document.class, doc).select("a")).first());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.ElementTest|testChainedRemoveAttributes()|11", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.ElementTest|testChainedRemoveAttributes()|10", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.ElementTest|testChainedRemoveAttributes()|9", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.ElementTest|testChainedRemoveAttributes()|8", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.ElementTest|testChainedRemoveAttributes()|7", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.ElementTest|testChainedRemoveAttributes()|6", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChainedRemoveAttributes()|5", org.jsoup.nodes.Element.class, a).removeAttr("zero")).removeAttr("one")).removeAttr("two")).removeAttr("three")).removeAttr("four")).removeAttr("five"));
        org.junit.Assert.assertEquals("<a>Text</a>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChainedRemoveAttributes()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChainedRemoveAttributes()|12", org.jsoup.nodes.Element.class, a).outerHtml()));
    }

    @org.junit.Test
    public void testLoopedRemoveAttributes() {
        java.lang.String html = "<a one two three four>Text</a><p foo>Two</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testLoopedRemoveAttributes()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testLoopedRemoveAttributes()|0", html)));
        for (org.jsoup.nodes.Element el : eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testLoopedRemoveAttributes()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testLoopedRemoveAttributes()|2", org.jsoup.nodes.Document.class, doc).getAllElements())) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.ElementTest|testLoopedRemoveAttributes()|5", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testLoopedRemoveAttributes()|4", org.jsoup.nodes.Element.class, el).clearAttributes());
        }
        org.junit.Assert.assertEquals("<a>Text</a>\n<p>Two</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testLoopedRemoveAttributes()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testLoopedRemoveAttributes()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testLoopedRemoveAttributes()|6", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void testIs() {
        java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testIs()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testIs()|0", html)));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testIs()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testIs()|2", org.jsoup.nodes.Document.class, doc).select("p")).first());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testIs()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|5", org.jsoup.nodes.Element.class, p).is("p")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testIs()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|7", org.jsoup.nodes.Element.class, p).is("div")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testIs()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|9", org.jsoup.nodes.Element.class, p).is("p:has(a)")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testIs()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|11", org.jsoup.nodes.Element.class, p).is("p:first-child")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testIs()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|13", org.jsoup.nodes.Element.class, p).is("p:last-child")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testIs()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|15", org.jsoup.nodes.Element.class, p).is("*")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testIs()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|17", org.jsoup.nodes.Element.class, p).is("div p")));
        org.jsoup.nodes.Element q = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|21", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testIs()|20", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testIs()|19", org.jsoup.nodes.Document.class, doc).select("p")).last());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testIs()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|22", org.jsoup.nodes.Element.class, q).is("p")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testIs()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|24", org.jsoup.nodes.Element.class, q).is("p ~ p")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testIs()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|26", org.jsoup.nodes.Element.class, q).is("p + p")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testIs()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|28", org.jsoup.nodes.Element.class, q).is("p:last-child")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testIs()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|30", org.jsoup.nodes.Element.class, q).is("p a")));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testIs()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testIs()|32", org.jsoup.nodes.Element.class, q).is("a")));
    }

    @org.junit.Test
    public void elementByTagName() {
        org.jsoup.nodes.Element a = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|elementByTagName()|0", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element("P"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|elementByTagName()|3", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|elementByTagName()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|elementByTagName()|1", org.jsoup.nodes.Element.class, a).tagName()).equals("P")));
    }

    @org.junit.Test
    public void testChildrenElements() {
        java.lang.String html = "<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|0", html)));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|2", org.jsoup.nodes.Document.class, doc).select("div")).first());
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|5", org.jsoup.nodes.Document.class, doc).select("p")).first());
        org.jsoup.nodes.Element span = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|8", org.jsoup.nodes.Document.class, doc).select("span")).first());
        org.jsoup.nodes.Element foo = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|13", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|12", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|11", org.jsoup.nodes.Document.class, doc).select("foo")).first());
        org.jsoup.nodes.Element img = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|15", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|14", org.jsoup.nodes.Document.class, doc).select("img")).first());
        org.jsoup.select.Elements docChildren = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|18", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|17", org.jsoup.nodes.Element.class, div).children());
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|19", org.jsoup.select.Elements.class, docChildren).size()));
        org.junit.Assert.assertEquals("<p><a>One</a></p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|22", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|21", org.jsoup.select.Elements.class, docChildren).get(0)).outerHtml()));
        org.junit.Assert.assertEquals("<p><a>Two</a></p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|25", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|24", org.jsoup.select.Elements.class, docChildren).get(1)).outerHtml()));
        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|28", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|27", org.jsoup.nodes.Element.class, div).childNodes()).size()));
        org.junit.Assert.assertEquals("Three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|32", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|31", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|30", org.jsoup.nodes.Element.class, div).childNodes()).get(2)).outerHtml()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|35", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|34", org.jsoup.nodes.Element.class, p).children()).size()));
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|39", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|38", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|37", org.jsoup.nodes.Element.class, p).children()).text()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|42", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|41", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|40", org.jsoup.nodes.Element.class, span).children()).size()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|45", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|44", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|43", org.jsoup.nodes.Element.class, span).childNodes()).size()));
        org.junit.Assert.assertEquals("Four", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|49", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|48", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|47", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|46", org.jsoup.nodes.Element.class, span).childNodes()).get(0)).outerHtml()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|52", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|51", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|50", org.jsoup.nodes.Element.class, foo).children()).size()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|55", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|54", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|53", org.jsoup.nodes.Element.class, foo).childNodes()).size()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|58", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|57", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|56", org.jsoup.nodes.Element.class, img).children()).size()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testChildrenElements()|61", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|60", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testChildrenElements()|59", org.jsoup.nodes.Element.class, img).childNodes()).size()));
    }

    @org.junit.Test
    public void testShadowElementsAreUpdated() {
        java.lang.String html = "<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|0", html)));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|2", org.jsoup.nodes.Document.class, doc).select("div")).first());
        org.jsoup.select.Elements els = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|5", org.jsoup.nodes.Element.class, div).children());
        java.util.List<org.jsoup.nodes.Node> nodes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|8", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|7", org.jsoup.nodes.Element.class, div).childNodes());
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|9", org.jsoup.select.Elements.class, els).size()));// the two Ps

        org.junit.Assert.assertEquals(3, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|11", java.util.List.class, nodes).size()));// the "Three" textnode

        org.jsoup.nodes.Element p3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|13", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element("p")).text("P3"));
        org.jsoup.nodes.Element p4 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|15", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element("p")).text("P4"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|19", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|17", org.jsoup.nodes.Element.class, div).insertChildren(1, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|18", org.jsoup.nodes.Element.class, p3)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|22", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|20", org.jsoup.nodes.Element.class, div).insertChildren(3, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|21", org.jsoup.nodes.Element.class, p4)));
        org.jsoup.select.Elements els2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|24", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|23", org.jsoup.nodes.Element.class, div).children());
        // first els should not have changed
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|25", org.jsoup.select.Elements.class, els).size()));
        org.junit.Assert.assertEquals(4, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|27", org.jsoup.select.Elements.class, els2).size()));
        org.junit.Assert.assertEquals(("<p><a>One</a></p>\n" + (("<p>P3</p>\n" + "<p><a>Two</a></p>\n") + "<p>P4</p>Three")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|30", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|29", org.jsoup.nodes.Element.class, div).html()));
        org.junit.Assert.assertEquals("P3", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|33", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|32", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|31", org.jsoup.select.Elements.class, els2).get(1)).text()));
        org.junit.Assert.assertEquals("P4", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|35", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|34", org.jsoup.select.Elements.class, els2).get(3)).text()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|38", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|37", org.jsoup.nodes.Element.class, p3).after("<span>Another</span"));
        org.jsoup.select.Elements els3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|40", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|39", org.jsoup.nodes.Element.class, div).children());
        org.junit.Assert.assertEquals(5, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|42", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|41", org.jsoup.select.Elements.class, els3).size()));
        org.junit.Assert.assertEquals("span", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|45", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|44", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|43", org.jsoup.select.Elements.class, els3).get(2)).tagName()));
        org.junit.Assert.assertEquals("Another", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|48", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|47", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|46", org.jsoup.select.Elements.class, els3).get(2)).text()));
        org.junit.Assert.assertEquals(("<p><a>One</a></p>\n" + ((("<p>P3</p>\n" + "<span>Another</span>\n") + "<p><a>Two</a></p>\n") + "<p>P4</p>Three")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|50", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testShadowElementsAreUpdated()|49", org.jsoup.nodes.Element.class, div).html()));
    }

    @org.junit.Test
    public void classNamesAndAttributeNameIsCaseInsensitive() {
        java.lang.String html = "<p Class='SomeText AnotherText'>One</p>";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|0", html)));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|2", org.jsoup.nodes.Document.class, doc).select("p")).first());
        org.junit.Assert.assertEquals("SomeText AnotherText", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|5", org.jsoup.nodes.Element.class, p).className()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|8", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|7", org.jsoup.nodes.Element.class, p).classNames()).contains("SomeText")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|11", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|10", org.jsoup.nodes.Element.class, p).classNames()).contains("AnotherText")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|13", org.jsoup.nodes.Element.class, p).hasClass("SomeText")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|15", org.jsoup.nodes.Element.class, p).hasClass("sometext")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|17", org.jsoup.nodes.Element.class, p).hasClass("AnotherText")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|19", org.jsoup.nodes.Element.class, p).hasClass("anothertext")));
        org.jsoup.nodes.Element p1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|23", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|22", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|21", org.jsoup.nodes.Document.class, doc).select(".SomeText")).first());
        org.jsoup.nodes.Element p2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|26", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|25", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|24", org.jsoup.nodes.Document.class, doc).select(".sometext")).first());
        org.jsoup.nodes.Element p3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|29", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|28", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|27", org.jsoup.nodes.Document.class, doc).select("[class=SomeText AnotherText]")).first());
        org.jsoup.nodes.Element p4 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|32", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|31", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|30", org.jsoup.nodes.Document.class, doc).select("[Class=SomeText AnotherText]")).first());
        org.jsoup.nodes.Element p5 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|35", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|34", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|33", org.jsoup.nodes.Document.class, doc).select("[class=sometext anothertext]")).first());
        org.jsoup.nodes.Element p6 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|38", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|37", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|36", org.jsoup.nodes.Document.class, doc).select("[class=SomeText AnotherText]")).first());
        org.jsoup.nodes.Element p7 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|41", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|40", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|39", org.jsoup.nodes.Document.class, doc).select("[class^=sometext]")).first());
        org.jsoup.nodes.Element p8 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|44", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|43", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|42", org.jsoup.nodes.Document.class, doc).select("[class$=nothertext]")).first());
        org.jsoup.nodes.Element p9 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|47", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|46", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|45", org.jsoup.nodes.Document.class, doc).select("[class^=sometext]")).first());
        org.jsoup.nodes.Element p10 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|50", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|49", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|48", org.jsoup.nodes.Document.class, doc).select("[class$=AnotherText]")).first());
        org.junit.Assert.assertEquals("One", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|52", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|51", org.jsoup.nodes.Element.class, p1).text()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|53", org.jsoup.nodes.Element.class, p1), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|54", org.jsoup.nodes.Element.class, p2));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|55", org.jsoup.nodes.Element.class, p1), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|56", org.jsoup.nodes.Element.class, p3));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|57", org.jsoup.nodes.Element.class, p1), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|58", org.jsoup.nodes.Element.class, p4));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|59", org.jsoup.nodes.Element.class, p1), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|60", org.jsoup.nodes.Element.class, p5));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|61", org.jsoup.nodes.Element.class, p1), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|62", org.jsoup.nodes.Element.class, p6));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|63", org.jsoup.nodes.Element.class, p1), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|64", org.jsoup.nodes.Element.class, p7));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|65", org.jsoup.nodes.Element.class, p1), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|66", org.jsoup.nodes.Element.class, p8));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|67", org.jsoup.nodes.Element.class, p1), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|68", org.jsoup.nodes.Element.class, p9));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|69", org.jsoup.nodes.Element.class, p1), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|classNamesAndAttributeNameIsCaseInsensitive()|70", org.jsoup.nodes.Element.class, p10));
    }

    @org.junit.Test
    public void testAppendTo() {
        java.lang.String parentHtml = "<div class='a'></div>";
        java.lang.String childHtml = "<div class='b'></div><p>Two</p>";
        org.jsoup.nodes.Document parentDoc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAppendTo()|0", parentHtml)));
        org.jsoup.nodes.Element parent = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|2", org.jsoup.nodes.Document.class, parentDoc).body());
        org.jsoup.nodes.Document childDoc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|5", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAppendTo()|4", childHtml)));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|6", org.jsoup.nodes.Document.class, childDoc).select("div")).first());
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|10", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|9", org.jsoup.nodes.Document.class, childDoc).select("p")).first());
        org.jsoup.nodes.Element appendTo1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|12", org.jsoup.nodes.Element.class, div).appendTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|13", org.jsoup.nodes.Element.class, parent)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|15", org.jsoup.nodes.Element.class, div), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|16", org.jsoup.nodes.Element.class, appendTo1));
        org.jsoup.nodes.Element appendTo2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|19", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|17", org.jsoup.nodes.Element.class, p).appendTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|18", org.jsoup.nodes.Element.class, div)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|20", org.jsoup.nodes.Element.class, p), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|21", org.jsoup.nodes.Element.class, appendTo2));
        org.junit.Assert.assertEquals("<div class=\"a\"></div>\n<div class=\"b\">\n <p>Two</p>\n</div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAppendTo()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|23", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|22", org.jsoup.nodes.Document.class, parentDoc).body()).html()));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testAppendTo()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|26", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testAppendTo()|25", org.jsoup.nodes.Document.class, childDoc).body()).html()));// got moved out

    }

    @org.junit.Test
    public void testNormalizesNbspInText() {
        java.lang.String escaped = "You can't always get what you&nbsp;want.";
        java.lang.String withNbsp = "You can't always get what you want.";// there is an nbsp char in there

        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(("<p>" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|0", escaped)))));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|2", org.jsoup.nodes.Document.class, doc).select("p")).first());
        org.junit.Assert.assertEquals("You can't always get what you want.", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|5", org.jsoup.nodes.Element.class, p).text()));// text is normalized

        org.junit.Assert.assertEquals((("<p>" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|7", escaped))) + "</p>"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|8", org.jsoup.nodes.Element.class, p).outerHtml()));// html / whole text keeps &nbsp;

        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|10", withNbsp), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|13", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|12", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|11", org.jsoup.nodes.Element.class, p).textNodes()).get(0)).getWholeText()));
        org.junit.Assert.assertEquals(160, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|16", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|15", withNbsp).charAt(29)));
        org.jsoup.nodes.Element matched = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|19", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|18", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|17", org.jsoup.nodes.Document.class, doc).select("p:contains(get what you want)")).first());
        org.junit.Assert.assertEquals("p", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|20", org.jsoup.nodes.Element.class, matched).nodeName()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNormalizesNbspInText()|22", org.jsoup.nodes.Element.class, matched).is(":containsOwn(get what you want)")));
    }

    @org.junit.Test
    public void testNormalizesInvisiblesInText() {
        // return Character.getType(c) == 16 && (c == 8203 || c == 8204 || c == 8205 || c == 173);
        java.lang.String escaped = "This&shy;is&#x200b;one&#x200c;long&#x200d;word";
        java.lang.String decoded = "This\u00adis\u200bone\u200clong\u200dword";// browser would not display those soft hyphens / other chars, so we don't want them in the text

        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(("<p>" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|0", escaped)))));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|2", org.jsoup.nodes.Document.class, doc).select("p")).first());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|7", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|6", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|5", org.jsoup.nodes.Document.class, doc).outputSettings()).charset("ascii")// so that the outer html is easier to see with escaped invisibles
        );
        org.junit.Assert.assertEquals("Thisisonelongword", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|8", org.jsoup.nodes.Element.class, p).text()));// text is normalized

        org.junit.Assert.assertEquals((("<p>" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|10", escaped))) + "</p>"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|11", org.jsoup.nodes.Element.class, p).outerHtml()));// html / whole text keeps &shy etc;

        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|13", decoded), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|16", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|15", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|14", org.jsoup.nodes.Element.class, p).textNodes()).get(0)).getWholeText()));
        org.jsoup.nodes.Element matched = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|20", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|19", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|18", org.jsoup.nodes.Document.class, doc).select("p:contains(Thisisonelongword)")).first());// really just oneloneword, no invisibles

        org.junit.Assert.assertEquals("p", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|21", org.jsoup.nodes.Element.class, matched).nodeName()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNormalizesInvisiblesInText()|23", org.jsoup.nodes.Element.class, matched).is(":containsOwn(Thisisonelongword)")));
    }

    @org.junit.Test
    public void testRemoveBeforeIndex() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<html><body><div><p>before1</p><p>before2</p><p>XXX</p><p>after1</p><p>after2</p></div></body></html>", ""));
        org.jsoup.nodes.Element body = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|1", org.jsoup.nodes.Document.class, doc).select("body")).first());
        org.jsoup.select.Elements elems = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|4", org.jsoup.nodes.Element.class, body).select("p:matchesOwn(XXX)"));
        org.jsoup.nodes.Element xElem = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|6", org.jsoup.select.Elements.class, elems).first());
        org.jsoup.select.Elements beforeX = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|12", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|8", org.jsoup.nodes.Element.class, xElem).parent()).getElementsByIndexLessThan(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|10", org.jsoup.nodes.Element.class, xElem).elementSiblingIndex())));
        for (org.jsoup.nodes.Element p : eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|13", org.jsoup.select.Elements.class, beforeX)) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|14", org.jsoup.nodes.Element.class, p).remove();
        }
        org.junit.Assert.assertEquals("<body><div><p>XXX</p><p>after1</p><p>after2</p></div></body>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|17", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveBeforeIndex()|15", org.jsoup.nodes.Element.class, body).outerHtml()))));
    }

    @org.junit.Test
    public void testRemoveAfterIndex() {
        org.jsoup.nodes.Document doc2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<html><body><div><p>before1</p><p>before2</p><p>XXX</p><p>after1</p><p>after2</p></div></body></html>", ""));
        org.jsoup.nodes.Element body = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|1", org.jsoup.nodes.Document.class, doc2).select("body")).first());
        org.jsoup.select.Elements elems = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|4", org.jsoup.nodes.Element.class, body).select("p:matchesOwn(XXX)"));
        org.jsoup.nodes.Element xElem = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|6", org.jsoup.select.Elements.class, elems).first());
        org.jsoup.select.Elements afterX = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|12", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|8", org.jsoup.nodes.Element.class, xElem).parent()).getElementsByIndexGreaterThan(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|10", org.jsoup.nodes.Element.class, xElem).elementSiblingIndex())));
        for (org.jsoup.nodes.Element p : eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|13", org.jsoup.select.Elements.class, afterX)) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|14", org.jsoup.nodes.Element.class, p).remove();
        }
        org.junit.Assert.assertEquals("<body><div><p>before1</p><p>before2</p><p>XXX</p></div></body>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|17", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemoveAfterIndex()|15", org.jsoup.nodes.Element.class, body).outerHtml()))));
    }

    @org.junit.Test
    public void whiteSpaceClassElement() {
        org.jsoup.parser.Tag tag = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.ElementTest|whiteSpaceClassElement()|0", org.jsoup.parser.Tag.class, org.jsoup.parser.Tag.valueOf("a"));
        org.jsoup.nodes.Attributes attribs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|whiteSpaceClassElement()|1", org.jsoup.nodes.Attributes.class, new org.jsoup.nodes.Attributes());
        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|whiteSpaceClassElement()|4", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.ElementTest|whiteSpaceClassElement()|2", org.jsoup.parser.Tag.class, tag), "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|whiteSpaceClassElement()|3", org.jsoup.nodes.Attributes.class, attribs)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|whiteSpaceClassElement()|6", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.ElementTest|whiteSpaceClassElement()|5", org.jsoup.nodes.Attributes.class, attribs).put("class", "abc "));
        boolean hasClass = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|whiteSpaceClassElement()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|whiteSpaceClassElement()|7", org.jsoup.nodes.Element.class, el).hasClass("ab"));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|whiteSpaceClassElement()|9", hasClass));
    }

    @org.junit.Test
    public void testNextElementSiblingAfterClone() {
        // via https://github.com/jhy/jsoup/issues/951
        java.lang.String html = "<!DOCTYPE html><html lang=\"en\"><head></head><body><div>Initial element</div></body></html>";
        java.lang.String expectedText = "New element";
        java.lang.String cloneExpect = "New element in clone";
        org.jsoup.nodes.Document original = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|0", html)));
        org.jsoup.nodes.Document clone = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|3", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|2", org.jsoup.nodes.Document.class, original).clone());
        org.jsoup.nodes.Element originalElement = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|4", org.jsoup.nodes.Document.class, original).body()).child(0));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|7", org.jsoup.nodes.Element.class, originalElement).after((("<div>" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|8", expectedText))) + "</div>")));
        org.jsoup.nodes.Element originalNextElementSibling = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|10", org.jsoup.nodes.Element.class, originalElement).nextElementSibling());
        org.jsoup.nodes.Element originalNextSibling = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|13", org.jsoup.nodes.Element.class, ((org.jsoup.nodes.Element) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|12", org.jsoup.nodes.Element.class, originalElement).nextSibling())));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|14", expectedText), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|15", org.jsoup.nodes.Element.class, originalNextElementSibling).text()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|17", expectedText), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|18", org.jsoup.nodes.Element.class, originalNextSibling).text()));
        org.jsoup.nodes.Element cloneElement = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|22", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|21", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|20", org.jsoup.nodes.Document.class, clone).body()).child(0));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|25", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|23", org.jsoup.nodes.Element.class, cloneElement).after((("<div>" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|24", cloneExpect))) + "</div>")));
        org.jsoup.nodes.Element cloneNextElementSibling = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|27", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|26", org.jsoup.nodes.Element.class, cloneElement).nextElementSibling());
        org.jsoup.nodes.Element cloneNextSibling = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|29", org.jsoup.nodes.Element.class, ((org.jsoup.nodes.Element) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|28", org.jsoup.nodes.Element.class, cloneElement).nextSibling())));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|30", cloneExpect), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|32", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|31", org.jsoup.nodes.Element.class, cloneNextElementSibling).text()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|33", cloneExpect), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblingAfterClone()|34", org.jsoup.nodes.Element.class, cloneNextSibling).text()));
    }

    @org.junit.Test
    public void testRemovingEmptyClassAttributeWhenLastClassRemoved() {
        // https://github.com/jhy/jsoup/issues/947
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testRemovingEmptyClassAttributeWhenLastClassRemoved()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<img class=\"one two\" />"));
        org.jsoup.nodes.Element img = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemovingEmptyClassAttributeWhenLastClassRemoved()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testRemovingEmptyClassAttributeWhenLastClassRemoved()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testRemovingEmptyClassAttributeWhenLastClassRemoved()|1", org.jsoup.nodes.Document.class, doc).select("img")).first());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemovingEmptyClassAttributeWhenLastClassRemoved()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemovingEmptyClassAttributeWhenLastClassRemoved()|4", org.jsoup.nodes.Element.class, img).removeClass("one"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemovingEmptyClassAttributeWhenLastClassRemoved()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemovingEmptyClassAttributeWhenLastClassRemoved()|6", org.jsoup.nodes.Element.class, img).removeClass("two"));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testRemovingEmptyClassAttributeWhenLastClassRemoved()|11", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testRemovingEmptyClassAttributeWhenLastClassRemoved()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testRemovingEmptyClassAttributeWhenLastClassRemoved()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testRemovingEmptyClassAttributeWhenLastClassRemoved()|8", org.jsoup.nodes.Document.class, doc).body()).html()).contains("class=\"\"")));
    }

    @org.junit.Test
    public void booleanAttributeOutput() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|booleanAttributeOutput()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<img src=foo noshade='' nohref async=async autofocus=false>"));
        org.jsoup.nodes.Element img = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|booleanAttributeOutput()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|booleanAttributeOutput()|1", org.jsoup.nodes.Document.class, doc).selectFirst("img"));
        org.junit.Assert.assertEquals("<img src=\"foo\" noshade nohref async autofocus=\"false\">", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|booleanAttributeOutput()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|booleanAttributeOutput()|3", org.jsoup.nodes.Element.class, img).outerHtml()));
    }

    @org.junit.Test
    public void textHasSpaceAfterBlockTags() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|textHasSpaceAfterBlockTags()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div>One</div>Two"));
        org.junit.Assert.assertEquals("One Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|textHasSpaceAfterBlockTags()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|textHasSpaceAfterBlockTags()|1", org.jsoup.nodes.Document.class, doc).text()));
    }

    @org.junit.Test
    public void testNextElementSiblings() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul> Not An Element but a node") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>"))));
        org.jsoup.nodes.Element element = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|1", org.jsoup.nodes.Document.class, doc).getElementById("a"));
        org.jsoup.select.Elements elementSiblings = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|4", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|3", org.jsoup.nodes.Element.class, element).nextElementSiblings());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|5", org.jsoup.select.Elements.class, elementSiblings));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblings()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|6", org.jsoup.select.Elements.class, elementSiblings).size()));
        org.junit.Assert.assertEquals("b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblings()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|8", org.jsoup.select.Elements.class, elementSiblings).get(0)).id()));
        org.junit.Assert.assertEquals("c", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblings()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|11", org.jsoup.select.Elements.class, elementSiblings).get(1)).id()));
        org.jsoup.nodes.Element element1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|14", org.jsoup.nodes.Document.class, doc).getElementById("b"));
        java.util.List<org.jsoup.nodes.Element> elementSiblings1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|17", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|16", org.jsoup.nodes.Element.class, element1).nextElementSiblings());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|18", java.util.List.class, elementSiblings1));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblings()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|19", java.util.List.class, elementSiblings1).size()));
        org.junit.Assert.assertEquals("c", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblings()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|22", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|21", java.util.List.class, elementSiblings1).get(0)).id()));
        org.jsoup.nodes.Element element2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|25", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|24", org.jsoup.nodes.Document.class, doc).getElementById("c"));
        java.util.List<org.jsoup.nodes.Element> elementSiblings2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|27", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|26", org.jsoup.nodes.Element.class, element2).nextElementSiblings());
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblings()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|28", java.util.List.class, elementSiblings2).size()));
        org.jsoup.nodes.Element ul = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|31", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|30", org.jsoup.nodes.Document.class, doc).getElementById("ul"));
        java.util.List<org.jsoup.nodes.Element> elementSiblings3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|33", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|32", org.jsoup.nodes.Element.class, ul).nextElementSiblings());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|34", java.util.List.class, elementSiblings3));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblings()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|35", java.util.List.class, elementSiblings3).size()));
        org.junit.Assert.assertEquals("div", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblings()|39", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|38", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|37", java.util.List.class, elementSiblings3).get(0)).id()));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|41", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|40", org.jsoup.nodes.Document.class, doc).getElementById("div"));
        java.util.List<org.jsoup.nodes.Element> elementSiblings4 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|43", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|42", org.jsoup.nodes.Element.class, div).nextElementSiblings());
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testNextElementSiblings()|45", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testNextElementSiblings()|44", java.util.List.class, elementSiblings4).size()));
    }

    @org.junit.Test
    public void testPreviousElementSiblings() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>"))));
        org.jsoup.nodes.Element element = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|1", org.jsoup.nodes.Document.class, doc).getElementById("b"));
        org.jsoup.select.Elements elementSiblings = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|4", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|3", org.jsoup.nodes.Element.class, element).previousElementSiblings());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|5", org.jsoup.select.Elements.class, elementSiblings));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|6", org.jsoup.select.Elements.class, elementSiblings).size()));
        org.junit.Assert.assertEquals("a", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|8", org.jsoup.select.Elements.class, elementSiblings).get(0)).id()));
        org.jsoup.nodes.Element element1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|12", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|11", org.jsoup.nodes.Document.class, doc).getElementById("a"));
        java.util.List<org.jsoup.nodes.Element> elementSiblings1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|14", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|13", org.jsoup.nodes.Element.class, element1).previousElementSiblings());
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|15", java.util.List.class, elementSiblings1).size()));
        org.jsoup.nodes.Element element2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|17", org.jsoup.nodes.Document.class, doc).getElementById("c"));
        java.util.List<org.jsoup.nodes.Element> elementSiblings2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|20", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|19", org.jsoup.nodes.Element.class, element2).previousElementSiblings());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|21", java.util.List.class, elementSiblings2));
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|23", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|22", java.util.List.class, elementSiblings2).size()));
        org.junit.Assert.assertEquals("b", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|25", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|24", java.util.List.class, elementSiblings2).get(0)).id()));
        org.junit.Assert.assertEquals("a", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|28", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|27", java.util.List.class, elementSiblings2).get(1)).id()));
        org.jsoup.nodes.Element ul = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|31", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|30", org.jsoup.nodes.Document.class, doc).getElementById("ul"));
        java.util.List<org.jsoup.nodes.Element> elementSiblings3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|33", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|32", org.jsoup.nodes.Element.class, ul).previousElementSiblings());
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Element>>observeState("org.jsoup.nodes.ElementTest|testPreviousElementSiblings()|34", java.util.List.class, elementSiblings3).size()));
    }
}

