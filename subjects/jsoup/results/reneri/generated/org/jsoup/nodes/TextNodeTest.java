package org.jsoup.nodes;


/**
 * Test TextNodes
 *
 * @author Jonathan Hedley, jonathan@hedley.net
 */
public class TextNodeTest {
    @org.junit.Test
    public void testBlank() {
        org.jsoup.nodes.TextNode one = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testBlank()|0", org.jsoup.nodes.TextNode.class, new org.jsoup.nodes.TextNode(""));
        org.jsoup.nodes.TextNode two = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testBlank()|1", org.jsoup.nodes.TextNode.class, new org.jsoup.nodes.TextNode("     "));
        org.jsoup.nodes.TextNode three = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testBlank()|2", org.jsoup.nodes.TextNode.class, new org.jsoup.nodes.TextNode("  \n\n   "));
        org.jsoup.nodes.TextNode four = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testBlank()|3", org.jsoup.nodes.TextNode.class, new org.jsoup.nodes.TextNode("Hello"));
        org.jsoup.nodes.TextNode five = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testBlank()|4", org.jsoup.nodes.TextNode.class, new org.jsoup.nodes.TextNode("  \nHello "));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testBlank()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testBlank()|5", org.jsoup.nodes.TextNode.class, one).isBlank()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testBlank()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testBlank()|7", org.jsoup.nodes.TextNode.class, two).isBlank()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testBlank()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testBlank()|9", org.jsoup.nodes.TextNode.class, three).isBlank()));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testBlank()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testBlank()|11", org.jsoup.nodes.TextNode.class, four).isBlank()));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testBlank()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testBlank()|13", org.jsoup.nodes.TextNode.class, five).isBlank()));
    }

    @org.junit.Test
    public void testTextBean() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p>One <span>two &amp;</span> three &amp;</p>"));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|1", org.jsoup.nodes.Document.class, doc).select("p")).first());
        org.jsoup.nodes.Element span = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|4", org.jsoup.nodes.Document.class, doc).select("span")).first());
        org.junit.Assert.assertEquals("two &", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testTextBean()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|7", org.jsoup.nodes.Element.class, span).text()));
        org.jsoup.nodes.TextNode spanText = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|10", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|9", org.jsoup.nodes.Element.class, span).childNode(0))));
        org.junit.Assert.assertEquals("two &", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testTextBean()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|11", org.jsoup.nodes.TextNode.class, spanText).text()));
        org.jsoup.nodes.TextNode tn = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|14", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|13", org.jsoup.nodes.Element.class, p).childNode(2))));
        org.junit.Assert.assertEquals(" three &", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testTextBean()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|15", org.jsoup.nodes.TextNode.class, tn).text()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|18", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|17", org.jsoup.nodes.TextNode.class, tn).text(" POW!"));
        org.junit.Assert.assertEquals("One <span>two &amp;</span> POW!", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testTextBean()|21", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testTextBean()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|19", org.jsoup.nodes.Element.class, p).html()))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|25", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|22", org.jsoup.nodes.TextNode.class, tn).attr(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testTextBean()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|23", org.jsoup.nodes.TextNode.class, tn).nodeName()), "kablam &"));
        org.junit.Assert.assertEquals("kablam &", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testTextBean()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|26", org.jsoup.nodes.TextNode.class, tn).text()));
        org.junit.Assert.assertEquals("One <span>two &amp;</span>kablam &amp;", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testTextBean()|30", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testTextBean()|29", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testTextBean()|28", org.jsoup.nodes.Element.class, p).html()))));
    }

    @org.junit.Test
    public void testSplitText() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div>Hello there</div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|1", org.jsoup.nodes.Document.class, doc).select("div")).first());
        org.jsoup.nodes.TextNode tn = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|5", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|4", org.jsoup.nodes.Element.class, div).childNode(0))));
        org.jsoup.nodes.TextNode tail = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|7", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|6", org.jsoup.nodes.TextNode.class, tn).splitText(6));
        org.junit.Assert.assertEquals("Hello ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testSplitText()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|8", org.jsoup.nodes.TextNode.class, tn).getWholeText()));
        org.junit.Assert.assertEquals("there", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testSplitText()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|10", org.jsoup.nodes.TextNode.class, tail).getWholeText()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|13", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|12", org.jsoup.nodes.TextNode.class, tail).text("there!"));
        org.junit.Assert.assertEquals("Hello there!", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testSplitText()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|14", org.jsoup.nodes.Element.class, div).text()));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|17", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|16", org.jsoup.nodes.TextNode.class, tn).parent())) == (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|19", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testSplitText()|18", org.jsoup.nodes.TextNode.class, tail).parent()))));
    }

    @org.junit.Test
    public void testSplitAnEmbolden() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.TextNodeTest|testSplitAnEmbolden()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div>Hello there</div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testSplitAnEmbolden()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.TextNodeTest|testSplitAnEmbolden()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.TextNodeTest|testSplitAnEmbolden()|1", org.jsoup.nodes.Document.class, doc).select("div")).first());
        org.jsoup.nodes.TextNode tn = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testSplitAnEmbolden()|5", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testSplitAnEmbolden()|4", org.jsoup.nodes.Element.class, div).childNode(0))));
        org.jsoup.nodes.TextNode tail = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testSplitAnEmbolden()|7", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testSplitAnEmbolden()|6", org.jsoup.nodes.TextNode.class, tn).splitText(6));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.TextNodeTest|testSplitAnEmbolden()|9", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testSplitAnEmbolden()|8", org.jsoup.nodes.TextNode.class, tail).wrap("<b></b>"));
        org.junit.Assert.assertEquals("Hello <b>there</b>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testSplitAnEmbolden()|12", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testSplitAnEmbolden()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testSplitAnEmbolden()|10", org.jsoup.nodes.Element.class, div).html()))));// not great that we get \n<b>there there... must correct

    }

    @org.junit.Test
    public void testWithSupplementaryCharacter() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.TextNodeTest|testWithSupplementaryCharacter()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testWithSupplementaryCharacter()|1", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<char[]>observeState("org.jsoup.nodes.TextNodeTest|testWithSupplementaryCharacter()|0", char[].class, java.lang.Character.toChars(135361))))));
        org.jsoup.nodes.TextNode t = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testWithSupplementaryCharacter()|6", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.TextNode>>observeState("org.jsoup.nodes.TextNodeTest|testWithSupplementaryCharacter()|5", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testWithSupplementaryCharacter()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.TextNodeTest|testWithSupplementaryCharacter()|3", org.jsoup.nodes.Document.class, doc).body()).textNodes()).get(0));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testWithSupplementaryCharacter()|8", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<char[]>observeState("org.jsoup.nodes.TextNodeTest|testWithSupplementaryCharacter()|7", char[].class, java.lang.Character.toChars(135361)))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testWithSupplementaryCharacter()|11", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testWithSupplementaryCharacter()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testWithSupplementaryCharacter()|9", org.jsoup.nodes.TextNode.class, t).outerHtml()).trim()));
    }

    @org.junit.Test
    public void testLeadNodesHaveNoChildren() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.TextNodeTest|testLeadNodesHaveNoChildren()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div>Hello there</div>"));
        org.jsoup.nodes.Element div = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testLeadNodesHaveNoChildren()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.TextNodeTest|testLeadNodesHaveNoChildren()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.TextNodeTest|testLeadNodesHaveNoChildren()|1", org.jsoup.nodes.Document.class, doc).select("div")).first());
        org.jsoup.nodes.TextNode tn = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testLeadNodesHaveNoChildren()|5", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.TextNodeTest|testLeadNodesHaveNoChildren()|4", org.jsoup.nodes.Element.class, div).childNode(0))));
        java.util.List<org.jsoup.nodes.Node> nodes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.TextNodeTest|testLeadNodesHaveNoChildren()|7", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.TextNodeTest|testLeadNodesHaveNoChildren()|6", org.jsoup.nodes.TextNode.class, tn).childNodes());
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.TextNodeTest|testLeadNodesHaveNoChildren()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.TextNodeTest|testLeadNodesHaveNoChildren()|8", java.util.List.class, nodes).size()));
    }
}

