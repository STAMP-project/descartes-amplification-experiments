package org.jsoup.nodes;


/**
 * Tests Nodes
 *
 * @author Jonathan Hedley, jonathan@hedley.net
 */
public class NodeTest {
    @org.junit.Test
    public void handlesBaseUri() {
        org.jsoup.parser.Tag tag = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|0", org.jsoup.parser.Tag.class, org.jsoup.parser.Tag.valueOf("a"));
        org.jsoup.nodes.Attributes attribs = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|1", org.jsoup.nodes.Attributes.class, new org.jsoup.nodes.Attributes());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|3", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|2", org.jsoup.nodes.Attributes.class, attribs).put("relHref", "/foo"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|5", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|4", org.jsoup.nodes.Attributes.class, attribs).put("absHref", "http://bar/qux"));
        org.jsoup.nodes.Element noBase = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|8", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|6", org.jsoup.parser.Tag.class, tag), "", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|7", org.jsoup.nodes.Attributes.class, attribs)));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesBaseUri()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|9", org.jsoup.nodes.Element.class, noBase).absUrl("relHref")));// with no base, should NOT fallback to href attrib, whatever it is

        org.junit.Assert.assertEquals("http://bar/qux", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesBaseUri()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|11", org.jsoup.nodes.Element.class, noBase).absUrl("absHref")));// no base but valid attrib, return attrib

        org.jsoup.nodes.Element withBase = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|15", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|13", org.jsoup.parser.Tag.class, tag), "http://foo/", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|14", org.jsoup.nodes.Attributes.class, attribs)));
        org.junit.Assert.assertEquals("http://foo/foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesBaseUri()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|16", org.jsoup.nodes.Element.class, withBase).absUrl("relHref")));// construct abs from base + rel

        org.junit.Assert.assertEquals("http://bar/qux", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesBaseUri()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|18", org.jsoup.nodes.Element.class, withBase).absUrl("absHref")));// href is abs, so returns that

        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesBaseUri()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|20", org.jsoup.nodes.Element.class, withBase).absUrl("noval")));
        org.jsoup.nodes.Element dodgyBase = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|24", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|22", org.jsoup.parser.Tag.class, tag), "wtf://no-such-protocol/", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|23", org.jsoup.nodes.Attributes.class, attribs)));
        org.junit.Assert.assertEquals("http://bar/qux", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesBaseUri()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|25", org.jsoup.nodes.Element.class, dodgyBase).absUrl("absHref")));// base fails, but href good, so get that

        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesBaseUri()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesBaseUri()|27", org.jsoup.nodes.Element.class, dodgyBase).absUrl("relHref")));// base fails, only rel href, so return nothing

    }

    @org.junit.Test
    public void setBaseUriIsRecursive() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p></p></div>"));
        java.lang.String baseUri = "https://jsoup.org";
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|1", org.jsoup.nodes.Document.class, doc).setBaseUri(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|2", baseUri));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|3", baseUri), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|4", org.jsoup.nodes.Document.class, doc).baseUri()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|6", baseUri), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|7", org.jsoup.nodes.Document.class, doc).select("div")).first()).baseUri()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|11", baseUri), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|14", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|13", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|setBaseUriIsRecursive()|12", org.jsoup.nodes.Document.class, doc).select("p")).first()).baseUri()));
    }

    @org.junit.Test
    public void handlesAbsPrefix() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefix()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<a href=/foo>Hello</a>", "https://jsoup.org/"));
        org.jsoup.nodes.Element a = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefix()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefix()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefix()|1", org.jsoup.nodes.Document.class, doc).select("a")).first());
        org.junit.Assert.assertEquals("/foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsPrefix()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefix()|4", org.jsoup.nodes.Element.class, a).attr("href")));
        org.junit.Assert.assertEquals("https://jsoup.org/foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsPrefix()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefix()|6", org.jsoup.nodes.Element.class, a).attr("abs:href")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsPrefix()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefix()|8", org.jsoup.nodes.Element.class, a).hasAttr("abs:href")));
    }

    @org.junit.Test
    public void handlesAbsOnImage() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnImage()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p><img src=\"/rez/osi_logo.png\" /></p>", "https://jsoup.org/"));
        org.jsoup.nodes.Element img = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnImage()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnImage()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnImage()|1", org.jsoup.nodes.Document.class, doc).select("img")).first());
        org.junit.Assert.assertEquals("https://jsoup.org/rez/osi_logo.png", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsOnImage()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnImage()|4", org.jsoup.nodes.Element.class, img).attr("abs:src")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsOnImage()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnImage()|6", org.jsoup.nodes.Element.class, img).absUrl("src")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsOnImage()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnImage()|8", org.jsoup.nodes.Element.class, img).attr("abs:src")));
    }

    @org.junit.Test
    public void handlesAbsPrefixOnHasAttr() {
        // 1: no abs url; 2: has abs url
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org/'>Two</a>"));
        org.jsoup.nodes.Element one = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|1", org.jsoup.nodes.Document.class, doc).select("#1")).first());
        org.jsoup.nodes.Element two = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|4", org.jsoup.nodes.Document.class, doc).select("#2")).first());
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|7", org.jsoup.nodes.Element.class, one).hasAttr("abs:href")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|9", org.jsoup.nodes.Element.class, one).hasAttr("href")));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|11", org.jsoup.nodes.Element.class, one).absUrl("href")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|13", org.jsoup.nodes.Element.class, two).hasAttr("abs:href")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|15", org.jsoup.nodes.Element.class, two).hasAttr("href")));
        org.junit.Assert.assertEquals("https://jsoup.org/", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsPrefixOnHasAttr()|17", org.jsoup.nodes.Element.class, two).absUrl("href")));
    }

    @org.junit.Test
    public void literalAbsPrefix() {
        // if there is a literal attribute "abs:xxx", don't try and make absolute.
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|literalAbsPrefix()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<a abs:href='odd'>One</a>"));
        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|literalAbsPrefix()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|literalAbsPrefix()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|literalAbsPrefix()|1", org.jsoup.nodes.Document.class, doc).select("a")).first());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|literalAbsPrefix()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|literalAbsPrefix()|4", org.jsoup.nodes.Element.class, el).hasAttr("abs:href")));
        org.junit.Assert.assertEquals("odd", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|literalAbsPrefix()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|literalAbsPrefix()|6", org.jsoup.nodes.Element.class, el).attr("abs:href")));
    }

    @org.junit.Test
    public void handleAbsOnFileUris() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handleAbsOnFileUris()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<a href='password'>One/a><a href='/var/log/messages'>Two</a>", "file:/etc/"));
        org.jsoup.nodes.Element one = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handleAbsOnFileUris()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|handleAbsOnFileUris()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handleAbsOnFileUris()|1", org.jsoup.nodes.Document.class, doc).select("a")).first());
        org.junit.Assert.assertEquals("file:/etc/password", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handleAbsOnFileUris()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handleAbsOnFileUris()|4", org.jsoup.nodes.Element.class, one).absUrl("href")));
        org.jsoup.nodes.Element two = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handleAbsOnFileUris()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|handleAbsOnFileUris()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handleAbsOnFileUris()|6", org.jsoup.nodes.Document.class, doc).select("a")).get(1));
        org.junit.Assert.assertEquals("file:/var/log/messages", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handleAbsOnFileUris()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handleAbsOnFileUris()|9", org.jsoup.nodes.Element.class, two).absUrl("href")));
    }

    @org.junit.Test
    public void handleAbsOnLocalhostFileUris() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handleAbsOnLocalhostFileUris()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<a href='password'>One/a><a href='/var/log/messages'>Two</a>", "file://localhost/etc/"));
        org.jsoup.nodes.Element one = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handleAbsOnLocalhostFileUris()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|handleAbsOnLocalhostFileUris()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handleAbsOnLocalhostFileUris()|1", org.jsoup.nodes.Document.class, doc).select("a")).first());
        org.junit.Assert.assertEquals("file://localhost/etc/password", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handleAbsOnLocalhostFileUris()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handleAbsOnLocalhostFileUris()|4", org.jsoup.nodes.Element.class, one).absUrl("href")));
    }

    @org.junit.Test
    public void handlesAbsOnProtocolessAbsoluteUris() {
        org.jsoup.nodes.Document doc1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<a href='//example.net/foo'>One</a>", "http://example.com/"));
        org.jsoup.nodes.Document doc2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<a href='//example.net/foo'>One</a>", "https://example.com/"));
        org.jsoup.nodes.Element one = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|2", org.jsoup.nodes.Document.class, doc1).select("a")).first());
        org.jsoup.nodes.Element two = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|5", org.jsoup.nodes.Document.class, doc2).select("a")).first());
        org.junit.Assert.assertEquals("http://example.net/foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|8", org.jsoup.nodes.Element.class, one).absUrl("href")));
        org.junit.Assert.assertEquals("https://example.net/foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|10", org.jsoup.nodes.Element.class, two).absUrl("href")));
        org.jsoup.nodes.Document doc3 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|12", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<img src=//www.google.com/images/errors/logo_sm.gif alt=Google>", "https://google.com"));
        org.junit.Assert.assertEquals("https://www.google.com/images/errors/logo_sm.gif", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|14", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|handlesAbsOnProtocolessAbsoluteUris()|13", org.jsoup.nodes.Document.class, doc3).select("img")).attr("abs:src")));
    }

    /* Test for an issue with Java's abs URL handler. */
    @org.junit.Test
    public void absHandlesRelativeQuery() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|absHandlesRelativeQuery()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<a href='?foo'>One</a> <a href='bar.html?foo'>Two</a>", "https://jsoup.org/path/file?bar"));
        org.jsoup.nodes.Element a1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|absHandlesRelativeQuery()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|absHandlesRelativeQuery()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|absHandlesRelativeQuery()|1", org.jsoup.nodes.Document.class, doc).select("a")).first());
        org.junit.Assert.assertEquals("https://jsoup.org/path/file?foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|absHandlesRelativeQuery()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|absHandlesRelativeQuery()|4", org.jsoup.nodes.Element.class, a1).absUrl("href")));
        org.jsoup.nodes.Element a2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|absHandlesRelativeQuery()|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|absHandlesRelativeQuery()|7", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|absHandlesRelativeQuery()|6", org.jsoup.nodes.Document.class, doc).select("a")).get(1));
        org.junit.Assert.assertEquals("https://jsoup.org/path/bar.html?foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|absHandlesRelativeQuery()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|absHandlesRelativeQuery()|9", org.jsoup.nodes.Element.class, a2).absUrl("href")));
    }

    @org.junit.Test
    public void absHandlesDotFromIndex() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|absHandlesDotFromIndex()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<a href='./one/two.html'>One</a>", "http://example.com"));
        org.jsoup.nodes.Element a1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|absHandlesDotFromIndex()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|absHandlesDotFromIndex()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|absHandlesDotFromIndex()|1", org.jsoup.nodes.Document.class, doc).select("a")).first());
        org.junit.Assert.assertEquals("http://example.com/one/two.html", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|absHandlesDotFromIndex()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|absHandlesDotFromIndex()|4", org.jsoup.nodes.Element.class, a1).absUrl("href")));
    }

    @org.junit.Test
    public void testRemove() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|testRemove()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p>One <span>two</span> three</p>"));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|testRemove()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|testRemove()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|testRemove()|1", org.jsoup.nodes.Document.class, doc).select("p")).first());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|testRemove()|5", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|testRemove()|4", org.jsoup.nodes.Element.class, p).childNode(0)).remove();
        org.junit.Assert.assertEquals("two three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|testRemove()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|testRemove()|6", org.jsoup.nodes.Element.class, p).text()));
        org.junit.Assert.assertEquals("<span>two</span> three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|testRemove()|10", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|testRemove()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|testRemove()|8", org.jsoup.nodes.Element.class, p).html()))));
    }

    @org.junit.Test
    public void testReplace() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|testReplace()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p>One <span>two</span> three</p>"));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|testReplace()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|testReplace()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|testReplace()|1", org.jsoup.nodes.Document.class, doc).select("p")).first());
        org.jsoup.nodes.Element insert = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|testReplace()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|testReplace()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|testReplace()|4", org.jsoup.nodes.Document.class, doc).createElement("em")).text("foo"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|testReplace()|8", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|testReplace()|7", org.jsoup.nodes.Element.class, p).childNode(1)).replaceWith(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|testReplace()|9", org.jsoup.nodes.Element.class, insert));
        org.junit.Assert.assertEquals("One <em>foo</em> three", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|testReplace()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|testReplace()|10", org.jsoup.nodes.Element.class, p).html()));
    }

    @org.junit.Test
    public void ownerDocument() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|ownerDocument()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p>Hello"));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|ownerDocument()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|ownerDocument()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|ownerDocument()|1", org.jsoup.nodes.Document.class, doc).select("p")).first());
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|ownerDocument()|5", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|ownerDocument()|4", org.jsoup.nodes.Element.class, p).ownerDocument())) == (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|ownerDocument()|6", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|ownerDocument()|8", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|ownerDocument()|7", org.jsoup.nodes.Document.class, doc).ownerDocument())) == (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|ownerDocument()|9", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|ownerDocument()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|ownerDocument()|10", org.jsoup.nodes.Document.class, doc).parent()));
    }

    @org.junit.Test
    public void root() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|root()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>Hello"));
        org.jsoup.nodes.Element p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|root()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|root()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|root()|1", org.jsoup.nodes.Document.class, doc).select("p")).first());
        org.jsoup.nodes.Node root = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|root()|5", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|root()|4", org.jsoup.nodes.Element.class, p).root());
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|root()|6", org.jsoup.nodes.Document.class, doc)) == (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|root()|7", org.jsoup.nodes.Node.class, root))));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|root()|9", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|root()|8", org.jsoup.nodes.Node.class, root).parent()));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|root()|11", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|root()|10", org.jsoup.nodes.Document.class, doc).root())) == (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|root()|12", org.jsoup.nodes.Document.class, doc))));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|root()|14", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|root()|13", org.jsoup.nodes.Document.class, doc).root())) == (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|root()|16", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|root()|15", org.jsoup.nodes.Document.class, doc).ownerDocument()))));
        org.jsoup.nodes.Element standAlone = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|root()|18", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.NodeTest|root()|17", org.jsoup.parser.Tag.class, org.jsoup.parser.Tag.valueOf("p")), ""));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|root()|20", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|root()|19", org.jsoup.nodes.Element.class, standAlone).parent())) == null));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|root()|22", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|root()|21", org.jsoup.nodes.Element.class, standAlone).root())) == (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|root()|23", org.jsoup.nodes.Element.class, standAlone))));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|root()|25", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|root()|24", org.jsoup.nodes.Element.class, standAlone).ownerDocument())) == null));
    }

    @org.junit.Test
    public void before() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|before()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p>One <b>two</b> three</p>"));
        org.jsoup.nodes.Element newNode = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|before()|2", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.NodeTest|before()|1", org.jsoup.parser.Tag.class, org.jsoup.parser.Tag.valueOf("em")), ""));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|before()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|before()|3", org.jsoup.nodes.Element.class, newNode).appendText("four"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|before()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|before()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|before()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|before()|5", org.jsoup.nodes.Document.class, doc).select("b")).first()).before(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|before()|8", org.jsoup.nodes.Element.class, newNode)));
        org.junit.Assert.assertEquals("<p>One <em>four</em><b>two</b> three</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|before()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|before()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|before()|10", org.jsoup.nodes.Document.class, doc).body()).html()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|before()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|before()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|before()|14", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|before()|13", org.jsoup.nodes.Document.class, doc).select("b")).first()).before("<i>five</i>"));
        org.junit.Assert.assertEquals("<p>One <em>four</em><i>five</i><b>two</b> three</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|before()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|before()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|before()|17", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void after() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|after()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p>One <b>two</b> three</p>"));
        org.jsoup.nodes.Element newNode = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|after()|2", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.NodeTest|after()|1", org.jsoup.parser.Tag.class, org.jsoup.parser.Tag.valueOf("em")), ""));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|after()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|after()|3", org.jsoup.nodes.Element.class, newNode).appendText("four"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|after()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|after()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|after()|6", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|after()|5", org.jsoup.nodes.Document.class, doc).select("b")).first()).after(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|after()|8", org.jsoup.nodes.Element.class, newNode)));
        org.junit.Assert.assertEquals("<p>One <b>two</b><em>four</em> three</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|after()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|after()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|after()|10", org.jsoup.nodes.Document.class, doc).body()).html()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|after()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|after()|15", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|after()|14", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|after()|13", org.jsoup.nodes.Document.class, doc).select("b")).first()).after("<i>five</i>"));
        org.junit.Assert.assertEquals("<p>One <b>two</b><i>five</i><em>four</em> three</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|after()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|after()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|after()|17", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void unwrap() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|unwrap()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div>One <span>Two <b>Three</b></span> Four</div>"));
        org.jsoup.nodes.Element span = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|unwrap()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|unwrap()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|unwrap()|1", org.jsoup.nodes.Document.class, doc).select("span")).first());
        org.jsoup.nodes.Node twoText = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|unwrap()|5", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|unwrap()|4", org.jsoup.nodes.Element.class, span).childNode(0));
        org.jsoup.nodes.Node node = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|unwrap()|7", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|unwrap()|6", org.jsoup.nodes.Element.class, span).unwrap());
        org.junit.Assert.assertEquals("<div>One Two <b>Three</b> Four</div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|unwrap()|11", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|unwrap()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|unwrap()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|unwrap()|8", org.jsoup.nodes.Document.class, doc).body()).html()))));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|unwrap()|12", org.jsoup.nodes.Node.class, node)) instanceof org.jsoup.nodes.TextNode));
        org.junit.Assert.assertEquals("Two ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|unwrap()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.NodeTest|unwrap()|13", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (node))).text()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|unwrap()|15", org.jsoup.nodes.Node.class, node), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|unwrap()|16", org.jsoup.nodes.Node.class, twoText));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|unwrap()|18", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|unwrap()|17", org.jsoup.nodes.Node.class, node).parent()), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|unwrap()|21", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|unwrap()|20", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|unwrap()|19", org.jsoup.nodes.Document.class, doc).select("div")).first()));
    }

    @org.junit.Test
    public void unwrapNoChildren() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|unwrapNoChildren()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div>One <span></span> Two</div>"));
        org.jsoup.nodes.Element span = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|unwrapNoChildren()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|unwrapNoChildren()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|unwrapNoChildren()|1", org.jsoup.nodes.Document.class, doc).select("span")).first());
        org.jsoup.nodes.Node node = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|unwrapNoChildren()|5", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|unwrapNoChildren()|4", org.jsoup.nodes.Element.class, span).unwrap());
        org.junit.Assert.assertEquals("<div>One  Two</div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|unwrapNoChildren()|9", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|unwrapNoChildren()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|unwrapNoChildren()|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|unwrapNoChildren()|6", org.jsoup.nodes.Document.class, doc).body()).html()))));
        org.junit.Assert.assertTrue(((eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|unwrapNoChildren()|10", org.jsoup.nodes.Node.class, node)) == null));
    }

    @org.junit.Test
    public void traverse() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|traverse()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>Hello</p></div><div>There</div>"));
        final java.lang.StringBuilder accum = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.nodes.NodeTest|traverse()|1", java.lang.StringBuilder.class, new java.lang.StringBuilder());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|traverse()|14", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|traverse()|4", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|traverse()|3", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|traverse()|2", org.jsoup.nodes.Document.class, doc).select("div")).first()).traverse(new org.jsoup.select.NodeVisitor() {
            public void head(org.jsoup.nodes.Node node, int depth) {
                eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.nodes.NodeTest|traverse()|9", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.nodes.NodeTest|traverse()|6", java.lang.StringBuilder.class, accum).append((("<" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|traverse()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|traverse()|7", org.jsoup.nodes.Node.class, node).nodeName()))) + ">")));
            }

            public void tail(org.jsoup.nodes.Node node, int depth) {
                eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.nodes.NodeTest|traverse()|13", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.nodes.NodeTest|traverse()|10", java.lang.StringBuilder.class, accum).append((("</" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|traverse()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|traverse()|11", org.jsoup.nodes.Node.class, node).nodeName()))) + ">")));
            }
        }));
        org.junit.Assert.assertEquals("<div><p><#text></#text></p></div>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|traverse()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.nodes.NodeTest|traverse()|15", java.lang.StringBuilder.class, accum).toString()));
    }

    @org.junit.Test
    public void orphanNodeReturnsNullForSiblingElements() {
        org.jsoup.nodes.Node node = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|1", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|0", org.jsoup.parser.Tag.class, org.jsoup.parser.Tag.valueOf("p")), ""));
        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|3", org.jsoup.nodes.Element.class, new org.jsoup.nodes.Element(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.parser.Tag>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|2", org.jsoup.parser.Tag.class, org.jsoup.parser.Tag.valueOf("p")), ""));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|4", org.jsoup.nodes.Node.class, node).siblingIndex()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|7", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|6", org.jsoup.nodes.Node.class, node).siblingNodes()).size()));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|10", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|9", org.jsoup.nodes.Node.class, node).previousSibling()));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|12", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|11", org.jsoup.nodes.Node.class, node).nextSibling()));
        org.junit.Assert.assertEquals(0, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|14", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|13", org.jsoup.nodes.Element.class, el).siblingElements()).size()));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|17", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|16", org.jsoup.nodes.Element.class, el).previousElementSibling()));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|19", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|orphanNodeReturnsNullForSiblingElements()|18", org.jsoup.nodes.Element.class, el).nextElementSibling()));
    }

    @org.junit.Test
    public void nodeIsNotASiblingOfItself() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div><p>One<p>Two<p>Three</div>"));
        org.jsoup.nodes.Element p2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|1", org.jsoup.nodes.Document.class, doc).select("p")).get(1));
        org.junit.Assert.assertEquals("Two", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|4", org.jsoup.nodes.Element.class, p2).text()));
        java.util.List<org.jsoup.nodes.Node> nodes = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|7", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|6", org.jsoup.nodes.Element.class, p2).siblingNodes());
        org.junit.Assert.assertEquals(2, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|8", java.util.List.class, nodes).size()));
        org.junit.Assert.assertEquals("<p>One</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|11", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|10", java.util.List.class, nodes).get(0)).outerHtml()));
        org.junit.Assert.assertEquals("<p>Three</p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|14", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.NodeTest|nodeIsNotASiblingOfItself()|13", java.util.List.class, nodes).get(1)).outerHtml()));
    }

    @org.junit.Test
    public void childNodesCopy() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div id=1>Text 1 <p>One</p> Text 2 <p>Two<p>Three</div><div id=2>"));
        org.jsoup.nodes.Element div1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|1", org.jsoup.nodes.Document.class, doc).select("#1")).first());
        org.jsoup.nodes.Element div2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|4", org.jsoup.nodes.Document.class, doc).select("#2")).first());
        java.util.List<org.jsoup.nodes.Node> divChildren = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|8", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|7", org.jsoup.nodes.Element.class, div1).childNodesCopy());
        org.junit.Assert.assertEquals(5, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|childNodesCopy()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|9", java.util.List.class, divChildren).size()));
        org.jsoup.nodes.TextNode tn1 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|12", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|11", org.jsoup.nodes.Element.class, div1).childNode(0))));
        org.jsoup.nodes.TextNode tn2 = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|14", org.jsoup.nodes.TextNode.class, ((org.jsoup.nodes.TextNode) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|13", java.util.List.class, divChildren).get(0))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|16", org.jsoup.nodes.TextNode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|15", org.jsoup.nodes.TextNode.class, tn2).text("Text 1 updated"));
        org.junit.Assert.assertEquals("Text 1 ", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|childNodesCopy()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.TextNode>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|17", org.jsoup.nodes.TextNode.class, tn1).text()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|21", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|19", org.jsoup.nodes.Element.class, div2).insertChildren((-1), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.jsoup.nodes.Node>>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|20", java.util.List.class, divChildren)));
        org.junit.Assert.assertEquals(("<div id=\"1\">Text 1 <p>One</p> Text 2 <p>Two</p><p>Three</p></div><div id=\"2\">Text 1 updated" + "<p>One</p> Text 2 <p>Two</p><p>Three</p></div>"), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|childNodesCopy()|25", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|childNodesCopy()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|23", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|childNodesCopy()|22", org.jsoup.nodes.Document.class, doc).body()).html()))));
    }

    @org.junit.Test
    public void supportsClone() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|supportsClone()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div class=foo>Text</div>"));
        org.jsoup.nodes.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|supportsClone()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|supportsClone()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|supportsClone()|1", org.jsoup.nodes.Document.class, doc).select("div")).first());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|supportsClone()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|supportsClone()|4", org.jsoup.nodes.Element.class, el).hasClass("foo")));
        org.jsoup.nodes.Element elClone = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|supportsClone()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|supportsClone()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|supportsClone()|7", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|supportsClone()|6", org.jsoup.nodes.Document.class, doc).clone()).select("div")).first());
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|supportsClone()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|supportsClone()|10", org.jsoup.nodes.Element.class, elClone).hasClass("foo")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|supportsClone()|14", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|supportsClone()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|supportsClone()|12", org.jsoup.nodes.Element.class, elClone).text()).equals("Text")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|supportsClone()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|supportsClone()|15", org.jsoup.nodes.Element.class, el).removeClass("foo"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|supportsClone()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|supportsClone()|17", org.jsoup.nodes.Element.class, el).text("None"));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|supportsClone()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|supportsClone()|19", org.jsoup.nodes.Element.class, el).hasClass("foo")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|supportsClone()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|supportsClone()|21", org.jsoup.nodes.Element.class, elClone).hasClass("foo")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|supportsClone()|25", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|supportsClone()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|supportsClone()|23", org.jsoup.nodes.Element.class, el).text()).equals("None")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|supportsClone()|28", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|supportsClone()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|supportsClone()|26", org.jsoup.nodes.Element.class, elClone).text()).equals("Text")));
    }

    @org.junit.Test
    public void changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive() {
        org.jsoup.nodes.Document document = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<INPUT id=\"foo\" NAME=\"foo\" VALUE=\"\">"));
        org.jsoup.nodes.Element inputElement = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive()|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.NodeTest|changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive()|2", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.NodeTest|changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive()|1", org.jsoup.nodes.Document.class, document).select("#foo")).first());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive()|4", org.jsoup.nodes.Element.class, inputElement).attr("value", "bar"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive()|6", org.jsoup.nodes.Attributes.class, singletonAttributes("value", "bar")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive()|8", org.jsoup.nodes.Attributes.class, getAttributesCaseInsensitive(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive()|7", org.jsoup.nodes.Element.class, inputElement), "value")));
    }

    private org.jsoup.nodes.Attributes getAttributesCaseInsensitive(org.jsoup.nodes.Element element, java.lang.String attributeName) {
        org.jsoup.nodes.Attributes matches = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|getAttributesCaseInsensitive(org.jsoup.nodes.Element,java.lang.String)|0", org.jsoup.nodes.Attributes.class, new org.jsoup.nodes.Attributes());
        for (org.jsoup.nodes.Attribute attribute : eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|getAttributesCaseInsensitive(org.jsoup.nodes.Element,java.lang.String)|2", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.NodeTest|getAttributesCaseInsensitive(org.jsoup.nodes.Element,java.lang.String)|1", org.jsoup.nodes.Element.class, element).attributes())) {
            if (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|getAttributesCaseInsensitive(org.jsoup.nodes.Element,java.lang.String)|6", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|getAttributesCaseInsensitive(org.jsoup.nodes.Element,java.lang.String)|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attribute>observeState("org.jsoup.nodes.NodeTest|getAttributesCaseInsensitive(org.jsoup.nodes.Element,java.lang.String)|3", org.jsoup.nodes.Attribute.class, attribute).getKey()).equalsIgnoreCase(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|getAttributesCaseInsensitive(org.jsoup.nodes.Element,java.lang.String)|5", attributeName)))) {
                eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|getAttributesCaseInsensitive(org.jsoup.nodes.Element,java.lang.String)|9", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|getAttributesCaseInsensitive(org.jsoup.nodes.Element,java.lang.String)|7", org.jsoup.nodes.Attributes.class, matches).put(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attribute>observeState("org.jsoup.nodes.NodeTest|getAttributesCaseInsensitive(org.jsoup.nodes.Element,java.lang.String)|8", org.jsoup.nodes.Attribute.class, attribute)));
            }
        }
        return eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|getAttributesCaseInsensitive(org.jsoup.nodes.Element,java.lang.String)|10", org.jsoup.nodes.Attributes.class, matches);
    }

    private org.jsoup.nodes.Attributes singletonAttributes(java.lang.String key, java.lang.String value) {
        org.jsoup.nodes.Attributes attributes = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|singletonAttributes(java.lang.String,java.lang.String)|0", org.jsoup.nodes.Attributes.class, new org.jsoup.nodes.Attributes());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|singletonAttributes(java.lang.String,java.lang.String)|4", org.jsoup.nodes.Attributes.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|singletonAttributes(java.lang.String,java.lang.String)|1", org.jsoup.nodes.Attributes.class, attributes).put(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|singletonAttributes(java.lang.String,java.lang.String)|2", key), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.NodeTest|singletonAttributes(java.lang.String,java.lang.String)|3", value)));
        return eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Attributes>observeState("org.jsoup.nodes.NodeTest|singletonAttributes(java.lang.String,java.lang.String)|5", org.jsoup.nodes.Attributes.class, attributes);
    }
}

