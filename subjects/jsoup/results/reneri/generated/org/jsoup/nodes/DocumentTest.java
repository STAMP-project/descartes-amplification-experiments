package org.jsoup.nodes;


/**
 * Tests for Document.
 *
 * @author Jonathan Hedley, jonathan@hedley.net
 */
public class DocumentTest {
    private static final java.lang.String charsetUtf8 = "UTF-8";

    private static final java.lang.String charsetIso8859 = "ISO-8859-1";

    @org.junit.Test
    public void setTextPreservesDocumentStructure() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|setTextPreservesDocumentStructure()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p>Hello</p>"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|setTextPreservesDocumentStructure()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|setTextPreservesDocumentStructure()|1", org.jsoup.nodes.Document.class, doc).text("Replaced"));
        org.junit.Assert.assertEquals("Replaced", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|setTextPreservesDocumentStructure()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|setTextPreservesDocumentStructure()|3", org.jsoup.nodes.Document.class, doc).text()));
        org.junit.Assert.assertEquals("Replaced", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|setTextPreservesDocumentStructure()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|setTextPreservesDocumentStructure()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|setTextPreservesDocumentStructure()|5", org.jsoup.nodes.Document.class, doc).body()).text()));
        org.junit.Assert.assertEquals(1, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|setTextPreservesDocumentStructure()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|setTextPreservesDocumentStructure()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|setTextPreservesDocumentStructure()|8", org.jsoup.nodes.Document.class, doc).select("head")).size()));
    }

    @org.junit.Test
    public void testTitles() {
        org.jsoup.nodes.Document noTitle = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testTitles()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p>Hello</p>"));
        org.jsoup.nodes.Document withTitle = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testTitles()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testTitles()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testTitles()|2", org.jsoup.nodes.Document.class, noTitle).title()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testTitles()|4", org.jsoup.nodes.Document.class, noTitle).title("Hello");
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testTitles()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testTitles()|5", org.jsoup.nodes.Document.class, noTitle).title()));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testTitles()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testTitles()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|testTitles()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testTitles()|7", org.jsoup.nodes.Document.class, noTitle).select("title")).first()).text()));
        org.junit.Assert.assertEquals("First", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testTitles()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testTitles()|11", org.jsoup.nodes.Document.class, withTitle).title()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testTitles()|13", org.jsoup.nodes.Document.class, withTitle).title("Hello");
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testTitles()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testTitles()|14", org.jsoup.nodes.Document.class, withTitle).title()));
        org.junit.Assert.assertEquals("Hello", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testTitles()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testTitles()|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|testTitles()|17", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testTitles()|16", org.jsoup.nodes.Document.class, withTitle).select("title")).first()).text()));
        org.jsoup.nodes.Document normaliseTitle = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testTitles()|20", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>   Hello\nthere   \n   now   \n"));
        org.junit.Assert.assertEquals("Hello there now", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testTitles()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testTitles()|21", org.jsoup.nodes.Document.class, normaliseTitle).title()));
    }

    @org.junit.Test
    public void testOutputEncoding() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<p title=π>π & < > </p>"));
        // default is utf-8
        org.junit.Assert.assertEquals("<p title=\"\u03c0\">\u03c0 &amp; &lt; &gt; </p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testOutputEncoding()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|1", org.jsoup.nodes.Document.class, doc).body()).html()));
        org.junit.Assert.assertEquals("UTF-8", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testOutputEncoding()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|6", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|5", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|4", org.jsoup.nodes.Document.class, doc).outputSettings()).charset()).name()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|10", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|9", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|8", org.jsoup.nodes.Document.class, doc).outputSettings()).charset("ascii"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Entities.EscapeMode>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|11", org.jsoup.nodes.Entities.EscapeMode.class, org.jsoup.nodes.Entities.EscapeMode.base), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Entities.EscapeMode>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|14", org.jsoup.nodes.Entities.EscapeMode.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|13", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|12", org.jsoup.nodes.Document.class, doc).outputSettings()).escapeMode()));
        org.junit.Assert.assertEquals("<p title=\"&#x3c0;\">&#x3c0; &amp; &lt; &gt; </p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testOutputEncoding()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|16", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|15", org.jsoup.nodes.Document.class, doc).body()).html()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|21", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|19", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|18", org.jsoup.nodes.Document.class, doc).outputSettings()).escapeMode(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Entities.EscapeMode>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|20", org.jsoup.nodes.Entities.EscapeMode.class, org.jsoup.nodes.Entities.EscapeMode.extended)));
        org.junit.Assert.assertEquals("<p title=\"&pi;\">&pi; &amp; &lt; &gt; </p>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testOutputEncoding()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|23", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testOutputEncoding()|22", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void testXhtmlReferences() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testXhtmlReferences()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testXhtmlReferences()|4", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testXhtmlReferences()|2", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testXhtmlReferences()|1", org.jsoup.nodes.Document.class, doc).outputSettings()).escapeMode(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Entities.EscapeMode>observeState("org.jsoup.nodes.DocumentTest|testXhtmlReferences()|3", org.jsoup.nodes.Entities.EscapeMode.class, org.jsoup.nodes.Entities.EscapeMode.xhtml)));
        org.junit.Assert.assertEquals("&lt; &gt; &amp; \" \' \u00d7", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testXhtmlReferences()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testXhtmlReferences()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testXhtmlReferences()|5", org.jsoup.nodes.Document.class, doc).body()).html()));
    }

    @org.junit.Test
    public void testNormalisesStructure() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testNormalisesStructure()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<html><head><script>one</script><noscript><p>two</p></noscript></head><body><p>three</p></body><p>four</p></html>"));
        org.junit.Assert.assertEquals("<html><head><script>one</script><noscript>&lt;p&gt;two</noscript></head><body><p>three</p><p>four</p></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testNormalisesStructure()|3", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testNormalisesStructure()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testNormalisesStructure()|1", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void testClone() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testClone()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<title>Hello</title> <p>One<p>Two"));
        org.jsoup.nodes.Document clone = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testClone()|2", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testClone()|1", org.jsoup.nodes.Document.class, doc).clone());
        org.junit.Assert.assertEquals("<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testClone()|5", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testClone()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testClone()|3", org.jsoup.nodes.Document.class, clone).html()))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testClone()|6", org.jsoup.nodes.Document.class, clone).title("Hello there");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testClone()|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testClone()|10", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testClone()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|testClone()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testClone()|7", org.jsoup.nodes.Document.class, clone).select("p")).first()).text("One more")).attr("id", "1"));
        org.junit.Assert.assertEquals("<html><head><title>Hello there</title> </head><body><p id=\"1\">One more</p><p>Two</p></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testClone()|14", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testClone()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testClone()|12", org.jsoup.nodes.Document.class, clone).html()))));
        org.junit.Assert.assertEquals("<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testClone()|17", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testClone()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testClone()|15", org.jsoup.nodes.Document.class, doc).html()))));
    }

    @org.junit.Test
    public void testClonesDeclarations() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testClonesDeclarations()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<!DOCTYPE html><html><head><title>Doctype test"));
        org.jsoup.nodes.Document clone = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testClonesDeclarations()|2", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testClonesDeclarations()|1", org.jsoup.nodes.Document.class, doc).clone());
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testClonesDeclarations()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testClonesDeclarations()|3", org.jsoup.nodes.Document.class, doc).html()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testClonesDeclarations()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testClonesDeclarations()|5", org.jsoup.nodes.Document.class, clone).html()));
        org.junit.Assert.assertEquals("<!doctype html><html><head><title>Doctype test</title></head><body></body></html>", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testClonesDeclarations()|9", org.jsoup.TextUtil.stripNewlines(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testClonesDeclarations()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testClonesDeclarations()|7", org.jsoup.nodes.Document.class, clone).html()))));
    }

    @org.junit.Test
    public void testLocation() throws java.io.IOException {
        java.io.File in = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.nodes.DocumentTest|testLocation()|1", java.io.File.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.integration.ParseTest>observeState("org.jsoup.nodes.DocumentTest|testLocation()|0", org.jsoup.integration.ParseTest.class, new org.jsoup.integration.ParseTest()).getFile("/htmltests/yahoo-jp.html"));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testLocation()|3", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.nodes.DocumentTest|testLocation()|2", java.io.File.class, in), "UTF-8", "http://www.yahoo.co.jp/index.html"));
        java.lang.String location = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testLocation()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testLocation()|4", org.jsoup.nodes.Document.class, doc).location());
        java.lang.String baseUri = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testLocation()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testLocation()|6", org.jsoup.nodes.Document.class, doc).baseUri());
        org.junit.Assert.assertEquals("http://www.yahoo.co.jp/index.html", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testLocation()|8", location));
        org.junit.Assert.assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testLocation()|9", baseUri));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.nodes.DocumentTest|testLocation()|11", java.io.File.class, (in = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.integration.ParseTest>observeState("org.jsoup.nodes.DocumentTest|testLocation()|10", org.jsoup.integration.ParseTest.class, new org.jsoup.integration.ParseTest()).getFile("/htmltests/nyt-article-1.html")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testLocation()|13", org.jsoup.nodes.Document.class, (doc = org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.jsoup.nodes.DocumentTest|testLocation()|12", java.io.File.class, in), null, "http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp")));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testLocation()|15", (location = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testLocation()|14", org.jsoup.nodes.Document.class, doc).location()));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testLocation()|17", (baseUri = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testLocation()|16", org.jsoup.nodes.Document.class, doc).baseUri()));
        org.junit.Assert.assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testLocation()|18", location));
        org.junit.Assert.assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testLocation()|19", baseUri));
    }

    @org.junit.Test
    public void testHtmlAndXmlSyntax() {
        java.lang.String h = "<!DOCTYPE html><body><img async checked=\'checked\' src=\'&<>\"\'>&lt;&gt;&amp;&quot;<foo />bar";
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testHtmlAndXmlSyntax()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testHtmlAndXmlSyntax()|0", h)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testHtmlAndXmlSyntax()|5", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testHtmlAndXmlSyntax()|3", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testHtmlAndXmlSyntax()|2", org.jsoup.nodes.Document.class, doc).outputSettings()).syntax(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings.Syntax>observeState("org.jsoup.nodes.DocumentTest|testHtmlAndXmlSyntax()|4", org.jsoup.nodes.Document.OutputSettings.Syntax.class, org.jsoup.nodes.Document.OutputSettings.Syntax.html)));
        org.junit.Assert.assertEquals(("<!doctype html>\n" + (((((("<html>\n" + " <head></head>\n") + " <body>\n") + "  <img async checked src=\"&amp;<>&quot;\">&lt;&gt;&amp;\"\n") + "  <foo />bar\n") + " </body>\n") + "</html>")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testHtmlAndXmlSyntax()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testHtmlAndXmlSyntax()|6", org.jsoup.nodes.Document.class, doc).html()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testHtmlAndXmlSyntax()|11", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testHtmlAndXmlSyntax()|9", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testHtmlAndXmlSyntax()|8", org.jsoup.nodes.Document.class, doc).outputSettings()).syntax(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings.Syntax>observeState("org.jsoup.nodes.DocumentTest|testHtmlAndXmlSyntax()|10", org.jsoup.nodes.Document.OutputSettings.Syntax.class, org.jsoup.nodes.Document.OutputSettings.Syntax.xml)));
        org.junit.Assert.assertEquals(("<!DOCTYPE html>\n" + (((((("<html>\n" + " <head></head>\n") + " <body>\n") + "  <img async=\"\" checked=\"checked\" src=\"&amp;<>&quot;\" />&lt;&gt;&amp;\"\n") + "  <foo />bar\n") + " </body>\n") + "</html>")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testHtmlAndXmlSyntax()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testHtmlAndXmlSyntax()|12", org.jsoup.nodes.Document.class, doc).html()));
    }

    @org.junit.Test
    public void htmlParseDefaultsToHtmlOutputSyntax() {
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|htmlParseDefaultsToHtmlOutputSyntax()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("x"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings.Syntax>observeState("org.jsoup.nodes.DocumentTest|htmlParseDefaultsToHtmlOutputSyntax()|1", org.jsoup.nodes.Document.OutputSettings.Syntax.class, org.jsoup.nodes.Document.OutputSettings.Syntax.html), eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings.Syntax>observeState("org.jsoup.nodes.DocumentTest|htmlParseDefaultsToHtmlOutputSyntax()|4", org.jsoup.nodes.Document.OutputSettings.Syntax.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|htmlParseDefaultsToHtmlOutputSyntax()|3", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|htmlParseDefaultsToHtmlOutputSyntax()|2", org.jsoup.nodes.Document.class, doc).outputSettings()).syntax()));
    }

    @org.junit.Test
    public void testHtmlAppendable() {
        java.lang.String htmlContent = "<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>";
        org.jsoup.nodes.Document document = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testHtmlAppendable()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testHtmlAppendable()|0", htmlContent)));
        org.jsoup.nodes.Document.OutputSettings outputSettings = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testHtmlAppendable()|2", org.jsoup.nodes.Document.OutputSettings.class, new org.jsoup.nodes.Document.OutputSettings());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testHtmlAppendable()|4", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testHtmlAppendable()|3", org.jsoup.nodes.Document.OutputSettings.class, outputSettings).prettyPrint(false));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testHtmlAppendable()|7", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testHtmlAppendable()|5", org.jsoup.nodes.Document.class, document).outputSettings(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testHtmlAppendable()|6", org.jsoup.nodes.Document.OutputSettings.class, outputSettings)));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testHtmlAppendable()|8", htmlContent), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testHtmlAppendable()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.jsoup.nodes.DocumentTest|testHtmlAppendable()|11", java.io.StringWriter.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testHtmlAppendable()|9", org.jsoup.nodes.Document.class, document).html(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringWriter>observeState("org.jsoup.nodes.DocumentTest|testHtmlAppendable()|10", java.io.StringWriter.class, new java.io.StringWriter()))).toString()));
    }

    // Ignored since this test can take awhile to run.
    @org.junit.Ignore
    @org.junit.Test
    public void testOverflowClone() {
        java.lang.StringBuilder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.nodes.DocumentTest|testOverflowClone()|0", java.lang.StringBuilder.class, new java.lang.StringBuilder());
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testOverflowClone()|1", i)) < 100000; i++) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.nodes.DocumentTest|testOverflowClone()|3", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.nodes.DocumentTest|testOverflowClone()|2", java.lang.StringBuilder.class, builder).insert(0, "<i>"));
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.nodes.DocumentTest|testOverflowClone()|5", java.lang.StringBuilder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.nodes.DocumentTest|testOverflowClone()|4", java.lang.StringBuilder.class, builder).append("</i>"));
        }
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testOverflowClone()|8", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testOverflowClone()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuilder>observeState("org.jsoup.nodes.DocumentTest|testOverflowClone()|6", java.lang.StringBuilder.class, builder).toString())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testOverflowClone()|10", org.jsoup.nodes.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testOverflowClone()|9", org.jsoup.nodes.Document.class, doc).clone());
    }

    @org.junit.Test
    public void DocumentsWithSameContentAreEqual() throws java.lang.Exception {
        org.jsoup.nodes.Document docA = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div/>One"));
        org.jsoup.nodes.Document docB = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div/>One"));
        org.jsoup.nodes.Document docC = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div/>Two"));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|3", org.jsoup.nodes.Document.class, docA).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|4", org.jsoup.nodes.Document.class, docB))));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|6", org.jsoup.nodes.Document.class, docA).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|7", org.jsoup.nodes.Document.class, docA))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|9", org.jsoup.nodes.Document.class, docA).hashCode()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|11", org.jsoup.nodes.Document.class, docA).hashCode()));
        org.junit.Assert.assertFalse(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|13", org.jsoup.nodes.Document.class, docA).hashCode())) == (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreEqual()|15", org.jsoup.nodes.Document.class, docC).hashCode()))));
    }

    @org.junit.Test
    public void DocumentsWithSameContentAreVerifialbe() throws java.lang.Exception {
        org.jsoup.nodes.Document docA = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreVerifialbe()|0", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div/>One"));
        org.jsoup.nodes.Document docB = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreVerifialbe()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div/>One"));
        org.jsoup.nodes.Document docC = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreVerifialbe()|2", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse("<div/>Two"));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreVerifialbe()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreVerifialbe()|3", org.jsoup.nodes.Document.class, docA).hasSameValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreVerifialbe()|4", org.jsoup.nodes.Document.class, docB))));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreVerifialbe()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreVerifialbe()|6", org.jsoup.nodes.Document.class, docA).hasSameValue(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|DocumentsWithSameContentAreVerifialbe()|7", org.jsoup.nodes.Document.class, docC))));
    }

    @org.junit.Test
    public void testMetaCharsetUpdateUtf8() {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|0", org.jsoup.nodes.Document.class, createHtmlDocument("changeThis"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|1", org.jsoup.nodes.Document.class, doc).updateMetaCharsetElement(true);
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|2", org.jsoup.nodes.Document.class, doc).charset(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|3", java.nio.charset.Charset.class, java.nio.charset.Charset.forName(org.jsoup.nodes.DocumentTest.charsetUtf8)));
        final java.lang.String htmlCharsetUTF8 = ((((("<html>\n" + (" <head>\n" + "  <meta charset=\"")) + (org.jsoup.nodes.DocumentTest.charsetUtf8)) + "\">\n") + " </head>\n") + " <body></body>\n") + "</html>";
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|4", htmlCharsetUTF8), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|5", org.jsoup.nodes.Document.class, doc).toString()));
        org.jsoup.nodes.Element selectedElement = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|7", org.jsoup.nodes.Document.class, doc).select("meta[charset]")).first());
        org.junit.Assert.assertEquals(org.jsoup.nodes.DocumentTest.charsetUtf8, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|11", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|10", org.jsoup.nodes.Document.class, doc).charset()).name()));
        org.junit.Assert.assertEquals(org.jsoup.nodes.DocumentTest.charsetUtf8, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|13", org.jsoup.nodes.Element.class, selectedElement).attr("charset")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|16", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|15", org.jsoup.nodes.Document.class, doc).charset()), eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|19", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|18", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateUtf8()|17", org.jsoup.nodes.Document.class, doc).outputSettings()).charset()));
    }

    @org.junit.Test
    public void testMetaCharsetUpdateIso8859() {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|0", org.jsoup.nodes.Document.class, createHtmlDocument("changeThis"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|1", org.jsoup.nodes.Document.class, doc).updateMetaCharsetElement(true);
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|2", org.jsoup.nodes.Document.class, doc).charset(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|3", java.nio.charset.Charset.class, java.nio.charset.Charset.forName(org.jsoup.nodes.DocumentTest.charsetIso8859)));
        final java.lang.String htmlCharsetISO = ((((("<html>\n" + (" <head>\n" + "  <meta charset=\"")) + (org.jsoup.nodes.DocumentTest.charsetIso8859)) + "\">\n") + " </head>\n") + " <body></body>\n") + "</html>";
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|4", htmlCharsetISO), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|5", org.jsoup.nodes.Document.class, doc).toString()));
        org.jsoup.nodes.Element selectedElement = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|8", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|7", org.jsoup.nodes.Document.class, doc).select("meta[charset]")).first());
        org.junit.Assert.assertEquals(org.jsoup.nodes.DocumentTest.charsetIso8859, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|11", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|10", org.jsoup.nodes.Document.class, doc).charset()).name()));
        org.junit.Assert.assertEquals(org.jsoup.nodes.DocumentTest.charsetIso8859, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|13", org.jsoup.nodes.Element.class, selectedElement).attr("charset")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|16", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|15", org.jsoup.nodes.Document.class, doc).charset()), eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|19", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|18", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateIso8859()|17", org.jsoup.nodes.Document.class, doc).outputSettings()).charset()));
    }

    @org.junit.Test
    public void testMetaCharsetUpdateNoCharset() {
        final org.jsoup.nodes.Document docNoCharset = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateNoCharset()|0", org.jsoup.nodes.Document.class, org.jsoup.nodes.Document.createShell(""));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateNoCharset()|1", org.jsoup.nodes.Document.class, docNoCharset).updateMetaCharsetElement(true);
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateNoCharset()|2", org.jsoup.nodes.Document.class, docNoCharset).charset(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateNoCharset()|3", java.nio.charset.Charset.class, java.nio.charset.Charset.forName(org.jsoup.nodes.DocumentTest.charsetUtf8)));
        org.junit.Assert.assertEquals(org.jsoup.nodes.DocumentTest.charsetUtf8, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateNoCharset()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateNoCharset()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateNoCharset()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateNoCharset()|4", org.jsoup.nodes.Document.class, docNoCharset).select("meta[charset]")).first()).attr("charset")));
        final java.lang.String htmlCharsetUTF8 = ((((("<html>\n" + (" <head>\n" + "  <meta charset=\"")) + (org.jsoup.nodes.DocumentTest.charsetUtf8)) + "\">\n") + " </head>\n") + " <body></body>\n") + "</html>";
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateNoCharset()|8", htmlCharsetUTF8), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateNoCharset()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateNoCharset()|9", org.jsoup.nodes.Document.class, docNoCharset).toString()));
    }

    @org.junit.Test
    public void testMetaCharsetUpdateDisabled() {
        final org.jsoup.nodes.Document docDisabled = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabled()|0", org.jsoup.nodes.Document.class, org.jsoup.nodes.Document.createShell(""));
        final java.lang.String htmlNoCharset = "<html>\n" + ((" <head></head>\n" + " <body></body>\n") + "</html>");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabled()|1", htmlNoCharset), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabled()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabled()|2", org.jsoup.nodes.Document.class, docDisabled).toString()));
        org.junit.Assert.assertNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabled()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabled()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabled()|4", org.jsoup.nodes.Document.class, docDisabled).select("meta[charset]")).first()));
    }

    @org.junit.Test
    public void testMetaCharsetUpdateDisabledNoChanges() {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|0", org.jsoup.nodes.Document.class, createHtmlDocument("dontTouch"));
        final java.lang.String htmlCharset = "<html>\n" + (((((" <head>\n" + "  <meta charset=\"dontTouch\">\n") + "  <meta name=\"charset\" content=\"dontTouch\">\n") + " </head>\n") + " <body></body>\n") + "</html>");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|1", htmlCharset), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|2", org.jsoup.nodes.Document.class, doc).toString()));
        org.jsoup.nodes.Element selectedElement = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|6", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|5", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|4", org.jsoup.nodes.Document.class, doc).select("meta[charset]")).first());
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|7", org.jsoup.nodes.Element.class, selectedElement));
        org.junit.Assert.assertEquals("dontTouch", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|8", org.jsoup.nodes.Element.class, selectedElement).attr("charset")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|12", org.jsoup.nodes.Element.class, (selectedElement = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|11", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|10", org.jsoup.nodes.Document.class, doc).select("meta[name=charset]")).first()));
        org.junit.Assert.assertNotNull(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|13", org.jsoup.nodes.Element.class, selectedElement));
        org.junit.Assert.assertEquals("dontTouch", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateDisabledNoChanges()|14", org.jsoup.nodes.Element.class, selectedElement).attr("content")));
    }

    @org.junit.Test
    public void testMetaCharsetUpdateEnabledAfterCharsetChange() {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateEnabledAfterCharsetChange()|0", org.jsoup.nodes.Document.class, createHtmlDocument("dontTouch"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateEnabledAfterCharsetChange()|1", org.jsoup.nodes.Document.class, doc).charset(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateEnabledAfterCharsetChange()|2", java.nio.charset.Charset.class, java.nio.charset.Charset.forName(org.jsoup.nodes.DocumentTest.charsetUtf8)));
        org.jsoup.nodes.Element selectedElement = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateEnabledAfterCharsetChange()|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateEnabledAfterCharsetChange()|4", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateEnabledAfterCharsetChange()|3", org.jsoup.nodes.Document.class, doc).select("meta[charset]")).first());
        org.junit.Assert.assertEquals(org.jsoup.nodes.DocumentTest.charsetUtf8, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateEnabledAfterCharsetChange()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateEnabledAfterCharsetChange()|6", org.jsoup.nodes.Element.class, selectedElement).attr("charset")));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateEnabledAfterCharsetChange()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateEnabledAfterCharsetChange()|9", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateEnabledAfterCharsetChange()|8", org.jsoup.nodes.Document.class, doc).select("meta[name=charset]")).isEmpty()));
    }

    @org.junit.Test
    public void testMetaCharsetUpdateCleanup() {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateCleanup()|0", org.jsoup.nodes.Document.class, createHtmlDocument("dontTouch"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateCleanup()|1", org.jsoup.nodes.Document.class, doc).updateMetaCharsetElement(true);
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateCleanup()|2", org.jsoup.nodes.Document.class, doc).charset(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateCleanup()|3", java.nio.charset.Charset.class, java.nio.charset.Charset.forName(org.jsoup.nodes.DocumentTest.charsetUtf8)));
        final java.lang.String htmlCharsetUTF8 = ((((("<html>\n" + (" <head>\n" + "  <meta charset=\"")) + (org.jsoup.nodes.DocumentTest.charsetUtf8)) + "\">\n") + " </head>\n") + " <body></body>\n") + "</html>";
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateCleanup()|4", htmlCharsetUTF8), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateCleanup()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateCleanup()|5", org.jsoup.nodes.Document.class, doc).toString()));
    }

    @org.junit.Test
    public void testMetaCharsetUpdateXmlUtf8() {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|0", org.jsoup.nodes.Document.class, createXmlDocument("1.0", "changeThis", true));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|1", org.jsoup.nodes.Document.class, doc).updateMetaCharsetElement(true);
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|2", org.jsoup.nodes.Document.class, doc).charset(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|3", java.nio.charset.Charset.class, java.nio.charset.Charset.forName(org.jsoup.nodes.DocumentTest.charsetUtf8)));
        final java.lang.String xmlCharsetUTF8 = (((("<?xml version=\"1.0\" encoding=\"" + (org.jsoup.nodes.DocumentTest.charsetUtf8)) + "\"?>\n") + "<root>\n") + " node\n") + "</root>";
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|4", xmlCharsetUTF8), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|5", org.jsoup.nodes.Document.class, doc).toString()));
        org.jsoup.nodes.XmlDeclaration selectedNode = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|8", org.jsoup.nodes.XmlDeclaration.class, ((org.jsoup.nodes.XmlDeclaration) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|7", org.jsoup.nodes.Document.class, doc).childNode(0))));
        org.junit.Assert.assertEquals(org.jsoup.nodes.DocumentTest.charsetUtf8, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|10", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|9", org.jsoup.nodes.Document.class, doc).charset()).name()));
        org.junit.Assert.assertEquals(org.jsoup.nodes.DocumentTest.charsetUtf8, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|12", org.jsoup.nodes.XmlDeclaration.class, selectedNode).attr("encoding")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|15", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|14", org.jsoup.nodes.Document.class, doc).charset()), eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|18", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|17", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlUtf8()|16", org.jsoup.nodes.Document.class, doc).outputSettings()).charset()));
    }

    @org.junit.Test
    public void testMetaCharsetUpdateXmlIso8859() {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|0", org.jsoup.nodes.Document.class, createXmlDocument("1.0", "changeThis", true));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|1", org.jsoup.nodes.Document.class, doc).updateMetaCharsetElement(true);
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|2", org.jsoup.nodes.Document.class, doc).charset(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|3", java.nio.charset.Charset.class, java.nio.charset.Charset.forName(org.jsoup.nodes.DocumentTest.charsetIso8859)));
        final java.lang.String xmlCharsetISO = (((("<?xml version=\"1.0\" encoding=\"" + (org.jsoup.nodes.DocumentTest.charsetIso8859)) + "\"?>\n") + "<root>\n") + " node\n") + "</root>";
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|4", xmlCharsetISO), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|5", org.jsoup.nodes.Document.class, doc).toString()));
        org.jsoup.nodes.XmlDeclaration selectedNode = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|8", org.jsoup.nodes.XmlDeclaration.class, ((org.jsoup.nodes.XmlDeclaration) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|7", org.jsoup.nodes.Document.class, doc).childNode(0))));
        org.junit.Assert.assertEquals(org.jsoup.nodes.DocumentTest.charsetIso8859, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|10", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|9", org.jsoup.nodes.Document.class, doc).charset()).name()));
        org.junit.Assert.assertEquals(org.jsoup.nodes.DocumentTest.charsetIso8859, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|12", org.jsoup.nodes.XmlDeclaration.class, selectedNode).attr("encoding")));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|15", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|14", org.jsoup.nodes.Document.class, doc).charset()), eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|18", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|17", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlIso8859()|16", org.jsoup.nodes.Document.class, doc).outputSettings()).charset()));
    }

    @org.junit.Test
    public void testMetaCharsetUpdateXmlNoCharset() {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlNoCharset()|0", org.jsoup.nodes.Document.class, createXmlDocument("1.0", "none", false));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlNoCharset()|1", org.jsoup.nodes.Document.class, doc).updateMetaCharsetElement(true);
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlNoCharset()|2", org.jsoup.nodes.Document.class, doc).charset(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlNoCharset()|3", java.nio.charset.Charset.class, java.nio.charset.Charset.forName(org.jsoup.nodes.DocumentTest.charsetUtf8)));
        final java.lang.String xmlCharsetUTF8 = (((("<?xml version=\"1.0\" encoding=\"" + (org.jsoup.nodes.DocumentTest.charsetUtf8)) + "\"?>\n") + "<root>\n") + " node\n") + "</root>";
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlNoCharset()|4", xmlCharsetUTF8), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlNoCharset()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlNoCharset()|5", org.jsoup.nodes.Document.class, doc).toString()));
        org.jsoup.nodes.XmlDeclaration selectedNode = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlNoCharset()|8", org.jsoup.nodes.XmlDeclaration.class, ((org.jsoup.nodes.XmlDeclaration) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlNoCharset()|7", org.jsoup.nodes.Document.class, doc).childNode(0))));
        org.junit.Assert.assertEquals(org.jsoup.nodes.DocumentTest.charsetUtf8, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlNoCharset()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlNoCharset()|9", org.jsoup.nodes.XmlDeclaration.class, selectedNode).attr("encoding")));
    }

    @org.junit.Test
    public void testMetaCharsetUpdateXmlDisabled() {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlDisabled()|0", org.jsoup.nodes.Document.class, createXmlDocument("none", "none", false));
        final java.lang.String xmlNoCharset = "<root>\n" + (" node\n" + "</root>");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlDisabled()|1", xmlNoCharset), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlDisabled()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlDisabled()|2", org.jsoup.nodes.Document.class, doc).toString()));
    }

    @org.junit.Test
    public void testMetaCharsetUpdateXmlDisabledNoChanges() {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlDisabledNoChanges()|0", org.jsoup.nodes.Document.class, createXmlDocument("dontTouch", "dontTouch", true));
        final java.lang.String xmlCharset = "<?xml version=\"dontTouch\" encoding=\"dontTouch\"?>\n" + (("<root>\n" + " node\n") + "</root>");
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlDisabledNoChanges()|1", xmlCharset), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlDisabledNoChanges()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlDisabledNoChanges()|2", org.jsoup.nodes.Document.class, doc).toString()));
        org.jsoup.nodes.XmlDeclaration selectedNode = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlDisabledNoChanges()|5", org.jsoup.nodes.XmlDeclaration.class, ((org.jsoup.nodes.XmlDeclaration) (eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlDisabledNoChanges()|4", org.jsoup.nodes.Document.class, doc).childNode(0))));
        org.junit.Assert.assertEquals("dontTouch", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlDisabledNoChanges()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlDisabledNoChanges()|6", org.jsoup.nodes.XmlDeclaration.class, selectedNode).attr("encoding")));
        org.junit.Assert.assertEquals("dontTouch", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlDisabledNoChanges()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdateXmlDisabledNoChanges()|8", org.jsoup.nodes.XmlDeclaration.class, selectedNode).attr("version")));
    }

    @org.junit.Test
    public void testMetaCharsetUpdatedDisabledPerDefault() {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdatedDisabledPerDefault()|0", org.jsoup.nodes.Document.class, createHtmlDocument("none"));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdatedDisabledPerDefault()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testMetaCharsetUpdatedDisabledPerDefault()|1", org.jsoup.nodes.Document.class, doc).updateMetaCharsetElement()));
    }

    private org.jsoup.nodes.Document createHtmlDocument(java.lang.String charset) {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|createHtmlDocument(java.lang.String)|0", org.jsoup.nodes.Document.class, org.jsoup.nodes.Document.createShell(""));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|createHtmlDocument(java.lang.String)|5", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|createHtmlDocument(java.lang.String)|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|createHtmlDocument(java.lang.String)|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|createHtmlDocument(java.lang.String)|1", org.jsoup.nodes.Document.class, doc).head()).appendElement("meta")).attr("charset", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|createHtmlDocument(java.lang.String)|4", charset)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|createHtmlDocument(java.lang.String)|11", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|createHtmlDocument(java.lang.String)|9", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|createHtmlDocument(java.lang.String)|8", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|createHtmlDocument(java.lang.String)|7", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|createHtmlDocument(java.lang.String)|6", org.jsoup.nodes.Document.class, doc).head()).appendElement("meta")).attr("name", "charset")).attr("content", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|createHtmlDocument(java.lang.String)|10", charset)));
        return eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|createHtmlDocument(java.lang.String)|12", org.jsoup.nodes.Document.class, doc);
    }

    private org.jsoup.nodes.Document createXmlDocument(java.lang.String version, java.lang.String charset, boolean addDecl) {
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|0", org.jsoup.nodes.Document.class, new org.jsoup.nodes.Document(""));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|3", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|2", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|1", org.jsoup.nodes.Document.class, doc).appendElement("root")).text("node"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|7", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|5", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|4", org.jsoup.nodes.Document.class, doc).outputSettings()).syntax(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings.Syntax>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|6", org.jsoup.nodes.Document.OutputSettings.Syntax.class, org.jsoup.nodes.Document.OutputSettings.Syntax.xml)));
        if (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|8", addDecl)) {
            org.jsoup.nodes.XmlDeclaration decl = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|9", org.jsoup.nodes.XmlDeclaration.class, new org.jsoup.nodes.XmlDeclaration("xml", false));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|12", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|10", org.jsoup.nodes.XmlDeclaration.class, decl).attr("version", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|11", version)));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Node>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|15", org.jsoup.nodes.Node.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|13", org.jsoup.nodes.XmlDeclaration.class, decl).attr("encoding", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|14", charset)));
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Element>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|18", org.jsoup.nodes.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|16", org.jsoup.nodes.Document.class, doc).prependChild(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.XmlDeclaration>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|17", org.jsoup.nodes.XmlDeclaration.class, decl)));
        }
        return eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|createXmlDocument(java.lang.String,java.lang.String,boolean)|19", org.jsoup.nodes.Document.class, doc);
    }

    @org.junit.Test
    public void testShiftJisRoundtrip() throws java.lang.Exception {
        java.lang.String input = "<html>" + (((((("<head>" + "<meta http-equiv=\"content-type\" content=\"text/html; charset=Shift_JIS\" />") + "</head>") + "<body>") + "before&nbsp;after") + "</body>") + "</html>");
        java.io.InputStream is = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayInputStream>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|3", java.io.ByteArrayInputStream.class, new java.io.ByteArrayInputStream(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|2", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|0", input).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|1", java.nio.charset.Charset.class, java.nio.charset.Charset.forName("ASCII"))))));
        org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|5", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.InputStream>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|4", java.io.InputStream.class, is), null, "http://example.com"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|9", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|7", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|6", org.jsoup.nodes.Document.class, doc).outputSettings()).escapeMode(eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Entities.EscapeMode>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|8", org.jsoup.nodes.Entities.EscapeMode.class, org.jsoup.nodes.Entities.EscapeMode.xhtml)));
        java.lang.String output = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|19", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|15", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|10", org.jsoup.nodes.Document.class, doc).html()).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|14", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|13", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|12", org.jsoup.nodes.Document.class, doc).outputSettings()).charset()))), eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|18", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|17", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|16", org.jsoup.nodes.Document.class, doc).outputSettings()).charset())));
        org.junit.Assert.assertFalse("Should not have contained a '?'.", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|21", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|20", output).contains("?")));
        org.junit.Assert.assertTrue("Should have contained a '&#xa0;' or a '&nbsp;'.", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|23", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|22", output).contains("&#xa0;"))) || (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|25", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|testShiftJisRoundtrip()|24", output).contains("&nbsp;")))));
    }

    @org.junit.Test
    public void parseAndHtmlOnDifferentThreads() throws java.lang.InterruptedException {
        java.lang.String html = "<p>Alrighty then it\'s not \ud83d\udca9. <span>Next</span></p>";// 💩

        java.lang.String asci = "<p>Alrighty then it's not &#x1f4a9;. <span>Next</span></p>";
        final org.jsoup.nodes.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|1", org.jsoup.nodes.Document.class, org.jsoup.Jsoup.parse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|0", html)));
        final java.lang.String[] out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|2", java.lang.String[].class, new java.lang.String[1]);
        final org.jsoup.select.Elements p = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|4", org.jsoup.select.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|3", org.jsoup.nodes.Document.class, doc).select("p"));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|5", html), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|6", org.jsoup.select.Elements.class, p).outerHtml()));
        java.lang.Thread thread = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Thread>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|16", java.lang.Thread.class, new java.lang.Thread(new java.lang.Runnable() {
            @java.lang.Override
            public void run() {
                eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|11", (eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|9", java.lang.String[].class, out)[0] = eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|10", org.jsoup.select.Elements.class, p).outerHtml()));
                eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|15", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|13", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|12", org.jsoup.nodes.Document.class, doc).outputSettings()).charset(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|14", java.nio.charset.Charset.class, java.nio.charset.StandardCharsets.US_ASCII)));
            }
        }));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Thread>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|17", java.lang.Thread.class, thread).start();
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Thread>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|18", java.lang.Thread.class, thread).join();
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|19", html), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|20", java.lang.String[].class, out)[0]));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|22", java.nio.charset.Charset.class, java.nio.charset.StandardCharsets.US_ASCII), eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|25", java.nio.charset.Charset.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document.OutputSettings>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|24", org.jsoup.nodes.Document.OutputSettings.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.nodes.Document>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|23", org.jsoup.nodes.Document.class, doc).outputSettings()).charset()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|26", asci), eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<org.jsoup.select.Elements>observeState("org.jsoup.nodes.DocumentTest|parseAndHtmlOnDifferentThreads()|27", org.jsoup.select.Elements.class, p).outerHtml()));
    }
}

