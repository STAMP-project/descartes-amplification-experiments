/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 30 18:03:25 GMT 2019
 */

package joptsimple.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import joptsimple.ValueConverter;
import joptsimple.internal.Reflection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Reflection_ESTest extends Reflection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Reflection.findConverter((Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("joptsimple.internal.Classes", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Reflection.findConverter(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.Object is not a value type
         //
         verifyException("joptsimple.internal.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ValueConverter<Integer> valueConverter0 = Reflection.findConverter(class0);
      assertNull(valueConverter0.valuePattern());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      ValueConverter<IllegalArgumentException> valueConverter0 = Reflection.findConverter(class0);
      assertNull(valueConverter0.valuePattern());
  }
}
