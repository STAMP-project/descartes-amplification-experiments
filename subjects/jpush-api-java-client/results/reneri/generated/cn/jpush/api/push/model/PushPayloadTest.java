package cn.jpush.api.push.model;


@org.junit.experimental.categories.Category(cn.jpush.api.FastTests.class)
public class PushPayloadTest {
    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testIllegal_OnlyAudience() {
        try {
            cn.jpush.api.push.model.audience.Audience audience = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.audience.Audience>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_OnlyAudience()|0", cn.jpush.api.push.model.audience.Audience.class, cn.jpush.api.push.model.audience.Audience.all());
            eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_OnlyAudience()|4", cn.jpush.api.push.model.PushPayload.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_OnlyAudience()|3", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_OnlyAudience()|1", cn.jpush.api.push.model.PushPayload.Builder.class, cn.jpush.api.push.model.PushPayload.newBuilder()).setAudience(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.audience.Audience>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_OnlyAudience()|2", cn.jpush.api.push.model.audience.Audience.class, audience))).build());
        } catch (java.lang.IllegalArgumentException a1552641512295) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("cn.jpush.api.push.model.PushPayloadTest|testIllegal_OnlyAudience()|!", a1552641512295);
            throw a1552641512295;
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testIllegal_OnlyPlatform() {
        try {
            cn.jpush.api.push.model.Platform platform = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Platform>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_OnlyPlatform()|0", cn.jpush.api.push.model.Platform.class, cn.jpush.api.push.model.Platform.all());
            eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_OnlyPlatform()|4", cn.jpush.api.push.model.PushPayload.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_OnlyPlatform()|3", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_OnlyPlatform()|1", cn.jpush.api.push.model.PushPayload.Builder.class, cn.jpush.api.push.model.PushPayload.newBuilder()).setPlatform(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Platform>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_OnlyPlatform()|2", cn.jpush.api.push.model.Platform.class, platform))).build());
        } catch (java.lang.IllegalArgumentException a1552641512297) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("cn.jpush.api.push.model.PushPayloadTest|testIllegal_OnlyPlatform()|!", a1552641512297);
            throw a1552641512297;
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testIllegal_PlatformAudience() {
        try {
            cn.jpush.api.push.model.Platform platform = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Platform>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_PlatformAudience()|0", cn.jpush.api.push.model.Platform.class, cn.jpush.api.push.model.Platform.all());
            cn.jpush.api.push.model.audience.Audience audience = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.audience.Audience>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_PlatformAudience()|1", cn.jpush.api.push.model.audience.Audience.class, cn.jpush.api.push.model.audience.Audience.all());
            eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_PlatformAudience()|7", cn.jpush.api.push.model.PushPayload.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_PlatformAudience()|6", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_PlatformAudience()|4", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_PlatformAudience()|2", cn.jpush.api.push.model.PushPayload.Builder.class, cn.jpush.api.push.model.PushPayload.newBuilder()).setPlatform(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Platform>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_PlatformAudience()|3", cn.jpush.api.push.model.Platform.class, platform))).setAudience(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.audience.Audience>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_PlatformAudience()|5", cn.jpush.api.push.model.audience.Audience.class, audience))).build());
        } catch (java.lang.IllegalArgumentException a1552641512299) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("cn.jpush.api.push.model.PushPayloadTest|testIllegal_PlatformAudience()|!", a1552641512299);
            throw a1552641512299;
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testIllegal_NoAudience() {
        try {
            cn.jpush.api.push.model.Platform platform = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Platform>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoAudience()|0", cn.jpush.api.push.model.Platform.class, cn.jpush.api.push.model.Platform.all());
            cn.jpush.api.push.model.notification.Notification notifcation = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.notification.Notification>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoAudience()|1", cn.jpush.api.push.model.notification.Notification.class, cn.jpush.api.push.model.notification.Notification.alert("alert"));
            eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoAudience()|7", cn.jpush.api.push.model.PushPayload.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoAudience()|6", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoAudience()|4", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoAudience()|2", cn.jpush.api.push.model.PushPayload.Builder.class, cn.jpush.api.push.model.PushPayload.newBuilder()).setPlatform(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Platform>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoAudience()|3", cn.jpush.api.push.model.Platform.class, platform))).setNotification(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.notification.Notification>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoAudience()|5", cn.jpush.api.push.model.notification.Notification.class, notifcation))).build());
        } catch (java.lang.IllegalArgumentException a1552641512291) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoAudience()|!", a1552641512291);
            throw a1552641512291;
        }
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testIllegal_NoPlatform() {
        try {
            cn.jpush.api.push.model.audience.Audience audience = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.audience.Audience>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoPlatform()|0", cn.jpush.api.push.model.audience.Audience.class, cn.jpush.api.push.model.audience.Audience.all());
            cn.jpush.api.push.model.notification.Notification notifcation = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.notification.Notification>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoPlatform()|1", cn.jpush.api.push.model.notification.Notification.class, cn.jpush.api.push.model.notification.Notification.alert("alert"));
            eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoPlatform()|7", cn.jpush.api.push.model.PushPayload.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoPlatform()|6", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoPlatform()|4", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoPlatform()|2", cn.jpush.api.push.model.PushPayload.Builder.class, cn.jpush.api.push.model.PushPayload.newBuilder()).setAudience(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.audience.Audience>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoPlatform()|3", cn.jpush.api.push.model.audience.Audience.class, audience))).setNotification(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.notification.Notification>observeState("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoPlatform()|5", cn.jpush.api.push.model.notification.Notification.class, notifcation))).build());
        } catch (java.lang.IllegalArgumentException a1552641512293) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("cn.jpush.api.push.model.PushPayloadTest|testIllegal_NoPlatform()|!", a1552641512293);
            throw a1552641512293;
        }
    }

    @org.junit.Test
    public void testNotification() {
        int sendno = eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testNotification()|0", cn.jiguang.common.ServiceHelper.generateSendno());
        cn.jpush.api.push.model.notification.Notification notifcation = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.notification.Notification>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|1", cn.jpush.api.push.model.notification.Notification.class, cn.jpush.api.push.model.notification.Notification.alert("alert"));
        cn.jpush.api.push.model.PushPayload payload = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|12", cn.jpush.api.push.model.PushPayload.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|11", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|9", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|6", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|4", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|2", cn.jpush.api.push.model.PushPayload.Builder.class, cn.jpush.api.push.model.PushPayload.newBuilder()).setPlatform(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Platform>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|3", cn.jpush.api.push.model.Platform.class, cn.jpush.api.push.model.Platform.all()))).setAudience(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.audience.Audience>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|5", cn.jpush.api.push.model.audience.Audience.class, cn.jpush.api.push.model.audience.Audience.all()))).setOptions(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Options>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|8", cn.jpush.api.push.model.Options.class, cn.jpush.api.push.model.Options.sendno(eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testNotification()|7", sendno))))).setNotification(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.notification.Notification>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|10", cn.jpush.api.push.model.notification.Notification.class, notifcation))).build());
        com.google.gson.JsonObject json = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|13", com.google.gson.JsonObject.class, new com.google.gson.JsonObject());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|14", com.google.gson.JsonObject.class, json).add("audience", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonPrimitive>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|15", com.google.gson.JsonPrimitive.class, new com.google.gson.JsonPrimitive("all")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|16", com.google.gson.JsonObject.class, json).add("platform", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonPrimitive>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|17", com.google.gson.JsonPrimitive.class, new com.google.gson.JsonPrimitive("all")));
        com.google.gson.JsonObject noti = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|18", com.google.gson.JsonObject.class, new com.google.gson.JsonObject());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|19", com.google.gson.JsonObject.class, noti).add("alert", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonPrimitive>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|20", com.google.gson.JsonPrimitive.class, new com.google.gson.JsonPrimitive("alert")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|21", com.google.gson.JsonObject.class, json).add("notification", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|22", com.google.gson.JsonObject.class, noti));
        com.google.gson.JsonObject options = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|23", com.google.gson.JsonObject.class, new com.google.gson.JsonObject());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|24", com.google.gson.JsonObject.class, options).add("sendno", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonPrimitive>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|26", com.google.gson.JsonPrimitive.class, new com.google.gson.JsonPrimitive(eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testNotification()|25", sendno))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|27", com.google.gson.JsonObject.class, options).add("apns_production", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonPrimitive>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|28", com.google.gson.JsonPrimitive.class, new com.google.gson.JsonPrimitive(false)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|29", com.google.gson.JsonObject.class, json).add("options", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|30", com.google.gson.JsonObject.class, options));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|31", com.google.gson.JsonObject.class, json), eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonElement>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|33", com.google.gson.JsonElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testNotification()|32", cn.jpush.api.push.model.PushPayload.class, payload).toJSON()));
    }

    @org.junit.Test
    public void testMessage() {
        int sendno = eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testMessage()|0", cn.jiguang.common.ServiceHelper.generateSendno());
        cn.jpush.api.push.model.PushPayload payload = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|11", cn.jpush.api.push.model.PushPayload.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|10", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|8", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|5", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|3", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|1", cn.jpush.api.push.model.PushPayload.Builder.class, cn.jpush.api.push.model.PushPayload.newBuilder()).setPlatform(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Platform>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|2", cn.jpush.api.push.model.Platform.class, cn.jpush.api.push.model.Platform.all()))).setAudience(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.audience.Audience>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|4", cn.jpush.api.push.model.audience.Audience.class, cn.jpush.api.push.model.audience.Audience.all()))).setOptions(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Options>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|7", cn.jpush.api.push.model.Options.class, cn.jpush.api.push.model.Options.sendno(eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testMessage()|6", sendno))))).setMessage(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Message>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|9", cn.jpush.api.push.model.Message.class, cn.jpush.api.push.model.Message.content("message")))).build());
        com.google.gson.JsonObject json = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|12", com.google.gson.JsonObject.class, new com.google.gson.JsonObject());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|13", com.google.gson.JsonObject.class, json).add("audience", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonPrimitive>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|14", com.google.gson.JsonPrimitive.class, new com.google.gson.JsonPrimitive("all")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|15", com.google.gson.JsonObject.class, json).add("platform", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonPrimitive>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|16", com.google.gson.JsonPrimitive.class, new com.google.gson.JsonPrimitive("all")));
        com.google.gson.JsonObject msg = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|17", com.google.gson.JsonObject.class, new com.google.gson.JsonObject());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|18", com.google.gson.JsonObject.class, msg).add("msg_content", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonPrimitive>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|19", com.google.gson.JsonPrimitive.class, new com.google.gson.JsonPrimitive("message")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|20", com.google.gson.JsonObject.class, json).add("message", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|21", com.google.gson.JsonObject.class, msg));
        com.google.gson.JsonObject options = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|22", com.google.gson.JsonObject.class, new com.google.gson.JsonObject());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|23", com.google.gson.JsonObject.class, options).add("sendno", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonPrimitive>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|25", com.google.gson.JsonPrimitive.class, new com.google.gson.JsonPrimitive(eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testMessage()|24", sendno))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|26", com.google.gson.JsonObject.class, options).add("apns_production", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonPrimitive>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|27", com.google.gson.JsonPrimitive.class, new com.google.gson.JsonPrimitive(false)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|28", com.google.gson.JsonObject.class, json).add("options", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|29", com.google.gson.JsonObject.class, options));
        org.junit.Assert.assertEquals("", eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonObject>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|30", com.google.gson.JsonObject.class, json), eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.gson.JsonElement>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|32", com.google.gson.JsonElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testMessage()|31", cn.jpush.api.push.model.PushPayload.class, payload).toJSON()));
    }

    @org.junit.Test
    public void testGlobalExceed() {
        cn.jpush.api.push.model.PushPayload payload = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|7", cn.jpush.api.push.model.PushPayload.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|6", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|4", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|2", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|0", cn.jpush.api.push.model.PushPayload.Builder.class, cn.jpush.api.push.model.PushPayload.newBuilder()).setPlatform(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Platform>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|1", cn.jpush.api.push.model.Platform.class, cn.jpush.api.push.model.Platform.all()))).setAudience(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.audience.Audience>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|3", cn.jpush.api.push.model.audience.Audience.class, cn.jpush.api.push.model.audience.Audience.all()))).setMessage(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Message>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|5", cn.jpush.api.push.model.Message.class, cn.jpush.api.push.model.Message.content(cn.jpush.api.push.model.PushPayloadTest.LONG_TEXT_2)))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintStream>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|8", java.io.PrintStream.class, java.lang.System.out).println(("Size: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|9", byte[].class, cn.jpush.api.push.model.PushPayloadTest.LONG_TEXT_2.getBytes()).length))));
        org.junit.Assert.assertFalse(("Shouldn't exceed - " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|11", byte[].class, cn.jpush.api.push.model.PushPayloadTest.LONG_TEXT_2.getBytes()).length))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExceed()|13", cn.jpush.api.push.model.PushPayload.class, payload).isGlobalExceedLength()));
    }

    @org.junit.Test
    public void testGlobalExeed2() {
        cn.jpush.api.push.model.PushPayload payload = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|7", cn.jpush.api.push.model.PushPayload.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|6", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|4", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|2", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|0", cn.jpush.api.push.model.PushPayload.Builder.class, cn.jpush.api.push.model.PushPayload.newBuilder()).setPlatform(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Platform>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|1", cn.jpush.api.push.model.Platform.class, cn.jpush.api.push.model.Platform.all()))).setAudience(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.audience.Audience>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|3", cn.jpush.api.push.model.audience.Audience.class, cn.jpush.api.push.model.audience.Audience.all()))).setMessage(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Message>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|5", cn.jpush.api.push.model.Message.class, cn.jpush.api.push.model.Message.content(cn.jpush.api.push.model.PushPayloadTest.LONG_TEXT_3)))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintStream>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|8", java.io.PrintStream.class, java.lang.System.out).println(("Size: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|9", byte[].class, cn.jpush.api.push.model.PushPayloadTest.LONG_TEXT_3.getBytes()).length))));
        org.junit.Assert.assertTrue(("Should exeed - " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|11", byte[].class, cn.jpush.api.push.model.PushPayloadTest.LONG_TEXT_3.getBytes()).length))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testGlobalExeed2()|13", cn.jpush.api.push.model.PushPayload.class, payload).isGlobalExceedLength()));
    }

    @org.junit.Test
    public void testIosExceed() {
        cn.jpush.api.push.model.PushPayload payload = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|7", cn.jpush.api.push.model.PushPayload.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|6", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|4", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|2", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|0", cn.jpush.api.push.model.PushPayload.Builder.class, cn.jpush.api.push.model.PushPayload.newBuilder()).setPlatform(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Platform>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|1", cn.jpush.api.push.model.Platform.class, cn.jpush.api.push.model.Platform.all()))).setAudience(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.audience.Audience>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|3", cn.jpush.api.push.model.audience.Audience.class, cn.jpush.api.push.model.audience.Audience.all()))).setNotification(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.notification.Notification>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|5", cn.jpush.api.push.model.notification.Notification.class, cn.jpush.api.push.model.notification.Notification.alert(cn.jpush.api.push.model.PushPayloadTest.LONG_TEXT_1)))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintStream>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|8", java.io.PrintStream.class, java.lang.System.out).println(("Size: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|9", byte[].class, cn.jpush.api.push.model.PushPayloadTest.LONG_TEXT_1.getBytes()).length))));
        org.junit.Assert.assertFalse(("Shouldn't exceed - " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|11", byte[].class, cn.jpush.api.push.model.PushPayloadTest.LONG_TEXT_1.getBytes()).length))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed()|13", cn.jpush.api.push.model.PushPayload.class, payload).isIosExceedLength()));
    }

    @org.junit.Test
    public void testIosExceed2() {
        cn.jpush.api.push.model.PushPayload payload = eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|10", cn.jpush.api.push.model.PushPayload.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|9", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|4", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|2", cn.jpush.api.push.model.PushPayload.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|0", cn.jpush.api.push.model.PushPayload.Builder.class, cn.jpush.api.push.model.PushPayload.newBuilder()).setPlatform(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.Platform>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|1", cn.jpush.api.push.model.Platform.class, cn.jpush.api.push.model.Platform.all()))).setAudience(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.audience.Audience>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|3", cn.jpush.api.push.model.audience.Audience.class, cn.jpush.api.push.model.audience.Audience.all()))).setNotification(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.notification.Notification>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|8", cn.jpush.api.push.model.notification.Notification.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.notification.Notification.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|7", cn.jpush.api.push.model.notification.Notification.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.notification.Notification.Builder>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|5", cn.jpush.api.push.model.notification.Notification.Builder.class, cn.jpush.api.push.model.notification.Notification.newBuilder()).addPlatformNotification(eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.notification.IosNotification>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|6", cn.jpush.api.push.model.notification.IosNotification.class, cn.jpush.api.push.model.notification.IosNotification.alert(cn.jpush.api.push.model.PushPayloadTest.LONG_TEXT_3)))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.PrintStream>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|11", java.io.PrintStream.class, java.lang.System.out).println(("Size: " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|12", byte[].class, cn.jpush.api.push.model.PushPayloadTest.LONG_TEXT_3.getBytes()).length))));
        org.junit.Assert.assertTrue(("Should exceed - " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|14", byte[].class, cn.jpush.api.push.model.PushPayloadTest.LONG_TEXT_3.getBytes()).length))), eu.stamp_project.reneri.instrumentation.StateObserver.observe("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<cn.jpush.api.push.model.PushPayload>observeState("cn.jpush.api.push.model.PushPayloadTest|testIosExceed2()|16", cn.jpush.api.push.model.PushPayload.class, payload).isIosExceedLength()));
    }

    private static final java.lang.String LONG_TEXT_1 = "" + ("极光推送，使得开发者可以即时地向其应用程序的用户推送通知或者消息，" + "与用户保持互动，从而有效地提高留存率，提升用户体验。平台提供整合了Android推送、iOS推送的统一推送服务。");

    private static final java.lang.String LONG_TEXT_2 = "" + (((((((((((("通过极光推送服务，主动、及时地向您的用户发起交互，向其推送聊天消息、日程提醒、活动预告、进度提示、动态更新等。" + "精准的目标用户和有价值的推送内容可以提升用户忠诚度，提高留存率与收入。") + "客户端 SDK 采用自定义的协议保持长连接，电量、流量消耗都很少。 ") + "服务端先进技术架构，高并发可扩展性的云服务，经受过几亿用户的考验，") + "完全省去应用开发者自己维护长连接的设备和人力的成本投入。") + "简单的SDK集成方式，使开发商可以快速部署，更专注主营业务。灵活的推送入接入，") + "同时支持网站上直接推送，也提供 消息推送和送达统计的 API调用。 ") + "清晰的统计图表，直观的跟踪推送带来的效果。") + "下载并集成 SDK 接入极光推送服务。极光推送提供了 Android，iOS，Windows Phone以及 PhoneGap 的客户端 SDK。") + "同时也开放多种语言实现的服务端 SDK，方便开发者调用 API 进行推送。") + "本 Wiki 是极光推送 (JPush) 产品的开发者文档网站。") + "极光推送所有技术文档都在本 Wiki 里，没有别的提供渠道。同时，我们也在不断地补充、完善文档。") + "这些文档包括这样几种类型：常见问题、入门指南、API定义、教程等。");

    private static final java.lang.String LONG_TEXT_3 = "" + ((((((((((((((((((((((((((((((((((((((((((((((((("这是 Push API 最近的版本。" + "相比于 API v2 版本，v3 版本的改进为：") + "完全基于 https，不再提供 http 访问；") + "使用 HTTP Basic Authentication 的方式做访问授权。这样整个 API 请求可以使用常见的 HTTP 工具来完成，比如：curl，浏览器插件等；") + "推送内容完全使用 JSON 的格式；") + "支持的功能有所改进：支持多 tag 的与或操作；可单独发送通知或者自定义消息，也可同时推送通知与自定义消息；windows phone 目前只有通知。") + "向某单个设备或者某设备列表推送一条通知、或者消息。") + "推送的内容只能是 JSON 表示的一个推送对象。") + "调用地址：POST https://api.jpush.cn/v3/push") + "别名与标签使用教程 为什么需要别名与标签") + "推送消息时，要指定推送的对象：全部，某一个人，或者某一群人。") + "全部很好办，针对某应用“群发”就好了。Portal与API都支持向指定的 appKey 群发消息。") + "要指定向某一个特定的人，或者某一群特定的人，则相对复杂。") + "因为对于 JPush 来说，某一个人就是一个注册ID，这个注册ID与开发者App没有任何关系，或者说对开发者App是没有意义的。") + "如果要对开发者App有意义的某个特定的用户推送消息，则需要：把 JPush 注册用户与开发者App 用户绑定起来。") + "这个绑定有两个基本思路：") + "把绑定关系保存到 JPush 服务器端") + "把绑定关系保存到开发者应用服务器中") + "前者，就是这里要说到的：别名与标签的功能。这个机制简单易用，适用于大多数开发者。") + "后者，则是 JPush 提供的另外一套 RegistrationID 机制。这套机制开发者需要有应用服务器来维护绑定关系，不适用于普通开发者。") + "Android SDK r1.6.0 版本开始支持。") + "别名与标签的机制，其工作方式是：") + "客户端开发者App调用 setAliasAndTags API 来设置关系") + "JPush SDK 把该关系设置保存到 JPush Server 上") + "在服务器端推送消息时，指定向之前设置过的别名或者标签推送") + "SDK 支持的 setAliasAndTags 请参考相应的文档：别名与标签 API") + "使用过程中有几个点做特别说明：") + "App 调用 SDK setAliasAndTags API 时，r1.5.0 版本提供了 Callback 来返回设置状态。如果返回 6002 （超时）则建议重试") + "老版本没有提供 Callback 无设置状态返回，从而没有机制确定一定成功。建议升级到新版本") + "Portal 上推送或者 API 调用向别名或者标签推送时，可能会报错：不存在推送目标用户。") + "该报错表明，JPush Server 上还没有针对你所推送的别名或者标签的用户绑定关系，所以没有推送目标。") + "这时请开发者检查确认，开发者App是否正确地调用了 setAliasAndTags API，以及调用时是否网络不好，JPush SDK 暂时未能保存成功。") + "使用别名 用于给某特定用户推送消息。别名，可以近似地被认为，是用户帐号里的昵称。") + "使用标签 用于给某一群人推送消息。") + "标签类似于博客里为文章打上 tag ，即为某资源分类。") + "动态标签 JPush 提供的设置标签的 API 是在客户端的。") + "开发者如何做到在自己的服务器端动态去设置分组呢？ 比如一个企业OA系统，经常需要去变更部门人员分组。以下是大概的思路：") + "设计一种自定义消息格式（业务协议），App解析后可以调用 JPush SDK setAliasAndTags API 来重新设置标签（分组）") + "\u4f8b\uff1a{\"action\":\"resetTags\", \"newTags\":[\"dep_level_1\":\"A\u516c\u53f8\", \"dep_level_2\":\"\u6280\u672f\u90e8\", \"dep_level_3\"") + ":\"Android\u5f00\u53d1\u7ec4\", \"address\":\"\u6df1\u5733\", \"lang\":\"zh\"]}") + "要动态设置分组时，推送这条自定义消息给指定的用户") + "使用别名的机制，推送到指定的用户。") + "客户端App 调用 JPush SDK API 来设置新的标签") + "通过极光推送服务，主动、及时地向您的用户发起交互，向其推送聊天消息、日程提醒、活动预告、进度提示、动态更新等。") + "精准的目标用户和有价值的推送内容可以提升用户忠诚度，提高留存率与收入。") + "客户端 SDK 采用自定义的协议保持长连接，电量、流量消耗都很少。 ") + "服务端先进技术架构，高并发可扩展性的云服务，经受过几亿用户的考验，") + "完全省去应用开发者自己维护长连接的设备和人力的成本投入。") + "简单的SDK集成方式，使开发商可以快速部署，更专注主营业务。灵活的推送入接入，") + "同时支持网站上直接推送，也提供 消息推送和送达统计的 API调用。 ");
}

